<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023 年 Pycharm 最新激活码_破解教程，亲测有用，永久有效</title>
    <url>/p/10778.html</url>
    <content><![CDATA[<blockquote>
<p>本文分享一下 PyCharm 2022.2.3 版本最新激活破解教程，都是 Jetbrains 产品，本文专门配上了 Pycharm 的图片，跟着下面教程一步一步来即可。<br><strong>申明：本教程 Pycharm 破解补丁、激活码均收集于网络，请勿商用，仅供个人学习使用，如有侵权，请联系作者删除。若条件允许，希望大家购买正版 ！</strong><br><strong>PS: 本教程最新更新时间: 2023年2月7日~</strong></p>
</blockquote>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261703-0123.png" alt="在这里插入图片描述"></p>
<p>笔者试了网上几乎所有的 Pycharm 破解方案，发现两种靠谱的破解方法（这两种都是亲测成功的），都配上了详细的图文教程，在这里分享给大家，小伙伴们二选一即可：</p>
<ul>
<li><strong>第一种【推荐】：激活脚本 + 激活码（全自动模式）</strong>;</li>
<li><strong>第二种： 👉破解补丁 + 激活码（需手动引用破解补丁），即本文教程所写，这种方法适合最新的几个版本，具体步骤跟着本文教程一步一步来就行。</strong> 无图无真相，下面是我激活成功后的截图：</li>
</ul>
<blockquote>
<p><strong>PS: 此方法和上面第一种方案的补丁原理都是暴力拦截了 Pycharm 的剩余使用期网络请求，实际上等于永久激活，至于激活到哪天，在之前的 <code>2021.3.3</code> <code>2021.3.2</code> 等老版本中是可以手动配置的，比如改成激活到 2099 年。可能是太高调了，此法只能显示到 2023, 其实效果还是一样的, 都是永久激活，可放心食用。</strong></p>
</blockquote>
<ul>
<li><strong>第三种</strong>：👉 <strong>无限重置 Pycharm 30 天试用期（适合比较老的版本）</strong></li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li><strong>本教程适用于 Pycharm 2022.2.3 以下所有版本，请放心食用~</strong></li>
<li><strong>本教程适用于 JetBrains 全系列产品，包括 Pycharm、IDEA、WebStorm、Phpstorm、Datagrip、RubyMine、CLion、AppCode 等。</strong></li>
<li><strong>本教程适用 Windows&#x2F;Mac&#x2F;Linux 系统，文中以 Windows 系统为例做讲解，其他系统按照教程顺序即可。</strong></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Pycharm 目前已经更新到最新的 2022.2.3 版本了，群里的小伙伴私聊问我，为啥之前 2021.3.1 的激活套路对新版本 2022.2.3 不管用了，是个什么情况？</p>
<p>很显然，Pycharm 官方发现了这种破解路数，新版本加入了更严厉的反制破解。所以说，小伙伴们破解成功了以后，尽量不要升级 Pycharm, 不然大概率又不行了。</p>
<p>好在z大又更新了新的补丁，针对最新版本，这边笔者亲测可行，仅以下文记录本人 Pycharm 2022.2.3 版本的激活破解的全过程，步骤非常详细，跟着图文来就行~</p>
<blockquote>
<p>PS: Pycharm 前面的安装步骤还是一样，主要是后面的激活步骤~</p>
</blockquote>
<h2 id="第一步-下载最新的-Pycharm-2022-2-3-版本安装包"><a href="#第一步-下载最新的-Pycharm-2022-2-3-版本安装包" class="headerlink" title="第一步: 下载最新的 Pycharm 2022.2.3 版本安装包"></a>第一步: 下载最新的 Pycharm 2022.2.3 版本安装包</h2><p>我们先从 Pycharm 官网下载 Pycharm 2022.2.3 版本的安装包，下载链接如下：</p>
<p><a href="https://www.jetbrains.com/pycharm/download/other.html">Pycharm  官网下载地址</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-990b.png" alt="在这里插入图片描述"></p>
<p>选择 Pucharm 专业版本，点击下载，然后等待其下载完成即可。</p>
<h2 id="第三步-开始安装-Pycharm-2022-2-3-版本"><a href="#第三步-开始安装-Pycharm-2022-2-3-版本" class="headerlink" title="第三步: 开始安装 Pycharm 2022.2.3 版本"></a>第三步: 开始安装 Pycharm 2022.2.3 版本</h2><p>2.安装目录默认为 <code>C:\Program Files\JetBrains\PyCharm 2022.2.3</code>, 这里建议安装到其他盘，不要转到 C 盘里面，点击 Browser 即可选择:</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-e065.jpeg" alt="Pycharm 2022.2.3安装第一步"></p>
<p>3.勾选创建桌面快捷方式，这边方便后续打开 Pycharm：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/661664959ec4cd6877a0beb59a1e6432.png" alt="Pycharm 2022.2.3安装第二步"></p>
<p>4.点击 <code>Install</code> ：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-9c68.jpeg" alt="Pycharm 2022.2.3安装第三步"></p>
<p>5.安装完成后，勾选 <code>Run Pycharm</code>，点击 <code>Finish</code> 运行软件:</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-1be5.jpeg" alt="Pycharm 2022.2.3安装第四步"></p>
<p>Pycharm 运行成功后，会弹出下面的对话框，提示我们需要先登录 JetBrains 账户才能使用：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-c4f1.jpeg" alt="Pycharm 2022.2.3 弹出对话框，提示需要登录账户"></p>
<p>这里我们先不管，<strong>先点击 <code>Exit</code> 退出，准备开始引入激活补丁</strong>。</p>
<h2 id="第四步：清空-Pycharm-以前使用过的激活方式【非常重要】"><a href="#第四步：清空-Pycharm-以前使用过的激活方式【非常重要】" class="headerlink" title="第四步：清空 Pycharm 以前使用过的激活方式【非常重要】"></a>第四步：清空 Pycharm 以前使用过的激活方式【非常重要】</h2><p>开始激活前，如果你之前破解过老版本的 Pycharm，可能做过以下几种操作，则需要恢复原样，如果没有，直接跳过看下面步骤即可。</p>
<h3 id="1、动过-hosts-文件，添加的配置需要删除"><a href="#1、动过-hosts-文件，添加的配置需要删除" class="headerlink" title="1、动过 hosts 文件，添加的配置需要删除"></a>1、动过 hosts 文件，添加的配置需要删除</h3><p><strong>手动为 Pycharm 修改过 hosts 文件，那么添加的配置，记得要删除；</strong></p>
<h3 id="2、引用过其他的破解补丁，或者执行过安装脚本"><a href="#2、引用过其他的破解补丁，或者执行过安装脚本" class="headerlink" title="2、引用过其他的破解补丁，或者执行过安装脚本"></a>2、引用过其他的破解补丁，或者执行过安装脚本</h3><p><strong>1. 引用过的补丁也要移除掉等, 不然可能会与本文提供的补丁有冲突，出现各种奇奇怪怪的问题。</strong></p>
<p><strong>2. 之前版本中, 我提供过通过安装脚本来引用补丁，如果你有使用过，脚本会添加相关环境变量，这些环境变量也需要清空，查看脚本文件夹，执行 <code>uninstall-\*</code> 脚本即可。</strong></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-4d52.png" alt="在这里插入图片描述"></p>
<h2 id="第五步：开始激活"><a href="#第五步：开始激活" class="headerlink" title="第五步：开始激活"></a>第五步：开始激活</h2><h3 id="下载激活脚本"><a href="#下载激活脚本" class="headerlink" title="下载激活脚本"></a>下载激活脚本</h3><p>先通过网盘下载好激活补丁，解压后，打开文件夹如下：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-66f8.png" alt="在这里插入图片描述"></p>
<blockquote>
<p><strong>注意：激活脚本文末获取！</strong></p>
</blockquote>
<p>打开文件夹后，目录如下，<code>ja-netfilter.jar</code> 为激活补丁：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-8c12.png" alt="在这里插入图片描述"></p>
<blockquote>
<p><strong>注意：激活脚本文末获取！</strong></p>
</blockquote>
<h3 id="复制补丁所在的整个文件夹到硬盘某个位置"><a href="#复制补丁所在的整个文件夹到硬盘某个位置" class="headerlink" title="复制补丁所在的整个文件夹到硬盘某个位置"></a>复制补丁所在的整个文件夹到硬盘某个位置</h3><p>将 <code>ja-netfilter</code>补丁所在的整个文件夹移动到电脑上某个位置，笔者这里放到了 <code>D</code> 盘下：</p>
<blockquote>
<p><strong>注意：是整个文件夹，不要只复制补丁，另外，确定了放置目录后，后面就不要动了，吃灰就行。</strong></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/08d0c98f7c374d81aed91c84c8a82c2b.png" alt="在这里插入图片描述"></p>
<h3 id="引用激活补丁"><a href="#引用激活补丁" class="headerlink" title="引用激活补丁"></a>引用激活补丁</h3><p>进入 Pycharm 的安装目录，笔者安装时，使用了默认安装路径，然后，进入 <code>/bin</code> 目录下，修改 <code>pycharm64.exe.vmoptions</code> 配置文件：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d7ecd6bb26fc2f6970db27e729b1f8cc.jpeg" alt="进入 Pycharm 2022.2.3 安装目录"></p>
<p>在 <code>pycharm64.exe.vmoptions</code> 配置文件结尾添加如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 引用补丁，开头必须以 -javaagent: 开头，后面跟着补丁的绝对路径（可根据你实际的位置进行修改）,注意路径一定要填写正确，且不能包含中文，否则会导致 Pycharm 无法启动</span><br><span class="line">-javaagent:D:/ja-netfilter/ja-netfilter.jar</span><br><span class="line"></span><br><span class="line"># 最新 Pycharm 版本需要添加下面两行，否则会报 key valid</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/506beb36c87313b37dfceae57977378b.jpeg" alt="Pycharm 配置文件中引用破解补丁"></p>
<h3 id="重启-PyCharm"><a href="#重启-PyCharm" class="headerlink" title="重启 PyCharm"></a>重启 PyCharm</h3><p><strong>配置完成后保存，一定要重启 Pycharm !!!</strong></p>
<p><strong>配置完成后保存，一定要重启 Pycharm !!!</strong></p>
<h2 id="第六步：打开-Pycharm-填入指定激活码完成激活"><a href="#第六步：打开-Pycharm-填入指定激活码完成激活" class="headerlink" title="第六步：打开 Pycharm, 填入指定激活码完成激活"></a>第六步：打开 Pycharm, 填入指定激活码完成激活</h2><p>重启 Pycharm 后，填入下面的激活码，点击激活即可。</p>
<p>VAE9B0CRYZ-eyJsaWNlbnNlSWQiOiJWQUU5QjBDUllaIiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDcwMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6MTMxNzYyODYxMCIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ&#x3D;&#x3D;-YxAJSVk5XIZkkI6vH33zgb&#x2F;hRmCdqia89zpsVHp2x52PY0XgOOiAlcR3&#x2F;BVhm0qRYLBYBBHMpPcz0+ZWr2diKy0QexfbtVIVsCRkVaRgl67Tbw9MKb5jVNqpqth2yEoW&#x2F;gmm2bZC5RS0qiGcPQpjD7AdRo66P78Vb2TrJ5hz055polMwR0hMxm9ECDedLnqKQXyzmcjkucStFNYYHbF0Gnn0I&#x2F;xrxnVoIDeHMdlsRiBXYPb6TGIVgOIh8ynuGwvP&#x2F;svLVPCI1dYPYF1V3ndDbOOQskOJaC+7K1&#x2F;80xVEb3TT7Orb7PJJDX1AiIjg0gsSctPulz3r1xLHIZNcZJcV0A&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<p>复制激活码后填入，点击 <code>Activate</code> 按钮完成激活：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/272aff1d9b0f7f60805ab83a7b17f241.png" alt="填入 Pycharm 2022.2.3 激活码"></p>
<blockquote>
<p>PS: 有部分小伙伴反应，重启 Pycharm 填入激活码依然无法激活，重启系统才行，如果有小伙伴遇到这种情况，不妨试试看~</p>
</blockquote>
<p>点击激活后，就可以看到激活成功辣，又可以开心的 coding 了~：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-7165.png"></p>
<h2 id="一切按照教程来的，激活还是出错，提示-Key-is-invalid？"><a href="#一切按照教程来的，激活还是出错，提示-Key-is-invalid？" class="headerlink" title="一切按照教程来的，激活还是出错，提示 Key is invalid？"></a>一切按照教程来的，激活还是出错，提示 <code>Key is invalid</code>？</h2><ul>
<li>1、部分小伙伴不仔细看教程，激活过程中只复制了 <code>ja-netfilter.jar</code> 一个文件，结果输入激活码时报 <code>Key is invalid</code>, 注意是所在的整个文件夹都需要复制，然后再引用补丁，而不是仅仅复制一个 <code>ja-netfilter.jar</code> 文件；</li>
<li>2、配置文件中，引用补丁必须以 <code>-javaagent:</code> 开头，后面跟着补丁的绝对路径，开头不能丢，否则无法引用破解补丁成功；</li>
<li>3、检查引用的补丁路径中是否包含中文，需要全英文才行；</li>
<li>4、可能是 Pycharm 没卸载干净导致，笔者在 Mac 电脑 Intel 芯片上安装 IDEA 就出现了各种问题，彻底卸载 Pycharm 后，再重新按教程来就激活成功了，彻底卸载 Pycharm 教程链接: **<a href="https://www.quanxiaoha.com/idea/uninstall-idea.html">如何卸载干净 Pycharm（图文讲解）</a>**；</li>
<li>5、部分小伙伴反馈说重启系统后，才激活成功的，这种法子也可以尝试一下；</li>
<li>6、检查破解补丁的位置是否动了，切记不要动，不然重启 IDE 又找不到补丁位置了，自然就失败了；</li>
<li>7、还有这种情况：有的小伙伴之前通过本站激活成功的，想破解最新版本的 IDE, 因为不知道补丁已经换了，虽然补丁名字一样，于是没换补丁，只重新输入了激活码，结果显示 <code>Key is invalid</code>, 请使用网站提供的最新补丁。</li>
<li>8、笔者亲测的版本 <code>2022.2.3</code>、<code>2022.1</code>、<code>2021.3.3</code>、<code>2021.3.2</code> 都是可以的，确认你的版本号是否是最新的这些版本，太老的版本请用第二种方法：<strong>无限重置 IDEA 30 天试用期</strong>；</li>
</ul>
<h2 id="2022-2-3-版本为啥不能像-2021-3-3-版本那样显示到-2099-了？"><a href="#2022-2-3-版本为啥不能像-2021-3-3-版本那样显示到-2099-了？" class="headerlink" title="2022.2.3 版本为啥不能像 2021.3.3 版本那样显示到 2099 了？"></a>2022.2.3 版本为啥不能像 2021.3.3 版本那样显示到 2099 了？</h2><p>最新的 2022.2.3 版本应该是做了反制，只能显示到 2023 年，但补丁的本质是暴力拦截了剩余使用期限网络请求，应该还是永久激活。</p>
<h2 id="激活成功后，不要升级-Pycharm-版本"><a href="#激活成功后，不要升级-Pycharm-版本" class="headerlink" title="激活成功后，不要升级 Pycharm 版本"></a>激活成功后，不要升级 Pycharm 版本</h2><p>官方反制手段越来越严厉，这个版本能激活，新版本大概率补丁就被搬了。所以，如果打开 Pycharm 后，右下角若出现提示升级新版本，请不要升级版本。能用就行，它不香嘛！</p>
<blockquote>
<p>也可以手动关闭升级提示，这样就可以防止控制不住自己升级了，如何关闭，参考下面的文章：</p>
<p><a href="https://www.exception.site/article/30">👉《Pycharm 如何关闭更新提示？》</a></p>
</blockquote>
<h2 id="激活成功后，补丁文件夹能不能删掉或者移动？"><a href="#激活成功后，补丁文件夹能不能删掉或者移动？" class="headerlink" title="激活成功后，补丁文件夹能不能删掉或者移动？"></a>激活成功后，补丁文件夹能不能删掉或者移动？</h2><p>前文中的环境变量，小伙伴也看到了，对应了你放置补丁位置的路径，删除掉或者移动，再打开 Pycharm 就找不到对应文件了，激活也就失效了。放着吃灰就行，别动它。</p>
<h2 id="激活补丁下载地址"><a href="#激活补丁下载地址" class="headerlink" title="激活补丁下载地址"></a>激活补丁下载地址</h2><blockquote>
<p>PS: 破解补丁页面提取人数过多，导致分享的百度网盘链接容易被封：<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-caf5.jpeg" alt="Pycharm 2022.2.3破解补丁分享失败">蛋疼ing，为限制人数，目前暂不提供页面直接提取，**<a href="https://note.youdao.com/s/X6AovF9T">点击获取</a>**</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>Pycharm</strong>，会自动将激活码发送给你<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0202020220230219163502-20230219204318099.png"></p>
<p><a href="https://note.youdao.com/s/X6AovF9T**">点击获取</a>:note.youdao.com&#x2F;s&#x2F;X6AovF9T</p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 IDEA 2022.3.2 最新激活教程、亲测有效</title>
    <url>/p/29666.html</url>
    <content><![CDATA[<h1 id="2023-年-IDEA-2022-3-2-版本激活教程"><a href="#2023-年-IDEA-2022-3-2-版本激活教程" class="headerlink" title="2023 年 IDEA 2022.3.2 版本激活教程"></a>2023 年 IDEA 2022.3.2 版本激活教程</h1><blockquote>
<p>申明：本教程 IntelliJ IDEA 破解补丁、激活码均收集于网络，请勿商用，仅供个人学习使用，如有侵权，请联系作者删除。若条件允许，希望大家购买正版 ！</p>
</blockquote>
<blockquote>
<p>PS: 本教程<strong>最新更新时间: 2023年2月27日, 网站持续更新，收藏本站防失联哟</strong>~</p>
</blockquote>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/167487661631242" alt="IDEA 2022.3.2 破解激活教程"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>时间过得飞快，充电器一拔，又得回去做打工人了。打开电脑，发现 IDEA 又更新了一个小版本，2022.3.2 版本来了，于是笔者将 IDEA 做了一波升级。至于破解方法，还是用本站之前的破解方式，亲测依然有效，可以破解到 2025 年（实际是永久激活，可放心食用），无图无真相，下面是我破解成功的截图：</p>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/167525342165440" alt="IDEA 2022.3.2 成功破解激活截图"></p>
<p>废话不多说，和之前版本一样，笔者汇总了目前网上比较靠谱的三种破解方案（<strong>这三种都是笔者亲测成功的</strong>），小伙伴们任选其一即可：</p>
<ul>
<li><em>第一种【推荐】：👉激活脚本 + 激活码（全自动模式）</em>，<strong>即本文教程所写，这种方法适合最新的几个版本，具体步骤跟着本文教程一步一步来，运行一下激活脚本，一分钟即可搞定，超级简单</strong>。无图无真相，下面是我激活成功后的截图：</li>
</ul>
<blockquote>
<p>PS: 此方法和下面的第二种方法的补丁原理都是暴力拦截了 IDEA 的剩余使用期网络请求，实际上等于永久激活，至于激活到哪天，在之前的 <code>2021.3.3</code> <code>2021.3.2</code> 等老版本中是可以手动配置的，比如改成激活到 2099 年。可能是太高调了，最新的版本只能显示到 2025 年, 其实效果还是一样的, 都是永久激活，可放心食用。</p>
</blockquote>
<ul>
<li><em>第二种：👉破解补丁 + 激活码（需手动引用补丁）</em> ，相比较于第一种无脑执行一个激活脚本，这种方式需要手动引用破解补丁，再输入激活码。<strong>此方法同样仅适用于最新的几个版本。</strong></li>
<li><em>第三种：👉 无限重置 IDEA 30 天试用期（适用于比较老的版本）</em> ；</li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>本教程适用于 JetBrains 全系列产品，包括 IDEA、Pycharm、WebStorm、Phpstorm、Datagrip、RubyMine、CLion、AppCode 等。</li>
<li>本教程适用 Windows&#x2F;Mac&#x2F;Linux 系统，文中以 Windows 系统为例做讲解，其他系统同样参考着本教程来就行。</li>
</ul>
<h2 id="第一步：下载-IDEA-安装包"><a href="#第一步：下载-IDEA-安装包" class="headerlink" title="第一步：下载 IDEA 安装包"></a>第一步：下载 IDEA 安装包</h2><p>访问 IDEA 官网，下载 IDEA 2022.3.2 版本的安装包，下载链接如下 :</p>
<p><a href="https://www.jetbrains.com/idea/download/">https://www.jetbrains.com/idea/download/</a></p>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/167487635904851" alt="下载 IDEA 2022.3.2 安装包"></p>
<p>打开页面后，点击 <code>Download</code> 按钮, 等待 IDEA 专业版下载完毕。</p>
<h2 id="第二步：卸载老版本-IDEA-未安装则不用管，跳过看下面步骤"><a href="#第二步：卸载老版本-IDEA-未安装则不用管，跳过看下面步骤" class="headerlink" title="第二步：卸载老版本 IDEA(未安装则不用管，跳过看下面步骤)"></a>第二步：卸载老版本 IDEA(未安装则不用管，跳过看下面步骤)</h2><p>注意，安装新版本 IDEA 之前，如果本机安装过老版本的 IDEA, <strong>需要先彻底卸载，以免两者冲突，导致破解失败。</strong></p>
<p><img src="https://img.chajianxw.com/chajian/164604171691955" alt="破解之前，先卸载老版本 IDEA"></p>
<p>卸载完成后，点击 <code>Close</code> 按钮关闭弹框：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-bc06.png" alt="卸载 IDEA 完成"></p>
<h2 id="第三步：安装-IDEA-2022-3-2-版本"><a href="#第三步：安装-IDEA-2022-3-2-版本" class="headerlink" title="第三步：安装 IDEA 2022.3.2 版本"></a>第三步：安装 IDEA 2022.3.2 版本</h2><p>卸载老版本 IDEA 完成后，双击刚刚下载好的 IDEA <code>2022.3.2</code> 版本安装包。弹框会提示选择安装路径，我这里直接选择的默认安装路径</p>
<p><code>C:\Program Files\JetBrains\IntelliJ IDEA 2022.3.2</code> , 然后点击 <code>Next</code> 按钮：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-ab98.jpeg" alt="安装 IDEA 2022.3.2 版本"></p>
<p>然后，勾选 <code>Create Desktop Shortcut</code> 创建 IDEA 桌面快捷启动方式，以方便后面快速打开 IDEA，再点击 <code>Next</code> 按钮 :</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303280003-7da7.png" alt="开始安装 IDEA 2022.3.2 版本：创建快捷启动图标"></p>
<p>点击 <code>Install</code> 按钮，开始安装：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-1d9d.png" alt="开始安装 IDEA 2022.3.2 版本：点击 Install 按钮">开始安装 </p>
<p>等待安装完成后，勾选 <code>Run IntellJ IDEA</code>, 点击 <code>Finish</code> 按钮即运行 IDEA :</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303280003-7f3b.png" alt="安装 IDEA 2022.3.2 版本成功"></p>
<p>IDEA 运行成功后，会弹出如下对号框，强制用户需要先登录 JetBrains 账户才能使用：</p>
<p><img src="https://img.chajianxw.com/chajian/164403992752191" alt="IDEA 2022.3.2 版本提示需要先登录 JetBrains 账户"></p>
<p><strong>不用管登录的事，点击 Exit 按钮退出对话框</strong>，准备开始破解激活。</p>
<h2 id="第四步：破解补丁下载"><a href="#第四步：破解补丁下载" class="headerlink" title="第四步：破解补丁下载"></a>第四步：破解补丁下载</h2><blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303280003-d3eb.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">IDEA 2022.3.2破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>idea</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-7627.png"></p>
<p>补丁下载成功后，记得<strong>先解压</strong>, 解压后的目录如下, <strong>本文后面所需补丁都在下面标注的这个文件夹中</strong>：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-d598.jpeg" alt="IDEA 破解补丁下载"></p>
<p>点击【方式3】文件夹 , 进入到文件夹 <code>/jetbra</code>，目录如下：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-8028.jpeg" alt="IDEA 破解补丁文件夹最底层目录"></p>
<h2 id="第五步：开始破解"><a href="#第五步：开始破解" class="headerlink" title="第五步：开始破解"></a>第五步：开始破解</h2><h3 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统"></a>Windows 系统</h3><p>将上面图示的补丁的所属文件夹 <code>/jetbra</code> 复制电脑某个位置，笔者这里放置到了 <code>D:/</code> 盘根目录下:</p>
<blockquote>
<p>注意： <strong>补丁所属文件夹需单独存放</strong>，且<strong>放置的路径不要有中文与空格</strong>，以免 IDEA 读取补丁错误。</p>
</blockquote>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-303b.jpeg" alt="将 IDEA 破解补丁放置到 D 盘下">将 IDEA 破解补丁放置到 D 盘下</p>
<p>点击进入 <code>/jetbra</code> 补丁目录，再点击进入 <code>/scripts</code> 文件夹，双击执行 <code>install-current-user.vbs</code> 破解脚本：</p>
<p>![IDEA 破解补丁执行脚本](IDEA 破解补丁执行脚本</p>
<blockquote>
<p>注意：<strong>如果执行脚本被安全软件提示有风险拦截，允许执行即可。</strong></p>
</blockquote>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-fe9c.jpeg" alt="IDEA 破解脚本执行后弹框提示信息"></p>
<p>会提示安装补丁需要等待数秒。点击【<strong>确定</strong>】按钮后，过程大概 10 - 30 秒，如看到弹框提示 <code>Done</code> 时，表示激活破解成功：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-3bbc.jpeg" alt="补丁执行成功后，提示 Done"></p>
<h3 id="Mac-x2F-Linux-系统"><a href="#Mac-x2F-Linux-系统" class="headerlink" title="Mac &#x2F; Linux 系统"></a>Mac &#x2F; Linux 系统</h3><p>Mac &#x2F; Linux 系统与上面 Windows 系统一样，需将补丁所属文件 <code>/jetbra</code> 复制到某个路径，且<strong>路径不能包含空格与中文</strong>。</p>
<p>之后，打开终端，进入到 <code>/jetbra/scripts</code> 文件夹， 执行 <code>install.sh</code> 脚本, 命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo bash install.sh</span><br></pre></td></tr></table></figure>

<p>看到提示 <code>Done</code> , 表示激活成功。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-787e.jpeg" alt="Mac/Linux 系统执行破解补丁成功后，提示 Done">Mac&#x2F;Linux 系统执行破解补丁成功后，提示 Done</p>
<p>部分小伙伴 Mac&#x2F;Linux 系统执行脚本遇到如下错误：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-b6e5.jpeg" alt="Mac 执行破解脚本报错"></p>
<p><strong>解决方法：</strong></p>
<p>可先执行如下命令，再执行脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LC_COLLATE=&#x27;C&#x27;</span><br><span class="line">export LC_CTYPE=&#x27;C&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-9ad8.png" alt="image-20230228234504978"></p>
<h3 id="执行脚本，都干了些啥？"><a href="#执行脚本，都干了些啥？" class="headerlink" title="执行脚本，都干了些啥？"></a>执行脚本，都干了些啥？</h3><ul>
<li><p>Windows 用户执行脚本后，脚本会自动在环境变量 -&gt; 用户变量下添加了 <code>IDEA_VM_OPTIONS</code> 变量，变量值为 <code>/jetbra</code> 文件夹下的 <code>.vmoptions</code> 参数文件绝对路径，如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-0ccc.jpeg" alt="img"></p>
<p>然后，脚本自动在 <code>idea.vmoptions</code> 文件中引用了破解补丁 ：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-8872.jpeg" alt="img"></p>
<blockquote>
<p><strong>提示： 细心的小伙伴应该也发现了，本文的破解方式与文章开头《第二种 IDEA 破解方法》的区别在于，这种方式提供了自动化脚本，脚本免去了手动引入补丁的繁琐步骤，一切都由脚本来完成了。</strong></p>
</blockquote>
</li>
<li><p>Mac &#x2F; Linux 用户执行脚本后，脚本会自动在当期用户环境变量文件中添加了相关参数文件，Mac &#x2F; Linux 需重启系统，以确保环境变量生效。</p>
</li>
</ul>
<p>小伙伴们也可自行检查一下，如果没有自动添加这些参数，说明脚本执行没有成功。</p>
<h2 id="第六步：重启-IDEA"><a href="#第六步：重启-IDEA" class="headerlink" title="第六步：重启 IDEA"></a>第六步：重启 IDEA</h2><p><strong>脚本执行成功后，一定要重启 IDEA ~~</strong></p>
<p><strong>脚本执行成功后，一定要重启 IDEA ~~</strong></p>
<h2 id="第七步：填入指定激活码完成激活"><a href="#第七步：填入指定激活码完成激活" class="headerlink" title="第七步：填入指定激活码完成激活"></a>第七步：填入指定激活码完成激活</h2><p>重新打开 IDEA 后，复制下面的激活码：</p>
<p>6G5NXCPJZB-eyJsaWNlbnNlSWQiOiI2RzVOWENQSlpCIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQUEMiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFJCIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA5MDJQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOi0xMDc4MzkwNTY4IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-SnRVlQQR1&#x2F;9nxZ2AXsQ0seYwU5OjaiUMXrnQIIdNRvykzqQ0Q+vjXlmO7iAUwhwlsyfoMrLuvmLYwoD7fV8Mpz9Gs2gsTR8DfSHuAdvZlFENlIuFoIqyO8BneM9paD0yLxiqxy&#x2F;WWuOqW6c1v9ubbfdT6z9UnzSUjPKlsjXfq9J2gcDALrv9E0RPTOZqKfnsg7PF0wNQ0&#x2F;d00dy1k3zI+zJyTRpDxkCaGgijlY&#x2F;LZ&#x2F;wqd&#x2F;kRfcbQuRzdJ&#x2F;JXa3nj26rACqykKXaBH5thuvkTyySOpZwZMJVJyW7B7ro&#x2F;hkFCljZug3K+bTw5VwySzJtDcQ9tDYuu0zSAeXrcv2qrOg&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<p>粘贴到输入框内，点击 <code>Activate</code> 按钮，就激活成功了。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-0179.jpeg" alt="输入 IDEA 破解激活码"></p>
<blockquote>
<p>PS: 有部分小伙伴反应，重启 IDEA 填入激活码依然无法激活，重启系统才行，如果有小伙伴遇到这种情况，不妨试试看~</p>
</blockquote>
<p>激活成功后，又可以开心的 coding 了 ~</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-5c4f.jpeg" alt="IDEA 2022.3.2 版本激活破解成功"></p>
<h2 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h2><h3 id="激活失败，提醒-key-is-invalid-看这里"><a href="#激活失败，提醒-key-is-invalid-看这里" class="headerlink" title="激活失败，提醒  key is invalid, 看这里"></a>激活失败，提醒  key is invalid, 看这里</h3><p><a href="https://blog.junxu666.top/p/40017.html">2023 年idea 激活失效？ 提醒key is invalid，解决方法都在这里了</a></p>
<p><a href="https://blog.junxu666.top/p/40017.html">2023 年idea 激活失效？ 提醒key is invalid，解决方法都在这里了</a></p>
<p><a href="https://blog.junxu666.top/p/40017.html">2023 年idea 激活失效？ 提醒key is invalid，解决方法都在这里了</a></p>
<p>重要的事情说三遍</p>
<h3 id="激活成功后，不要升级-IDEA-版本"><a href="#激活成功后，不要升级-IDEA-版本" class="headerlink" title="激活成功后，不要升级 IDEA 版本"></a>激活成功后，不要升级 IDEA 版本</h3><p>官方反制手段越来越严厉，这个版本能激活，新版本大概率补丁就被限制了。所以，如果打开 IDEA 后，右下角若出现提示升级新版本，请不要升级版本。能用就行，它不香嘛！</p>
<h3 id="激活成功后，补丁文件夹能不能删掉或者移动？"><a href="#激活成功后，补丁文件夹能不能删掉或者移动？" class="headerlink" title="激活成功后，补丁文件夹能不能删掉或者移动？"></a>激活成功后，补丁文件夹能不能删掉或者移动？</h3><p>上文中说到，执行脚本后会添加环境变量，变量值对应了你放置补丁位置的路径，删除掉或者移动，再打开 IDEA 就找不到对应文件了，激活也就失效了。放着吃灰就行，别动它。</p>
<h2 id="激活补丁下载地址"><a href="#激活补丁下载地址" class="headerlink" title="激活补丁下载地址"></a>激活补丁下载地址</h2><blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-04b1.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">IDEA 2022.3.2破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>idea</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042204-e5f3.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 年 2 月国内 ChatGpt 正确注册教程，手把手教你使用，赶紧来体验吧</title>
    <url>/p/37715.html</url>
    <content><![CDATA[<p>刚过完年，不知道大家有没有在春节档期间，跟家人一起观看《流浪地球2》，里面的MOSS，是一款强大的智能机器人。那么当时我们就可以联想到的最近发布的ChatGPT，同样作为一款现实中的人工智能自然语言处理工具，虽说比不上电影中的MOSS，但是其功能之强大，也是令人侧目。</p>
<p><strong>最近又传来一则新闻，ChatGPT通过了Google的L3工程师入职测试，拿下了谷歌120万年薪的Offer，再度将ChatGPT推上了热搜。</strong></p>
<h2 id="一、ChatGPT是什么？"><a href="#一、ChatGPT是什么？" class="headerlink" title="一、ChatGPT是什么？"></a>一、ChatGPT是什么？</h2><p>是人工智能技术驱动的自然语言处理工具，它能够通过学习和理解人类的语言来进行对话，还能根据聊天的上下文进行互动，真正像人类一样来聊天交流，甚至能完成撰写邮件、视频脚本、文案、翻译、代码等任务。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/a0255c3650d1288101ac3018a7c0cd07.webp?x-oss-process=image/format,png" alt="img"></p>
<h2 id="二、ChatGpt-可以做什么"><a href="#二、ChatGpt-可以做什么" class="headerlink" title="二、ChatGpt 可以做什么"></a>二、ChatGpt 可以做什么</h2><p>ChatGPT 可以做的事情其实挺多的</p>
<ol>
<li>各种话题的问题，例如历史、科学、文化等。它可以提供相关的信息和细节，并且能够根据上下文作出适当的回应。</li>
<li>可以提供建议和帮助，例如在人类面临某些问题或困难时，它可以提供可行的解决方案。它可以理解人类的需求，并根据他们的问题提供适当的帮助</li>
<li>可以作为客服或人工智能助手使用，即能够与人类进行交流，并帮助他们解决问题。它可以用于提供客户服务或帮助人们完成日常任务，从而提高工作效率和满意度。</li>
</ol>
<p>小编我昨晚第一时间进行了体验，发现 ChatGpt 是真的强大，比如我询问小米 13 的手机规格，他一下子就帮我搜索出来了。下面是我的一些使用体验图</p>
<h3 id="如何年薪百万"><a href="#如何年薪百万" class="headerlink" title="如何年薪百万"></a>如何年薪百万</h3><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/22/1220230208143648.png"></p>
<h3 id="查询手机参数"><a href="#查询手机参数" class="headerlink" title="查询手机参数"></a>查询手机参数</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/c8dd17490d350640e4a7a49b80e7be49.webp?x-oss-process=image/format,png" alt="img"></p>
<h3 id="写一封情书"><a href="#写一封情书" class="headerlink" title="写一封情书"></a>写一封情书</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/c6900f547fa1a804d7e89ee87daa4d50.webp?x-oss-process=image/format,png" alt="img"></p>
<h3 id="取个名字"><a href="#取个名字" class="headerlink" title="取个名字"></a>取个名字</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/52740bda8566c10a0f4e6497fec7e7c5.png" alt="img"></p>
<h2 id="三、要如何注册？"><a href="#三、要如何注册？" class="headerlink" title="三、要如何注册？"></a>三、要如何注册？</h2><p>完整文档打开姿势：<a href="https://link.zhihu.com/?target=https://note.youdao.com/s/3VjTTBfj">国内使用ChatGPT的方式汇总</a></p>
<h3 id="1-注册ChatGPT账号"><a href="#1-注册ChatGPT账号" class="headerlink" title="1.注册ChatGPT账号"></a>1.注册ChatGPT账号</h3><p>详情可以查看上面 保姆级教程～～</p>
<p>缺点：需要梯子，且香港的梯子无法使用，只能用其他国家的网络，对不会该技术的人非常不友好</p>
<p>优点：官方网站，直接用ChatGPT，无任何套路</p>
<h3 id="2-Google浏览器插件"><a href="#2-Google浏览器插件" class="headerlink" title="2. Google浏览器插件"></a>2. Google浏览器插件</h3><p>已知的插件有：</p>
<ul>
<li>ChatGPT for Google</li>
</ul>
<p>这款插件支持 Chrome &#x2F; Edge &#x2F; Firefox 等浏览器，使用也很简单，用谷歌搜索时会在右侧给出chatGPT的回答。插件直接从谷歌商店下载</p>
<p>优点：无需注册账号，直接可用</p>
<p>缺点：仍然需要访问外网的梯子</p>
<ul>
<li>Awesome ChatGPT Prompts</li>
</ul>
<p>这是ChatGPT的游戏精灵，包含了几十种“提问方式“。</p>
<ul>
<li>YouTube Summarizer</li>
</ul>
<p>这是一款非常有用的youtube插件，它有两个显著的功能，显示出视频脚本，同时可以一键复制到ChatGPT中帮你做一个总结。</p>
<p>对于有些视频，不太清楚它质量或者内容到底如何的，这个可以避免踩雷。</p>
<ul>
<li>Promptheus</li>
</ul>
<p>这个就更有意思了，可以直接调用话筒跟ChatGPT交流，不需要打字了。</p>
<p>这是我随便提问的，按住空格键就可以了。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/48865318b0f656660cc5561ab3229f67.webp?x-oss-process=image/format,png" alt="img"></p>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>总的来说，目前各大厂商都在对接ChatGPT，或者是对接自己的类似ChatGPT的应用，比如微软发布ChatGPT版必应搜索挑战谷歌 AI加持功能，百度也开始接入ChatGPT、微软拟向企业提供定制版ChatGPT等。</p>
<p>完整文档打开姿势：<a href="https://link.zhihu.com/?target=https://note.youdao.com/s/3VjTTBfj">国内使用ChatGPT的方式汇总</a></p>
<p>关注微信公众号【<strong>程序员徐师兄</strong>】，回复 <strong>gpt</strong>，领取 国内使用ChatGPT的方式汇总 文档</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230213000210.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>ChatGpt</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 年 Navicat Premium 下载，激活破解教程，亲测有用，永久激活</title>
    <url>/p/28146.html</url>
    <content><![CDATA[<blockquote>
<p>嗨喽，大家好，这篇文章主要讲解是 Navicat Premium 的激活，破解教程，仅供学习使用，禁止商用，如有侵权，请联系作者删除</p>
</blockquote>
<p><strong>Navicat premium</strong>非常功能强大的多连接数据库管理工具，我们这款软件就是提供了简单数据库开发的基本和必需的功能，可以为专业开发人员提供满足他们所有特定需求的功能，而且对于刚接触数据库服务器的用户来说也很容易学习。用于商业用途，并支持 mysql、MariaDB、sql server、PostgreSQL、oracle 和 sqlite 数据库。</p>
<h2 id="2023-年Navicat-Premium-破解版合集下载地址，亲测有用"><a href="#2023-年Navicat-Premium-破解版合集下载地址，亲测有用" class="headerlink" title="2023 年Navicat  Premium 破解版合集下载地址，亲测有用"></a>2023 年Navicat  Premium 破解版合集下载地址，亲测有用</h2><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-fb29.png"></h3><h2 id="资源下载链接"><a href="#资源下载链接" class="headerlink" title="资源下载链接"></a>资源下载链接</h2><p>关注微信公众号<strong>【徐公】</strong>，回复 <strong>navicat</strong>，即可获取</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-028c.png"></p>
<h2 id="破解教程"><a href="#破解教程" class="headerlink" title="破解教程"></a><strong>破解教程</strong></h2><p><strong>在开始前，建议先断开本地网络！！！建议先断开本地网络！！！建议先断开本地网络！！！</strong></p>
<ol>
<li>解压缩navicat_premium_cxy521.com.rar，压缩包中包括了32位和64位，请根据自己的电脑选择安装</li>
</ol>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-225c.png"></p>
<p>3.一直下一步，中间会有个提示设置路径的地方，可以修改路径，不建议c盘，会影响电脑允许速度，然后继续一直下一步，直到安装完成</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-85b4.png"></p>
<p>4.安装完成后不要运行navicat premium15，将“Navicat Keygen Patch v5.6.0.zip”解压出来（<strong>提示：360安全卫士等杀毒软件可能会误报，最好激活前先关闭杀软</strong>）；</p>
<p>将Navicat Keygen Patch v5.6.0.exe复制到<strong>Navicat Premium 15安装目录下</strong>，右键选择“以管理员身份运行”</p>
<p>5.注册机打开后，Patch勾选Backup、Host，选择Navicat v15，然后点击Patch按钮</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-dbad.png"></p>
<p>过一会就会有个navicat.exe – x64 -&gt; Cracked!.的弹窗，点击“确定”</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-c192.png"></p>
<p>然后回到注册机，确保以下几个选项是对应的</p>
<p>License为Enterprise</p>
<p>Products为Premium</p>
<p>Languages为Simplified Chinese（简体中文，其它语言版本请自选）</p>
<p>Resale Version为Site license</p>
<p>Your Name和Your Organization可以任意填写或者默认</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-9b1c.png" alt="image-20230327214732141"></p>
<p>上面几项设置好后，点击“Generate”，会自动生成一个注册码，如下图</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-ec61.png"></p>
<p>6.这个时候就可以打开navicat premium15，将上面生成的注册码复制到注册窗口中（注册窗在头部“帮助”选项下面），点击激活，</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-5cc4.png" alt="image-20230327214756813"></p>
<p>会提示因为激活服务器暂时不可使用…..我们选择“手动激活”</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-e800.png"></p>
<p>会生成一个请求码</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-a205.png"></p>
<p>7.将请求码复制到注册机中的Request Code框中，然后点击Generate按钮</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-23c2.png"></p>
<p>Activation Code框中会生成一个激活码</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-ec4f.png"></p>
<p>8.将上面的激活码复制到手动激活窗口中，并点击“激活”</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-5205.png"></p>
<p>这个时候就会弹出Navicat 现已激活！！！</p>
<p>恭喜，到这里小伙伴们就激活成功啦！！如果经济允许，还是希望大家可以支持一下正版！！！</p>
<p>附上正版购买地址 <a href="http://www.navicat.com.cn/download/navicat-premium">http://www.navicat.com.cn/download/navicat-premium</a></p>
<p>关注微信公众号<strong>【徐公】</strong>，回复 <strong>navicat</strong>，即可获取</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-fb81.png"> </p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>Datagrip 激活破解教程，长期更新（2023 年 2 月亲测可用）</title>
    <url>/p/18384.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本教程专注 datagrip 永久激活，长期更新！</p>
<p>2023&#x2F;1&#x2F;5日记: 经验证，本方案完美支持官网最新发布版本 2022.3.2，请各位大佬鉴赏！</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230105-38fabcc1-0ac7-4a0d-8644-ab8418c22602.png" alt="img"></p>
<p>2022&#x2F;11&#x2F;19记：今天给大家带来 datagrip 最硬核的激活方式：一键脚本激活，轻松简单操作，两步激活到2099！话不多说，效果抬上来如下图！</p>
<p>官方最新版本：<strong>2022&#x2F;9&#x2F;27</strong> 最新发布版本 <strong>2022.2.5   同时本教程支持 2020.1 ~ 2022.2.5之间所有版本激活到2099！</strong></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220221119-e8cebf91-c331-4d06-b5c1-890add136e5f.png" alt="img"></p>
<h2 id="破解过程详解："><a href="#破解过程详解：" class="headerlink" title="破解过程详解："></a><strong>破解过程详解：</strong></h2><p>（1）<strong>datagrip</strong> 安装：直接在官网下载最新安装包.exe（官网地址：<a href="https://www.jetbrains.com/datagrip/download/#section=windows%EF%BC%89%EF%BC%8C%E7%84%B6%E5%90%8E%E6%A0%B9%E6%8D%AE%E5%AE%89%E8%A3%85%E5%BC%95%E5%AF%BC%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AE%8C%E6%88%90%E5%AE%89%E8%A3%85%E5%8D%B3%E5%8F%AF%EF%BC%8C%E5%AE%8C%E6%88%90%E5%90%8E%E6%89%93%E5%BC%80">https://www.jetbrains.com/datagrip/download/#section=windows），然后根据安装引导一步一步完成安装即可，完成后打开</a> <strong>datagrip</strong> 看到如下效果表示 <strong>datagrip</strong> 安装成功！如图发现 <strong>datagrip</strong> 需要注册！这里我们先不管，直接关闭 <strong>datagrip</strong> 准备激活！</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220221119-4753cc94-c28c-4a75-b645-09a882f81479.png" alt="img"></p>
<p>（2）<strong>激活包下载</strong>：</p>
<p><a href="docs.qq.com/doc/DUmdxV1B6SWxBdHBQ">Datagrip 最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效） </a></p>
<p>激活包下载完之后，请 <strong>解压</strong> 并保持文件目录结构不变如下！（<strong>注意：****激活包的文件路径中最好不要包含中文和特殊字符串</strong>）</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220221119-1ee283da-9d85-44cc-9221-593be83e82a6.png" alt="img"></p>
<p>（3）<strong>执行脚本</strong>：请先保证软件 <strong>datagrip</strong> 已经关闭，然后左键双击执行 <strong>激活包解压后</strong>（<strong>执行脚本之前请一定将激活包正常解压缩，别在解压软件中执行脚本</strong>）中 <strong>datagripActive.vbs</strong> 脚本程序, 得到如下提示表示成功！</p>
<p>然后点击确定按钮即可。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220221119-d4c306f6-f2a3-4b47-9a95-2b2a224f4909.png" alt="img"></p>
<p>（4）<strong>激活datagrip</strong>: 再次打开 <strong>datagrip</strong> ,新安装的用户会自动弹出注册页面，已经在使用中（临时激活码或其他方式进入<strong>datagrip</strong>）的找到顶部导航栏 <strong>help -&gt; register</strong> 按钮打开注册页面，</p>
<p>这时我们选择 <strong>Activation code</strong> 方式激活，这时有两种填入激活码的方式：</p>
<p>一、记事本打开激活包中 <strong>激活码.txt ，</strong>然后复制粘贴到 <strong>datagrip</strong> 注册弹窗中激活码区域</p>
<p>二、直接鼠标左键将 <strong>激活码.txt</strong> 拖入到 <strong>datagrip</strong> 注册弹窗中激活码区域，<strong>datagrip</strong> 会自动填入激活码</p>
<p>最后点击蓝色 <strong>Activate</strong> 按钮，接下来就是见证奇迹的时刻，你的 <strong>datagrip</strong> 已经永久激活！</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220221119-673b5037-ec76-4654-9c9f-52d00f6de1b4.png" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220221119-74bc3083-4f1e-4d48-a538-025c16150e73.png" alt="img"></p>
<p><strong>结语：</strong>已经激活的朋友如果需要看到第一图的带版本激活信息，在上面激活完成之后，进入编写代码的界面。点击顶部导航栏</p>
<p><strong>Help -&gt; About 按钮</strong> 即可看到相应的激活信息和版本信息！</p>
<h2 id="激活下载地址"><a href="#激活下载地址" class="headerlink" title="激活下载地址"></a>激活下载地址</h2><p>1、关于汉化，<strong>datagrip</strong> 软件官方已经提供了汉化插件 <strong>File-&gt;Settings-&gt;Plugins 中 MarketPlace</strong> 搜索 <strong>chinese</strong> 安装即可！</p>
<p>2、百度网盘如果失效了，请关注如下订阅号联系我！同时本 <strong>datagrip</strong> 激活教程（<strong>官方一直都在发布新版本，激活包也会不定时更新</strong>）会长期更新，为了大家不迷路，请关注！</p>
<p><a href="docs.qq.com/doc/DUmdxV1B6SWxBdHBQ">Datagrip 最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效） </a></p>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>datagrip</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230211154134.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Datagrip</tag>
      </tags>
  </entry>
  <entry>
    <title>Git-ssh-配置及使用</title>
    <url>/p/40279.html</url>
    <content><![CDATA[<p><strong>前言：前几天在写博客  <a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018">手把手教你用Hexo + github 搭建自己博客</a><br>的时候，经常需要用到一些git操作，截了好多图，于是就想干脆整理成一系列的git 教程，总结如下</strong></p>
<ul>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573286">Git下载及配置环境变量</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573339">Git 命令行教程及实例教程</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573399">Git ssh 配置及使用</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573426"> git ssh 配置多个账户</a></li>
</ul>
<hr>
<h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>这篇教程是在电脑上已经安装好git的前提之上的，要进行以下配置，请先确保你的电脑已经安装好git。以下配置步骤是在git bash里面进行配置的，可以通过 右键》 git bash here 打开</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtNDI0YWM5MmVlNmY1MmFlNC5qcGc"></p>
<p>在管理Git项目上，很多时候都是直接使用https url克隆到本地，当然也有有些人使用SSH url克隆到本地。</p>
<p>这两种方式的主要区别在于：使用https url克隆对初学者来说会比较方便，复制https url然后到git Bash里面直接用clone命令克隆到本地就好了，但是每次fetch和push代码都需要输入账号和密码，这也是https方式的麻烦之处。</p>
<p>而使用SSH url克隆却需要在克隆之前先配置和添加好SSH key，因此，如果你想要使用SSH url克隆的话，你必须是这个项目的拥有者。否则你是无法添加SSH key的，另外ssh默认是每次fetch和push代码都不需要输入账号和密码，如果你想要每次都输入账号密码才能进行fetch和push也可以另外进行设置。前面的几篇介绍Git的博客里面采用的都是https的方式作为案例，</p>
<p>今天主要是讲述如何配置使用ssh方式来提交和克隆代码。</p>
<p>大概可以分为一下几个步骤</p>
<ul>
<li>设置Git的user name和email：(如果是第一次的话)</li>
<li>检查是否已经有SSH Key。</li>
<li>生成密钥</li>
<li>添加密钥到ssh-agent</li>
<li>登陆Github, 添加 ssh </li>
<li>测试：</li>
</ul>
<h2 id="1、设置Git的user-name和email：-如果是第一次的话"><a href="#1、设置Git的user-name和email：-如果是第一次的话" class="headerlink" title="1、设置Git的user name和email：(如果是第一次的话)"></a>1、设置Git的user name和email：(如果是第一次的话)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这里的“xujun&quot; 可以替换成自己的用户名</span><br><span class="line">git config --global user.name &quot;xujun&quot;</span><br><span class="line"># 这里的邮箱 gdutxiaoxu@163.com  替换成自己的邮箱</span><br><span class="line">git config --global user.email  &quot;gdutxiaoxu@163.com&quot;</span><br></pre></td></tr></table></figure>

<h2 id="检查是否已经有SSH-Key。"><a href="#检查是否已经有SSH-Key。" class="headerlink" title="检查是否已经有SSH Key。"></a>检查是否已经有SSH Key。</h2><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">　　<span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure>

<p>接着输入ls，</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span></span><br></pre></td></tr></table></figure>

<p>列出该文件下的文件，看是否存在 id_isa 和 id_isa.pub 文件（也可以是别的文件名，只要 yourName 和 yourName.pub 承兑存在），如果存在的话，证明已经存在 ssh key了，可以直接跳过 <em>生成密钥</em> 这一步骤，</p>
<p>下图是存在的情况下</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtZDEzODU1NWRlY2YwMDk4ZC5qcGc"></p>
<h2 id="3、生成密钥"><a href="#3、生成密钥" class="headerlink" title="3、生成密钥"></a>3、生成密钥</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这里的邮箱 gdutxiaoxu@163.com  替换成自己的邮箱</span><br><span class="line">ssh-keygen -t rsa -C &quot;gdutxiaoxu@163.com&quot;</span><br></pre></td></tr></table></figure>

<p>连续3个回车。如果不需要密码的话。<br>最后得到了两个文件：id_rsa和id_rsa.pub。</p>
<p>默认的存储路径是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator\.ssh</span><br></pre></td></tr></table></figure>



<h2 id="4、添加密钥到ssh-agent"><a href="#4、添加密钥到ssh-agent" class="headerlink" title="4、添加密钥到ssh-agent"></a>4、添加密钥到ssh-agent</h2><p>确保 ssh-agent 是可用的。ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，其实ssh-agent就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># start the ssh-agent in the background</span><br><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br></pre></td></tr></table></figure>


<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtN2JjODczMGY5MDIwMjNhNS5qcGc"></p>
<p>添加生成的 SSH key 到 ssh-agent。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>


<h2 id="5、登陆Github-添加-ssh-。"><a href="#5、登陆Github-添加-ssh-。" class="headerlink" title="5、登陆Github, 添加 ssh 。"></a>5、登陆Github, 添加 ssh 。</h2><p>把id_rsa.pub文件里的内容复制到这里</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtNGUxODVmMjNlMjg1OTIyZS5qcGc"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtMTA3OTZkNzI2ZDMyMWY1Yy5qcGc"></p>
<p><img src="https://img-blog.csdnimg.cn/2021051814155389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70"></p>
<h2 id="6、测试："><a href="#6、测试：" class="headerlink" title="6、测试："></a>6、测试：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>你将会看到：</p>
<blockquote>
<p>Hi humingx! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<p>如果看到Hi后面是你的用户名，就说明成功了。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtZDk0YWIwN2E5ODhhYTQyMS5qcGc"></p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p> 如果我之前的仓库是用https提交的，那么我现在想用ssh 的方式提交，怎么办呢 ，别急，下面就来教你怎样操作了。</p>
<p> 这里同样以我本机目录下的G:&#x2F;&#x2F;test 仓库为例子，</p>
<p> 找到仓库下 .git 文件夹下的config文件，打开，可以看到以下内容</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"> [core]</span><br><span class="line">	<span class="attr">repositoryformatversion</span> = <span class="number">0</span></span><br><span class="line">	<span class="attr">filemode</span> = <span class="literal">false</span></span><br><span class="line">	<span class="attr">bare</span> = <span class="literal">false</span></span><br><span class="line">	<span class="attr">logallrefupdates</span> = <span class="literal">true</span></span><br><span class="line">	<span class="attr">symlinks</span> = <span class="literal">false</span></span><br><span class="line">	<span class="attr">ignorecase</span> = <span class="literal">true</span></span><br><span class="line">[remote <span class="string">&quot;origin&quot;</span>]</span><br><span class="line">	<span class="attr">url</span> = https://github.com/gdutxiaoxu/test.git</span><br><span class="line">	<span class="attr">fetch</span> = +refs/heads<span class="comment">/*:refs/remotes/origin/*</span></span><br><span class="line"><span class="comment">[branch &quot;master&quot;]</span></span><br><span class="line"><span class="comment">	remote = origin</span></span><br><span class="line"><span class="comment">	merge = refs/heads/master</span></span><br></pre></td></tr></table></figure>
<p> 将文件中的 url &#x3D; <a href="https://github.com/gdutxiaoxu/test.git">https://github.com/gdutxiaoxu/test.git</a> 更改为 url &#x3D; <a href="mailto:&#x67;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>:gdutxiaoxu&#x2F;test.git 即可。</p>
<p>修改后的文件如下</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[core]</span></span><br><span class="line">	repositoryformatversion = <span class="number">0</span></span><br><span class="line">	filemode = false</span><br><span class="line">	bare = false</span><br><span class="line">	logallrefupdates = true</span><br><span class="line">	symlinks = false</span><br><span class="line">	ignorecase = true</span><br><span class="line"><span class="selector-attr">[remote <span class="string">&quot;origin&quot;</span>]</span></span><br><span class="line">	url = git@github<span class="selector-class">.com</span>:gdutxiaoxu/test<span class="selector-class">.git</span></span><br><span class="line">	fetch = +refs/heads<span class="comment">/*:refs/remotes/origin/*</span></span><br><span class="line"><span class="comment">[branch &quot;master&quot;]</span></span><br><span class="line"><span class="comment">	remote = origin</span></span><br><span class="line"><span class="comment">	merge = refs/heads/master</span></span><br></pre></td></tr></table></figure>




<p>进入本地仓库 ，增加 xujun.txt 文件，提交，你会看到不需要再提交密码了</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtZmFlYzE2NDQ2Yjg3OWNjNi5qcGc"></p>
<p>远程仓库</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtZDIwYjFkMDQzMjUxNDAyNC5qcGc"></p>
<p>  到此本篇博客为止，下一篇博客将讲解电脑怎样配置多个ssh key。</p>
<hr>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/80752876">一步步拆解 LeakCanary</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/97885526">Android 面试必备 - http 与 https 协议</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/97618598">Android 面试必备 - 计算机网络基本知识（TCP，UDP，Http，https）</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/98475465">Android 面试必备 - 线程</a></p>
<p><strong><a href="https://github.com/gdutxiaoxu/Android_interview">Android_interview github 地址</a></strong></p>
<p>大家如果觉得不错的话，可以关注我的微信公众号<strong>程序员徐公</strong></p>
<ol>
<li>公众号程序员徐公回复<strong>黑马</strong>，获取 Android 学习视频</li>
<li>公众号程序员徐公回复<strong>徐公666</strong>，获取简历模板，教你如何优化简历，走进大厂</li>
<li>公众号程序员徐公回复<strong>面试</strong>，可以获得面试常见算法，剑指 offer 题解</li>
<li>公众号程序员徐公回复<strong>马士兵</strong>，可以获得马士兵学习视频一份</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7b30892b824507a885ebf55811376981.png"></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 2022.1永久破解激活教程（最新版，亲测可用）</title>
    <url>/p/57468.html</url>
    <content><![CDATA[<p><strong>本文将通过图解的方式指导你激活IDEA</strong></p>
<h2 id="第一步-下载最新的-IDEA-2022-2-版本安装包"><a href="#第一步-下载最新的-IDEA-2022-2-版本安装包" class="headerlink" title="第一步: 下载最新的 IDEA 2022.2 版本安装包"></a>第一步: 下载最新的 IDEA 2022.2 版本安装包</h2><p>我们先从 IDEA 官网下载 IDEA 2022.2 版本的安装包</p>
<p><a href="https://www.jetbrains.com/zh-cn/idea/download/#section=windows">官方下载地址</a></p>
<p>点击下载，静心等待其下载完毕即可。</p>
<h2 id="第二步-先卸载老版本的-IDEA"><a href="#第二步-先卸载老版本的-IDEA" class="headerlink" title="第二步: 先卸载老版本的 IDEA"></a>第二步: 先卸载老版本的 IDEA</h2><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219104246665.jpeg" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219102959589.jpeg" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219104254292.jpeg" alt="img"></p>
<h2 id="第三步-开始安装-IDEA-2022-2-版本"><a href="#第三步-开始安装-IDEA-2022-2-版本" class="headerlink" title="第三步: 开始安装 IDEA 2022.2 版本"></a>第三步: 开始安装 IDEA 2022.2 版本</h2><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219102959627.jpeg" alt="img"></p>
<p>2.安装目录默认为 <code>C:\Program Files\JetBrains\IntelliJ IDEA 2022.2</code>, 这里笔者选择的是默认路径，建议修改:</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219104304463.jpeg" alt="img"></p>
<p>3.勾上创建桌面快捷方式：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219102959839.jpeg" alt="img"></p>
<p>4.点击安装 <code>Install</code> ：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219102959860.jpeg" alt="img"></p>
<p>5.安装结束后，勾选 <code>Run IntelliJ IDEA</code>，点击 <code>Finish</code> 启动软件:</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219104315590.jpeg" alt="img"></p>
<p>IDEA 启动成功后，会弹出如下的对话框，提示我们要先登录 JetBrains 账户才能使用：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219103000026.jpeg" alt="img"></p>
<p>这里我们先ignore，<strong>click</strong> <strong><code>Exit</code></strong> <strong>退出，准备开始引入激活补丁</strong>。</p>
<h2 id="第四步：清空-IDEA-以前使用过的激活方式【非常重要】"><a href="#第四步：清空-IDEA-以前使用过的激活方式【非常重要】" class="headerlink" title="第四步：清空 IDEA 以前使用过的激活方式【非常重要】"></a>第四步：清空 IDEA 以前使用过的激活方式【非常重要】</h2><p><img src="https://ask.qcloudimg.com/http-save/6781024/e3fcf9a43ede5e99f220b85e0d4d97f8.jpeg?imageView2/2/w/1620" alt="img"></p>
<p><strong>run激活脚本之前，如果你之前安装过 IDEA, 且手动为 IDEA 修改过 hosts 文件，那么添加的配置，记得要删除；引用过的补丁也要移除掉等, 不然可能会与本文提供的补丁有冲突，出现各种奇奇怪怪的问题。</strong></p>
<p><strong>如果没有动过 hosts 文件，继续走下面的步骤，不用管，。</strong></p>
<h2 id="第五步：开始激活"><a href="#第五步：开始激活" class="headerlink" title="第五步：开始激活"></a>第五步：开始激活</h2><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219103000196.jpeg" alt="img"></p>
<h3 id="下载激活脚本"><a href="#下载激活脚本" class="headerlink" title="下载激活脚本"></a>下载激活脚本</h3><p>先下载“cloud.fynote.com&#x2F;share&#x2F;d&#x2F;14095“好激活补丁，解压后，打开文件夹如下：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219103000341.jpeg" alt="img"></p>
<p>点击进入 IDEA 2022.2 激活补丁文件夹.png</p>
<p>目录如下，<code>janetfilter.jar</code> 为激活补丁：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219103000375.jpeg" alt="img"></p>
<h3 id="复制补丁文件夹到硬盘某个位置"><a href="#复制补丁文件夹到硬盘某个位置" class="headerlink" title="复制补丁文件夹到硬盘某个位置"></a>复制补丁文件夹到硬盘某个位置</h3><p>将 <code>janetfilter</code>补丁文件夹移动到电脑上某个位置：</p>
<p>确定放置目录</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219104328779.jpeg" alt="img"></p>
<h3 id="引用激活补丁"><a href="#引用激活补丁" class="headerlink" title="引用激活补丁"></a>引用激活补丁</h3><p>进入 IDEA 的安装目录，笔者安装时，使用了默认安装路径，然后，进入 <code>/bin</code> 目录下，修改 <code>idea64.exe.vmoptions</code> 配置文件：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219104337561.jpeg" alt="img"></p>
<p>在 <code>idea64.exe.vmoptions</code> 配置文件结尾添加如下配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 补丁的绝对路径（可根据你实际的位置进行修改）,路径一定要填写正确，且不能包含中文，否则会导致 <span class="variable constant_">IDEA</span> 无法启动</span><br></pre></td></tr></table></figure>

<p>复制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">javaagent</span>:<span class="attr">D</span>:<span class="regexp">/janetfilter/</span>janetfilter.<span class="property">jar</span></span><br></pre></td></tr></table></figure>

<p>复制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 最新 <span class="variable constant_">IDEA</span> 版本需要添加下面两行，否则会报 key valid</span><br></pre></td></tr></table></figure>

<p>复制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addopens=java.<span class="property">base</span>/jdk.<span class="property">internal</span>.<span class="property">org</span>.<span class="property">objectweb</span>.<span class="property">asm</span>=<span class="variable constant_">ALLUNNAMED</span></span><br></pre></td></tr></table></figure>

<p>复制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addopens=java.<span class="property">base</span>/jdk.<span class="property">internal</span>.<span class="property">org</span>.<span class="property">objectweb</span>.<span class="property">asm</span>.<span class="property">tree</span>=<span class="variable constant_">ALLUNNAMED</span></span><br></pre></td></tr></table></figure>

<p>复制</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219103000575.jpeg" alt="img"></p>
<h3 id="重启-IDEA"><a href="#重启-IDEA" class="headerlink" title="重启 IDEA"></a>重启 IDEA</h3><p><strong>配置完成后保存，一定要重启 IDEA !!!</strong></p>
<p><strong>配置完成后保存，一定要重启 IDEA !!!</strong></p>
<h2 id="第六步：重新打开-IDEA-填入指定激活码完成激活"><a href="#第六步：重新打开-IDEA-填入指定激活码完成激活" class="headerlink" title="第六步：重新打开 IDEA, 填入指定激活码完成激活"></a>第六步：重新打开 IDEA, 填入指定激活码完成激活</h2><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219104344665.jpeg" alt="img"></p>
<p>重新打开 IDEA，填入下面的激活码，点击激活即可。</p>
<p>ZCB571FZHVeyJsaWNlbnNlSWQiOiJaQ0I1NzFGWkhWIiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQREIiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUkIiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUEdPIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU1ciLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA3MDFQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOi01OTQ5ODgxMjIiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0&#x3D;JNpWl3tvfBw9nYALTrBlJzoryrKHhqmiBxP5IljC6Hlgmb6YlOH8vPngzoyLYa+cGDMVj6fipEpm+BEqIA7oAoBYSu1ZPdzkHAa94apJg+CUQwuw+EJaATdKTANuKYTBsay6WsnrUh8vbIaJpGz19z+uOAc4xRP+gtuyjiwkNECZ6Y9qD+Dx3Gm5xXI3UvKqjPYIhXk23n1pjlxFIUmhD7BumdxF8JHmJJhd&#x2F;K5FaXQU&#x2F;K9pMp70GfmSS2KJgxm6SXfslWs&#x2F;bF5GTY3i1GA6ez05ZyJwsmJMZ1v6W7GWrWNHDLK7i7aXhOLdK9u+pCz+2FpKmadRznpSmixDzj37ig&#x3D;&#x3D;MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<p>复制激活码后填入，点击 <code>Activate</code> 按钮完成激活：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219103000614.jpeg" alt="img"></p>
<p> PS: 有小伙伴反馈，重启 IDEA 填入激活马依然无法激活，不妨试下重启系统</p>
<p>点击激活：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021620-20230219103000640.jpeg" alt="img"></p>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><blockquote>
<p>PS: 破解补丁页面提取人数过多，导致分享的百度网盘链接容易被封：<img src="https://img-blog.csdnimg.cn/img_convert/713e3cc737b92d94d01148761e55a64d.jpeg" alt="Pycharm 2022.2.3破解补丁分享失败">蛋疼ing，为限制人数，目前暂不提供页面直接提取，**<a href="https://docs.qq.com/doc/DUnV3cnRDWGVuSFRU">点击获取</a>**</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>idea</strong>，会自动将激活码发送给你</p>
<p><a href="https://docs.qq.com/doc/DUnV3cnRDWGVuSFRU">【腾讯文档】Idea 最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效） </a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/21/01%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BE%90%E5%85%AC%20%E5%89%AF%E6%9C%AC.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora Mac 激活、破解教程，亲测可用</title>
    <url>/p/60379.html</url>
    <content><![CDATA[<p>Typora for Mac 的编辑功能齐全，支持插入文本、图片、表格、代码、数学公式等，typora mac 版还支持实时预览和所见即所得功能，让你工作更加高效。</p>
<h2 id="Typora-1-3-6-Mac-破解版-介绍"><a href="#Typora-1-3-6-Mac-破解版-介绍" class="headerlink" title="Typora 1.3.6 Mac 破解版 介绍"></a>Typora 1.3.6 Mac 破解版 介绍</h2><p>Typora for Mac — 极简主义 Markdown 编辑器</p>
<blockquote>
<p>Typora for Mac 不像大多数 Markdown 编辑器，也不会其窗口拆分为源部分和预览部分。相反，它让你预览您的作品在同一窗口，实时预览。</p>
</blockquote>
<h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><ul>
<li>可读写</li>
</ul>
<p>Typora 将为读者和作家提供无缝的体验。它删除预览窗口，模式切换器，标记源代码的语法符号以及所有其他不必要的干扰。用真正的实时预览功能替换它们，以帮助您集中内容本身。</p>
<ul>
<li>简单而强大</li>
</ul>
<p>使用有组织的文本结构来记录事物</p>
<ul>
<li>无障碍</li>
</ul>
<p>捆绑一个小而强大的 MARKDOWN 编辑工具集合</p>
<p>菜单，快捷键，表编辑器，MATHJAX 编辑器和拖放图像</p>
<ul>
<li>自定义主题</li>
</ul>
<p>可以通过 CSS 完全配置</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0202imacso-typoramaczwpjbhyjjdkptmarkdownbjqmksimacsocom-2318c560-d0b4-4bf8-b95c-c7079bf12a42.png" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0202imacso-typoramaczwpjbhyjjdkptmarkdownbjqmksimacsocom-2318c560-d0b4-4bf8-b95c-c7079bf12a42.png" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0202imacso-typoramaczwpjbhyjjdkptmarkdownbjqmksimacsocom-2318c560-d0b4-4bf8-b95c-c7079bf12a42.png" alt="img"></p>
<p>Typora 1.3.6 Mac 破解版 好用极简的跨平台 Markdown 编辑器 下载地址</p>
<p>PS: 破解文件页面提取人数过多，导致分享的百度网盘链接容易被封：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0202imacso-typoramaczwpjbhyjjdkptmarkdownbjqmksimacsocom-916b7adf-2697-4e20-ba70-b3d52c08fbc9.png" alt="img"></p>
<p>蛋疼 ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
<p>关注微信公众号<strong>【徐公】</strong>，回复 <strong>typora</strong>，即可获取</p>
<p><a href="docs.qq.com/doc/DUldqbnRZeHNpTWFq">Typora最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效） </a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0201%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BE%90%E5%85%AC%20%E5%89%AF%E6%9C%AC-20230217232542313.png"></p>
]]></content>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora Windows 激活、破解教程，亲测可用</title>
    <url>/p/9971.html</url>
    <content><![CDATA[<h2 id="Typora-破解破解，正式开始"><a href="#Typora-破解破解，正式开始" class="headerlink" title="Typora 破解破解，正式开始"></a>Typora 破解破解，正式开始</h2><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230213005645.png"></p>
<p><strong>Typora</strong>是一款简单易用的Markdown编辑器。</p>
<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，其目标是实现易读易写。而Typora则是一个非常不错的Markdown编辑器，它的界面非常的简洁直观，并且功能各方面也是非常的不错，例如实时预览功能在完成输入后就可以看到这些内联样式，并在键入时或按下“Enter”键或焦点到另一个段落后查看块样式。</p>
<p>并且 Typora将为您提供读者和作家的无缝体验。它删除了预览窗口，模式切换器，降价源代码的语法符号以及所有其他不必要的干扰。将它们替换为真实的实时预览功能，以帮助您专注于内容本身。</p>
<p><strong>一、 下载破解文件</strong></p>
<p>关注微信公众号<strong>【程序员徐师兄】</strong>，回复 <strong>typora</strong>，即可获取</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/020220230214220630-20230217232454967.png"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/020220230214224055-20230217232455048.png"></p>
<p><strong>二、 解压文件</strong></p>
<p>下载成功后，解压，目录如下：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214224112.png"></p>
<p><strong>三、 安装Typora</strong></p>
<p>点击安装。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/020220230213005729-20230217232455258.png"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214224137.png"></p>
<p>将解压出的 <code>app.asar</code> 文件移动到 Typora 安装目录<code>resource</code> 文件夹下，替换掉原本的 <code>app.asar</code>。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230213005745.png"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230213005805.png"></p>
<p><strong>四、 重启Typora</strong></p>
<p>替换掉 <code>app.asar</code> 后，重启 Typora。</p>
<p><strong>五、输入任意邮箱号与使用说明中提供的序列号完成激活</strong></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214224159.png"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214224212.png"></p>
<h2 id="破解安装包获取方式："><a href="#破解安装包获取方式：" class="headerlink" title="破解安装包获取方式："></a>破解安装包获取方式：</h2><p>PS: 安装包页面提取人数过多，导致分享的百度网盘链接容易被封：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214224231.png"></p>
<p>蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
<h2 id="Typora安装激活包下载链接："><a href="#Typora安装激活包下载链接：" class="headerlink" title="Typora安装激活包下载链接："></a><strong>Typora安装激活包下载链接：</strong></h2><p>本教程使用图中的标注的安装包：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214224305.png"></p>
<p>关注微信公众号<strong>【程序员徐师兄】</strong>，回复 <strong>typora</strong>，即可获取</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/020220230214220630-20230217232454967.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora （Windows/Mac）破解、激活！亲测有效！2023  最新激活方法</title>
    <url>/p/41659.html</url>
    <content><![CDATA[<h1 id="Typora-（Windows-x2F-Mac）破解、激活！亲测有效！2023-最新激活方法"><a href="#Typora-（Windows-x2F-Mac）破解、激活！亲测有效！2023-最新激活方法" class="headerlink" title="Typora （Windows&#x2F;Mac）破解、激活！亲测有效！2023  最新激活方法"></a>Typora （Windows&#x2F;Mac）破解、激活！亲测有效！2023  最新激活方法</h1><h3 id="Typora-破解破解，正式开始"><a href="#Typora-破解破解，正式开始" class="headerlink" title="Typora 破解破解，正式开始"></a>Typora 破解破解，正式开始</h3><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230213005645.png"></p>
<p><strong>Typora</strong>是一款简单易用的Markdown编辑器。</p>
<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，其目标是实现易读易写。而Typora则是一个非常不错的Markdown编辑器，它的界面非常的简洁直观，并且功能各方面也是非常的不错，例如实时预览功能在完成输入后就可以看到这些内联样式，并在键入时或按下“Enter”键或焦点到另一个段落后查看块样式。</p>
<p>并且 Typora将为您提供读者和作家的无缝体验。它删除了预览窗口，模式切换器，降价源代码的语法符号以及所有其他不必要的干扰。将它们替换为真实的实时预览功能，以帮助您专注于内容本身。</p>
<p><strong>一、 下载破解文件</strong></p>
<p>关注微信公众号<strong>【程序员徐师兄】</strong>，回复 <strong>typora</strong>，即可获取</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214220630.png"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214224055.png"></p>
<p><strong>二、 解压文件</strong></p>
<p>下载成功后，解压，目录如下：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214224112.png"></p>
<p><strong>三、 安装Typora</strong></p>
<p>点击安装。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230213005729.png"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214224137.png"></p>
<p>将解压出的 <code>app.asar</code> 文件移动到 Typora 安装目录<code>resource</code> 文件夹下，替换掉原本的 <code>app.asar</code>。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230213005745.png"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230213005805.png"></p>
<p><strong>四、 重启Typora</strong></p>
<p>替换掉 <code>app.asar</code> 后，重启 Typora。</p>
<p><strong>五、输入任意邮箱号与使用说明中提供的序列号完成激活</strong></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214224159.png"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214224212.png"></p>
<h2 id="破解安装包获取方式："><a href="#破解安装包获取方式：" class="headerlink" title="破解安装包获取方式："></a>破解安装包获取方式：</h2><p>PS: 安装包页面提取人数过多，导致分享的百度网盘链接容易被封：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214224231.png"></p>
<p>蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
<h1 id="Typora安装激活包下载链接："><a href="#Typora安装激活包下载链接：" class="headerlink" title="Typora安装激活包下载链接："></a><strong>Typora安装激活包下载链接：</strong></h1><p>本教程使用图中的标注的安装包：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230214224305.png"></p>
<p>关注微信公众号<strong>【徐公】</strong>，回复 <strong>typora</strong>，即可获取</p>
<p><a href="docs.qq.com/doc/DUldqbnRZeHNpTWFq">Typora最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效） </a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0201%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BE%90%E5%85%AC%20%E5%89%AF%E6%9C%AC-20230217232542313.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>UltraISO 最新注册码，破解版下载</title>
    <url>/p/33438.html</url>
    <content><![CDATA[<h1 id="UltraISO破解版免注册码，ultraiso注册码"><a href="#UltraISO破解版免注册码，ultraiso注册码" class="headerlink" title="UltraISO破解版免注册码，ultraiso注册码"></a>UltraISO破解版免注册码，ultraiso注册码</h1><p>UltraISO软碟通 – 轻轻松松编辑映像文件！UltraISO软碟通 9.0 光盘工具可以快速可靠地制作、管理、查看、编辑和转换您的 CD&#x2F;DVD 映像文件。</p>
<p>软碟通UltraISO是一款功能强大、方便实用的光盘映像ISO文件编辑制作工具，这款光盘映像文件制作&#x2F;编辑&#x2F;转换工具，可直接编辑ISO文件，从ISO中提取文件和目录；</p>
<p>也可从CD – ROM制作光盘映像或将硬盘上的文件制作成ISO；还可编辑ISO的启动信息，制作可引导光盘。使用UltraISO，可以随心所欲地制作&#x2F;编辑&#x2F;转换光盘映像文件，配合光盘刻录软件烧录出自己所需要的光碟。</p>
<p><a href="http://www.itmind.net/wp-content/uploads/2022/07/e79f5-Pasted.jpg"><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/02e79f5-Pasted.jpg" alt="UltraISO破解版免注册码，ultraiso注册码"></a></p>
<h1 id="本文提供两种破解方式"><a href="#本文提供两种破解方式" class="headerlink" title="本文提供两种破解方式"></a>本文提供两种破解方式</h1><h2 id="下载破解版本"><a href="#下载破解版本" class="headerlink" title="下载破解版本"></a>下载破解版本</h2><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/02image-20230219204138293.png" alt="image-20230219204138293"></p>
<p><a href="docs.qq.com/doc/DUnNZTnBVZE54Z0l3">XShell  最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效）</a></p>
<h2 id="相关注册码"><a href="#相关注册码" class="headerlink" title="相关注册码"></a>相关注册码</h2><p>一、安装完成后运行“UltraISO”会弹出“欢迎”窗口，点击“输入注册码”。</p>
<p><a href="https://upyun.bufanz.com/zb_users/upload/2022/02/202202141644813452368396.webp"><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/024deb7-Pasted-1.jpg" alt="UltraISO破解版免注册码，ultraiso注册码"></a></p>
<p>二、输入注册名和注册码并点击“确定”。</p>
<p>本次提供的版本无需注册码，如果提示输入，可以使用下面的注册码</p>
<p><a href="docs.qq.com/doc/DUnNZTnBVZE54Z0l3">XShell  注册码(2023 年 2 月 10 号，亲测有效）</a> </p>
<p><a href="http://www.itmind.net/wp-content/uploads/2022/07/ec5f1-Pasted-2.jpg"><img src="http://www.itmind.net/wp-content/uploads/2022/07/ec5f1-Pasted-2.jpg" alt="UltraISO破解版免注册码，ultraiso注册码"></a></p>
<p>三、注册成功后，手动再次运行“UltraISO”即可。</p>
<p><a href="http://www.itmind.net/wp-content/uploads/2022/07/62fa0-Pasted-3.jpg"><img src="http://www.itmind.net/wp-content/uploads/2022/07/62fa0-Pasted-3.jpg" alt="UltraISO破解版免注册码，ultraiso注册码"></a></p>
<h2 id="激活补丁下载地址"><a href="#激活补丁下载地址" class="headerlink" title="激活补丁下载地址"></a>激活补丁下载地址</h2><blockquote>
<p>PS: 破解补丁页面提取人数过多，导致分享的百度网盘链接容易被封：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0202164604365771068.jpeg" alt="Webstorm 2022.3.1破解补丁分享失败">蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p><strong>需要的小伙伴，扫描下方公众号二维码，或者关注公众号： <code>徐公</code>，回复关键字：<code>iso</code>, 即可免费无套路获取激活码、破解补丁，持续更新中~。</strong></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0201%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BE%90%E5%85%AC%20%E5%89%AF%E6%9C%AC-20230217232542313.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>UltraISO</tag>
      </tags>
  </entry>
  <entry>
    <title>Webstorm 激活破解教程，2023 年亲测有效，永久激活</title>
    <url>/p/43791.html</url>
    <content><![CDATA[<p>本文讲的是 2022.2.1版本的Webstorm破解、Webstorm激活码、Webstorm安装、Webstorm永久激活码的最新永久激活教程，本文有mac和windows系统的idea安装教程。文末有JetBrains全家桶破解合集、java面试题、前端面试题及termius、xmind等破解。如果成功希望可以一键三连，非常感谢大家！！！！！！</p>
<h1 id="开始激活教程"><a href="#开始激活教程" class="headerlink" title="开始激活教程"></a><strong>开始激活教程</strong></h1><p>先去官网下载，我这里下载的是最新版本的2022.2.1，目前到我这个版本以下的破解都没有问题,官网地址：<a href="https://www.jetbrains.com/webstorm/download">https://www.jetbrains.com/webstorm/download</a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/02352d18e4fee548cdaa422a8e6eda656a.png" alt="image.png"></p>
<p>安装然后打开</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/020622cceef465461ea3066d693b75de8b-20230220231322889.png" alt="image.png"></p>
<h1 id="下载破解工具激活"><a href="#下载破解工具激活" class="headerlink" title="下载破解工具激活"></a><strong>下载破解工具激活</strong></h1><p>获取地址：<a href="docs.qq.com/doc/DUmljUnJLZktieGpD">Webstorm 2022.3.2 最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效）</a></p>
<p>输入 webstorm 获取</p>
<p>先把Webstorm关闭退出。</p>
<p>打开下载好的激活包（下载后记得不要删掉，然后安装的路径尽量不要带中文路径、删掉就会失效的）</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/027683d4e85385459f8d7dedded8b0ad66.png" alt="image.png"></p>
<p><strong>windows的Webstorm激活</strong></p>
<p>先执行unistall-current-user.vbs,直接双击打开，此步骤是为了防止之前有过激活信息，确保当前环境变量下没有激活工具的变量信息，可先执行卸载脚本在再进行后面的激活操作，避免激活失败。出现弹框done说明成功，如果弹出报错提示，执行unistall-all-user.vbs即可。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/02eb76cd7f4b424765bb746057b011a934.png" alt="image.png"></p>
<p>然后再执行install-current-user.vbs,直接双击打开即可，如果也提示报错，执行install-all-user.vbs即可。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/02d027aba6458e431f85bf2302a9e297c5.png" alt="image.png"></p>
<p>这里需要等待10秒左右才会出现第二个done弹框，才是成功</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/023f2fca8e83de4f3383fb89154d582d9c-20230220231346502.png" alt="image.png"></p>
<p>然后再输入对应的激活码即可，获取地址：<a href="docs.qq.com/doc/DUmljUnJLZktieGpD">Webstorm 2022.3.2 最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效）</a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030822-82ace3.png" alt="image.png"></p>
<h1 id="mac的Webstorm激活"><a href="#mac的Webstorm激活" class="headerlink" title="mac的Webstorm激活"></a>mac的Webstorm激活</h1><p>先打开终端</p>
<p>先运行uninstall.sh</p>
<p>此步骤是一键帮你去掉以前所激活过留下的东西，解决key is invalid的问题。防止激活失败</p>
<p>然后终端输入</p>
<p>这里直接把uninstall.sh拖动到终端即可。记得mac运行是sh xxxxx去运行.sh文件（记得sh后面加空格加路径），记得一定要在scripts目录下去运行sh文件，图片如下：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021f6144b8a131402fa9870d7afd360f4d.png" alt="image.png"></p>
<p>出现done说明成功。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/02d8cf648a25044c3eb4e39f2b0fc4f4c2.png" alt="image.png"></p>
<p>再执行install.sh，与上面同理，出现done，the kill Dock command can fix the crash issue. 说明成功。一定要记得在scripts目录下打开终端去运行sh文件。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/02c7ec9bb495c445aa890222e9b821e804.png" alt="image.png"></p>
<p>然后关闭Webstorm，重新打开Webstorm，输入破解码激活即可</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0288b6aa848cd34436b506fb14b49cce76.png" alt="image.png"></p>
<p>然后就成了，时间是假的，已经永久激活了，而且是官网最新版本哦，如果你重新更新了，或者移动了激活工具位置再执行上面的操作即可。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/02f66273d2fda3450b8bbde08880ca1ecd.png" alt="image.png"></p>
<h1 id="解决key-is-invalid"><a href="#解决key-is-invalid" class="headerlink" title="解决key is invalid"></a>解决key is invalid</h1><p>请自行检查以上步骤是否有漏</p>
<p>windows可以重新运行unistall-current-user.vbs和install-current-user.vbs，然后一定要出现3次弹框</p>
<p>mac可以重新运行uninstall.sh和install.sh，出现两次done</p>
<p>然后记得关闭重新打开Webstorm，重新输入激活码即可。</p>
<p>激活工具路径不允许有中文</p>
<p>还是不行试试重启电脑即可！！！</p>
<p>最后办法：下载官网最新版本2022.2.1的版本，然后重复以上操作即可</p>
<h2 id="激活补丁下载地址"><a href="#激活补丁下载地址" class="headerlink" title="激活补丁下载地址"></a>激活补丁下载地址</h2><blockquote>
<p>PS: 破解补丁页面提取人数过多，导致分享的百度网盘链接容易被封：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/02164604365771068.jpeg" alt="Webstorm 2022.3.1破解补丁分享失败">蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p><strong>需要的小伙伴，扫描下方公众号二维码，或者关注公众号： <code>徐公</code>，回复关键字：<code>webstorm</code>, 即可免费无套路获取激活码、破解补丁，持续更新中~。</strong></p>
<p><a href="docs.qq.com/doc/DUmljUnJLZktieGpD">Webstorm 2022.3.2 最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效）</a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/020220230219163502.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Webstorm 激活, Webstorm 破解</tag>
      </tags>
  </entry>
  <entry>
    <title>Xmind 注册嘛，破解版下载（2023 年亲测有用）</title>
    <url>/p/42836.html</url>
    <content><![CDATA[<p><strong>嗨喽，大家好，这篇文章主要讲解的是 XMind8 的下载，激活教程，仅供学习使用，禁止商用，如有侵权，请联系作者删除</strong>。</p>
<h5 id="XMind-8-Pro中文版是一款界面直观、专业出众、覆盖范围广阔的思维导图软件。XMind-8-Pro中文版功能强大为用户提供组织结构图、树状图、逻辑图，将画布概念管理从而引导思维导图层次化。XMind-8-Pro官方版将用户大脑中思维想法通过导图方式完美的展现出来，其思维导图与其他导图图表等更是简单易用，帮助用户在学习和工作中提高自身效率！"><a href="#XMind-8-Pro中文版是一款界面直观、专业出众、覆盖范围广阔的思维导图软件。XMind-8-Pro中文版功能强大为用户提供组织结构图、树状图、逻辑图，将画布概念管理从而引导思维导图层次化。XMind-8-Pro官方版将用户大脑中思维想法通过导图方式完美的展现出来，其思维导图与其他导图图表等更是简单易用，帮助用户在学习和工作中提高自身效率！" class="headerlink" title="XMind 8 Pro中文版是一款界面直观、专业出众、覆盖范围广阔的思维导图软件。XMind 8 Pro中文版功能强大为用户提供组织结构图、树状图、逻辑图，将画布概念管理从而引导思维导图层次化。XMind 8 Pro官方版将用户大脑中思维想法通过导图方式完美的展现出来，其思维导图与其他导图图表等更是简单易用，帮助用户在学习和工作中提高自身效率！"></a>XMind 8 Pro中文版是一款界面直观、专业出众、覆盖范围广阔的思维导图软件。XMind 8 Pro中文版功能强大为用户提供组织结构图、树状图、逻辑图，将画布概念管理从而引导思维导图层次化。XMind 8 Pro官方版将用户大脑中思维想法通过导图方式完美的展现出来，其思维导图与其他导图图表等更是简单易用，帮助用户在学习和工作中提高自身效率！</h5><h2 id="一、下载-Xmind-安装包以及激活包"><a href="#一、下载-Xmind-安装包以及激活包" class="headerlink" title="一、下载 Xmind 安装包以及激活包"></a>一、下载 Xmind 安装包以及激活包</h2><p><strong>PS: 本教程更新时间: 2023年2月18日~</strong></p>
<p><strong>免费版下载地址： <a href="https://docs.qq.com/doc/DUmxYQk9lZ1hPa1JF">https://docs.qq.com/doc/DUmxYQk9lZ1hPa1JF</a></strong></p>
<p>下载成功后，解压，目录如下：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/02165588975078052.jpeg" alt="下载xmind安装包以及激活包"></p>
<h2 id="二、先安装-Xmind"><a href="#二、先安装-Xmind" class="headerlink" title="二、先安装 Xmind"></a>二、先安装 Xmind</h2><p>1、在下载之家下载XMind 8 Update 8 Pro中文版软件压缩包，解压缩并运行安装，选择自定义安装。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/02a06846502afed2f4cfd57f97f6144b8b-20230219202559578.jpg" alt="截图"></p>
<p>   2、选择软件安装位置，将下方不要的勾选自行去掉</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0270d037f35d30741d0b6e6d3f9abbe21b.jpg" alt="截图"></p>
<p>   3、正在安装中，请稍等一会</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0226a69d1b6e876638de41b7767417668a-20230219202608742.jpg" alt="截图"></p>
<p>   4、安装成功，点击立即体验</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/02931953fd758c36c6ce03f09854525d6f.jpg" alt="截图"></p>
<h2 id="三-安装破解软件"><a href="#三-安装破解软件" class="headerlink" title="三. 安装破解软件"></a>三. 安装破解软件</h2><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/02image-20230219202932731.png" alt="image-20230219202932731"></p>
<ol>
<li>先关闭Xmind，以管理员身份运行X8U7-PJ.exe；</li>
<li>接收协议，点击下一步；</li>
<li>勾选介绍，下一步；</li>
<li>点击安装；安装完成。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021649769069-40e230dc492d89e-20230219202620797.png" alt="img"></p>
<h2 id="破解成功"><a href="#破解成功" class="headerlink" title="破解成功"></a>破解成功</h2><p>桌面快捷方式运行软件，“帮助-关于Xmind”就是激活版的了。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/021649769071-b1a196157454e2c.png" alt="img"></p>
<h2 id="激活补丁下载地址"><a href="#激活补丁下载地址" class="headerlink" title="激活补丁下载地址"></a>激活补丁下载地址</h2><blockquote>
<p>PS: 破解补丁页面提取人数过多，导致分享的百度网盘链接容易被封：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/020202164604365771068.jpeg" alt="Webstorm 2022.3.1破解补丁分享失败">蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p><strong>需要的小伙伴，扫描下方公众号二维码，或者关注公众号： <code>徐公</code>，回复关键字：<code>xmind</code>, 即可免费无套路获取激活码、破解补丁，持续更新中~。</strong></p>
<p><a href="docs.qq.com/doc/DUmxYQk9lZ1hPa1JF">【腾讯文档】Xmind 2022.3.2 最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效)</a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0202020220230219163502-20230219204318099.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Xmind</tag>
      </tags>
  </entry>
  <entry>
    <title>Xshell7、Xftp7、Xlpd7-安装破解版教程，Xshell激活密钥激活码破解版（亲测可用）</title>
    <url>/p/38054.html</url>
    <content><![CDATA[<p>Xshell Plus 7是由 Xftp 7和 Xshell 7组成的套餐，因为这两项应用搭配使用的用户很多，特意推了组合版本，一次安装即可使用这两个应用，让您在访问终端的同时能进行多窗口传输、编辑文件，提高工作效率。</p>
<p>本篇文章主要为大家介绍Xshell Plus 7的安装、激活与换机转移许可证的方法。</p>
<blockquote>
<p><strong>PS: 本教程更新时间: 2022年7月3日~</strong></p>
<p><strong>申明：本 Xshell Plus 7 激活版收集于网络，请勿商用，仅供个人学习使用，如有侵权，请联系作者删除.</strong></p>
</blockquote>
<p>硬件要求：Intel® Pentium 或更快的CPU</p>
<p>系统要求：Xshell Plus 7——Microsoft Windows® 10 &#x2F; 8.1 &#x2F; 8 &#x2F; 7</p>
<p>Xshell 7——Microsoft Windows® 10 &#x2F; 8.1 &#x2F; 8 &#x2F; 7</p>
<p>Xftp 7——Microsoft Windows® 10 &#x2F; 8.1 &#x2F; 8 &#x2F; 7，Windows Server 2008及更新版本</p>
<p><strong>软件安装</strong></p>
<p>\1. 双击下载好的Xshell Plus 7安装包，打开安装向导，选择“下一步”。</p>
<p>2.请您仔细阅读用户许可协议，同意请勾选“我同意许可证协议中的条款”，并选择“下一步”。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030721-773c37.jpeg" alt="img"></p>
<p>3.选择程序安装路径，默认在C盘，需要更改请选择“浏览”，完成请选择“下一步”。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030721-7437ce.jpeg" alt="img"></p>
<p>4.安装向导准备就绪，可以开始安装了，继续请选择“安装”。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030721-5e481b.jpeg" alt="img"></p>
<p>5.正式开始安装，该过程会持续几分钟，请耐心等待，不要关闭或重启电脑。</p>
<p>6.选择“完成”，完成安装程序。</p>
<p><strong>软件激活</strong></p>
<p><strong>无需激活！！官方免费版，安装即可使用！！永久有效</strong></p>
<p>其他很多的教程，需要下载什么注册机，断网再安装，各种复杂操作。</p>
<p>本教程提供激活安装包，是官方的免费版，安装完成即可正常使用，不需要额外的激活激活操作。</p>
<p><strong>安装完成截图：</strong></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030721-ffdd96.png" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030721-3e72a3.png" alt="img"></p>
<h3 id="激活补丁下载地址"><a href="#激活补丁下载地址" class="headerlink" title="激活补丁下载地址"></a>激活补丁下载地址</h3><blockquote>
<p>PS: 激活补丁页面提取人数过多，导致分享的百度网盘链接容易被封：</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030721-c294ac.png" alt="img"></p>
<blockquote>
<p>蛋疼ing，为限制人数，目前暂不提供页面直接提取，</p>
<p><strong>改为从笔者公众号提取</strong></p>
<p>。</p>
</blockquote>
<p><strong>需要的小伙伴，扫描下方公众号二维码，或者关注公众号：</strong> <strong>徐公</strong>，回复关键字：<strong>xshell</strong> , 即可免费无套路获取激活码、激活补丁，持续更新中~。</p>
<p><a href="docs.qq.com/doc/DUnNZTnBVZE54Z0l3">【腾讯文档】XShell 2022.3.2 最新激活安装教程，附激活码(2023 年 2 月 10 号，亲测有效）  </a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030721-53c820.png" alt="img"></p>
<p><a href="docs.qq.com/doc/DUnNZTnBVZE54Z0l3">  </a></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Xshell7, Xshell7</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/p/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>2023 年 PhpStorm 激活破解教程，长期更新（2023 年 2 月亲测可用）</title>
    <url>/p/46726.html</url>
    <content><![CDATA[<p>本文讲的是支持2022.3.2最新版本的PhpStorm破解、PhpStorm激活码、PhpStorm安装、PhpStorm永久激活码的最新永久激活教程，本文有mac和windows系统的PhpStorm安装教程。</p>
<h2 id="1-下载安装PhpStorm"><a href="#1-下载安装PhpStorm" class="headerlink" title="1.下载安装PhpStorm"></a>1.下载安装PhpStorm</h2><p> 先去<a href="https://www.jetbrains.com/zh-cn/phpstorm/download/other.html">官网</a>下载，我这里下载的是最新版本的2022.2.1，目前测试过2021以上版本均可使用以下破解方式。（<strong>尽量优先使用 2022.2.1 版本，太新的版本有可能激活失败</strong>）</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/image-20230225105149473.png" alt="image-20230225105149473"></p>
<p>安装然后打开,点击next<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/WechatIMG461.webp" alt="PhpStorm破解"></p>
<p>我这里是全部勾选，然后next<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/WechatIMG462-20230225102459149.webp" alt="PhpStorm破解"></p>
<p>安装好后打开<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/WechatIMG463.webp" alt="PhpStorm破解"></p>
<h2 id="2-下载破解工具"><a href="#2-下载破解工具" class="headerlink" title="2.下载破解工具"></a>2.下载破解工具</h2><ul>
<li>下载破解工具激活</li>
<li>为了防止爬虫，因此扫描关注微信公众号 <strong>徐公</strong>， 输入 <strong>phpstorm</strong> 获取， <a href="https://kdocs.cn/l/cg61fdzW9VNN">PhpStorm 最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效） </a></li>
<li>先把PhpStorm关闭退出。</li>
<li>打开下载好的激活包（下载后记得不要删掉，然后安装的路径尽量不要带中文路径、删掉就会失效的）</li>
</ul>
<h3 id="windows的样子"><a href="#windows的样子" class="headerlink" title="windows的样子"></a>windows的样子</h3><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2ad799ce1ae3127457881c0e3ab6f313_.webp" alt="PhpStorm破解"></p>
<h3 id="mac的样子"><a href="#mac的样子" class="headerlink" title="mac的样子"></a>mac的样子</h3><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220823112556.webp" alt="PhpStorm破解"></p>
<ul>
<li>打开scripts文件<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220823112608.webp" alt="PhpStorm破解"></li>
</ul>
<h2 id="3-windows的PhpStorm激活"><a href="#3-windows的PhpStorm激活" class="headerlink" title="3.windows的PhpStorm激活"></a>3.windows的PhpStorm激活</h2><p>先执行unistall-current-user.vbs,直接双击打开，此步骤是为了防止之前有过激活信息，确保当前环境变量下没有激活工具的变量信息，可先执行卸载脚本在再进行后面的激活操作，避免激活失败。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/c019644cd07c61bd38effe3c3def8f36_.webp" alt="PhpStorm破解"></p>
<p>出现弹框done说明成功</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/5ae80c0113f5bc2355b6ddd5cb814157_.webp" alt="PhpStorm破解"></p>
<p>然后再执行install-current-user.vbs,直接双击打开即可<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/58367cb756eccf481b609dfc7a83b364_.webp" alt="PhpStorm破解"></p>
<p>这里需要等待10秒左右才会出现第二个done弹框，才是成功</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/d386bd6340e2aac9d381e70869b35901_.webp" alt="PhpStorm破解"></p>
<ul>
<li>然后再输入对应的激活码即可，文章上面扫公众号二维码获取</li>
</ul>
<h2 id="4-mac的PhpStorm激活"><a href="#4-mac的PhpStorm激活" class="headerlink" title="4.mac的PhpStorm激活"></a>4.mac的PhpStorm激活</h2><ul>
<li>先打开终端</li>
<li>先运行uninstall.sh</li>
<li>此步骤是一键帮你去掉以前所激活过留下的东西，解决key is invalid的问题。防止激活失败</li>
<li>然后终端输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">sh /Users/chen23/Downloads/jihuo-tool/scripts/uninstall.sh </span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220823112612.webp" alt="PhpStorm破解"></p>
<p>这里直接把uninstall.sh拖动到终端即可。记得mac运行是</p>
<p>sh xxxxx去运行.sh文件（记得sh后面加空格加路径）</p>
<p>出现done说明成功。<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220823112616.webp" alt="PhpStorm破解"></p>
<p>再执行install.sh，与上面同理，出现done，the kill xxxxx 说明成功。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220823112619.webp" alt="PhpStorm破解"></p>
<p>然后关闭PhpStorm，重新打开PhpStorm，输入破解码激活即可</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/WechatIMG465-20230225102707194.webp" alt="PhpStorm破解"></p>
<p>然后就成了，时间是假的，已经永久激活了，而且是官网最新版本哦，如果你重新更新了，再执行上面的操作即可。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/WechatIMG466.webp" alt="PhpStorm破解"></p>
<h2 id="激活补丁下载地址"><a href="#激活补丁下载地址" class="headerlink" title="激活补丁下载地址"></a>激活补丁下载地址</h2><blockquote>
<p>PS: 破解补丁页面提取人数过多，导致分享的百度网盘链接容易被封：<img src="https://img-blog.csdnimg.cn/img_convert/713e3cc737b92d94d01148761e55a64d.jpeg" alt="Pycharm 2022.2.3破解补丁分享失败">蛋疼ing，为限制人数，目前暂不提供页面直接提取，改为从文档提取</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>phpstorm</strong>，会自动将激活码发送给你</p>
<p><a href="https://kdocs.cn/l/cg61fdzW9VNN">PhpStorm 最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效） </a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/20230225102930.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>PhpStorm</tag>
      </tags>
  </entry>
  <entry>
    <title>microsoft office2021 怎么激活破解？office2021安装破解详细图文教程</title>
    <url>/p/56697.html</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2020120115465628.jpg" alt="microsoft office2021中文破解版"></p>
<p><strong>office2021</strong>全称叫做Microsoft Office 2021 Preview早期预览版，此版本尚未对外公布，或多或少有点小bug是在所难免的，因此十分适合想要尝鲜的小伙伴体验。该软件集合了大部分常用的套件，包含Word、PowerPoint、Excel、Visio、Outlook、Access等等，如果你需要制作文档、幻灯片、表格的话，可以自定义选择安装Word、PPT、Excel三大组建，不需要的套件不勾选即可，设计的十分人性化，从而满足用户多种办公业务的需求。由于办公的文件较多，放在电脑本地不仅交流不方便，也有可能丢失，该软件特别推出了云存储功能，你可以上传自己的办公文件至云端，避免丢失的问题，也可以和其他同事共同在线编辑你的文件。</p>
<p>PS：本站提供的是<strong>office2021破解版</strong>，并且是中文版本，利用内置的破解工具可以安装和激活软件，亲测有效，详细的使用方法可以参考下文操作，有需要的小伙伴抓紧时间来下载使用吧。</p>
<h3 id="office2021破解版安装教程："><a href="#office2021破解版安装教程：" class="headerlink" title="office2021破解版安装教程："></a>office2021破解版安装教程：</h3><p>1、下载本站提供的文件，得到OfficeToolPlus.exe，此文件可以用来安装和激活软件；</p>
<p>下载地址见这里：<a href="https://kdocs.cn/l/ctjkIJHI0GsF">office2021 下载地址</a></p>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>office</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230211154134.png"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2020120115465629.jpg" alt="img"></p>
<p>2、双击.exe文件，此时提示缺少.net环境，点击是，便会自动进行安装运行软件所需的环境；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2020120115465630.jpg" alt="img"></p>
<p>3、选择好软件的安装路径；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2020120115465631.jpg" alt="img"></p>
<p>4、接下来软件会自动进入OfficeToolPlus主界面，点击部署；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2020120115465632.jpg" alt="img"></p>
<p>5、在安装office之前一定要卸载之前的旧版本，在产品选项中选择office专业增强版2021，选择64位，还需要选择office tool plus安装模块，点击右上角的开始部署；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2020120115465633.jpg" alt="img"></p>
<p>6、正在后台进行在线下载以及安装，请耐心等耐；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2020120115465634.jpg" alt="img"></p>
<p>7、如果在安装途中360卫士弹出，选择允许即可；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2020120115465635.jpg" alt="img"></p>
<p>8、好了安装完成，直接点击关闭按钮；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2020120115465736.jpg" alt="img"></p>
<p>9、在OfficeToolPlus主界面中，点击激活，此时选择office专业增强版2021批量版；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2020120115465737.jpg" alt="img"></p>
<p>10、点击安装许可，等待右侧操作结果提示激活完成即可；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2020120115465738.jpg" alt="img"></p>
<p>11、在开始菜单中找到自己需要使用的软件，此处以Excel为例；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2020120115465739.jpg" alt="img"></p>
<p>12、如图所示，成功激活可以永久免费使用，以上就是microsoft office2021中文破解版安装教程，祝大家使用愉快。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2020120115465740.jpg" alt="img"></p>
<h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>1、发现改进的搜索和导航体验</p>
<p>可更加便捷地查找信息。利用新增的改进查找体验，您可以按照图形、表、脚注和注释来查找内容。改进的导航窗格为您提供了文档的直观表示形式，这样就可以对所需内容进行快速浏览、排序和查找。</p>
<p>2、与他人同步工作</p>
<p>重新定义了人们一起处理某个文档的方式。利用共同创作功能，您可以编辑论文，同时与他人分享您的思想观点。对于企业和组织来说，与OfficeCommunicator的集成，使用户能够查看与其一起编写文档的某个人是否空闲，并在不离开Word的情况下轻松启动会话。</p>
<p>3、几乎可从在任何地点访问和共享文档</p>
<p>联机发布文档，然后通过您的计算机或基于WindowsMobile的Smartphone在任何地方访问、查看和编辑这些文档。您可以在多个地点和多种设备上获得一流的文档体验。</p>
<p>4、向文本添加视觉效果</p>
<p>您可以向文本应用图像效果(如阴影、凹凸、发光和映像)。也可以向文本应用格式设置，以便与您的图像实现无缝混和。操作起来快速、轻松，只需单击几次鼠标即可。</p>
<p>5、将您的文本转化为引人注目的图表</p>
<p>您可将视觉效果添加到文档中。您可以从新增的SmartArt图形中选择，以在数分钟内构建令人印象深刻的图表。SmartArt中的图形功能同样也可以将点句列出的文本转换为引人注目的视觉图形，以便更好地展示您的创意。</p>
<h3 id="软件特色"><a href="#软件特色" class="headerlink" title="软件特色"></a>软件特色</h3><p>1、提供了更好的工作环境。</p>
<p>2、拥有更好的表格设计能力。</p>
<p>3、在新版的Excel软件上增加了更好的计算功能。</p>
<p>4、可以在添加函数的时候提供更好的插入方式。</p>
<p>5、内置的函数更加丰富，计算 过程更轻松。</p>
<p>6、对于制作数据模型也是很好用的。</p>
<p>7、office2021在设计PPT方面也更新多种功能。</p>
<p>8、提供了更好的图标设计方案。</p>
<p>9、支持更好的UI界面，滚动查看PPT效果更好。</p>
<p>10、在设计PPT的时候提供了在线插入图标的功能。</p>
<p>11、也提供了一个图标库，方便您轻松插入需要的图标。</p>
<p>12、Word的新版功能也是很多的。</p>
<p>13、提供了界面色彩调整功能，编辑Word效果更好。</p>
<p>14、提供了新的“沉浸式学习模式”。</p>
<p>15、排版文章功能更好，调整文字间距、页面幅度等更好。</p>
<p>16、另外新版的Word也是可以将文章朗读的。</p>
<p>17、增加了新的微软语音引擎，轻松将文字转换语音。</p>
<h2 id="软件下载地址"><a href="#软件下载地址" class="headerlink" title="软件下载地址"></a>软件下载地址</h2><p>下载地址见这里：<a href="https://kdocs.cn/l/ctjkIJHI0GsF">office2021 下载地址</a></p>
<blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030621-38e9a6.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">IDEA 2022.3.2破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>office</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230211154134.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title>16年，平凡而又收获的一年</title>
    <url>/p/28451.html</url>
    <content><![CDATA[<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53958513">文章首发地址CSDN:</a></p>
<p>岁月如水，时间飞逝，转眼间，已经到了年尾，即将引来新的一年，我要赶紧抓住16年的尾巴，写篇文章记录一下我16年的点点滴滴。篇章大概如下，学习&amp;工作室篇，实习篇，盛夏六月， 博客篇，秋招篇，情感篇，展望未来。</p>
<h2 id="学习-amp-工作室篇"><a href="#学习-amp-工作室篇" class="headerlink" title="学习&amp;工作室篇"></a><strong>学习&amp;工作室篇</strong></h2><p><img src="http://ww3.sinaimg.cn/mw690/9fe4afa0jw1fbabc2n6myj206g064aa3.jpg"></p>
<p>春节弹指一瞬间，转眼间已经到了正月18，迷恋着春节家人朋友团聚时候喜悦的气氛，我依依不舍地乘着大巴回到了学校，开始新的学期。在大学的时光里，没有想高三时光一样，三点一线。在大学里，多的是自由。每天，我往返于工作室和宿舍之间，那时每天只想着能争取多点时间 学习自己感兴趣的东西————也就是我现在所从事的职业Android开发。每天为了挤出一个多小时的时间来学习，尝试过中午不睡觉，坚持了两个多星期。结果是中午不睡，晚上崩溃———下午不睡觉，下午学习的时候还是精神蓬勃的，到了晚上，睡意就来了，经常打瞌睡。结果呢，相信你也猜到了，学习的东西反而少了，效率下降了好多。</p>
<p>原因，浅而明显，第一，一个人的精力是有限的，我们要注意劳逸结合；第二，以前我都是有午睡的习惯的，突然改变了习惯，肯定要有一段适应期。</p>
<p>至于说到劳逸结合，高中的时候就深有体会，大学写编程的时候更是深深刻在心里。有时候，写编程，在调bug的时候，在哪里捣鼓了几个小时，终究是被它折服了，被它弄得心浮气躁。这时候不烦放下手头的工作，出去走走，感受一下大自然，放松一下头脑，接着回来工作，许多时候你会发现bug一下子就解决了。这个时候你通常我会感慨，我擦，我是一个傻逼，这么简单的问题竟然弄了这么久，心里头不禁也涌上来一股满足感————那是一种付出辛苦努力而得到的满足。</p>
<p>有许多人说，写编程会让一个人性格变得烦躁。哈哈，有时候确实会，不过，有时候我更想说的是，写编程往往是我们变得更加耐心和细心。每一次我们在跟bug作斗争的时候，我们的耐心正在一点点培养。</p>
<p>许多人说程序员活像闷葫芦，<strong>钱多话少死得早</strong>。怎么说呢，这句话还是有一点道理的，首先钱多呢，这个就不必详讲了，相对大多数打工族来说，程序猿的工资相对来是还是比较高的。话少呢，确实也有一定的道理，因为我们整天面对的是电脑，比较少与人沟通交流，久而久之，语言表达能力肯定会退化不少的，有时候在与人交谈中，也不知道谁聊什么话题好，这就给了大家一种印象——话少。至于“死得早”，我们知道程序猿加班相对比较多，尤其是项目要上线的时候，经常会加班，而且工作强度相对来说有比较强。确实，如果你不注意锻炼的话，真的对身体伤害很大的。但只要你注意一下，每个星期坚持两三次锻炼，也是照样精神饱满的。</p>
<h2 id="实习篇"><a href="#实习篇" class="headerlink" title="实习篇"></a><strong>实习篇</strong></h2><p><img src="http://ww1.sinaimg.cn/mw690/9fe4afa0jw1fbabdkdyimj209s064glk.jpg"></p>
<p>说起实习的那段时间，那真的是一段艰辛岁月。每天实习完回到宿舍，有时候身心俱疲，根本就提不起精神来继续学习，我也因此颓废了一段时间，每天回到宿舍后，就开始看电影，看电视剧——后面我调整了自己的状态，在实习完回来的时候继续学习。</p>
<p>如果你问我那段时间累不累？我可以很肯定地告诉你，累成狗。但是我从未后悔过，因为一段岁月过得很充实，正如我们高三备考的那段岁月——只为心中的那一个目标。</p>
<h2 id="盛夏六月"><a href="#盛夏六月" class="headerlink" title="盛夏六月"></a><strong>盛夏六月</strong></h2><p><img src="http://ww1.sinaimg.cn/mw690/9fe4afa0jw1fbabcvlqtmj20av064q31.jpg"></p>
<p>每天的五六月份，都是我们学校的毕业季。送走了一拨人，又即将引来新的一拨人，注入新的血液。在这段时间，对我感触最深的是，应该是我二哥和我社团的几个师兄和师姐牌毕业照的时候，他们说大学时光飞快，要好好珍惜接下来的大学时光。</p>
<p>有时候也在想，一年后的自己会是怎样的呢？</p>
<p><strong>真的很感谢他们，曾今他们在我大学最迷茫的时候引导了我，为我指点迷津。</strong></p>
<h2 id="博客篇"><a href="#博客篇" class="headerlink" title="博客篇"></a><strong>博客篇</strong></h2><p><img src="http://ww2.sinaimg.cn/mw690/9fe4afa0jw1fbabeiodgfj208l064jrf.jpg"></p>
<p>我正式写博客的时候应该是四月底五月初的时候，像大多数人一样，刚开始写博客的时候完全没有思路，写出来的文章条理性差，访问量也很少。我记忆比较深的一篇博客是我在写这篇博客的时候：<br><a href="http://blog.csdn.net/gdutxiaoxu/article/details/51292440">二分查找的相关算法题</a> ，那时候些博客写到深夜12点多，就发布了出去，第二天醒来，访问量竟然超过一千了。一千的访问量对于经常写博客或者有一定知名度的博客来说，根本就是小菜一碟，算不了什么。但对于我之前几篇博客都是几十最多一百多的访问量的人来说，这无疑是意义非凡的。这意味着对我这篇博客质量的认可，正如我们付出的努力得到认可的喜悦一样。</p>
<h3 id="为什么写博客呢"><a href="#为什么写博客呢" class="headerlink" title="为什么写博客呢"></a>为什么写博客呢</h3><p>（当然我不是在说我写博客有多了不起，我只是在分享一下自己的经历而已————  一些人或许会这样想，坚持写博客有什么了不起的，网上一大堆人在写博客，怎么不见他们在说写博客辛苦，或者吹捧。<strong>有一些腹黑的人更恶劣的，甚至会骂你，谴责你，不懂得谦虚，骄傲自大。</strong>  </p>
<p>对于第一类人，分情况讨论一下，如果是那种整天无所事事的人，那我会嗤之以鼻，如果是那种很努力的人，整天辛苦奋斗的人，那我们写博客确实算不了什么。</p>
<p>而对于那些动不动就站在道德制高点的那些人，我真的不知道说写什么说。这种人我们真的不必跟他们太较真，较真你就输了。</p>
<p>总之，说了这么久，只想表达这样的意思，坚持走自己认为正确的路，世界那么大，让别人说去吧。</p>
<p>这里分享一个故事，是几天前发生的，是Android开发者 StormhZhang 的故事，故事概要是这样的，StromZhang 在他的公众号推送了一篇广告，结果有一些人就说他作为一名技术总监，还发广告，差不差这点钱，进而有提升到道德方面，有一些人更过分，甚至流言谩骂。殊不知他做技术分享帮助了多少人？这里就不过多介绍了，欲知详情，请自行搜索。</p>
<p>哈哈，扯蛋了这么久，终于来说我能够坚持下来写博客的原因呢？原因其实很简单，对于经常写博客的人，我相信他们都有一个共同点，写着写着就爱上博客了。即使说没有写博客，也喜欢用笔记将自己认为有价值的东西记录下来，just so<br>simple。当然，写博客有几个好处，锻炼自己的写作能力，提高自己的思维，更难能可贵的是，你能够在写博客的时候遇到一些志同道合的朋友。目前我还没有遇到，<strong>期待img</strong>，说一下我的一个经历，之前有一个技术疑问一直解决不了，后面在写相关博客的时候，在博客的最后提了出来，后面有热心的网友帮忙解答了，那时候真的很感动。</p>
<h2 id="秋招篇"><a href="#秋招篇" class="headerlink" title="秋招篇"></a><strong>秋招篇</strong></h2><p>说起我的秋招之旅，可能对于身边的人来说，我相对是比较轻松的。可是对于许多大神来说，差的还不是一截半截。记得我经常说过一句话，比上不足，比下有余。</p>
<p>八月中旬的时候，秋招的号角正式吹响了。刚开始是一些BAT之类的公司内推，筛选简历或者笔试，很遗憾，我全部都没有通过。九月中旬的时候，BAT，网易，CVTE等这些知名企业开始校招了，很遗憾笔试也是全部没有通过。一方面是今年校招缩水了，招的人很少，一方面可能自己的笔试成绩也不是十分突出。那时候，心底是有点慌的，因为校招开始了半个多月，竟然一个笔试都没有通过，面试也没有。</p>
<p>于是，我自己独自一人来到腾讯面试的地方——喜来登大酒店，想去霸面。刚开始，想趁着他们在面试的时候跟着他们上去，可是还是被挡在电梯外面了。于是就去霸面区交了简历，后面想“趁水摸鱼” 坐上电梯，直接去找面试官，跟他说想霸面。可是还是被挡在第一外面了。于是就没有继续找机会坐上电梯去了。结果的最后，就是在里面空坐了一天，霸面fail，一天就这样 get over。其实，那时候如果真的下定决心要上去的话，机会还是很大的，等到有房可上去的时候，跟他们一起上去就好了。之所以当时没有那样做，可能自己还没有足够的信心。可是去之前是信心满满要去霸面的，可到现场遇到一点小阻碍却退却了，也许这就是我性格的一个弱点吧。</p>
<p>到了九月底的时候，也开始面试了，陆续收到了美图，久邦数码，步步高等公司的offer，最终签了美图公司，在十月初的时候也结束了我的秋招之旅。</p>
<p>在秋招，对于面试，我也没有一些很好的技巧。对于技术岗位的，我只能说三分口才，七分实力。对于搞技术的人，千万不要忽略语言表达能力方面的培养与提高，一方面在面试的时候你会吃很大亏，另一方面对你以后人生的发展也是很不利的。我在表达这方面就吃过挺多亏的，现在表达能力还是有待提高。</p>
<h2 id="情感篇"><a href="#情感篇" class="headerlink" title="情感篇"></a><strong>情感篇</strong></h2><p>说了这么久，来稍微说一点轻松一点的东西呢？那就是说情感方面的呢，其实我的情感篇真的没什么可说的，大学到现在也没谈过恋爱，可能是一直没有遇到合适的人吧，或者是我的情商有点低吧。谁说得清楚呢？</p>
<p>至于亲情方面，我想说的是，有空就多回家看看吧。对于父母来说，子女经常回家就是最好的礼物呢，比得多钱财万贯。</p>
<h2 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h2><p><img src="http://ww2.sinaimg.cn/mw690/9fe4afa0jw1fbabfpa3r9j20b2064jrg.jpg"></p>
<p>旧的一年即将过去了，新的一年即将到来。在新的一年，大概有以下计划</p>
<ol>
<li>在毕业前来一次说走你就走的旅行（不过到时候实习不知道有没有时间，尽量争取吧）</li>
<li>CSDN争取申请到博客专家号，现在是准博客专家</li>
</ol>
<p>截张图记录一下我现在博客的访问量</p>
<p><img src="http://ww3.sinaimg.cn/large/9fe4afa0jw1fbab6l662fj20770el753.jpg"></p>
<p>17年，即将到来的新的一年，希望家人朋友身体健康，实习，工作顺利。最后的最后，为了青春和热血，再次拼搏加油，致我的青春，青春万岁。</p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53958513">文章首发地址CSDN:</a></p>
]]></content>
  </entry>
  <entry>
    <title>2021 Android 如何自学，Android 学习路线分享，一位 5 年中大厂老哥跟你聊聊</title>
    <url>/p/3688.html</url>
    <content><![CDATA[<p>光阴似箭，日月如梭，时间真的过得飞快。<br>加上实习，从事 Android 开发，差不多有 5 年了，在这里，我分享一下我的经验，在 Android 的学习路上，我是站在巨人的肩膀上成长起来的。</p>
<p>大概分为三个部分</p>
<blockquote>
<p>一、Android 职业规划<br>二、Android 学习路线<br>三、如何进入大厂<br>三、Android 学习资料分享</p>
</blockquote>
<h1 id="Android-成长生涯"><a href="#Android-成长生涯" class="headerlink" title="Android 成长生涯"></a>Android 成长生涯</h1><p><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/02/%E6%88%90%E9%95%BF%E9%98%B6%E6%A2%AF.jpeg"></p>
<h2 id="1-3-年"><a href="#1-3-年" class="headerlink" title="1-3 年"></a>1-3 年</h2><p>前 3 年，我觉得是我们成长最快的时候。</p>
<p>尤其是刚开始工作的一年，刚开始接触项目，我们会接触到很多新知识，比较网络框架的封装，Android 架构 MVVN，MVC，MVP 等。</p>
<p><strong>这段时期是我们进步最快的时候，因为很多东西我们都不会，我们会逼着自己去学习。</strong></p>
<p>第二到第三年，也是我们成长的关键时期。这时候，在项目中，我们基本会自己独立负责需求。这时候的我们，大多数基本功能都可以自己独立实现。需要注意的是<strong>代码风格和代码思维的培养</strong>。</p>
<p><strong>代码风格</strong>，指的是编码习惯。比如方法命名，方法的合理拆分，适当添加注解，注释。听起来可能会很虚，但是千万别小看这些细节。反正我在组里见过一些工作五六年的，代码一坨一坨的，像 si 一样。</p>
<p><strong>代码思维</strong>，有点类似于人的视野和思考方式吧。很多时候，实现某个效果，有很多种方案。我们为了应付需求，可能会随便选择一种，没有去了解其他方案。而这恰恰错过了我们成长的最佳时期。</p>
<p><strong>记住，永远别给自己设限，或许在编程的路上会遇到很多问题，但是总会有解决方法的，而这取决你的态度。</strong></p>
<h2 id="3-5-年"><a href="#3-5-年" class="headerlink" title="3-5 年"></a>3-5 年</h2><p>这个时期，不出意外，我们基本都是高级工程师了。这时候大多数人会遇到瓶颈，<strong>不知道学些什么好。好像什么都会，但是不够深入</strong>。我也遇到这样的情况，现在正在深挖。</p>
<p>这方面我暂时也给不了太多意见，只能说，选择一个方向，静下心来，去学习，相信能收获到我们想要的。</p>
<p>学习方向有很多，比如 Android 性能优化（启动，卡顿， Crash 治理）， JNI C++，gradle 打包，编译速度，音视频等等，这些都是大的方向。</p>
<p><strong>最近写的一些文章，自我感觉还行，有兴趣的可以看看。</strong></p>
<p><a href="https://mp.weixin.qq.com/s/xWYe-uxgXTPuitYcLgXYNg">Android 启动优化（一） - 有向无环图</a></p>
<p><a href="https://mp.weixin.qq.com/s/ShfxD_Z7M_NuWYNodn-vqA">Android 启动优化（二） - 拓扑排序的原理以及解题思路</a></p>
<p><a href="https://mp.weixin.qq.com/s/YRUpf9jKEwIHV0A4FqltXg">Android 启动优化（三）- AnchorTask 开源了</a></p>
<p><a href="https://mp.weixin.qq.com/s/6RKco9JTm6ZrFyw99k9Rlg">Android 启动优化（四）- AnchorTask 是怎么实现的</a></p>
<p><a href="https://mp.weixin.qq.com/s/0MsJa0ZepWkPUs-ymnVb-w">Android 启动优化（五）- AnchorTask 1.0.0 版本正式发布了</a></p>
<p><a href="https://mp.weixin.qq.com/s/7_dQd2wGZYKWf9kHNlv2fg">Android 启动优化（六）- 深入理解布局优化</a></p>
<h2 id="5-年之后"><a href="#5-年之后" class="headerlink" title="5 年之后"></a>5 年之后</h2><p><a href="https://mp.weixin.qq.com/s/xCFa2pHxhFGdn51dWoDdQg">技术人的四大出路，你适合哪一个</a></p>
<p>大多数技术人，一般会有以下方向。</p>
<ul>
<li>第一：成为技术大神，比如架构师，及技术专家等。</li>
<li>第二：技术管理，比如技术总监等。</li>
<li>第三：技术转型，如转项目管理，产品等，你牛逼的话，说不定下一个张小龙就是你（哥们，想多了，那有这么容易）。</li>
<li>第四：自主创业，做自媒体等</li>
</ul>
<p>我目前来说，可能会选择第一条路吧，成为一名技术专家。</p>
<p><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/02/20210410172556.png"></p>
<p><strong>在技术的路上，或许会很累，很难，可那又怎样呢</strong></p>
<p>35 岁中年职业危机，很多职业都有，不仅仅局限于程序员。</p>
<p>从本质上面说，自身竞争力下降占很大原因。毕竟，优秀的人才从来不缺少机会。</p>
<p><strong>既然选择了，便只顾风雨兼程。</strong></p>
<p>为了未来有更多的选择，从现在开始，朝着自己的目标努力奋斗吧，书写属于自己的人生。</p>
<hr>
<h1 id="Android-学习路线"><a href="#Android-学习路线" class="headerlink" title="Android 学习路线"></a>Android 学习路线</h1><p><strong>下面，说一下 Android 的学习路线，不会很具体，主要是从大的方面来说，感兴趣的可以看一下。</strong></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/21/0120210410174904.png"></p>
<h2 id="搭建基本的开发环境，敲下-Hello-world"><a href="#搭建基本的开发环境，敲下-Hello-world" class="headerlink" title="搭建基本的开发环境，敲下 Hello world"></a>搭建基本的开发环境，敲下 Hello world</h2><p>首先你配置好电脑开发环境。首先需要配置 Java，AndroidStudio 的开发环境。</p>
<p>现在的 IDE 对比几年前的，真的是方便多了，可以自动帮我们配置好环境变量。还记得当年刚开始配环境的时候，<strong>折腾了两三天。在配置变量的时候，有时候英文的逗号输成中文的，在 cmd 窗口输入 Java，一直提醒没有这个命令，一把鼻涕一行泪</strong>。</p>
<p><strong>依稀还记得，当配置完环境之后，敲下第一段程序 <em>Hello world</em> 时的那份喜悦。</strong></p>
<h2 id="掌握基本的语法和常用的数据结构"><a href="#掌握基本的语法和常用的数据结构" class="headerlink" title="掌握基本的语法和常用的数据结构"></a>掌握基本的语法和常用的数据结构</h2><p>第一：你要先掌握基本的语法，可以从一些书籍开始学起。跟着书本慢慢敲，从第一个程序 Hello World 慢慢敲起，<strong>万丈高楼平地起</strong>。</p>
<p>由于 Android 是用 java 或者 kotlin 语言开发的，建议优先掌握 java 语言。这里推荐两本书籍。</p>
<ol>
<li>java 编程思想，一本很经典的 java 书籍</li>
<li>java 剑指 offer，面试神器。校招的时候，有很多面试题目，里面都有涉及到。</li>
</ol>
<p>第二：掌握基本的语法之后，常用的数据结构，数组，链表，队列，栈。这些基本的概念和语法要知道。还有线程，文件 IO 操作，网络操作。</p>
<p>学完这些之后，Java 的基本知识你大概掌握了，这时候建议你动手写一些小项目或者 Demo，比如坦克大战，计算器等，这些网上都有代码。想跟着视频一起学的话，推荐马士兵的视频，可以在我的微信公众号 <strong>程序员徐公</strong> 回复”<strong>Java</strong>“，会将教程发给你</p>
<h2 id="Android-学习入门"><a href="#Android-学习入门" class="headerlink" title="Android 学习入门"></a>Android 学习入门</h2><p>掌握这些之后，你可以去看一些 Android 入门的书籍或者一些视频。</p>
<p>书籍我推荐郭霖的第一行代码，目前出了第三版了，写得真不错。</p>
<p>视频的话，我推荐你可以看黑马的 Android 视频，里面会从一些基本语法讲起，接着是项目实战，会手把手教你实现简单的新闻客户端，360 手机卫士等等。</p>
<p>想获取黑马视频资料的话，可以去我的微信公众号<strong>程序员徐公</strong>回复”<strong>黑马</strong>“两字，会将教程发给你。</p>
<p><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/02/20210410183019.png"></p>
<h2 id="Android-进阶"><a href="#Android-进阶" class="headerlink" title="Android 进阶"></a>Android 进阶</h2><p>学习完基本的知识之后，可以去看看任玉刚的 Android 开发艺术探索，虽然是几年前出版的，但真的是精华。</p>
<p>接着，可以关注一些架构，性能优化方面的。</p>
<ul>
<li>MVC， MVP， MVVN</li>
<li>内存泄露怎么检测，常见的内存泄露有哪些</li>
<li>怎么检测 ANR，有哪些手段呢，优缺点是什么</li>
<li>怎么捕获 Crash，Java Crash 和 native crash 有哪些不同呢</li>
<li>Android 检测启动时间，启动优化怎么做，常见的 Android 启动优化手段有哪些</li>
<li>Android gradle，是怎样打包的，怎样提高编译速度</li>
</ul>
<p><strong>这里推荐几篇不错的文章</strong>。</p>
<p><a href="https://mp.weixin.qq.com/s/xWYe-uxgXTPuitYcLgXYNg">Android 启动优化（一） - 有向无环图</a></p>
<p><a href="https://mp.weixin.qq.com/s/ShfxD_Z7M_NuWYNodn-vqA">Android 启动优化（二） - 拓扑排序的原理以及解题思路</a></p>
<p><a href="https://mp.weixin.qq.com/s/YRUpf9jKEwIHV0A4FqltXg">Android 启动优化（三）- AnchorTask 开源了</a></p>
<p><a href="https://mp.weixin.qq.com/s/6RKco9JTm6ZrFyw99k9Rlg">Android 启动优化（四）- AnchorTask 是怎么实现的</a></p>
<p><a href="https://mp.weixin.qq.com/s/0MsJa0ZepWkPUs-ymnVb-w">Android 启动优化（五）- AnchorTask 1.0.0 版本正式发布了</a></p>
<p><a href="https://mp.weixin.qq.com/s/7_dQd2wGZYKWf9kHNlv2fg">Android 启动优化（六）- 深入理解布局优化</a></p>
<h2 id="关注前沿技术"><a href="#关注前沿技术" class="headerlink" title="关注前沿技术"></a>关注前沿技术</h2><p>关注前沿技术，可以去一些论坛，公众号上面逛逛。</p>
<p>论坛的话，推荐掘金，CSDN</p>
<h2 id="Android-技术公众号的话，推荐鸿洋，郭霖的公众号，当然还有我的公众号程序员徐公。文章的质量算是比较高的。-最后，有空的时候多去-github-或者-google-官网-看看，有什么新技术，一般第一时间会更新。"><a href="#Android-技术公众号的话，推荐鸿洋，郭霖的公众号，当然还有我的公众号程序员徐公。文章的质量算是比较高的。-最后，有空的时候多去-github-或者-google-官网-看看，有什么新技术，一般第一时间会更新。" class="headerlink" title=" Android 技术公众号的话，推荐鸿洋，郭霖的公众号，当然还有我的公众号程序员徐公。文章的质量算是比较高的。 最后，有空的时候多去 github 或者 google 官网 看看，有什么新技术，一般第一时间会更新。
 
 
 "></a> Android 技术公众号的话，推荐鸿洋，郭霖的公众号，当然还有我的公众号<strong>程序员徐公</strong>。文章的质量算是比较高的。<br><br> 最后，有空的时候多去 <a href="https://github.com/">github</a> 或者 <a href="https://developer.android.com/">google 官网</a> 看看，有什么新技术，一般第一时间会更新。
 
 
 </h2><h1 id="如何进入大厂"><a href="#如何进入大厂" class="headerlink" title="如何进入大厂"></a>如何进入大厂</h1><p>面试是一个双向选择的过程，我们要保持足够的自信。</p>
<p>在我看来，要进入大厂，有 4 点最重要。</p>
<ol>
<li>编程能力，包括常用技术以及常用技术的原理，<strong>毕竟招人，是来干活的，不是来当爹的</strong>。</li>
<li>技术深度，在大厂，分工越来越越明确，职责越来越细。很多时候，需要的是某一个技术领域的人才，而不是什么都懂一点的全才。</li>
<li>算法。</li>
<li>软技能，沟通能力等</li>
</ol>
<h2 id="如何学习算法"><a href="#如何学习算法" class="headerlink" title="如何学习算法"></a>如何学习算法</h2><p>现如今，如果你想进入大厂，腾讯，阿里，头条，拼多多等，不管是社招还是校招，肯定都会面试到算法的。</p>
<p>相信很多人有这样的想法，<strong>面试的时候早火箭，工作的时候拧螺丝</strong>。确实，这种情况非常常见，我也认同。但没办法，谁叫我们想进入大厂呢。</p>
<p><strong>不过，这种情况也可以理解。怎么在几轮面试中确定面试者的水平呢？<br>肯定是考察算法，基础这些，原理这些</strong>。</p>
<p>虽然这些代表不了全部，但起码能在一定程度上代表了面试者的水平能力。要知道，<strong>编程语言其实都是想通的，编程思维和算法能力才是核心。</strong></p>
<p>掌握了原理，编程思维，切换到另外一门语言其实是很快的。这也就是面试官喜欢考察算法和原理的原因。</p>
<p><strong>至于要怎么学习算法，我简单归纳一下</strong></p>
<p>第一：要了解基本的数据结果，数组，链表，Map，Set，二叉树等，了解他们的优缺点，时间复杂度，空间复杂度等</p>
<p>第二：要掌握一些常见的算法，递归，迭代，八大排序，二分查找，贪心算法等</p>
<p>第三：掌握一种算法，不仅要知道 what，还要知道 why（分析各种算法的优缺点），比如 topK问题，有常见的几种解决方案，排序，快排思想，海量数据堆排序</p>
<p>第四：刚开始学的时候，可能会比较吃力，<strong>可以先刷题，慢慢找感觉，从易到难</strong>。</p>
<ul>
<li>比如，第一天，你刷这道算法题的时候看不懂，先不用着急，很多人都是这样过来的，先搜一下答案，看一下别人是怎么解决的。</li>
<li>看懂了之后，自己用代码写一遍，跑一遍。这很重要，很多时候，你以为你自己懂了，但当你在写的时候是写不出来的，在你动手写代码时，会不断加深你的印象</li>
<li>第二天，自己再写一遍，加深印象</li>
</ul>
<p>第五：学好算法不是一日之功，需要长期的积累。建议的做法是每天做一两道题，题目不在多，贵在于理解。坚持一两个月，你会发现你的感觉逐渐好起来了。</p>
<p><a href="https://github.com/gdutxiaoxu/Android_interview">https://github.com/gdutxiaoxu/Android_interview</a></p>
<h1 id="Android-学习资料分析"><a href="#Android-学习资料分析" class="headerlink" title="Android 学习资料分析"></a>Android 学习资料分析</h1><h2 id="黑马-52-期不加密视频"><a href="#黑马-52-期不加密视频" class="headerlink" title="黑马 52 期不加密视频"></a>黑马 52 期不加密视频</h2><p><strong>获取方式在微信公众号 “程序员徐公” 回复“黑马” 两字</strong></p>
<blockquote>
<p>01、安卓基础+JNI (14天)<br>02、Android应用开 发-代码版本管理和实战(1天)<br>03、android案例与项目_手机安全卫士(12天)<br>04、自定义控件与视图(2天)<br>05、android项目 实战_智慧北京(6天)<br>06、android项 目实战_谷歌应用市场(6天)<br>07、android进阶 高阶案例-QQ5.0特效专辑(2天)<br>08、android游戏开发_ 植物大战僵尸(3天)<br>09、android案例与项目_ 百度地图(1天_ 补充)<br>10、android项目实战_智能短信管理(3天_ <em>补充)<br>11、Android</em> _WebView&amp;HTML5开发(1天 _补充) </p>
</blockquote>
<h2 id="Java-马士兵视频"><a href="#Java-马士兵视频" class="headerlink" title="Java  马士兵视频"></a>Java  马士兵视频</h2><p><strong>获取方式在微信公众号 “程序员徐公” 回复“java” 两字</strong></p>
<p><strong>第一部分：J2se学习视频内容包括：</strong></p>
<blockquote>
<p>尚学堂科技_马士兵_JAVA视频教程_JDK5.0_下载-安装-配置<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_5.0_第01章_JAVA简介_源代码_及重要说明<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_5.0_第02章_递归补充<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_5.0_第02章_基础语法<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_5.0_第03章_面向对象<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_5.0_第04章_异常处理<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_5.0_第05章_数组<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_5.0_第06章_常用类<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_5.0_第07章_容器<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_5.0_第08章_IO<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_5.0_第09章_线程<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_5.0_第10章_网络<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_5.0_第11章_GUI<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_5.0_专题_日期处理<br>尚学堂科技_马士兵_JAVA视频教程_J2SE_专题_正则表达式</p>
</blockquote>
<p><strong>第二部分：j2se练习项目视频内容包括：</strong></p>
<p>第二部分：j2se练习项目视频内容包括：</p>
<blockquote>
<p>尚学堂科技_马士兵_在线聊天系统雏形视频教程_java_eclipse<br>尚学堂科技_马士兵_坦克大战视频教程_java_eclipse<br>尚学堂科技_马士兵_坦克大战图片版<br>尚学堂科技_马士兵_JAVA_坦克大战网络版视频教程<br>尚学堂科技_马士兵_snake_贪吃蛇内部视频</p>
</blockquote>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>以上是我这些年来， Android 学习路上的一些简单分享。在 Android 的学习路上，我是站在巨人的肩膀上成长起来的，同样，我也希望成为你们的巨人。</p>
<p>希望我们可以成为朋友，成长路上的忠实伙伴！</p>
<p><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/02/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BE%90%E5%85%AC%EF%BC%88%E4%B8%8D%E5%B8%A6%E6%B0%B4%E5%8D%B0%EF%BC%89.png"></p>
]]></content>
      <tags>
        <tag>个人总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Android LiveData 使用详解</title>
    <url>/p/16331.html</url>
    <content><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>本次推出 Android  Architecture Components 系列文章，目前写好了四篇，主要是关于 lifecycle，livedata 的使用和源码分析，其余的 Navigation， Paging library，Room，WorkMannager 等春节结束之后会更新，欢迎关注我的公众号，有更新的话会第一时间会在公众号上面通知。</p>
<p>目录大概如下</p>
<blockquote>
<p>1 LiveData 基本使用<br>2 自定义 Livedata<br>3  Livedata 共享数据<br>4 Livedata  小结</p>
</blockquote>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660746">Android lifecycle 使用详解</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660760">Android LiveData 使用详解</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660766">Android lifecyle 源码解剖</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660776">Android livedata 源码解剖</a></p>
<p><a href="https://github.com/gdutxiaoxu/ArchiteComponentsSample">github sample 地址： ArchiteComponentsSample</a></p>
<p><strong>程序员徐公，一位不羁的码农。</strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/4e6df41528ff27a085a266dd18b707a8.png"></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇博客中，我们讲解了 lifecycle 的使用及优点。这篇博客让我们一起来了解一下 LiveData 是怎样使用的？</p>
<hr>
<h2 id="为什么要引进-LiveData"><a href="#为什么要引进-LiveData" class="headerlink" title="为什么要引进 LiveData"></a>为什么要引进 LiveData</h2><p>LiveData 是一个可以被观察的数据持有类，它可以感知 Activity、Fragment或Service 等组件的生命周期。简单来说，他主要有一下优点。</p>
<ol>
<li><strong>它可以做到在组件处于激活状态的时候才会回调相应的方法，从而刷新相应的 UI</strong>。</li>
<li><strong>不用担心发生内存泄漏</strong></li>
<li><strong>当 config 导致 activity 重新创建的时候，不需要手动取处理数据的储存和恢复。它已经帮我们封装好了</strong>。</li>
<li>当 Actiivty 不是处于激活状态的时候，如果你想 livedata setValue 之后立即回调  obsever 的 onChange 方法，而不是等到 Activity 处于激活状态的时候才回调 obsever 的 onChange 方法，你可以使用 observeForever 方法，但是你必须在 onDestroy 的时候 removeObserver。</li>
</ol>
<p>回想一下，在你的项目中，是不是经常会碰到这样的问题，当网络请求结果回来的时候，你经常需要判断 Activity 或者 Fragment 是否已经 Destroy， 如果不是 destroy，才更新 UI。</p>
<p>而当你如果使用 Livedata 的话，因为它是在 Activity 处于 onStart 或者 onResume 的状态时，他才会进行相应的回调，因而可以很好得处理这个问题，不必写一大堆的 activity.isDestroyed()。接下来，让我们一起来看一下 LiveData  的使用</p>
<hr>
<h2 id="LiveData-使用"><a href="#LiveData-使用" class="headerlink" title="LiveData 使用"></a>LiveData 使用</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol>
<li>引入相关的依赖包</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewModel and LiveData</span></span><br><span class="line">implementation <span class="string">&quot;android.arch.lifecycle:extensions:1.1.0&quot;</span></span><br><span class="line"><span class="comment">// alternatively, just ViewModel</span></span><br><span class="line">implementation <span class="string">&quot;android.arch.lifecycle:viewmodel:1.1.0&quot;</span></span><br><span class="line"><span class="comment">// alternatively, just LiveData</span></span><br><span class="line">implementation <span class="string">&quot;android.arch.lifecycle:livedata:1.1.0&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在代码中使用</li>
</ol>
<p>LiveData 是一个抽象类，它的实现子类有 <strong>MutableLiveData</strong> ，<strong>MediatorLiveData</strong>。在实际使用中，用得比较多的是 MutableLiveData。他常常结合 ViewModel 一起使用。下面，让我们一起来看一下怎样使用它？</p>
<p>首先，我们先写一个类继承我们的 ViewModel，里面持有 mNameEvent。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">TestViewModel</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ViewModel</span> &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="title class_">MutableLiveData</span>&lt;<span class="title class_">String</span>&gt; mNameEvent = <span class="keyword">new</span> <span class="title class_">MutableLiveData</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public <span class="title class_">MutableLiveData</span>&lt;<span class="title class_">String</span>&gt; <span class="title function_">getNameEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mNameEvent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着，我们在 Activity 中创建  ViewModel，并监听 ViewModel 里面 mNameEvent 数据的变化，当数据改变的时候，我们打印相应的 log，并设置给 textView，显示在界面上。这样我们就完成了对 mNameEvent 数据源的观察。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mTestViewModel = ViewModelProviders.of(<span class="built_in">this</span>).get(TestViewModel.class);</span><br><span class="line">MutableLiveData&lt;String&gt; nameEvent = mTestViewModel.getNameEvent();</span><br><span class="line">nameEvent.observe(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">Observer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChanged</span><span class="params">(<span class="meta">@Nullable</span> String s)</span> &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;onChanged: s = &quot;</span> + s);</span><br><span class="line">        mTvName.setText(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>最后当我们数据源改变的时候，我们需要调用 livedata 的 setValue 或者 postvalue 方法。他们之间的区别是， 调用 setValue 方法，Observer 的 onChanged 方法会在调用 serValue 方法的线程回调。而<br>postvalue 方法，Observer 的 onChanged 方法将会在主线程回调。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mTestViewModel.<span class="title function_">getNameEvent</span>().<span class="title function_">setValue</span>(name);</span><br></pre></td></tr></table></figure>

<p>可能部分同学有这样的疑问了，<strong>我们的 ViewModel 是通过 ViewModelProviders.of(this).get(TestViewModel.class); 方法创建出来的，如果我们要携带参数，怎么办？</strong></p>
<p>其实，官方也替我们考虑好了，同样是调用 ViewModelProvider of(@NonNull Fragment fragment, @Nullable Factory factory) 方法，只不过，需要多传递一个 factory 参数。</p>
<p>Factory 是一个接口，它只有一个 create 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new instance of the given &#123;<span class="doctag">@code</span> Class&#125;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelClass a &#123;<span class="doctag">@code</span> Class&#125; whose instance is requested</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;        The type parameter for the ViewModel.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a newly created ViewModel</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    &lt;T <span class="keyword">extends</span> <span class="title class_">ViewModel</span>&gt; T <span class="title function_">create</span><span class="params">(<span class="meta">@NonNull</span> Class&lt;T&gt; modelClass)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在实际当中，我们的做法是：实现 Factory 接口，重写 create 方法，在create 方法里面调用相应的构造函数，返回相应的实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestViewModel</span> <span class="keyword">extends</span> <span class="title class_">ViewModel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mKey;</span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;String&gt; mNameEvent = <span class="keyword">new</span> <span class="title class_">MutableLiveData</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MutableLiveData&lt;String&gt; <span class="title function_">getNameEvent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mNameEvent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestViewModel</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        mKey = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Factory</span> <span class="keyword">implements</span> <span class="title class_">ViewModelProvider</span>.Factory &#123;</span><br><span class="line">        <span class="keyword">private</span> String mKey;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Factory</span><span class="params">(String key)</span> &#123;</span><br><span class="line">            mKey = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">ViewModel</span>&gt; T <span class="title function_">create</span><span class="params">(Class&lt;T&gt; modelClass)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">TestViewModel</span>(mKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mKey;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ViewModelProviders.of(this, new TestViewModel.Factory(mkey)).get(TestViewModel.class)</p>
<hr>
<h2 id="自定义-Livedata"><a href="#自定义-Livedata" class="headerlink" title="自定义 Livedata"></a>自定义 Livedata</h2><p>Livedata 主要有几个方法</p>
<ol>
<li>observe</li>
<li>onActive</li>
<li>onInactive </li>
<li>observeForever</li>
</ol>
<p> void observe (LifecycleOwner owner,     Observer<T> observer)</p>
<blockquote>
<p>Adds the given observer to the observers list within the lifespan of the given owner. The events are dispatched on the main thread. If LiveData already has data set, it will be delivered to the observer.</p>
</blockquote>
<p>void onActive ()</p>
<blockquote>
<p>Called when the number of active observers change to 1 from 0.<br>This callback can be used to know that this LiveData is being used thus should be kept up to date.</p>
</blockquote>
<p>当回调该方法的时候，表示该 liveData 正在背使用，因此应该保持最新</p>
<p> void onInactive ()</p>
<blockquote>
<p>Called when the number of active observers change from 1 to 0.<br>This does not mean that there are no observers left, there may still be observers but their lifecycle states aren’t STARTED or RESUMED (like an Activity in the back stack).<br>You can check if there are observers via hasObservers().</p>
</blockquote>
<p>当该方法回调时，表示他所有的 obervers 没有一个状态处理 STARTED 或者 RESUMED，注意，这不代表没有 observers。</p>
<p>Void observeForever </p>
<p>跟 observe 方法不太一样的是，它在 Activity 处于 onPause ，onStop， onDestroy 的时候，都可以回调 obsever 的 onChange 方法，但是有一点需要注意的是，我们必须手动 remove obsever，否则会发生内存泄漏。</p>
<p>这里我们以观察网络状态变化为例子讲解</p>
<ol>
<li>首先我们自定义一个 Class NetworkLiveData，继承 LiveData，重写它的 onActive 方法和 onInactive 方法</li>
<li>在 onActive 方法中，我们注册监听网络变化的广播，即ConnectivityManager.CONNECTIVITY_ACTION。在 onInactive 方法的时候，我们注销广播。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NetworkLiveData</span> <span class="keyword">extends</span> <span class="title class_">LiveData</span>&lt;NetworkInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">    <span class="keyword">static</span> NetworkLiveData mNetworkLiveData;</span><br><span class="line">    <span class="keyword">private</span> NetworkReceiver mNetworkReceiver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IntentFilter mIntentFilter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;NetworkLiveData&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NetworkLiveData</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        mContext = context.getApplicationContext();</span><br><span class="line">        mNetworkReceiver = <span class="keyword">new</span> <span class="title class_">NetworkReceiver</span>();</span><br><span class="line">        mIntentFilter = <span class="keyword">new</span> <span class="title class_">IntentFilter</span>(ConnectivityManager.CONNECTIVITY_ACTION);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> NetworkLiveData <span class="title function_">getInstance</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mNetworkLiveData == <span class="literal">null</span>) &#123;</span><br><span class="line">            mNetworkLiveData = <span class="keyword">new</span> <span class="title class_">NetworkLiveData</span>(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mNetworkLiveData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActive</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onActive();</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;onActive:&quot;</span>);</span><br><span class="line">        mContext.registerReceiver(mNetworkReceiver, mIntentFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onInactive</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onInactive();</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;onInactive: &quot;</span>);</span><br><span class="line">        mContext.unregisterReceiver(mNetworkReceiver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">NetworkReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">            <span class="type">ConnectivityManager</span> <span class="variable">manager</span> <span class="operator">=</span> (ConnectivityManager) context</span><br><span class="line">                    .getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">            <span class="type">NetworkInfo</span> <span class="variable">activeNetwork</span> <span class="operator">=</span> manager.getActiveNetworkInfo();</span><br><span class="line">            getInstance(context).setValue(activeNetwork);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，当我们想监听网络变化的时候，我们只需要调用相应的 observe 方法即可，方便又快捷。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">NetworkLiveData</span>.<span class="title function_">getInstance</span>(<span class="variable language_">this</span>).<span class="title function_">observe</span>(<span class="variable language_">this</span>, <span class="keyword">new</span> <span class="title class_">Observer</span>&lt;<span class="title class_">NetworkInfo</span>&gt;() &#123;</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onChanged</span>(<span class="params">@Nullable NetworkInfo networkInfo</span>) &#123;</span><br><span class="line">        <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onChanged: networkInfo=&quot;</span> +networkInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p><a href="https://www.jianshu.com/p/4b7945475a6f">https://www.jianshu.com/p/4b7945475a6f</a></p>
<h2 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h2><h3 id="Fragment-Activity-之间共享数据"><a href="#Fragment-Activity-之间共享数据" class="headerlink" title="Fragment Activity 之间共享数据"></a>Fragment Activity 之间共享数据</h3><p>我们回过头来再来看一下 ViewModelProvider 的 of 方法，他主要有四个方法，分别是</p>
<ol>
<li>ViewModelProvider of(@NonNull Fragment fragment)</li>
<li>ViewModelProvider of(@NonNull FragmentActivity activity)</li>
<li>ViewModelProvider of(@NonNull Fragment fragment, @Nullable Factory factory)</li>
<li>ViewModelProvider of(@NonNull FragmentActivity activity, @Nullable Factory factory)</li>
</ol>
<p>1,2 方法之间的主要区别是传入 Fragment 或者 FragmentActivity。而我们知道，通过 ViewModel of 方法创建的 ViewModel 实例， 对于同一个 fragment 或者 fragmentActivity 实例，ViewModel 实例是相同的，因而我们可以利用该特点，在 Fragment 中创建  ViewModel  的时候，传入的是 Fragment 所依附的 Activity。因而他们的 ViewModel 实例是相同的，从而可以做到共享数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// LiveDataSampleActivity(TestFragment 依赖的 Activity）</span></span><br><span class="line">mTestViewModel = <span class="title class_">ViewModelProviders</span>.<span class="title function_">of</span>(<span class="variable language_">this</span>, <span class="keyword">new</span> <span class="title class_">TestViewModel</span>.<span class="title class_">Factory</span>(mkey)).<span class="title function_">get</span>(<span class="title class_">TestViewModel</span>.<span class="property">class</span>);</span><br><span class="line"><span class="title class_">MutableLiveData</span>&lt;<span class="title class_">String</span>&gt; nameEvent = mTestViewModel.<span class="title function_">getNameEvent</span>();</span><br><span class="line">nameEvent.<span class="title function_">observe</span>(<span class="variable language_">this</span>, <span class="keyword">new</span> <span class="title class_">Observer</span>&lt;<span class="title class_">String</span>&gt;() &#123;</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onChanged</span>(<span class="params">@Nullable <span class="built_in">String</span> s</span>) &#123;</span><br><span class="line">        <span class="title class_">Log</span>.<span class="title function_">i</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onChanged: s = &quot;</span> + s);</span><br><span class="line">        mTvName.<span class="title function_">setText</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// TestFragment 中</span></span><br><span class="line">mViewModel = <span class="title class_">ViewModelProviders</span>.<span class="title function_">of</span>(mActivity).<span class="title function_">get</span>(<span class="title class_">TestViewModel</span>.<span class="property">class</span>);</span><br><span class="line">mViewModel.<span class="title function_">getNameEvent</span>().<span class="title function_">observe</span>(<span class="variable language_">this</span>, <span class="keyword">new</span> <span class="title class_">Observer</span>&lt;<span class="title class_">String</span>&gt;() &#123;</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onChanged</span>(<span class="params">@Nullable <span class="built_in">String</span> s</span>) &#123;</span><br><span class="line">        <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onChanged: s =&quot;</span> + s + <span class="string">&quot; mViewModel.getKey() =&quot;</span> + mViewModel.<span class="title function_">getKey</span>());</span><br><span class="line">        mTvName.<span class="title function_">setText</span>(s);</span><br><span class="line">        boolean result = mViewModel == ((<span class="title class_">LiveDataSampleActivity</span>) mListener).<span class="property">mTestViewModel</span>;</span><br><span class="line">        <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onChanged: s result =&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样，LiveDataSampleActivity 和 TestFragment 中的 ViewModel 是同一个实例。即 Activity 和 Fragment 共享数据。</p>
<h3 id="全局共享数据"><a href="#全局共享数据" class="headerlink" title="全局共享数据"></a>全局共享数据</h3><p>说到全局共享数据，我们想一下我们的应用全景，比如说我的账户数据，这个对于整个 App 来说，肯定是全局共享的。有时候，当我们的数据变化的时候，我们需要通知我们相应的界面，刷新 UI。如果用传统的方式来实现，那么我们一般才采取观察者的方式来实现，这样，当我们需要观察数据的时候，我们需要添加 observer，在界面销毁的时候，我们需要移除 observer。</p>
<p>但是，如果我们用 LiveData 来实现的话，它内部逻辑都帮我们封装好了，我们只需要保证 AccountLiveData 是单例的就ok，在需要观察的地方调用 observer 方法即可。也不需要手动移除 observer，不会发生内存泄漏，方便快捷。</p>
<p>这里 AccountLiveData 的实现就不贴出来了，可以参考上面的 NetworkLiveData 实现</p>
<hr>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这里说一点关于 LiveData 与 ViewModel 的应用场景，我尽量说得通俗一点，不要说得那么官方，这样对新手很难理解。</p>
<p>觉得不错的，请点个赞，让我们看到你们的欢呼声。你们的支持就是我写作的最大动力。</p>
<ol>
<li>LiveData 内部已经实现了观察者模式，如果你的数据要同时通知几个界面，可以采取这种方式</li>
<li>我们知道 LiveData 数据变化的时候，会回调 Observer 的 onChange 方法，但是回调的前提是 lifecycleOwner（即所依附的 Activity 或者 Fragment） 处于 started 或者 resumed 状态，它才会回调，否则，必须等到 lifecycleOwner 切换到前台的时候，才回调。</li>
<li>因此，这对性能方面确实是一个不小的提升。但是，对于你想做一些类似与在后台工作的（黑科技）， liveData 就不太适合了，你可以使用 observeForever  方法，或者自己实现观察者模式去吧。</li>
</ol>
<p><strong>Lifecycle，LiveData， ViewModel 的基本使用到此已经讲解完毕，想了解他们的实现原理的话可以阅读这两篇文章。</strong></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660766">Android lifecyle 源码解剖</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660776">Android livedata 源码解剖</a></p>
<p><a href="https://github.com/gdutxiaoxu/ArchiteComponentsSample">github sample 地址： ArchiteComponentsSample</a></p>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://mp.weixin.qq.com/s/xWYe-uxgXTPuitYcLgXYNg">Android 启动优化（一） - 有向无环图</a></p>
<p><a href="https://mp.weixin.qq.com/s/ShfxD_Z7M_NuWYNodn-vqA">Android 启动优化（二） - 拓扑排序的原理以及解题思路</a></p>
<p><a href="https://mp.weixin.qq.com/s/YRUpf9jKEwIHV0A4FqltXg">Android 启动优化（三）- AnchorTask 开源了</a></p>
<p><a href="https://mp.weixin.qq.com/s/6RKco9JTm6ZrFyw99k9Rlg">Android 启动优化（四）- AnchorTask 是怎么实现的</a></p>
<p><a href="https://mp.weixin.qq.com/s/0MsJa0ZepWkPUs-ymnVb-w">Android 启动优化（五）- AnchorTask 1.0.0 版本正式发布了</a></p>
<p><a href="https://mp.weixin.qq.com/s/7_dQd2wGZYKWf9kHNlv2fg">Android 启动优化（六）- 深入理解布局优化</a></p>
<p>这几篇文章从 0 到 1，讲解 DAG 有向无环图是怎么实现的，以及在 Android 启动优化的应用。</p>
<p><strong>推荐理由：现在挺多文章一谈到启动优化，动不动就聊拓扑结构，这篇文章从数据结构到算法、到设计都给大家说清楚了，开源项目也有非常强的借鉴意义。</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210414231709248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Android LiveData</tag>
      </tags>
  </entry>
  <entry>
    <title>Android lifecycle 使用详解</title>
    <url>/p/5558.html</url>
    <content><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>本次推出 Android  Architecture Components 系列文章，目前写好了四篇，主要是关于 lifecycle，livedata 的使用和源码分析，其余的 Navigation， Paging library，Room，WorkMannager 等春节结束之后会更新，欢迎关注我的公众号，有更新的话会第一时间会在公众号上面通知。</p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660746">Android lifecycle 使用详解</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660760">Android LiveData 使用详解</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660766">Android lifecyle 源码解剖</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660776">Android livedata 源码解剖</a></p>
<p><a href="https://github.com/gdutxiaoxu/ArchiteComponentsSample">github sample 地址： ArchiteComponentsSample</a></p>
<p><img src="https://img-blog.csdnimg.cn/20210406234353804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><a href="https://developer.android.com/topic/libraries/architecture/">Architecture Components   </a></p>
<p>lifecycle 是 2107 年 google 大会推出来的，它属于 architecture compoment 里面的一个组件，它可以干什么用呢？ 简单得来说，它可以用来检查 Activity 的生命周期，而不必强依赖  Activity。</p>
<hr>
<h2 id="为什么要引进-lifecycle"><a href="#为什么要引进-lifecycle" class="headerlink" title="为什么要引进 lifecycle"></a>为什么要引进 lifecycle</h2><p>举一下我们最常用的 MVP 例子，没引进 lifecycle 之前，我们需要在 Activity 或者 Fragment 销毁的时候，即 onDestroy 的时候手动调用 onDestroy 方法，这里会带来一些问题，每一次在 Activity 或者 Fragment 销毁的烧开后都要调用 presenter.destory() 方法，这样的代码枯燥，毫无意义。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPresenter</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyPresenter</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MyPresenter presenter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(...)</span> &#123;</span><br><span class="line">        presenter= <span class="keyword">new</span> <span class="title class_">MyPresenter</span> ();</span><br><span class="line">        presenter.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        presenter.destory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然我们也可以定义一些 IBasePresenter 的接口，在 BaseActivity 的时候调用 IBasePresenter 的 onDestroy 方法，这样也确实能做到。只不过稍微繁琐一点。</p>
<p>那如果是别的类的呢，比如 MediaCompoment，在 Activity 的时候，我们需要销毁一些资源，按照传统的方法，我们还是需要在 Activity onDestroy 的时候手动调用 onDestroy 方法。那有没有更好的方法呢?当然是有的，lifecycle 就可以解决这个问题。接下来，我们先来看一下 Lifycycle 的基本使用。</p>
<hr>
<h2 id="Lifycycle-的基本使用"><a href="#Lifycycle-的基本使用" class="headerlink" title="Lifycycle 的基本使用"></a>Lifycycle 的基本使用</h2><ol>
<li>引入相关的依赖包</li>
</ol>
<p>Lifecycle 已经是稳定版，它包含在 support library 26.1.0 及之后的依赖包中，如果我们的项目基于这些依赖包，那么不需要额外的引用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewModel and LiveData</span></span><br><span class="line">implementation <span class="string">&quot;android.arch.lifecycle:extensions:1.1.0&quot;</span></span><br><span class="line"><span class="comment">// alternatively, just ViewModel</span></span><br><span class="line">implementation <span class="string">&quot;android.arch.lifecycle:viewmodel:1.1.0&quot;</span></span><br><span class="line"><span class="comment">// alternatively, just LiveData</span></span><br><span class="line">implementation <span class="string">&quot;android.arch.lifecycle:livedata:1.1.0&quot;</span></span><br></pre></td></tr></table></figure>

<p>support library在26.1.0 之前，lifecycle 并没有集成进去，需要我们引入另外的包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&quot;android.arch.lifecycle:extensions:1.0.0-alpha4&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用</li>
</ol>
<p>这里同样分为几种情况</p>
<ol>
<li>support library 26.1.0  之后，且继承 FragmentActivity，那么我们直接调用  getLifecycle().addObserver 方法即可，当 Activity 的生命周期变化的时候，将会回调 onStateChanged 的方法，状态分别是一一对应的</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> final <span class="title class_">String</span> <span class="variable constant_">TAG</span> = <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    protected <span class="keyword">void</span> <span class="title function_">onCreate</span>(<span class="params">Bundle savedInstanceState</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onCreate</span>(savedInstanceState);</span><br><span class="line">        <span class="title function_">setContentView</span>(R.<span class="property">layout</span>.<span class="property">activity_main</span>);</span><br><span class="line">   </span><br><span class="line">        <span class="title function_">getLifecycle</span>().<span class="title function_">addObserver</span>(<span class="keyword">new</span> <span class="title class_">GenericLifecycleObserver</span>() &#123;</span><br><span class="line"></span><br><span class="line">            @<span class="title class_">Override</span></span><br><span class="line">            public <span class="keyword">void</span> <span class="title function_">onStateChanged</span>(<span class="params">LifecycleOwner source, Lifecycle.Event event</span>) &#123;</span><br><span class="line">                <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onStateChanged: event =&quot;</span> + event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>support library 26.1.0 之后，不是继承 FragmentActivity，只是简单地继承 Actiivty</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">SimpleLifecycleActivity</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Activity</span> implements <span class="title class_">LifecycleOwner</span> &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> final <span class="title class_">String</span> <span class="variable constant_">TAG</span> = <span class="string">&quot;SimpleLifecycleActivity&quot;</span>;</span><br><span class="line">    private <span class="title class_">LifecycleRegistry</span> mLifecycleRegistry;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    protected <span class="keyword">void</span> <span class="title function_">onCreate</span>(<span class="params">Bundle savedInstanceState</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onCreate</span>(savedInstanceState);</span><br><span class="line">        <span class="title function_">setContentView</span>(R.<span class="property">layout</span>.<span class="property">activity_simple_lifecycle</span>);</span><br><span class="line">        mLifecycleRegistry = <span class="keyword">new</span> <span class="title class_">LifecycleRegistry</span>(<span class="variable language_">this</span>);</span><br><span class="line">        mLifecycleRegistry.<span class="title function_">markState</span>(<span class="title class_">Lifecycle</span>.<span class="property">State</span>.<span class="property">CREATED</span>);</span><br><span class="line">        <span class="title function_">getLifecycle</span>().<span class="title function_">addObserver</span>(<span class="keyword">new</span> <span class="title class_">GenericLifecycleObserver</span>() &#123;</span><br><span class="line"></span><br><span class="line">            @<span class="title class_">Override</span></span><br><span class="line">            public <span class="keyword">void</span> <span class="title function_">onStateChanged</span>(<span class="params">LifecycleOwner source, Lifecycle.Event event</span>) &#123;</span><br><span class="line">                <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onStateChanged: event =&quot;</span> + event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    protected <span class="keyword">void</span> <span class="title function_">onStart</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onStart</span>();</span><br><span class="line">        mLifecycleRegistry.<span class="title function_">markState</span>(<span class="title class_">Lifecycle</span>.<span class="property">State</span>.<span class="property">STARTED</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">NonNull</span></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="title class_">Lifecycle</span> <span class="title function_">getLifecycle</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mLifecycleRegistry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>support library 26.1.0  之前</li>
</ol>
<p>（现在的 support library 基本都在 26.1.0 之后了，这个可以忽略）</p>
<p>第一步：实现 LifecycleOwner 接口，并返回响应的  Lifecycle</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public interface <span class="title class_">LifecycleOwner</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the Lifecycle of the provider.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The lifecycle of the provider.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="title class_">NonNull</span></span><br><span class="line">    <span class="title class_">Lifecycle</span> <span class="title function_">getLifecycle</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步：在 Activity 生命周期变化的时候，调用  mLifecycleRegistry.handleLifecycleEvent 方法，分发相应的生命周期。</p>
<p>第三步：调用 Lifecycle 的 addObserver 方法添加相应的 Observer。</p>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">LifecycleOwner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LifecycleRegistry mRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mRegistry = <span class="keyword">new</span> <span class="title class_">LifecycleRegistry</span>(<span class="built_in">this</span>);</span><br><span class="line">        mRegistry.markState(Lifecycle.State.CREATED);</span><br><span class="line">        getLifecycle().addObserver(<span class="keyword">new</span> <span class="title class_">GenericLifecycleObserver</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStateChanged</span><span class="params">(LifecycleOwner source, Lifecycle.Event event)</span> &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;onStateChanged:event =&quot;</span> + event);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">getReceiver</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onStart();</span><br><span class="line">        mRegistry.markState(Lifecycle.State.STARTED);</span><br><span class="line">        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onResume();</span><br><span class="line">        mRegistry.markState(Lifecycle.State.RESUMED);</span><br><span class="line">        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onPause();</span><br><span class="line">        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onStop();</span><br><span class="line">        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        mRegistry.markState(Lifecycle.State.DESTROYED);</span><br><span class="line">        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_DESTROY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Lifecycle <span class="title function_">getLifecycle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mRegistry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们回过头来看一下我们上面提出的问题？</p>
<p>MediaCompoment 在 Activity ondestroy 的时候，我们需要销毁一些资源，用传统的方法，我们需要在 Activity onDestroy 的时候手动调用 onDestroy 方法。这样会存在一个问题，调用者必须知道比较清楚得知道 MediaCompoment 的设计，否则可能会忘记调用 onDestroy 的方法。</p>
<p>那有没有一种方法， 当 Activity 生命周期变化的时候，MediaCompoment 自身能够检测到 Activity 的 生命周期变化，从而做相应的处理。</p>
<p>答案当然是有的，使用 lifycycle。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">MediaCompoment</span> &#123;</span><br><span class="line">    private <span class="keyword">static</span> final <span class="title class_">String</span> <span class="variable constant_">TAG</span> = <span class="string">&quot;MediaCompoment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    private final <span class="title class_">LifecycleOwner</span> mLifecycleOwner;</span><br><span class="line"></span><br><span class="line">    public <span class="title class_">MediaCompoment</span>(<span class="title class_">LifecycleOwner</span> lifecycleOwner) &#123;</span><br><span class="line">        mLifecycleOwner = lifecycleOwner;</span><br><span class="line">        mLifecycleOwner.<span class="title function_">getLifecycle</span>().<span class="title function_">addObserver</span>(<span class="keyword">new</span> <span class="title class_">GenericLifecycleObserver</span>() &#123;</span><br><span class="line">            @<span class="title class_">Override</span></span><br><span class="line">            public <span class="keyword">void</span> <span class="title function_">onStateChanged</span>(<span class="params">LifecycleOwner source, final Lifecycle.Event event</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (event == <span class="title class_">Lifecycle</span>.<span class="property">Event</span>.<span class="property">ON_CREATE</span>) &#123;</span><br><span class="line">                    <span class="title function_">onCreate</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event == <span class="title class_">Lifecycle</span>.<span class="property">Event</span>.<span class="property">ON_START</span>) &#123;</span><br><span class="line">                    <span class="title function_">onStart</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event == <span class="title class_">Lifecycle</span>.<span class="property">Event</span>.<span class="property">ON_RESUME</span>) &#123;</span><br><span class="line">                    <span class="title function_">onResume</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event == <span class="title class_">Lifecycle</span>.<span class="property">Event</span>.<span class="property">ON_PAUSE</span>) &#123;</span><br><span class="line">                    <span class="title function_">onPause</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event == <span class="title class_">Lifecycle</span>.<span class="property">Event</span>.<span class="property">ON_STOP</span>) &#123;</span><br><span class="line">                    <span class="title function_">onStop</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event == <span class="title class_">Lifecycle</span>.<span class="property">Event</span>.<span class="property">ON_DESTROY</span>) &#123;</span><br><span class="line">                    <span class="title function_">onDestroy</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onCreate:&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onStart</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onStart:&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onResume</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onResume:&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onPause</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onPause:&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onStop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onStop:&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onDestroy:&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ol>
<li>lifycycle 其实是用观察者模式实现的，当 Activity 生命周期变化的时候，通知相应的 Observers 即观察者。</li>
<li>使用 lifecycle，我们可以将释放资源的动作内聚在自身，减少与调用者之间的耦合。</li>
</ol>
<p>下一篇博客：<a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660760">Android LiveData 使用详解</a></p>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://mp.weixin.qq.com/s/xWYe-uxgXTPuitYcLgXYNg">Android 启动优化（一） - 有向无环图</a></p>
<p><a href="https://mp.weixin.qq.com/s/ShfxD_Z7M_NuWYNodn-vqA">Android 启动优化（二） - 拓扑排序的原理以及解题思路</a></p>
<p><a href="https://mp.weixin.qq.com/s/YRUpf9jKEwIHV0A4FqltXg">Android 启动优化（三）- AnchorTask 开源了</a></p>
<p><a href="https://mp.weixin.qq.com/s/6RKco9JTm6ZrFyw99k9Rlg">Android 启动优化（四）- AnchorTask 是怎么实现的</a></p>
<p><a href="https://mp.weixin.qq.com/s/0MsJa0ZepWkPUs-ymnVb-w">Android 启动优化（五）- AnchorTask 1.0.0 版本正式发布了</a></p>
<p><a href="https://mp.weixin.qq.com/s/7_dQd2wGZYKWf9kHNlv2fg">Android 启动优化（六）- 深入理解布局优化</a></p>
<p>这几篇文章从 0 到 1，讲解 DAG 有向无环图是怎么实现的，以及在 Android 启动优化的应用。</p>
<p><strong>推荐理由：现在挺多文章一谈到启动优化，动不动就聊拓扑结构，这篇文章从数据结构到算法、到设计都给大家说清楚了，开源项目也有非常强的借鉴意义。</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210414231709248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Android lifecycle</tag>
      </tags>
  </entry>
  <entry>
    <title>360面试心得（Android)</title>
    <url>/p/c1c564f1.html</url>
    <content><![CDATA[<h1 id="360面试心得（Android）"><a href="#360面试心得（Android）" class="headerlink" title="360面试心得（Android）"></a>360面试心得（Android）</h1><hr>
<p>这次360面试，总共面试了两轮，都是视频面试。</p>
<p>时间:2016-08-23</p>
<p><strong>转载请注明<a href="http://blog.csdn.net/gdutxiaoxu/article/details/52371834">原博客地址：</a></strong> </p>
<p><strong>闲谈：</strong></p>
<p>从大二暑假的时候开始，一直想进腾讯或者阿里，在招实习生的时候，最终遗憾落选。暑假的时候为了好好准备校招，我放弃了去步步高实习的机会，继续在原来的一家公司实习。在暑假的时候找师兄师姐内推了腾讯，阿里，最终都没有通过简历筛选，没有面试。说实话，刚开始内心是挺失落的，挺难受的，但经过一两天的调整，我也意识到自己的错误，以前那种强烈想进bat的欲望渐渐淡了下来，当然并不是说不想进bat，只是不再那么注重结果，更注重这奋斗过程中个人的成长。</p>
<h2 id="360一面"><a href="#360一面" class="headerlink" title="360一面"></a>360一面</h2><p>差不多三十五分钟</p>
<ul>
<li>介绍你做过的项目</li>
<li>手写单例模式</li>
<li>布局优化</li>
<li>有没有用过什么开源框架？</li>
<li>ImagLoader的实现原理</li>
<li>OnTouchEvent事件中 down事件 和up事件的传递</li>
<li>hashMap的实现 原理</li>
<li>LinkedHashMap的实现原理</li>
<li>内存管理及优化</li>
<li>点九图</li>
</ul>
<h3 id="点九图"><a href="#点九图" class="headerlink" title="点九图"></a>点九图</h3><p><a href="https://isux.tencent.com/android-ui-9-png.html">https://isux.tencent.com/android-ui-9-png.html</a></p>
<p><img src="https://isux.tencent.com/wp-content/uploads/2013/08/20130808100935745.png"></p>
<p>放大后可以比较明显的看到上下左右分别有一个像素的黑色线段，这里分别标注了序号。简单来说，</p>
<p>序号1和2标识了可以拉伸的区域，</p>
<p>序号3和4标识了内容区域。当设定了按钮实际应用的宽和高之后，横向会拉伸1区域的像素，纵向会拉伸2区域的像素。如下图：</p>
<p><img src="https://isux.tencent.com/wp-content/uploads/2013/08/20130808105705727-590x223.png"></p>
<p>这里程序设置的文字垂直居中，水平居左的对齐方式。对齐方式是没有问题的，但是对于这种大圆角同时又有些不规则边框的的图形来说，错误的标注方式会让排版看起来很混乱。所以我们需要修正内容区域的线段位置和长度。</p>
<p><img src="https://isux.tencent.com/wp-content/uploads/2013/08/20130808105728711-590x200.png"></p>
<h4 id="有两点需要特别注意下："><a href="#有两点需要特别注意下：" class="headerlink" title="有两点需要特别注意下："></a>有两点需要特别注意下：</h4><p>1.最外围的一圈像素必须要么是纯黑色，要么是透明，一点点的半透明的像素都不可以有，比如说99%的黑色或者是1%的投影都不可以有;</p>
<p>2.文件的后缀名必须是.9.png，不能是.png或者是.9.png.png，这样的命名都会导致编译失败。</p>
<h3 id="内存管理及优化"><a href="#内存管理及优化" class="headerlink" title="内存管理及优化"></a>内存管理及优化</h3><p>我这里答的是内存泄漏和oom<br>少用static静态变量</p>
<ol>
<li>珍惜Services资源</li>
</ol>
<p>我们知道service所在的Activity级别相对后台Activity的级别是比较 高的，一般不易被回收。<br>在service不再使用的时候，及时退出。最好的方法是使用IntentService</p>
<p>2）在UI不可见的时候释放资源</p>
<p>当用户切换到其它应用并且你的应用 UI不再可见时，你应该释放你的应用UI上所占用的所有内存资源。在这个时候释放UI资源可以显著的增加系统缓存进程的能力，它会对用户体验有着很直接的影响。</p>
<p>为了能够接收到用户离开你的UI时的通知，你需要实现Activtiy类里面的onTrimMemory()回调方法。你应该使用这个方法来监听到TRIM_MEMORY_UI_HIDDEN级别的回调，此时意味着你的UI已经隐藏，你应该释放那些仅仅被你的UI使用的资源。</p>
<p>请注意：你的应用仅仅会在所有UI组件的被隐藏的时候接收到onTrimMemory()的回调并带有参数TRIM_MEMORY_UI_HIDDEN。这与onStop()的回调是不同的，onStop会在activity的实例隐藏时会执行，例如当用户从你的app的某个activity跳转到另外一个activity时前面activity的onStop()会被执行。因此你应该实现onStop回调，并且在此回调里面释放activity的资源，例如释放网络连接，注销监听广播接收者。除非接收到onTrimMemory(TRIM_MEMORY_UI_HIDDEN))的回调，否者你不应该释放你的UI资源。这确保了用户从其他activity切回来时，你的UI资源仍然可用，并且可以迅速恢复activity。</p>
<ol start="3">
<li>当内存紧张时释放部分内存</li>
</ol>
<p><a href="https://developer.android.com/reference/android/content/ComponentCallbacks2.html#TRIM_MEMORY_COMPLETE">关于onTrimMemory的介绍</a></p>
<p>在你的app生命周期的任何阶段，onTrimMemory的回调方法同样可以告诉你整个设备的内存资源已经开始紧张。你应该根据onTrimMemory回调中的内存级别来进一步决定释放哪些资源。</p>
<p>TRIM_MEMORY_RUNNING_MODERATE：你的app正在运行并且不会被列为可杀死的。但是设备此时正运行于低内存状态下，系统开始触发杀死LRU Cache中的Process的机制。<br>TRIM_MEMORY_RUNNING_LOW：你的app正在运行且没有被列为可杀死的。但是设备正运行于更低内存的状态下，你应该释放不用的资源用来提升系统性能（但是这也会直接影响到你的app的性能）。<br>TRIM_MEMORY_RUNNING_CRITICAL：你的app仍在运行，但是系统已经把LRU Cache中的大多数进程都已经杀死，因此你应该立即释放所有非必须的资源。如果系统不能回收到足够的RAM数量，系统将会清除所有的LRU缓存中的进程，并且开始杀死那些之前被认为不应该杀死的进程，例如那个包含了一个运行态Service的进程。<br>同样，当你的app进程正在被cached时，你可能会接受到从onTrimMemory()中返回的下面的值之一:</p>
<p>TRIM_MEMORY_BACKGROUND: 系统正运行于低内存状态并且你的进程正处于LRU缓存名单中最不容易杀掉的位置。尽管你的app进程并不是处于被杀掉的高危险状态，系统可能已经开始杀掉LRU缓存中的其他进程了。你应该释放那些容易恢复的资源，以便于你的进程可以保留下来，这样当用户回退到你的app的时候才能够迅速恢复。<br>TRIM_MEMORY_MODERATE: 系统正运行于低内存状态并且你的进程已经已经接近LRU名单的中部位置。如果系统开始变得更加内存紧张，你的进程是有可能被杀死的。<br>TRIM_MEMORY_COMPLETE: 系统正运行与低内存的状态并且你的进程正处于LRU名单中最容易被杀掉的位置。你应该释放任何不影响你的app恢复状态的资源。<br>因为onTrimMemory()的回调是在API 14才被加进来的，对于老的版本，你可以使用onLowMemory)回调来进行兼容。onLowMemory相当与TRIM_MEMORY_COMPLETE。</p>
<p>Note: 当系统开始清除LRU缓存中的进程时，尽管它首先按照LRU的顺序来操作，但是它同样会考虑进程的内存使用量。因此消耗越少的进程则越容易被留下来。</p>
<ol start="4">
<li>避免bitmaps的浪费</li>
</ol>
<p>当你加载一个bitmap时，仅仅需要保留适配当前屏幕设备分辨率的数据即可，如果原图高于你的设备分辨率，需要做缩小的动作。请记住，增加bitmap的尺寸会对内存呈现出2次方的增加，因为X与Y都在增加。</p>
<p>Note:在Android 2.3.x (API level 10)及其以下, bitmap对象的pixel data是存放在native内存中的，它不便于调试。然而，从Android 3.0(API level 11)开始，bitmap pixel data是分配在你的app的Dalvik heap中, 这提升了GC的工作效率并且更加容易Debug。因此如果你的app使用bitmap并在旧的机器上引发了一些内存问题，切换到3.0以上的机器上进行Debug。</p>
<ol start="5">
<li>使用优化的数据容器</li>
</ol>
<p>利用Android Framework里面优化过的容器类，例如SparseArray, SparseBooleanArray, 与 LongSparseArray。 通常的HashMap的实现方式更加消耗内存，因为它需要一个额外的实例对象来记录Mapping操作。另外，SparseArray更加高效在于他们避免了对key与value的autobox自动装箱，并且避免了装箱后的解箱。</p>
<ol start="6">
<li>请注意内存开销</li>
</ol>
<p>对你所使用的语言与库的成本与开销有所了解，从开始到结束，在设计你的app时谨记这些信息。通常，表面上看起来无关痛痒(innocuous)的事情也许实际上会导致大量的开销。例如：</p>
<p>Enums的内存消耗通常是static constants的2倍。你应该尽量避免在Android上使用enums。<br>在Java中的每一个类(包括匿名内部类)都会使用大概500 bytes。<br>每一个类的实例花销是12-16 bytes。<br>往HashMap添加一个entry需要额一个额外占用的32 bytes的entry对象。<br>7) 请注意代码“抽象”</p>
<p>通常，开发者使用抽象作为”好的编程实践”，因为抽象能够提升代码的灵活性与可维护性。然而，抽象会导致一个显著的开销：通常他们需要同等量的代码用于可执行。那些代码会被map到内存中。因此如果你的抽象没有显著的提升效率，应该尽量避免他们。</p>
<ol start="8">
<li>使用ProGuard来剔除不需要的代码</li>
</ol>
<p>ProGuard能够通过移除不需要的代码，重命名类，域与方法等方对代码进行压缩，优化与混淆。使用ProGuard可以使得你的代码更加紧凑，这样能够使用更少mapped代码所需要的RAM。</p>
<ol start="9">
<li>对最终的APK使用zipalign</li>
</ol>
<p>在编写完所有代码，并通过编译系统生成APK之后，你需要使用zipalign对APK进行重新校准。如果你不做这个步骤，会导致你的APK需要更多的RAM，因为一些类似图片资源的东西不能被mapped。</p>
<p>Notes: Google Play不接受没有经过zipalign的APK。</p>
<h2 id="360二面"><a href="#360二面" class="headerlink" title="360二面"></a>360二面</h2><p>一面过了十多分钟以后，接着就进行二面，都是视频面试，差不多二十分钟左右</p>
<ul>
<li>AsyncTak的原理及常用方法</li>
<li>APK从安装到启动的过程</li>
<li>平时是怎样学习的？</li>
<li>学习和实习是在怎样协调的 ？</li>
<li>有360手机助手有什么想了解的吗？</li>
</ul>
<h3 id="对360手机助手有什么想了解的？"><a href="#对360手机助手有什么想了解的？" class="headerlink" title="对360手机助手有什么想了解的？"></a>对360手机助手有什么想了解的？</h3><p>这里我提问的是省流量升级是怎样实现的？<br>后面追问是不是利用动态加载技术。面试官解释的是不是你，是对比版本之间的二进制文件差异。</p>
<h2 id="面试总结"><a href="#面试总结" class="headerlink" title="面试总结"></a>面试总结</h2><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>两轮面试面试官人都挺好的，都面带笑容个，感觉很好说话，当天晚上我加了面试官的微信，问他多久会出结果，面试官问我说后面有没有接到电话，我说没有，然后面试官说应该被刷了。</p>
<h3 id="个人心得"><a href="#个人心得" class="headerlink" title="个人心得"></a>个人心得</h3><p>可能是第一次视频面试，感觉个人太紧张了，有好多原理性的东西讲着讲着就忘记讲了，面试的时候真的是太紧张了，发挥不太好，平时一定要多总结，不然面试的时候一下子总结地不太好，发挥不出应有的水平。</p>
<p><strong>转载请注明<a href="http://blog.csdn.net/gdutxiaoxu/article/details/52371834">原博客地址：</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>Android LiveData 源码分析</title>
    <url>/p/44974.html</url>
    <content><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>本次推出 Android  Architecture Components 系列文章，目前写好了四篇，主要是关于 lifecycle，livedata 的使用和源码分析，其余的 Navigation， Paging library，Room，WorkMannager 等春节结束之后会更新，欢迎关注我的公众号，有更新的话会第一时间会在公众号上面通知。</p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660746">Android lifecycle 使用详解</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660760">Android LiveData 使用详解</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660766">Android lifecyle 源码解剖</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660776">Android livedata 源码解剖</a></p>
<p><a href="https://github.com/gdutxiaoxu/ArchiteComponentsSample">github sample 地址： ArchiteComponentsSample</a></p>
<p><strong>Android 技术人，一位不羁的码农。</strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/81273649f00c4d30340a268b8613286b.png" alt="Android 技术人"></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面三篇博客中，我们已经介绍了 lifecycle 的使用及原理，livedata ,ViewModel 的常用用法，今天，让我们一起来学习 livedata  的原理。</p>
<p>我们先来回顾一下 LiveData  的特点：</p>
<p>LiveData 是一个可以被观察的数据持有类，它可以感知 Activity、Fragment或Service 等组件的生命周期。</p>
<ol>
<li>它可以做到在组件处于激活状态的时候才会回调相应的方法，从而刷新相应的 UI。</li>
<li>不用担心发生内存泄漏</li>
<li>当 config 导致 activity 重新创建的时候，不需要手动取处理数据的储存和恢复。内部已经帮我们封装好了。</li>
<li>当 Actiivty 不是处于激活状态的时候，如果你想 livedata setValue 之后立即回调 obsever 的 onChange 方法，而不是等到 Activity 处于激活状态的时候才回调 obsever 的 onChange 方法，你可以使用 observeForever 方法，但是你必须在 onDestroy 的时候 removeObserver</li>
</ol>
<p>下面，让我们一步步解剖它</p>
<hr>
<h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>我们知道 livedata 的使用很简单，它是采用观察者模式实现的</p>
<ol>
<li>添加观察者</li>
<li>在数据改变的时候设置 value，这样会回调 Observer 的 onChanged 方法</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">MutableLiveData</span>&lt;<span class="title class_">String</span>&gt; nameEvent = mTestViewModel.<span class="title function_">getNameEvent</span>();</span><br><span class="line">nameEvent.<span class="title function_">observe</span>(<span class="variable language_">this</span>, <span class="keyword">new</span> <span class="title class_">Observer</span>&lt;<span class="title class_">String</span>&gt;() &#123;</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onChanged</span>(<span class="params">@Nullable <span class="built_in">String</span> s</span>) &#123;</span><br><span class="line">        <span class="title class_">Log</span>.<span class="title function_">i</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onChanged: s = &quot;</span> + s);</span><br><span class="line">        mTvName.<span class="title function_">setText</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="observe-方法"><a href="#observe-方法" class="headerlink" title="observe 方法"></a>observe 方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">MainThread</span></span><br><span class="line">public <span class="keyword">void</span> <span class="title function_">observe</span>(<span class="params">@NonNull LifecycleOwner owner, @NonNull Observer&lt;T&gt; observer</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否已经销毁</span></span><br><span class="line">    <span class="keyword">if</span> (owner.<span class="title function_">getLifecycle</span>().<span class="title function_">getCurrentState</span>() == <span class="variable constant_">DESTROYED</span>) &#123;</span><br><span class="line">        <span class="comment">// ignore</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">LifecycleBoundObserver</span> wrapper = <span class="keyword">new</span> <span class="title class_">LifecycleBoundObserver</span>(owner, observer);</span><br><span class="line">    <span class="title class_">ObserverWrapper</span> existing = mObservers.<span class="title function_">putIfAbsent</span>(observer, wrapper);</span><br><span class="line">	<span class="comment">// observer 已经添加过了，并且缓存的 observer 跟 owner 的 observer 不一致，状态异常，抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="literal">null</span> &amp;&amp; !existing.<span class="title function_">isAttachedTo</span>(owner)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot add the same observer&quot;</span></span><br><span class="line">                + <span class="string">&quot; with different lifecycles&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 已经添加过 Observer 了，返回回去</span></span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 添加 observer</span></span><br><span class="line">    owner.<span class="title function_">getLifecycle</span>().<span class="title function_">addObserver</span>(wrapper);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>首先，我们先来看一下它的 observe 方法，首先通过 owner.getLifecycle().getCurrentState() 获取状态，判断是否已经被销毁，如果已经被销毁，直接返回。接着用 LifecycleBoundObserver 包装起来。然后从缓存的 mObservers 中读取 observer，如果有，证明已经添加过了。</p>
<p>observe 方法，小结起来就是</p>
<ol>
<li>判断是否已经销毁，如果销毁，直接移除</li>
<li>用 LifecycleBoundObserver 包装传递进来的 observer</li>
<li>是否已经添加过，添加过，直接返回</li>
<li>将包装后的 LifecycleBoundObserver 添加进去</li>
</ol>
<p>因此，当 owner 你（Activity 或者 fragment） 生命周期变化的时候，会回调 LifecycleBoundObserver 的 onStateChanged 方法，onStateChanged 方法又会回调  observer 的 onChange 方法</p>
<h3 id="LifecycleBoundObserver"><a href="#LifecycleBoundObserver" class="headerlink" title="LifecycleBoundObserver"></a>LifecycleBoundObserver</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LifecycleBoundObserver</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ObserverWrapper</span> implements <span class="title class_">GenericLifecycleObserver</span> &#123;</span><br><span class="line">    @<span class="title class_">NonNull</span> final <span class="title class_">LifecycleOwner</span> mOwner;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">LifecycleBoundObserver</span>(@<span class="title class_">NonNull</span> <span class="title class_">LifecycleOwner</span> owner, <span class="title class_">Observer</span>&lt;T&gt; observer) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(observer);</span><br><span class="line">        mOwner = owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    boolean <span class="title function_">shouldBeActive</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mOwner.<span class="title function_">getLifecycle</span>().<span class="title function_">getCurrentState</span>().<span class="title function_">isAtLeast</span>(<span class="variable constant_">STARTED</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onStateChanged</span>(<span class="params">LifecycleOwner source, Lifecycle.Event event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mOwner.<span class="title function_">getLifecycle</span>().<span class="title function_">getCurrentState</span>() == <span class="variable constant_">DESTROYED</span>) &#123;</span><br><span class="line">            <span class="title function_">removeObserver</span>(mObserver);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">activeStateChanged</span>(<span class="title function_">shouldBeActive</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    boolean <span class="title function_">isAttachedTo</span>(<span class="params">LifecycleOwner owner</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mOwner == owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">detachObserver</span>(<span class="params"></span>) &#123;</span><br><span class="line">        mOwner.<span class="title function_">getLifecycle</span>().<span class="title function_">removeObserver</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们来看一下 LifecycleBoundObserver，继承 ObserverWrapper，实现了 GenericLifecycleObserver 接口。而 GenericLifecycleObserver 接口又实现了 LifecycleObserver 接口。 它包装了我们外部的 observer，有点类似于代理模式。</p>
<p>GenericLifecycleObserver#onStateChanged</p>
<p>Activity 回调周期变化的时候，会回调 onStateChanged ，会先判断 mOwner.getLifecycle().getCurrentState() 是否已经 destroy 了，如果。已经 destroy，直接移除观察者。<strong>这也就是为什么我们不需要手动 remove observer 的原因</strong>。</p>
<p>如果不是销毁状态，会调用 activeStateChanged 方法 ，携带的参数为 shouldBeActive() 返回的值。<br>而当 lifecycle 的 state 为 started 或者 resume 的时候，shouldBeActive 方法的返回值为 true，即表示激活。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">activeStateChanged</span><span class="params">(<span class="type">boolean</span> newActive)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (newActive == mActive) &#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// immediately set active state, so we&#x27;d never dispatch anything to inactive</span></span><br><span class="line">   <span class="comment">// owner</span></span><br><span class="line">   mActive = newActive;</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">wasInactive</span> <span class="operator">=</span> LiveData.<span class="built_in">this</span>.mActiveCount == <span class="number">0</span>;</span><br><span class="line">   LiveData.<span class="built_in">this</span>.mActiveCount += mActive ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">if</span> (wasInactive &amp;&amp; mActive) &#123;</span><br><span class="line">       onActive();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (LiveData.<span class="built_in">this</span>.mActiveCount == <span class="number">0</span> &amp;&amp; !mActive) &#123;</span><br><span class="line">       onInactive();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (mActive) &#123;</span><br><span class="line">       dispatchingValue(<span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>}</p>
<p>activeStateChanged 方法中，，当 newActive 为 true，并且不等于上一次的值，会增加 LiveData 的 mActiveCount 计数。接着可以看到，onActive 会在 mActiveCount 为 1 时触发，onInactive 方法则只会在 mActiveCount 为 0 时触发。<strong>即回调 onActive 方法的时候活跃的 observer 恰好为 1，回调 onInactive 方法的时候，没有一个 Observer 处于激活状态。</strong></p>
<p>当 mActive 为 true 时，会促发 dispatchingValue 方法。</p>
<p>dispatchingValue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatchingValue</span><span class="params">(<span class="meta">@Nullable</span> ObserverWrapper initiator)</span> &#123;</span><br><span class="line">   <span class="comment">// 如果正在处理，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (mDispatchingValue) &#123;</span><br><span class="line">        mDispatchInvalidated = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mDispatchingValue = <span class="literal">true</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        mDispatchInvalidated = <span class="literal">false</span>;</span><br><span class="line">		<span class="comment">// initiator 不为 null，调用 considerNotify 方法</span></span><br><span class="line">        <span class="keyword">if</span> (initiator != <span class="literal">null</span>) &#123;</span><br><span class="line">            considerNotify(initiator);</span><br><span class="line">            initiator = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 为 null 的时候，遍历所有的 obsever，进行分发</span></span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class="line">                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class="line">                considerNotify(iterator.next().getValue());</span><br><span class="line">                <span class="keyword">if</span> (mDispatchInvalidated) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (mDispatchInvalidated);</span><br><span class="line">	<span class="comment">// 分发完成，设置为 false</span></span><br><span class="line">    mDispatchingValue = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 mDispatchingValue, mDispatchInvalidated 只在 dispatchingValue 方法中使用，显然这两个变量是为了防止重复分发相同的内容。当 initiator 不为 null，只处理当前 observer，为 null 的时候，遍历所有的 obsever，进行分发</p>
<p>considerNotify 方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private void considerNotify(ObserverWrapper observer) &#123;</span><br><span class="line">   // 如果状态不是在活跃中，直接返回</span><br><span class="line">    if (!observer.mActive) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    // Check latest state b4 dispatch. Maybe it changed state but we didn&#x27;t get the event yet.</span><br><span class="line">    //</span><br><span class="line">    // we still first check observer.active to keep it as the entrance for events. So even if</span><br><span class="line">    // the observer moved to an active state, if we&#x27;ve not received that event, we better not</span><br><span class="line">    // notify for a more predictable notification order.</span><br><span class="line">    if (!observer.shouldBeActive()) &#123;</span><br><span class="line">        observer.activeStateChanged(false);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">    if (observer.mLastVersion &gt;= mVersion) &#123;</span><br><span class="line">	// 数据已经是最新，返回</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">	// 将上一次的版本号置为最新版本号</span><br><span class="line">    observer.mLastVersion = mVersion;</span><br><span class="line">    //noinspection unchecked</span><br><span class="line">	// 调用外部的 mObserver 的 onChange 方法</span><br><span class="line">    observer.mObserver.onChanged((T) mData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>如果状态不是在活跃中，直接返回，这也就是为什么当我们的 Activity 处于 onPause， onStop， onDestroy 的时候，不会回调 observer 的 onChange 方法的原因。</li>
<li>判断数据是否是最新，如果是最新，返回，不处理</li>
<li>数据不是最新，回调 mObserver.onChanged 方法。并将 mData 传递过去</li>
</ol>
<h3 id="setValue"><a href="#setValue" class="headerlink" title="setValue"></a>setValue</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">MainThread</span></span><br><span class="line">protected <span class="keyword">void</span> <span class="title function_">setValue</span>(<span class="params">T value</span>) &#123;</span><br><span class="line">    <span class="title function_">assertMainThread</span>(<span class="string">&quot;setValue&quot;</span>);</span><br><span class="line">    mVersion++;</span><br><span class="line">    mData = value;</span><br><span class="line">    <span class="title function_">dispatchingValue</span>(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>setValue 方法中，首先，断言是主线程，接着  mVersion + 1; 并将 value 赋值给 mData，接着调用 dispatchingValue 方法。dispatchingValue 传递 null，代表处理所有 的 observer。</p>
<p><strong>这个时候如果我们依附的 activity 处于 onPause 或者 onStop 的时候，虽然在 dispatchingValue 方法中直接返回，不会调用 observer 的 onChange 方法。但是当所依附的 activity 重新回到前台的时候，会促发  LifecycleBoundObserver onStateChange 方法，onStateChange 又会调用 dispatchingValue 方法，在该方法中，因为 mLastVersion &lt; mVersion。所以会回调 obsever 的 onChange 方法，这也就是 LiveData 设计得比较巧妙的一个地方</strong></p>
<p>同理，当 activity 处于后台的时候，您多次调用 livedata 的 setValue 方法，最终只会回调 livedata observer 的 onChange 方法一次。</p>
<h3 id="postValue"><a href="#postValue" class="headerlink" title="postValue"></a>postValue</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">protected <span class="keyword">void</span> <span class="title function_">postValue</span>(<span class="params">T value</span>) &#123;</span><br><span class="line">   boolean postTask;</span><br><span class="line">   <span class="comment">// 锁住</span></span><br><span class="line">   synchronized (mDataLock) &#123;</span><br><span class="line">      <span class="comment">// 当前没有人在处理 post 任务</span></span><br><span class="line">       postTask = mPendingData == <span class="variable constant_">NOT_SET</span>;</span><br><span class="line">       mPendingData = value;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (!postTask) &#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">AppToolkitTaskExecutor</span>.<span class="title function_">getInstance</span>().<span class="title function_">postToMainThread</span>(mPostValueRunnable);</span><br><span class="line">&#125;</span><br><span class="line">private final <span class="title class_">Runnable</span> mPostValueRunnable = <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">   @<span class="title class_">Override</span></span><br><span class="line">   public <span class="keyword">void</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="title class_">Object</span> newValue;</span><br><span class="line">       synchronized (mDataLock) &#123;</span><br><span class="line">           newValue = mPendingData;</span><br><span class="line">		   <span class="comment">// 处理完毕之后将 mPendingData 置为 NOT_SET</span></span><br><span class="line">           mPendingData = <span class="variable constant_">NOT_SET</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//noinspection unchecked</span></span><br><span class="line">       <span class="title function_">setValue</span>((T) newValue);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol>
<li>首先，采用同步机制，通过 postTask &#x3D; mPendingData &#x3D;&#x3D; NOT_SET 有没有人在处理任务。 true，没人在处理任务， false ，有人在处理任务，有人在处理任务的话，直接返回</li>
<li>调用  AppToolkitTaskExecutor.getInstance().postToMainThread 到主线程执行 mPostValueRunnable 任务。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">observeForever</span><span class="params">(<span class="meta">@NonNull</span> Observer&lt;T&gt; observer)</span> &#123;</span><br><span class="line">    <span class="type">AlwaysActiveObserver</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlwaysActiveObserver</span>(observer);</span><br><span class="line">    <span class="type">ObserverWrapper</span> <span class="variable">existing</span> <span class="operator">=</span> mObservers.putIfAbsent(observer, wrapper);</span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="literal">null</span> &amp;&amp; existing <span class="keyword">instanceof</span> LiveData.LifecycleBoundObserver) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot add the same observer&quot;</span></span><br><span class="line">                + <span class="string">&quot; with different lifecycles&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    wrapper.activeStateChanged(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">AlwaysActiveObserver</span> <span class="keyword">extends</span> <span class="title class_">ObserverWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    AlwaysActiveObserver(Observer&lt;T&gt; observer) &#123;</span><br><span class="line">        <span class="built_in">super</span>(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">shouldBeActive</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因为 AlwaysActiveObserver 没有实现 GenericLifecycleObserver 方法接口，所以在 Activity o生命周期变化的时候，不会回调 onStateChange 方法。从而也不会主动 remove 掉 observer。因为我们的 obsever 被 remove 掉是依赖于 Activity 生命周期变化的时候，回调 GenericLifecycleObserver 的 onStateChange 方法。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>liveData 当我们 addObserver 的时候，会用 LifecycleBoundObserver 包装 observer，而 LifecycleBoundObserver 可以感应生命周期，当 activity 生命周期变化的时候，如果不是处于激活状态，判断是否需要 remove 生命周期，需要 remove，不需要，直接返回</li>
<li>当处于激活状态的时候，会判断是不是 mVersion最新版本，不是的话需要将上一次缓存的数据通知相应的 observer，并将 mLastVsersion 置为最新</li>
<li>当我们调用 setValue 的时候，mVersion +1，如果处于激活状态，直接处理，如果不是处理激活状态，返回，等到下次处于激活状态的时候，在进行相应的处理</li>
<li>如果你想 livedata setValue 之后立即回调数据，而不是等到生命周期变化的时候才回调数据，你可以使用 observeForever 方法，但是你必须在 onDestroy 的时候 removeObserver。因为 AlwaysActiveObserver 没有实现 GenericLifecycleObserver 接口，不能感应生命周期。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6010e8b1224400ad1cf93012b51df699.png"></p>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>Android  Architecture Components    已经写了四篇文章了，其余的 Navigation， Paging library，Room，WorkMannager 等春节结束之后再更新了，欢迎关注我的公众号，有更新的话会第一时间在公众好上面更新。</p>
]]></content>
      <tags>
        <tag>Android LiveData</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 启动优化（一） - 有向无环图</title>
    <url>/p/39136.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说到 Android 启动优化，大家第一时间可能会想到异步加载。将耗时任务放到子线程加载，等到所有加载任务加载完成之后，再进入首页。</p>
<p>多线程异步加载方案确实是 ok 的。但如果遇到<strong>前后依赖</strong>的关系呢。比如任务2 依赖于任务 1，这时候要怎么解决呢。</p>
<p><em>最简单的方案是将任务1 丢到主线程加载，然后再启动多线程异步加载。</em></p>
<p>如果遇到更复杂的依赖呢。</p>
<p>任务3 依赖于任务 2， 任务 2 依赖于任务 1 呢，这时候你要怎么解决。更复杂的依赖关系呢</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/offer/20210114210524.png"></p>
<p>总不能将任务 2，任务 3 都放到主线程加载吧，这样多线程加载的意义就不大了。</p>
<p>有没有更好的方案呢？</p>
<p><strong>答案肯定是有的，使用有向无环图。它可以完美解决先后依赖关系。</strong></p>
<h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><p><strong>有向无环图（Directed Acyclic Graph, DAG</strong>）是有向图的一种，字面意思的理解就是图中没有环。常常被用来表示事件之间的驱动依赖关系，管理任务之间的调度。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/offer/20210114210524.png"></p>
<p><strong>顶点</strong>：图中的一个点，比如顶点 1，顶点 2。</p>
<p><strong>边</strong>：连接两个顶点的线段叫做边，edge。</p>
<p><strong>入度</strong>：代表当前有多少边指向它。</p>
<p>在上图中，顶掉 1 的入度是 0，因为没有任何边指向它。 顶掉 2 的入度是 1， 因为 顶掉 1 指向 顶掉 2. 同理可得出 5 的入度是 2，因为顶掉 4 和顶点 3 指向它</p>
<p><strong>拓扑排序</strong>：拓扑排序是对一个有向图构造拓扑序列的过程。它具有如下特点。</p>
<ul>
<li>每个顶点出现且只出现一次。</li>
<li>若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面</li>
</ul>
<p>由于有这个特点，因此常常用有向无环图的数据结构用来解决依赖关系。</p>
<p>上图中，拓扑排序之后，任务2肯定排在任务1之后，因为任务2依赖 任务1， 任务3肯定在任务2之后，因为任务3依赖任务2。</p>
<p>拓扑排序一般有两种算法，第一种是入度表法，第二种是 DFS 方法。下面，让我们一起来看一下怎么实现它。</p>
<h2 id="入度表法"><a href="#入度表法" class="headerlink" title="入度表法"></a>入度表法</h2><p>入度表法是根据顶点的入度来判断是否有依赖关系的。若顶点的入度不为 0，则表示它有前置依赖。它也常常被称作 BFS 算法</p>
<h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><ul>
<li>建立入度表，入度为 0 的节点先入队</li>
<li>当队列不为空，进行循环判断<ul>
<li>节点出队，添加到结果 list 当中</li>
<li>将该节点的邻居入度减 1</li>
<li>若邻居节点入度为 0，加入队列</li>
</ul>
</li>
<li>若结果 list 与所有节点数量相等，则证明不存在环。否则，存在环</li>
</ul>
<h3 id="实例讲解"><a href="#实例讲解" class="headerlink" title="实例讲解"></a>实例讲解</h3><p>下图所示的有向无环图，采用入度表的方法获取拓扑排序过程。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/offer/20210114210524.png"></p>
<p>首先，我们选择入度为 0 的顶点，这里顶点 1 的入度为 0，删除顶点 1 之后，图变成如下。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/offer/20210114214904.png"></p>
<p>这时候，顶点 2 和顶点 4 的入度都为 0，我们可以随便删除一个顶点。（<strong>这也就是为什么图的拓扑排序不是唯一的原因</strong>）。这里我们删除顶点 2，图变成如下：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/offer/20210114214917.png"></p>
<p>这时候，我们再删除顶点 4，图变成如下：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/offer/20210114214928.png"></p>
<p>选择入度为 0 的顶点 3，删除顶点 3 之后，图标称如下，</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/offer/20210114215037.png"></p>
<p>最后剩余顶点5，输出顶点5，拓扑排序过程结束。最终的输出结果为：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/offer/20210114215654.png"></p>
<p>到此，优先无环图的入度法的流程已经讲解完毕。你清楚了嘛。</p>
<p>代码的话，下期会一起给出。</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>设 AOE 网有 n 个事件，e 个活动，则算法的主要执行是：</p>
<ul>
<li>求每个事件的ve值和vl值：时间复杂度是O(n+e) ；</li>
<li>根据ve值和vl值找关键活动：时间复杂度是O(n+e) ；</li>
</ul>
<p>因此，整个算法的时间复杂度是O(n+e)</p>
<h2 id="DFS-算法"><a href="#DFS-算法" class="headerlink" title="DFS 算法"></a>DFS 算法</h2><p>从上面的入度表法，我们可以知道，要得到有向无环图的拓扑排序，我们的关键点要找到入度为 0 的顶点。然后接着删除该结点的相邻所有边。再遍历所有结点。直到入度为 0 的队列为空。这种方法其实是 BFS。</p>
<p>说到 BFS，我们第一时间就想到 DFS。<strong>与 BFS 不同的是，DFS 的关键点在于找到，出度为0的顶点。</strong></p>
<p>总结如下，深度优先搜索过程中，当到达出度为0的顶点时，需要进行回退。在执行回退时记录出度为0的顶点，将其入栈。则最终出栈顺序的逆序即为拓扑排序序列。</p>
<h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><ul>
<li>对图执行深度优先搜索。</li>
<li>在执行深度优先搜索时，若某个顶点不能继续前进，即顶点的出度为0，则将此顶点入栈。</li>
<li>最后得到栈中顺序的逆序即为拓扑排序顺序。</li>
</ul>
<h3 id="实例讲解-1"><a href="#实例讲解-1" class="headerlink" title="实例讲解"></a>实例讲解</h3><p>同样，以下图讲解 DFS 算法的过程。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/offer/20210114210524.png"></p>
<p>(1) 从顶点 1 开始出发，开始执行深度优先搜索。顺序为1-&gt;2-&gt;3-&gt;5。</p>
<p>（2）深度优先搜索到达顶点5时，顶点5出度为0。将顶点5入栈。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/21/0120210116224006.png"></p>
<p>（3）深度优先搜索执行回退，回退至顶点3。此时顶点3的出度为0，将顶点3入栈。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/21/0120210116224021.png"></p>
<p>（4）回退至顶点2，顶点2出度为0，顶点2入栈。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/21/0120210116224230.png"></p>
<p>（5）回退至顶点1，顶点1可以前进位置为顶点4，顺序为1-&gt;4。</p>
<p>（6）顶点4出度为0，顶点4入栈。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/21/0120210116224240.png"></p>
<p>（7）回退至顶点1，顶点1出度为0，顶点1入栈。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/21/0120210116224247.png"></p>
<p>（8）栈的逆序为1-&gt;4-&gt;2-&gt;3-&gt;5。此顺序为拓扑排序结果。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/21/0120210116224253.png"></p>
<h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>时间复杂度分析：首先深度优先搜索的时间复杂度为O(V+E)，而每次只需将完成访问的顶点存入数组中，需要O(1)，因而总复杂度为O(V+E)。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>有向无环图的拓扑排序其实并不难，难度中等。通常，我们一般使用 BFS 算法来解决，DFS 算法比较少用。</p>
<p>对于 BFS（入度表法），它的核心思想是</p>
<ol>
<li>选择一个没有输入边（入度为0）的源顶点（若有多个则任选一个），</li>
<li>将它和它的输出边删除。重复源顶点的删除操作，直到不存在入度为0的源顶点为止。</li>
<li>最终，检测图中的顶点个数，若还有顶点存在则算法无解，否则顶点的删除顺序就是拓扑排序的输出顺序。</li>
</ol>
]]></content>
      <tags>
        <tag>Android 启动优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 启动优化（三） - AnchorTask 使用说明</title>
    <url>/p/28176.html</url>
    <content><![CDATA[<blockquote>
<p>**微信公众号：程序员徐公(stormjun94)**，本文首发我的微信公众号，有兴趣的可以<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c9363c4e7614b16aa5ae9cf62cfe5de~tplv-k3u1fbpfcp-zoom-1.image">点击扫码关注</a></p>
</blockquote>
<p><strong>如果觉得对你有所帮助的，可以关注我的微信公众号，程序员徐公。主要更新 Android 技术，算法，职场相关的。</strong></p>
<p><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/01/qrcode_for_gh_f0b7a2d93f70_430%20(2).jpg"></p>
<p>前两篇博客介绍了 Android 启动优化多线程异步加载依赖问题的解决方案 - 有向无环图，以及如何实现有它。今天，让我们一起来看一下，在 Android 实战中，怎么实现。</p>
<p><a href="https://juejin.cn/post/6926794003794903048">Android 启动优化（一） - 有向无环图
</a></p>
<p><a href="https://juejin.cn/post/6930805971673415694">Android 启动优化（二） - 拓扑排序的原理以及解题思路</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> Android 启动优化，大家第一时间可能会想到异步加载。将耗时任务放到子线程加载，等到所有加载任务加载完成之后，再进入首页。</p>
<p>多线程异步加载方案确实是 ok 的。但如果遇到前后依赖的关系呢。比如任务2 依赖于任务 1，这时候要怎么解决呢。</p>
<p>这时候就可以使用 AnchorTask 解决，它的实现原理是构建一个有向无环图，拓扑排序之后，如果任务 B 依赖任务 A，那么 A 一定排在任务 B 之后。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>第一步：在 moulde build.gradle 配置远程依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &#x27;com.xj.android:anchortask:0.1.0&#x27;</span><br></pre></td></tr></table></figure>

<p>最新的版本号可以看这里 <a href="https://dl.bintray.com/xujun94/maven/com/xj/android/anchortask/">lastedt version</a></p>
<p>第二步：自定义 AnchorTaskB，继承 AnchorTask，重写相应的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class AnchorTaskB : AnchorTask() &#123;</span><br><span class="line">    override fun isRunOnMainThread(): Boolean &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun run() &#123;</span><br><span class="line">        val start = System.currentTimeMillis()</span><br><span class="line">        try &#123;</span><br><span class="line">            // 在这里进行操作，这里通过睡眠模拟耗时操作</span><br><span class="line">            Thread.sleep(300)</span><br><span class="line">        &#125; catch (e: Exception) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        com.xj.anchortask.library.log.LogUtils.i(</span><br><span class="line">            TAG, &quot;AnchorTaskOne: &quot; + (System.currentTimeMillis() - start)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回依赖的任务，这里是通过 class name 去找到对应的 task</span><br><span class="line">    override fun getDependsTaskList(): List&lt;Class&lt;out AnchorTask&gt;&gt;? &#123;</span><br><span class="line">        return ArrayList&lt;Class&lt;out AnchorTask&gt;&gt;().apply &#123;</span><br><span class="line">            add(AnchorTaskA::class.java)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果任务 C 依赖任务 B，任务 A，可以这样写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class AnchorTaskC : AnchorTask() &#123;</span><br><span class="line">   </span><br><span class="line">    override fun getDependsTaskList(): List&lt;Class&lt;out AnchorTask&gt;&gt;? &#123;</span><br><span class="line">        return ArrayList&lt;Class&lt;out AnchorTask&gt;&gt;().apply &#123;</span><br><span class="line">            add(AnchorTaskA::class.java)</span><br><span class="line">            add(AnchorTaskB::class.java)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，通过 <code>AnchorTaskDispatcher.instance .addTask(AnchorTaskFive())</code>  添加任务，并调用 start() 方法启动， await() 方法表示阻塞等待所有任务执行完毕。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AnchorTaskDispatcher.instance.setContext(this).setLogLevel(LogUtils.LogLevel.DEBUG).setTimeOutMillion(1000L).</span><br><span class="line">            .addTask(AnchorTaskZero())</span><br><span class="line">            .addTask(AnchorTaskOne())</span><br><span class="line">            .addTask(AnchorTaskTwo())</span><br><span class="line">            .addTask(AnchorTaskThree())</span><br><span class="line">            .addTask(AnchorTaskFour())</span><br><span class="line">            .addTask(AnchorTaskFive())</span><br><span class="line">            .start()</span><br><span class="line">            .await()</span><br></pre></td></tr></table></figure>

<h2 id="AnchorTaskDispatcher-介绍"><a href="#AnchorTaskDispatcher-介绍" class="headerlink" title="AnchorTaskDispatcher 介绍"></a>AnchorTaskDispatcher 介绍</h2><ol>
<li><code>AnchorTaskDispatcher start</code> 方法必须在主线程调用，子线程调用会抛出异常。</li>
<li><code>setTimeOutMillion</code> 方法是配合 await() 方法使用的，单独调用没有任何效果，表示 await 等待的超时时间</li>
<li><code>await</code> 阻塞当前线程，等待所有任务执行完毕之后，会自动往下走</li>
<li><code>await()</code> 方法必须在 start 方法之后调用</li>
<li><code>setThreadPoolExecutor</code> 设置 task 执行的线程池</li>
</ol>
<h2 id="AnchorTask-介绍"><a href="#AnchorTask-介绍" class="headerlink" title="AnchorTask 介绍"></a>AnchorTask 介绍</h2><p>AnchorTask 实现了 IAnchorTask 接口，主要有几个方法</p>
<ul>
<li><code>isRunOnMainThread(): Boolean</code> 表示是否在主线程运行，默认值是 false</li>
<li><code>priority(): Int</code> 方法 表示线程的优先级别，默认值是 Process.THREAD_PRIORITY_FOREGROUND</li>
<li><code> needWait()</code> 表示当我们调用 <code>AnchorTaskDispatcher await</code> 时，是否需要等待，return true，表示需要等待改任务执行结束，<code>AnchorTaskDispatcher await</code> 方法才能继续往下执行。</li>
<li><code>fun getDependsTaskList(): List&lt;Class&lt;out AnchorTask&gt;&gt;?</code> 方法返回前置任务依赖，默认值是返回 null.</li>
<li><code> fun run()</code> 方法，表示任务执行的时候</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface IAnchorTask : IAnchorCallBack &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否在主线程执行</span><br><span class="line">     */</span><br><span class="line">    fun isRunOnMainThread(): Boolean</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 任务优先级别</span><br><span class="line">     */</span><br><span class="line">    @IntRange(</span><br><span class="line">        from = Process.THREAD_PRIORITY_FOREGROUND.toLong(),</span><br><span class="line">        to = Process.THREAD_PRIORITY_LOWEST.toLong()</span><br><span class="line">    )</span><br><span class="line">    fun priority(): Int</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 调用 await 方法，是否需要等待改任务执行完成</span><br><span class="line">     * true 不需要</span><br><span class="line">     * false 需要</span><br><span class="line">     */</span><br><span class="line">    fun needWait(): Boolean</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 当前任务的前置任务，可以用来确定顶点的入度</span><br><span class="line">     */</span><br><span class="line">    fun getDependsTaskList(): List&lt;Class&lt;out AnchorTask&gt;&gt;?</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 任务被执行的时候回调</span><br><span class="line">     */</span><br><span class="line">    fun run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class AnchorTaskOne : AnchorTask() &#123;</span><br><span class="line">    override fun isRunOnMainThread(): Boolean &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun run() &#123;</span><br><span class="line">        val start = System.currentTimeMillis()</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(300)</span><br><span class="line">        &#125; catch (e: Exception) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        LogUtils.i(</span><br><span class="line">            TAG, &quot;AnchorTaskOne: &quot; + (System.currentTimeMillis() - start)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="监听任务的回调"><a href="#监听任务的回调" class="headerlink" title="监听任务的回调"></a>监听任务的回调</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val anchorTask = AnchorTaskTwo()</span><br><span class="line">        anchorTask.addCallback(object : IAnchorCallBack &#123;</span><br><span class="line">            override fun onAdd() &#123;</span><br><span class="line">                com.xj.anchortask.LogUtils.i(TAG, &quot;onAdd: $anchorTask&quot;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            override fun onRemove() &#123;</span><br><span class="line">                com.xj.anchortask.LogUtils.i(TAG, &quot;onRemove: $anchorTask&quot;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            override fun onStart() &#123;</span><br><span class="line">                com.xj.anchortask.LogUtils.i(TAG, &quot;onStart:$anchorTask &quot;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            override fun onFinish() &#123;</span><br><span class="line">                com.xj.anchortask.LogUtils.i(TAG, &quot;onFinish:$anchorTask &quot;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这篇博客介绍了 AnchorTask 的使用，<br>AnchorTask 源码已经更新到 github，<a href="https://github.com/gdutxiaoxu/AnchorTask">AnchorTask</a>，下一篇，将输出 <strong>Android 启动优化（四）- 手把手教你实现 AnchorTask</strong>，敬请期待。</p>
<p>我的微信公众号<strong>程序员徐公</strong>，有兴趣的可以<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c9363c4e7614b16aa5ae9cf62cfe5de~tplv-k3u1fbpfcp-zoom-1.image">点击扫码关注</a></p>
]]></content>
      <tags>
        <tag>Android 启动优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 启动优化（五） - AnchorTask 1.0.0 版本更新了</title>
    <url>/p/7986.html</url>
    <content><![CDATA[<blockquote>
<p>**微信公众号：程序员徐公(stormjun94)**，本文首发我的微信公众号，有兴趣的可以<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15f71791b5cb4f96984c4863e0b7fe18~tplv-k3u1fbpfcp-zoom-1.image">点此扫码关注</a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上周六，吃错了东西，突然头晕，发烧，半夜突然呕吐，拉肚子，整个人被折腾得够呛的。到医院检查，说是 xx 肠炎，吃错东西导致的，整整躺在家休息四天。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cb71568b4c2413d93c2aa1303214203~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>今天，终于缓过来了。更新一下 Android 启动优化有向无环图系列的最后一篇文章。最近一段时间，暂时不会更新这方面的文章了。系列文章汇总如下：</p>
<p><a href="https://juejin.cn/post/6926794003794903048">Android 启动优化（一） - 有向无环图
</a></p>
<p><a href="https://juejin.cn/post/6930805971673415694">Android 启动优化（二） - 拓扑排序的原理以及解题思路</a></p>
<p><a href="https://juejin.cn/post/6931903136256753672">Android 启动优化（三） - AnchorTask 使用说明 </a></p>
<p><a href="https://juejin.cn/post/6931905215733956616">Android 启动优化（四）- 手把手教你实现 AnchorTask</a></p>
<h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h2><ol>
<li>之前的 0.1.0 版本 配置前置依赖任务，是通过 <code>AnchorTask getDependsTaskList</code> 的方式，他是通过 <code>className</code> 找到 <code>AnchorTask</code>，并且内聚在当前的 AnchorTask 中，从全局的角度看 ，这种方式不太直观，1.0.0 放弃了这种方式，参考阿里 <code>Alpha</code> 的方式，通过 <code>addTask(TASK_NAME_THREE).afterTask(TASK_NAME_ZERO, TASK_NAME_ONE)</code></li>
<li>1.0.0 版本新增了 Project 类，并增加 <code>OnProjectExecuteListener</code> 监听</li>
<li>1.0.0 版本新增 <code>OnGetMonitorRecordCallback</code> 监听，方便统计各个任务的耗时</li>
</ol>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p> Android 启动优化，大家第一时间可能会想到异步加载。将耗时任务放到子线程加载，等到所有加载任务加载完成之后，再进入首页。</p>
<p>多线程异步加载方案确实是 ok 的。但如果遇到前后依赖的关系呢。比如任务2 依赖于任务 1，这时候要怎么解决呢。</p>
<p>假设我们有这样的任务依赖</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3633baa6201b48eebd19283d5613cb74~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>我们要怎么使用它呢</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val project =</span><br><span class="line">    AnchorProject.Builder().setContext(context).setLogLevel(LogUtils.LogLevel.DEBUG)</span><br><span class="line">        .setAnchorTaskCreator(ApplicationAnchorTaskCreator())</span><br><span class="line">        .addTask(TASK_NAME_ZERO)</span><br><span class="line">        .addTask(TASK_NAME_ONE)</span><br><span class="line">        .addTask(TASK_NAME_TWO)</span><br><span class="line">        .addTask(TASK_NAME_THREE).afterTask(TASK_NAME_ZERO, TASK_NAME_ONE)</span><br><span class="line">        .addTask(TASK_NAME_FOUR).afterTask(TASK_NAME_ONE, TASK_NAME_TWO)</span><br><span class="line">        .addTask(TASK_NAME_FIVE).afterTask(TASK_NAME_THREE, TASK_NAME_FOUR)</span><br><span class="line">        .build()</span><br><span class="line">project.start().await()</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ApplicationAnchorTaskCreator : IAnchorTaskCreator &#123;</span><br><span class="line">    override fun createTask(taskName: String): AnchorTask? &#123;</span><br><span class="line">        when (taskName) &#123;</span><br><span class="line">            TASK_NAME_ZERO -&gt; &#123;</span><br><span class="line">                return AnchorTaskZero()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            TASK_NAME_ONE -&gt; &#123;</span><br><span class="line">                return AnchorTaskOne()</span><br><span class="line">            &#125;</span><br><span class="line">            TASK_NAME_TWO -&gt; &#123;</span><br><span class="line">                return AnchorTaskTwo()</span><br><span class="line">            &#125;</span><br><span class="line">            TASK_NAME_THREE -&gt; &#123;</span><br><span class="line">                return AnchorTaskThree()</span><br><span class="line">            &#125;</span><br><span class="line">            TASK_NAME_FOUR -&gt; &#123;</span><br><span class="line">                return AnchorTaskFour()</span><br><span class="line">            &#125;</span><br><span class="line">            TASK_NAME_FIVE -&gt; &#123;</span><br><span class="line">                return AnchorTaskFive()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo 跑起来，可以看到预期的效果。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b031f5ee23ec4c87bdd495d7499e48ba~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>第一步：在 moulde build.gradle 配置远程依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &#x27;com.xj.android:anchortask:1.0.0&#x27;</span><br></pre></td></tr></table></figure>

<p>最新的版本号可以看这里 <a href="https://dl.bintray.com/xujun94/maven/com/xj/android/anchortask/">lastedt version</a></p>
<p>第二步：自定义 <code>AnchorTaskZero</code>，继承 <code>AnchorTask</code>，并指定 <code>taskName</code>，注意 <code>taskName </code>必须是唯一的，因为我们会根据 <code>taskName</code> 找到相应的 <code>AnchorTask</code> 重写相应的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class AnchorTaskZero() : AnchorTask(TASK_NAME_ZERO) &#123;</span><br><span class="line">    override fun isRunOnMainThread(): Boolean &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun run() &#123;</span><br><span class="line">        val start = System.currentTimeMillis()</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(300)</span><br><span class="line">        &#125; catch (e: Exception) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        LogUtils.i(</span><br><span class="line">            TAG, &quot;AnchorTaskOne: &quot; + (System.currentTimeMillis() - start)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果任务 三 依赖任务 二，任务 一，可以这样写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addTask(TASK_NAME_THREE).afterTask(TASK_NAME_ZERO, TASK_NAME_ONE)</span><br></pre></td></tr></table></figure>

<p>最后，通过 <code> project.start()</code>  方法启动， 如果需要阻塞等待，调用 await() 方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AnchorProject.Builder().setContext(context).setLogLevel(LogUtils.LogLevel.DEBUG)</span><br><span class="line">                .setAnchorTaskCreator(ApplicationAnchorTaskCreator())</span><br><span class="line">                .addTask(TASK_NAME_ZERO)</span><br><span class="line">                .addTask(TASK_NAME_ONE)</span><br><span class="line">                .addTask(TASK_NAME_TWO)</span><br><span class="line">                .addTask(TASK_NAME_THREE).afterTask(TASK_NAME_ZERO, TASK_NAME_ONE)</span><br><span class="line">                .addTask(TASK_NAME_FOUR).afterTask(TASK_NAME_ONE, TASK_NAME_TWO)</span><br><span class="line">                .addTask(TASK_NAME_FIVE).afterTask(TASK_NAME_THREE, TASK_NAME_FOUR)</span><br><span class="line">                .build()</span><br><span class="line">project.start().await()</span><br></pre></td></tr></table></figure>

<h3 id="监听任务回调"><a href="#监听任务回调" class="headerlink" title="监听任务回调"></a>监听任务回调</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project.addListener(object : OnProjectExecuteListener &#123;</span><br><span class="line">             </span><br><span class="line">            // project 开始执行的时候</span><br><span class="line">            override fun onProjectStart() &#123;</span><br><span class="line">                com.xj.anchortask.LogUtils.i(MyApplication.TAG, &quot;onProjectStart &quot;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // project 执行一个 task 完成的时候</span><br><span class="line">            override fun onTaskFinish(taskName: String) &#123;</span><br><span class="line">                com.xj.anchortask.LogUtils.i(</span><br><span class="line">                    MyApplication.TAG,</span><br><span class="line">                    &quot;onTaskFinish, taskName is $taskName&quot;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // project 执行完成的时候</span><br><span class="line">            override fun onProjectFinish() &#123;</span><br><span class="line">                com.xj.anchortask.LogUtils.i(MyApplication.TAG, &quot;onProjectFinish &quot;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="添加每个任务执行耗时回调"><a href="#添加每个任务执行耗时回调" class="headerlink" title="添加每个任务执行耗时回调"></a>添加每个任务执行耗时回调</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project.onGetMonitorRecordCallback = object : OnGetMonitorRecordCallback &#123;</span><br><span class="line">           </span><br><span class="line">            // 所有 task 执行完毕会调用这个方法，Map 存储了 task 的执行时间， key 是 taskName，value 是时间，单位毫秒</span><br><span class="line">            override fun onGetTaskExecuteRecord(result: Map&lt;String?, Long?&gt;?) &#123;</span><br><span class="line">                onGetMonitorRecordCallback?.onGetTaskExecuteRecord(result)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // 所有 task 执行完毕会调用这个方法，costTime 执行时间</span><br><span class="line">            override fun onGetProjectExecuteTime(costTime: Long) &#123;</span><br><span class="line">                onGetMonitorRecordCallback?.onGetProjectExecuteTime(costTime)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>


<h2 id="AnchorProject-介绍"><a href="#AnchorProject-介绍" class="headerlink" title="AnchorProject 介绍"></a>AnchorProject 介绍</h2><ol>
<li><code>AnchorTaskDispatcher start</code> 方法必须在主线程调用，子线程调用会抛出异常。</li>
<li><code>await</code> 阻塞当前线程，等待所有任务执行完毕之后，会自动往下走，await 方法携带一个参数，timeOutMillion 表示超时等待的时间</li>
<li><code>await()</code> 方法必须在 start 方法之后调用</li>
<li>添加任务是通过 <code>AnchorProject.Builder().addTask</code> 添加的，典型的构造模式</li>
<li>设置执行的线程池，可以通过 <code>AnchorProject.Builder().setThreadPoolExecutor(TaskExecutorManager.instance.cpuThreadPoolExecutor)</code></li>
</ol>
<h2 id="AnchorTask-介绍"><a href="#AnchorTask-介绍" class="headerlink" title="AnchorTask 介绍"></a>AnchorTask 介绍</h2><p>AnchorTask 实现了 IAnchorTask 接口，主要有几个方法</p>
<ul>
<li><code>isRunOnMainThread(): Boolean</code>表示是否在主线程运行，默认值是 false</li>
<li><code>priority(): Int</code> 方法 表示线程的优先级别，默认值是 Process.THREAD_PRIORITY_FOREGROUND</li>
<li><code>needWait()</code> 表示当我们调用 <code>AnchorTaskDispatcher await</code> 时，是否需要等待，return true，表示需要等待改任务执行结束，<code>AnchorTaskDispatcher await</code> 方法才能继续往下执行。</li>
<li><code> fun run()</code> 方法，表示任务执行的时候</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface IAnchorTask : IAnchorCallBack &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否在主线程执行</span><br><span class="line">     */</span><br><span class="line">    fun isRunOnMainThread(): Boolean</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 任务优先级别</span><br><span class="line">     */</span><br><span class="line">    @IntRange(</span><br><span class="line">        from = Process.THREAD_PRIORITY_FOREGROUND.toLong(),</span><br><span class="line">        to = Process.THREAD_PRIORITY_LOWEST.toLong()</span><br><span class="line">    )</span><br><span class="line">    fun priority(): Int</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 调用 await 方法，是否需要等待改任务执行完成</span><br><span class="line">     * true 不需要</span><br><span class="line">     * false 需要</span><br><span class="line">     */</span><br><span class="line">    fun needWait(): Boolean</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 任务被执行的时候回调</span><br><span class="line">     */</span><br><span class="line">    fun run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class AnchorTaskOne : AnchorTask() &#123;</span><br><span class="line">    override fun isRunOnMainThread(): Boolean &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun run() &#123;</span><br><span class="line">        val start = System.currentTimeMillis()</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(300)</span><br><span class="line">        &#125; catch (e: Exception) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        LogUtils.i(</span><br><span class="line">            TAG, &quot;AnchorTaskOne: &quot; + (System.currentTimeMillis() - start)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="监听任务的回调"><a href="#监听任务的回调" class="headerlink" title="监听任务的回调"></a>监听任务的回调</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val anchorTask = AnchorTaskTwo()</span><br><span class="line">        anchorTask.addCallback(object : IAnchorCallBack &#123;</span><br><span class="line">            override fun onAdd() &#123;</span><br><span class="line">                com.xj.anchortask.LogUtils.i(TAG, &quot;onAdd: $anchorTask&quot;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            override fun onStart() &#123;</span><br><span class="line">                com.xj.anchortask.LogUtils.i(TAG, &quot;onStart:$anchorTask &quot;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            override fun onFinish() &#123;</span><br><span class="line">                com.xj.anchortask.LogUtils.i(TAG, &quot;onFinish:$anchorTask &quot;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>


<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>AnchorTask 的原理不复杂，本质是有向无环图与多线程知识的结合。</p>
<ol>
<li>根据 BFS 构建出有向无环图，并得到它的拓扑排序</li>
<li>在多线程执行过程中，我们是通过任务的子任务关系和 CounDownLatch 确保先后执行关系的<ol>
<li>前置任务没有执行完毕的话，等待，执行完毕的话，往下走</li>
<li>执行任务</li>
<li>通知子任务，当前任务执行完毕了，相应的计数器（入度数）要减一。</li>
</ol>
</li>
</ol>
<p><a href="https://github.com/gdutxiaoxu/AnchorTask">AnchorTask</a></p>
<p>想看 1.0.0 版本的具体实现，可以看这篇文章。 <a href="https://github.com/gdutxiaoxu/AnchorTask/wiki/AnchorTask-1.0.0-%E5%8E%9F%E7%90%86%E8%AF%B4%E6%98%8E">AnchorTask 1.0.0 原理说明</a>。</p>
<p><strong>如果你觉得对你有所帮助，可以关注我的微信公众号 <em>程序员徐公</em></strong></p>
]]></content>
      <tags>
        <tag>Android 启动优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 启动优化（二） - 拓扑排序的原理以及解题思路</title>
    <url>/p/64153.html</url>
    <content><![CDATA[<h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><p>在上一篇文章中 <a href="https://juejin.cn/post/6926794003794903048">Android 启动优化（一） - 有向无环图</a>，我们介绍了有向无环图，以及拓扑排序的两种解法。今天，让我们一起来实战一下。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>拓扑排序的英文名是 Topological sorting。</p>
<p><strong>拓扑排序要解决的问题是给一个图的所有节点排序。有向无环图才有拓扑排序，非有向无环图没有。</strong></p>
<p>换句话说，拓扑排序必须满足以下条件</p>
<p>图必须是一个无环有向图。序列必须满足的条件：</p>
<ul>
<li>每个顶点出现且只出现一次。</li>
<li>若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面。</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>我们已 leetcode 上面的一道算法题目作为切入点进行讲解。</p>
<p><a href="https://leetcode-cn.com/problems/course-schedule-ii/">leeocode 210</a>: <a href="https://leetcode-cn.com/problems/course-schedule-ii/">https://leetcode-cn.com/problems/course-schedule-ii/</a></p>
<p><strong>eg</strong>: 现在你总共有 n 门课需要选，记为 0 到 n-1。</p>
<p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]</p>
<p>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</p>
<p>可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</p>
<p>示例 1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 2, [[1,0]] </span><br><span class="line">输出: [0,1]</span><br><span class="line">解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。</span><br></pre></td></tr></table></figure>

<p>示例 2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 4, [[1,0],[2,0],[3,1],[3,2]]</span><br><span class="line">输出: [0,1,2,3] or [0,2,1,3]</span><br><span class="line">解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。</span><br><span class="line">     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。</span><br></pre></td></tr></table></figure>




<p>这道题，很明显，看起来可以有有向无环图的解法来解决</p>
<h2 id="BFS-算法"><a href="#BFS-算法" class="headerlink" title="BFS 算法"></a>BFS 算法</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>我们首先引入有向图 描述依赖关系</p>
<p>示例：假设 n &#x3D; 6，先决条件表：[ [3, 0], [3, 1], [4, 1], [4, 2], [5, 3], [5, 4] ]</p>
<ul>
<li>0, 1, 2 没有先修课，可以直接选。其余的，都要先修 2 门课</li>
<li>我们用 有向图 描述这种 依赖关系 (做事的先后关系)：<br><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/01/20210219104449.png"></li>
</ul>
<p>在有向图中，我们知道，有<strong>入度</strong>和<strong>出度</strong>概念：</p>
<p>如果存在一条有向边 A –&gt; B，则这条边给 A 增加了 1 个出度，给 B 增加了 1 个入度。所以顶点 0、1、2 的 入度为 0。 顶点 3、4、5 的 入度为 2</p>
<h3 id="BFS-前准备工作"><a href="#BFS-前准备工作" class="headerlink" title="BFS 前准备工作"></a>BFS 前准备工作</h3><ul>
<li>我们关心 课程的入度 —— 该值要被减，要被监控</li>
<li>我们关心 课程之间的依赖关系 —— 选这门课会减小哪些课的入度</li>
<li>因此我们需要合适的数据结构，去存储这些关系,这个可以通过哈希表</li>
</ul>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul>
<li>维护一个 queue，里面都是入度为 0 的课程</li>
<li>选择一门课，就让它出列，同时 <strong>查看哈希表</strong>，看它 对应哪些后续课</li>
<li>将这些后续课的 入度 - 1，如果有减至 0 的，就将它推入 queue</li>
<li>不再有新的入度 0 的课入列 时，此时 queue 为空，退出循环</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private  class Solution &#123;</span><br><span class="line">    public int[] findOrder(int num, int[][] prerequisites) &#123;</span><br><span class="line"></span><br><span class="line">        // 计算所有节点的入度，这里用数组代表哈希表，key 是 index， value 是 inDegree[index].实际开发当中，用 HashMap 比较灵活</span><br><span class="line">        int[] inDegree = new int[num];</span><br><span class="line">        for (int[] array : prerequisites) &#123;</span><br><span class="line">            inDegree[array[0]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 找出所有入度为 0 的点，加入到队列当中</span><br><span class="line">        Queue&lt;Integer&gt; queue = new ArrayDeque&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; inDegree.length; i++) &#123;</span><br><span class="line">            if (inDegree[i] == 0) &#123;</span><br><span class="line">                queue.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Integer&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">        while (!queue.isEmpty()) &#123;</span><br><span class="line">            Integer key = queue.poll();</span><br><span class="line">            result.add(key);</span><br><span class="line">            // 遍历所有课程</span><br><span class="line">            for (int[] p : prerequisites) &#123;</span><br><span class="line">                // 改课程依赖于当前课程 key</span><br><span class="line">                if (key == p[1]) &#123;</span><br><span class="line">                    // 入度减一</span><br><span class="line">                    inDegree[p[0]]--;</span><br><span class="line">                    if (inDegree[p[0]] == 0) &#123;</span><br><span class="line">                        queue.offer(p[0]); // 加入到队列当中</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 数量不相等，说明存在环</span><br><span class="line">        if (result.size() != num) &#123;</span><br><span class="line">            return new int[0];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int[] array = new int[num];</span><br><span class="line">        int index = 0;</span><br><span class="line">        for (int i : result) &#123;</span><br><span class="line">            array[index++] = i;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DFS-解法"><a href="#DFS-解法" class="headerlink" title="DFS 解法"></a>DFS 解法</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><ul>
<li>对图执行深度优先搜索。</li>
<li>在执行深度优先搜索时，若某个顶点不能继续前进，即顶点的出度为0，则将此顶点入栈。</li>
<li>最后得到栈中顺序的逆序即为拓扑排序顺序。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 方法 2：邻接矩阵 + DFS   由于用的数组，每次都要遍历，效率比较低</span><br><span class="line">    public int[] findOrder(int numCourses, int[][] prerequisites) &#123;</span><br><span class="line">        if (numCourses == 0) return new int[0];</span><br><span class="line">        // 建立邻接矩阵</span><br><span class="line">        int[][] graph = new int[numCourses][numCourses];</span><br><span class="line">        for (int[] p : prerequisites) &#123;</span><br><span class="line">            graph[p[1]][p[0]] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        // 记录访问状态的数组，访问过了标记 -1，正在访问标记 1，还未访问标记 0</span><br><span class="line">        int[] status = new int[numCourses];</span><br><span class="line">        Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();  // 用栈保存访问序列</span><br><span class="line">        for (int i = 0; i &lt; numCourses; i++) &#123;</span><br><span class="line">            if (!dfs(graph, status, i, stack)) return new int[0]; // 只要存在环就返回</span><br><span class="line">        &#125;</span><br><span class="line">        int[] res = new int[numCourses];</span><br><span class="line">        for (int i = 0; i &lt; numCourses; i++) &#123;</span><br><span class="line">            res[i] = stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean dfs(int[][] graph, int[] status, int i, Stack&lt;Integer&gt; stack) &#123;</span><br><span class="line">        if (status[i] == 1) return false; // 当前节点在此次 dfs 中正在访问，说明存在环</span><br><span class="line">        if (status[i] == -1) return true;</span><br><span class="line"></span><br><span class="line">        status[i] = 1;</span><br><span class="line">        for (int j = 0; j &lt; graph.length; j++) &#123;</span><br><span class="line">            // dfs 访问当前课程的后续课程，看是否存在环</span><br><span class="line">            if (graph[i][j] == 1 &amp;&amp; !dfs(graph, status, j, stack)) return false;</span><br><span class="line">        &#125;</span><br><span class="line">        status[i] = -1;  // 标记为已访问</span><br><span class="line">        stack.push(i);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇博客从实战的角度出发，介绍了有向无环图的两种解法，入度表法和 DFS 法。其中，入度表法很重要，必须掌握。下一篇，我们将从 项目实战的角度来讲解，怎样搭建一个有向无环图的通用框架，敬请期待。</p>
]]></content>
      <tags>
        <tag>Android 启动优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 启动优化（六） - 深入理解布局优化</title>
    <url>/p/51800.html</url>
    <content><![CDATA[<blockquote>
<p>我的 CSDN 博客:<a href="https://blog.csdn.net/gdutxiaoxu">https://blog.csdn.net/gdutxiaoxu</a> <br><br>我的掘金：<a href="https://juejin.im/user/2207475076966584">https://juejin.im/user/2207475076966584</a>  <br><br>github: <a href="https://github.com/gdutxiaoxu/">https://github.com/gdutxiaoxu/</a>  <br><br>微信公众号：程序员徐公 <br></p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>说到 Android 启动优化，你一般会想到什么呢？</p>
<ol>
<li>Android 多线程异步加载</li>
<li>Android 首页懒加载</li>
</ol>
<p>对，这是两种很常见的优化手段，但是如果让你主导这件事情，你会如何开始呢？</p>
<ol>
<li>梳理现有的业务，哪些是一定要在启动初始化的，哪些是不必要的</li>
<li>需要在启动初始化的，哪些是可以在主线程初始化的，哪些是可以在子线程初始化的</li>
</ol>
<p>当我们把任务丢到子线程初始化，这时候，我们又会遇到两个问题。</p>
<ol>
<li>在首页，我们需要用到这个库，如果直接使用，这个库可能还没有初始化，这时候直接调用该库，会发生异常，你要怎么解决</li>
<li>当我们的任务相互依赖时，比如 A 依赖于 B， C 也依赖于 B，要怎么解决这种依赖关系。</li>
</ol>
<p>这些你有想过嘛。答案都在这几篇文章里面了，这里我就不展开讲了，有兴趣的可以看一下。</p>
<p><a href="https://mp.weixin.qq.com/s/xWYe-uxgXTPuitYcLgXYNg">Android 启动优化（一） - 有向无环图</a></p>
<p><a href="https://mp.weixin.qq.com/s/ShfxD_Z7M_NuWYNodn-vqA">Android 启动优化（二） - 拓扑排序的原理以及解题思路</a></p>
<p><a href="https://mp.weixin.qq.com/s/YRUpf9jKEwIHV0A4FqltXg">Android 启动优化（三）- AnchorTask 开源了</a></p>
<p><a href="https://mp.weixin.qq.com/s/6RKco9JTm6ZrFyw99k9Rlg">Android 启动优化（四）- AnchorTask 是怎么实现的</a></p>
<p><a href="https://mp.weixin.qq.com/s/0MsJa0ZepWkPUs-ymnVb-w">Android 启动优化（五）- AnchorTask 1.0.0 版本正式发布了</a></p>
<p><strong>接下来，我们来说一下布局优化相关的。</strong></p>
<h1 id="布局优化的现状与发展趋势"><a href="#布局优化的现状与发展趋势" class="headerlink" title="布局优化的现状与发展趋势"></a>布局优化的现状与发展趋势</h1><h2 id="耗时原因"><a href="#耗时原因" class="headerlink" title="耗时原因"></a>耗时原因</h2><p>众所周知，布局加载一直是耗时的重灾区。特别是启动阶段，作为第一个 View 加载，更是耗时。</p>
<p>而布局加载之所以耗时，有两个原因。</p>
<ol>
<li>读取 xml 文件，这是一个 IO 操作。</li>
<li>解析 xml 对象，反射创建 View</li>
</ol>
<p>一些很常见的做法是</p>
<ol>
<li>减少布局嵌套层数，减少过度绘制</li>
<li>空界面，错误界面等界面进行懒加载</li>
</ol>
<p> 那除了这些做法，我们还有哪些手段可以优化呢？</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>异步加载</li>
<li>采用代码的方式编写布局</li>
</ol>
<h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><p>google 很久之前提供了 AsyncLayoutInflater，异步加载的方案，不过这种方式有蛮多坑的，下文会介绍</p>
<h3 id="采用代码的方式编写布局"><a href="#采用代码的方式编写布局" class="headerlink" title="采用代码的方式编写布局"></a>采用代码的方式编写布局</h3><p>代码编写的方式编写布局，我们可能想到使用 java 声明布局，对于稍微复杂一点的布局，这种方式是不可取的，存在维护性查，修改困难等问题。为了解决这个问题，github 上面诞生了一系列优秀的开源库。</p>
<p><a href="https://github.com/facebook/litho">litho</a></p>
<p><a href="https://github.com/iReaderAndroid/X2C">X2C</a></p>
<blockquote>
<p>为了即保留xml的优点，又解决它带来的性能问题，我们开发了X2C方案。即在编译生成APK期间，将需要翻译的layout翻译生成对应的java文件，这样对于开发人员来说写布局还是写原来的xml，但对于程序来说，运行时加载的是对应的java文件.<br/><br>我们采用APT（Annotation Processor Tool）+ JavaPoet技术来完成编译期间【注解】-&gt;【解注解】-&gt;【翻译xml】-&gt;【生成java】整个流程的操作。</p>
</blockquote>
<p><strong>这两个开源库在大型的项目基本不会使用，不过他们的价值是值得肯定的，核心思想很有意义</strong>。</p>
<p>xml 布局加载耗时的问题， google 也想改善这种现状，最近 Compose beta 发布了，他是采用声明式 UI 的方式来编写布局，避免了 xml 带来的耗时。同时，还支持布局实时预览。这个应该是以后的发展趋势。</p>
<p><a href="https://github.com/android/compose-samples">compose-samples</a></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>上面讲了布局优化的现状与发展趋势，接下来我们一起来看一下，有哪些布局优化手段，可以应用到项目中的。</p>
<ol>
<li>渐进式加载</li>
<li>异步加载</li>
<li>compose 声明式 UI</li>
</ol>
<h1 id="渐进式加载"><a href="#渐进式加载" class="headerlink" title="渐进式加载"></a>渐进式加载</h1><h2 id="什么是渐进式加载"><a href="#什么是渐进式加载" class="headerlink" title="什么是渐进式加载"></a>什么是渐进式加载</h2><p>渐进式加载，简单来说，就是一部分一部分加载，当前帧加载完成之后，再去加载下一帧。</p>
<p>一种极致的做法是，加载 xml 文件，就想加载一个空白的 xml，布局全部使用 ViewStub 标签进行懒加载。</p>
<p>这样设计的好处是可以减缓同一时刻，加载 View 带来的压力，通常的做法是我们先加载核心部分的 View，再逐步去加载其他 View。</p>
<p>有人可能会这样问了，这样的设计很鸡肋，有什么用呢？</p>
<p><strong>确实，在高端机上面作用不明显，甚至可能看不出来，但是在中低端机上面，带来的效果还是很明显的</strong>。在我们项目当中，复杂的页面首帧耗时约可以减少 30%。</p>
<p><strong>优点</strong>：适配成本低，在中低端机上面效果明显。</p>
<p><strong>缺点</strong>：还是需要在主线程读取 xml 文件</p>
<h2 id="核心伪代码"><a href="#核心伪代码" class="headerlink" title="核心伪代码"></a>核心伪代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start()&#123;</span><br><span class="line">    loadA()&#123;</span><br><span class="line">        loadB()&#123;</span><br><span class="line">            loadC()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>上面的这种写法，是可以的，但是这种做法，有一个很明显的缺点，就是会造成回调嵌套层数过多。当然，我们也可以使用 RxJava 来解决这种问题。但是，如果项目中没用 Rxjava，引用进来，会造成包 size 增加。</p>
<p>一个简单的做法就是<strong>使用队列的思想，将所有的 ViewStubTask 添加到队列当中，当当前的 ViewStubTask 加载完成，才加载下一个</strong>，这样可以避免回调嵌套层数过多的问题。</p>
<p>改造之后的代码见</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val decorView = this.window.decorView</span><br><span class="line">ViewStubTaskManager.instance(decorView)</span><br><span class="line">            .addTask(ViewStubTaskContent(decorView))</span><br><span class="line">            .addTask(ViewStubTaskTitle(decorView))</span><br><span class="line">            .addTask(ViewStubTaskBottom(decorView))</span><br><span class="line">            .start()</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ViewStubTaskManager private constructor(val decorView: View) : Runnable &#123;</span><br><span class="line"></span><br><span class="line">    private var iViewStubTask: IViewStubTask? = null</span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line"></span><br><span class="line">        const val TAG = &quot;ViewStubTaskManager&quot;</span><br><span class="line"></span><br><span class="line">        @JvmStatic</span><br><span class="line">        fun instance(decorView: View): ViewStubTaskManager &#123;</span><br><span class="line">            return ViewStubTaskManager(decorView)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private val queue: MutableList&lt;ViewStubTask&gt; = CopyOnWriteArrayList()</span><br><span class="line">    private val list: MutableList&lt;ViewStubTask&gt; = CopyOnWriteArrayList()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fun setCallBack(iViewStubTask: IViewStubTask?): ViewStubTaskManager &#123;</span><br><span class="line">        this.iViewStubTask = iViewStubTask</span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun addTask(viewStubTasks: List&lt;ViewStubTask&gt;): ViewStubTaskManager &#123;</span><br><span class="line">        queue.addAll(viewStubTasks)</span><br><span class="line">        list.addAll(viewStubTasks)</span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun addTask(viewStubTask: ViewStubTask): ViewStubTaskManager &#123;</span><br><span class="line">        queue.add(viewStubTask)</span><br><span class="line">        list.add(viewStubTask)</span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fun start() &#123;</span><br><span class="line">        if (isEmpty()) &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        iViewStubTask?.beforeTaskExecute()</span><br><span class="line">        // 指定 decorView 绘制下一帧的时候会回调里面的 runnable</span><br><span class="line">        ViewCompat.postOnAnimation(decorView, this)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun stop() &#123;</span><br><span class="line">        queue.clear()</span><br><span class="line">        list.clear()</span><br><span class="line">        decorView.removeCallbacks(null)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private fun isEmpty() = queue.isEmpty() || queue.size == 0</span><br><span class="line"></span><br><span class="line">    override fun run() &#123;</span><br><span class="line">        if (!isEmpty()) &#123;</span><br><span class="line">            // 当队列不为空的时候，先加载当前 viewStubTask</span><br><span class="line">            val viewStubTask = queue.removeAt(0)</span><br><span class="line">            viewStubTask.inflate()</span><br><span class="line">            iViewStubTask?.onTaskExecute(viewStubTask)</span><br><span class="line">            // 加载完成之后，再 postOnAnimation 加载下一个</span><br><span class="line">            ViewCompat.postOnAnimation(decorView, this)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            iViewStubTask?.afterTaskExecute()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun notifyOnDetach() &#123;</span><br><span class="line">        list.forEach &#123;</span><br><span class="line">            it.onDetach()</span><br><span class="line">        &#125;</span><br><span class="line">        list.clear()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun notifyOnDataReady() &#123;</span><br><span class="line">        list.forEach &#123;</span><br><span class="line">            it.onDataReady()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IViewStubTask &#123;</span><br><span class="line"></span><br><span class="line">    fun beforeTaskExecute()</span><br><span class="line"></span><br><span class="line">    fun onTaskExecute(viewStubTask: ViewStubTask)</span><br><span class="line"></span><br><span class="line">    fun afterTaskExecute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码地址：<a href="https://github.com/gdutxiaoxu/AnchorTask%EF%BC%8C**%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81%E4%B8%BB%E8%A6%81%E5%9C%A8">https://github.com/gdutxiaoxu/AnchorTask，**核心代码主要在</a> <code>ViewStubTask</code>，<code>ViewStubTaskManager</code>**, 有兴趣的可以看看</p>
<h1 id="异步加载-1"><a href="#异步加载-1" class="headerlink" title="异步加载"></a>异步加载</h1><p>异步加载，简单来说，就是在子线程创建 View。在实际应用中，我们通常会先预加载 View，常用的方案有：</p>
<ol>
<li>在合适的时候，启动子线程 inflate layout。然后取的时候，直接去缓存里面查找 View 是否已经创建好了，是的话，直接使用缓存。否则，等待子线程 inlfate 完成。</li>
</ol>
<h2 id="AsyncLayoutInflater"><a href="#AsyncLayoutInflater" class="headerlink" title="AsyncLayoutInflater"></a>AsyncLayoutInflater</h2><p>官方提供了一个类，可以来进行异步的inflate，但是有两个缺点：</p>
<ol>
<li>每次都要现场new一个出来</li>
<li>异步加载的view只能通过callback回调才能获得（死穴）</li>
</ol>
<p>因此，我们可以仿造官方的 AsyncLayoutInflater 进行改造。<strong>核心代码在 AsyncInflateManager</strong>。主要介绍两个方法。</p>
<p><code>asyncInflate</code> 方法，在子线程 inflateView，并将加载结果存放到 mInflateMap 里面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    @UiThread</span><br><span class="line">fun asyncInflate(</span><br><span class="line">        context: Context,</span><br><span class="line">        vararg items: AsyncInflateItem?</span><br><span class="line">    ) &#123;</span><br><span class="line">        items.forEach &#123; item -&gt;</span><br><span class="line">            if (item == null || item.layoutResId == 0 || mInflateMap.containsKey(item.inflateKey) || item.isCancelled() || item.isInflating()) &#123;</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            mInflateMap[item.inflateKey] = item</span><br><span class="line">            onAsyncInflateReady(item)</span><br><span class="line">            inflateWithThreadPool(context, item)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>getInflatedView</code> 方法，用来获得异步inflate出来的view，核心思想如下</p>
<ul>
<li>先从缓存结果里面拿 View，拿到了view直接返回</li>
<li>没拿到view，但是子线程在inflate中，等待返回</li>
<li>如果还没开始inflate，由UI线程进行inflate</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 用来获得异步inflate出来的view</span><br><span class="line"> *</span><br><span class="line"> * @param context</span><br><span class="line"> * @param layoutResId 需要拿的layoutId</span><br><span class="line"> * @param parent      container</span><br><span class="line"> * @param inflateKey  每一个View会对应一个inflateKey，因为可能许多地方用的同一个 layout，但是需要inflate多个，用InflateKey进行区分</span><br><span class="line"> * @param inflater    外部传进来的inflater，外面如果有inflater，传进来，用来进行可能的SyncInflate，</span><br><span class="line"> * @return 最后inflate出来的view</span><br><span class="line"> */</span><br><span class="line">@UiThread</span><br><span class="line">fun getInflatedView(</span><br><span class="line">    context: Context?,</span><br><span class="line">    layoutResId: Int,</span><br><span class="line">    parent: ViewGroup?,</span><br><span class="line">    inflateKey: String?,</span><br><span class="line">    inflater: LayoutInflater</span><br><span class="line">): View &#123;</span><br><span class="line">    if (!TextUtils.isEmpty(inflateKey) &amp;&amp; mInflateMap.containsKey(inflateKey)) &#123;</span><br><span class="line">        val item = mInflateMap[inflateKey]</span><br><span class="line">        val latch = mInflateLatchMap[inflateKey]</span><br><span class="line">        if (item != null) &#123;</span><br><span class="line">            val resultView = item.inflatedView</span><br><span class="line">            if (resultView != null) &#123;</span><br><span class="line">                //拿到了view直接返回</span><br><span class="line">                removeInflateKey(item)</span><br><span class="line">                replaceContextForView(resultView, context)</span><br><span class="line">                Log.i(TAG, &quot;getInflatedView from cache: inflateKey is $inflateKey&quot;)</span><br><span class="line">                return resultView</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (item.isInflating() &amp;&amp; latch != null) &#123;</span><br><span class="line">                //没拿到view，但是在inflate中，等待返回</span><br><span class="line">                try &#123;</span><br><span class="line">                    latch.await()</span><br><span class="line">                &#125; catch (e: InterruptedException) &#123;</span><br><span class="line">                    Log.e(TAG, e.message, e)</span><br><span class="line">                &#125;</span><br><span class="line">                removeInflateKey(item)</span><br><span class="line">                if (resultView != null) &#123;</span><br><span class="line">                    Log.i(TAG, &quot;getInflatedView from OtherThread: inflateKey is $inflateKey&quot;)</span><br><span class="line">                    replaceContextForView(resultView, context)</span><br><span class="line">                    return resultView</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //如果还没开始inflate，则设置为false，UI线程进行inflate</span><br><span class="line">            item.setCancelled(true)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Log.i(TAG, &quot;getInflatedView from UI: inflateKey is $inflateKey&quot;)</span><br><span class="line">    //拿异步inflate的View失败，UI线程inflate</span><br><span class="line">    return inflater.inflate(layoutResId, parent, false)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="简单-Demo-示范"><a href="#简单-Demo-示范" class="headerlink" title="简单 Demo 示范"></a>简单 Demo 示范</h2><p>第一步：选择在合适的时机调用  <code>AsyncUtils#asyncInflate</code> 方法预加载 View，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">object AsyncUtils &#123;</span><br><span class="line"></span><br><span class="line">    fun asyncInflate(context: Context) &#123;</span><br><span class="line">        val asyncInflateItem =</span><br><span class="line">            AsyncInflateItem(</span><br><span class="line">                LAUNCH_FRAGMENT_MAIN,</span><br><span class="line">                R.layout.fragment_asny,</span><br><span class="line">                null,</span><br><span class="line">                null</span><br><span class="line">            )</span><br><span class="line">        AsyncInflateManager.instance.asyncInflate(context, asyncInflateItem)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun isHomeFragmentOpen() =</span><br><span class="line">        getSP(&quot;async_config&quot;).getBoolean(&quot;home_fragment_switch&quot;, true)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步：在获取 View 的时候，先去缓存里面查找 View</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    override fun onCreateView(</span><br><span class="line">        inflater: LayoutInflater, container: ViewGroup?,</span><br><span class="line">        savedInstanceState: Bundle?</span><br><span class="line">    ): View? &#123;</span><br><span class="line">        // Inflate the layout for this fragment</span><br><span class="line">        val startTime = System.currentTimeMillis()</span><br><span class="line">        val homeFragmentOpen = AsyncUtils.isHomeFragmentOpen()</span><br><span class="line">        val inflatedView: View</span><br><span class="line"></span><br><span class="line">        inflatedView = AsyncInflateManager.instance.getInflatedView(</span><br><span class="line">            context,</span><br><span class="line">            R.layout.fragment_asny,</span><br><span class="line">            container,</span><br><span class="line">            LAUNCH_FRAGMENT_MAIN,</span><br><span class="line">            inflater</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        Log.i(</span><br><span class="line">            TAG,</span><br><span class="line">            &quot;onCreateView: homeFragmentOpen is $homeFragmentOpen, timeInstance is $&#123;System.currentTimeMillis() - startTime&#125;, $&#123;inflatedView.context&#125;&quot;</span><br><span class="line">        )</span><br><span class="line">        return inflatedView</span><br><span class="line">//        return inflater.inflate(R.layout.fragment_asny, container, false)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p><strong>优点</strong>：</p>
<p>可以大大减少 View 创建的时间，使用这种方案之后，获取 View 的时候基本在 10ms 之内的。</p>
<p><strong>缺点</strong></p>
<ol>
<li>由于 View 是提前创建的，并且会存在在一个 map，需要根据自己的业务场景将 View 从 map 中移除，不然会发生内存泄露</li>
<li>View 如果缓存起来，记得在合适的时候重置 view 的状态，不然有时候会发生奇奇怪怪的现象。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> <strong>参考文章</strong></p>
<p><a href="https://juejin.cn/post/6844903924965572615">Android - 一种新奇的冷启动速度优化思路(Fragment极度懒加载 + Layout子线程预加载)</a></p>
<ol>
<li>View 的渐进式加载，在 JectPack compose 没有推广之后，推荐使用这种方案，适配成本低</li>
<li>View 的异步加载方案，虽然效果显著，但是适配成本也高，没搞好，容易发生内存泄露</li>
<li>JectPack compose 声明式 UI，基本是未来的趋势，有兴趣的可以提前了解一下他。</li>
</ol>
<p>这篇文章,加上一些 Demo，足足花了我几个晚上的时间，觉得不错的话可以关注一下我的微信公众号<strong>程序员徐公</strong>，小弟在此感谢各位大佬们。</p>
<p>源码地址：<a href="https://github.com/gdutxiaoxu/AnchorTask">https://github.com/gdutxiaoxu/AnchorTask</a></p>
]]></content>
      <tags>
        <tag>Android 启动优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 启动优化（四） - 手把手教你实现 AnchorTask</title>
    <url>/p/25812.html</url>
    <content><![CDATA[<blockquote>
<p>**微信公众号：程序员徐公(stormjun94)**，本文首发我的微信公众号，有兴趣的可以<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c9363c4e7614b16aa5ae9cf62cfe5de~tplv-k3u1fbpfcp-zoom-1.image">点击扫码关注</a></p>
</blockquote>
<p>上一篇博客介绍了 AnchorTask 的基本使用，今天，让我们一起看一下怎么实现它。</p>
<p><a href="https://juejin.cn/post/6926794003794903048">Android 启动优化（一） - 有向无环图
</a></p>
<p><a href="https://juejin.cn/post/6930805971673415694">Android 启动优化（二） - 拓扑排序的原理以及解题思路</a></p>
<p><a href="https://juejin.cn/post/6931903136256753672">Android 启动优化（三） - AnchorTask 使用说明 </a></p>
<h2 id="原理简介"><a href="#原理简介" class="headerlink" title="原理简介"></a>原理简介</h2><p>AnchorTask，锚点任务，它的实现原理是构建一个有向无环图，拓扑排序之后，如果任务 B 依赖任务 A，那么 A 一定排在任务 B 之前。</p>
<p><em><strong>了解原理之前，请必须先了解有向无环图和多线程的一些基本知识，不然，下文，你基本是看不懂的</strong></em>。</p>
<h3 id="一个共识"><a href="#一个共识" class="headerlink" title="一个共识"></a>一个共识</h3><p><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/01/20210219104449.png"></p>
<ul>
<li><strong>前置任务</strong>：任务 3 依赖于任务 0，1，那么任务 3 的前置任务是任务 0， 1</li>
<li><strong>子任务</strong>：任务 0 执行完之后，任务 3 才能执行，那么称呼任务 3 为 任务 0 的子任务</li>
</ul>
<h3 id="如何构建一个有向无环图"><a href="#如何构建一个有向无环图" class="headerlink" title="如何构建一个有向无环图"></a>如何构建一个有向无环图</h3><p>这里我们采用 BFS 方法实现，算法思想大概是这样的</p>
<ul>
<li>建立入度表，入度为 0 的节点先入队</li>
<li>当队列不为空，进行循环判断<ul>
<li>节点出队，添加到结果 list 当中</li>
<li>将该节点的邻居入度减 1</li>
<li>若邻居课程入度为 0，加入队列</li>
</ul>
</li>
<li>若结果 list 与所有节点数量相等，则证明不存在环。否则，存在环</li>
</ul>
<h3 id="多线程中，任务执行是随机的，那如何保证任务被依赖的任务先于任务执行呢？"><a href="#多线程中，任务执行是随机的，那如何保证任务被依赖的任务先于任务执行呢？" class="headerlink" title="多线程中，任务执行是随机的，那如何保证任务被依赖的任务先于任务执行呢？"></a>多线程中，任务执行是随机的，那如何保证任务被依赖的任务先于任务执行呢？</h3><p>这里要解决的主要有三个问题</p>
<ol>
<li>首先我们要解决一个问题，它有哪些前置任务，这个可以用 list 存储，代表它依赖的任务 list。当它所依赖的任务 list 没有执行完毕，当前任务需要等待。</li>
<li>当前任务执行完毕之后，所有依赖它的子任务需要感知到。我们可以用一个 map 来存储这种关系，key 是当前任务，value 是依赖于当前任务的集合（list）</li>
<li>多线程当中，等待和唤醒功能，有多种方式可以实现。wait、notify 机制，ReentrantLock Condition 机制，CountDownLatch 机制。这里我们选择 CountDownLatch 机制，因为 CountDownLatch 有点类似于计数器，特别适合这种场景。</li>
</ol>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="IAnchorTask"><a href="#IAnchorTask" class="headerlink" title="IAnchorTask"></a>IAnchorTask</h3><p>首先，我们定义一个 IAnchorTask 接口，主要有一个方法</p>
<ul>
<li><code>isRunOnMainThread(): Boolean</code> 表示是否在主线程运行，默认值是 false</li>
<li><code>priority(): Int</code> 方法 表示线程的优先级别，默认值是 Process.THREAD_PRIORITY_FOREGROUND</li>
<li><code> needWait()</code> 表示当我们调用 <code>AnchorTaskDispatcher await</code> 时，是否需要等待，return true，表示需要等待改任务执行结束，<code>AnchorTaskDispatcher await</code> 方法才能继续往下执行。</li>
<li><code>fun getDependsTaskList(): List&lt;Class&lt;out AnchorTask&gt;&gt;?</code> 方法返回前置任务依赖，默认值是返回 null.</li>
<li><code> fun run()</code> 方法，表示任务执行的时候</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface IAnchorTask : IAnchorCallBack &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否在主线程执行</span><br><span class="line">     */</span><br><span class="line">    fun isRunOnMainThread(): Boolean</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 任务优先级别</span><br><span class="line">     */</span><br><span class="line">    @IntRange(</span><br><span class="line">        from = Process.THREAD_PRIORITY_FOREGROUND.toLong(),</span><br><span class="line">        to = Process.THREAD_PRIORITY_LOWEST.toLong()</span><br><span class="line">    )</span><br><span class="line">    fun priority(): Int</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 调用 await 方法，是否需要等待改任务执行完成</span><br><span class="line">     * true 不需要</span><br><span class="line">     * false 需要</span><br><span class="line">     */</span><br><span class="line">    fun needWait(): Boolean</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 当前任务的前置任务，可以用来确定顶点的入度</span><br><span class="line">     */</span><br><span class="line">    fun getDependsTaskList(): List&lt;Class&lt;out AnchorTask&gt;&gt;?</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 任务被执行的时候回调</span><br><span class="line">     */</span><br><span class="line">    fun run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>它有一个实现类 AnchorTask，增加了 await 和 countdown 方法</p>
<ul>
<li>await 方法，调用它，当前任务会等待</li>
<li>countdown() 方法，如果当前计数器值 &gt; 0,会减一，否则，什么也不操作</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abstract class AnchorTask : IAnchorTask &#123;</span><br><span class="line"></span><br><span class="line">    private val countDownLatch: CountDownLatch = CountDownLatch(getListSize())</span><br><span class="line">    private fun getListSize() = getDependsTaskList()?.size ?: 0</span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line">        const val TAG = &quot;AnchorTask&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * self call,await</span><br><span class="line">     */</span><br><span class="line">    fun await() &#123;</span><br><span class="line">        countDownLatch.await()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * parent call, countDown</span><br><span class="line">     */</span><br><span class="line">    fun countdown() &#123;</span><br><span class="line">        countDownLatch.countDown()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="排序实现"><a href="#排序实现" class="headerlink" title="排序实现"></a>排序实现</h3><p>无环图的拓扑排序，这里采用的是 BFS 算法。具体的可以见 <code>AnchorTaskUtils#getSortResult</code> 方法，它有三个参数</p>
<ul>
<li>list 存储所有的任务</li>
<li><code> taskMap: MutableMap&lt;Class&lt;out AnchorTask&gt;, AnchorTask&gt; = HashMap()</code>存储所有的任务,key 是 Class<out AnchorTask>，value 是 AnchorTask</li>
<li><code>taskChildMap: MutableMap&lt;Class&lt;out AnchorTask&gt;, ArrayList&lt;Class&lt;out AnchorTask&gt;&gt;?&gt; =   HashMap()</code>,储存当前任务的子任务， key 是当前任务的 class，value 是 AnchorTask 的 list</li>
</ul>
<p>算法思想</p>
<ol>
<li>首先找出所有入度为 0 的队列，用 queue 变量存储</li>
<li>当队列不为空，进行循环判断。<ul>
<li>从队列 pop 出，添加到结果队列</li>
<li>遍历当前任务的子任务，通知他们的入度减一（其实是遍历 taskChildMap），如果入度为 0，添加到队列 queue 里面</li>
</ul>
</li>
<li>当结果队列和 list size 不相等试，证明有环</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@JvmStatic</span><br><span class="line">fun getSortResult(</span><br><span class="line">    list: MutableList&lt;AnchorTask&gt;, taskMap: MutableMap&lt;Class&lt;out AnchorTask&gt;, AnchorTask&gt;,</span><br><span class="line">    taskChildMap: MutableMap&lt;Class&lt;out AnchorTask&gt;, ArrayList&lt;Class&lt;out AnchorTask&gt;&gt;?&gt;</span><br><span class="line">): MutableList&lt;AnchorTask&gt; &#123;</span><br><span class="line">    val result = ArrayList&lt;AnchorTask&gt;()</span><br><span class="line">    // 入度为 0 的队列</span><br><span class="line">    val queue = ArrayDeque&lt;AnchorTask&gt;()</span><br><span class="line">    val taskIntegerHashMap = HashMap&lt;Class&lt;out AnchorTask&gt;, Int&gt;()</span><br><span class="line"></span><br><span class="line">    // 建立每个 task 的入度关系</span><br><span class="line">    list.forEach &#123; anchorTask: AnchorTask -&gt;</span><br><span class="line">        val clz = anchorTask.javaClass</span><br><span class="line">        if (taskIntegerHashMap.containsKey(clz)) &#123;</span><br><span class="line">            throw AnchorTaskException(&quot;anchorTask is repeat, anchorTask is $anchorTask, list is $list&quot;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        val size = anchorTask.getDependsTaskList()?.size ?: 0</span><br><span class="line">        taskIntegerHashMap[clz] = size</span><br><span class="line">        taskMap[clz] = anchorTask</span><br><span class="line">        if (size == 0) &#123;</span><br><span class="line">            queue.offer(anchorTask)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 建立每个 task 的 children 关系</span><br><span class="line">    list.forEach &#123; anchorTask: AnchorTask -&gt;</span><br><span class="line">        anchorTask.getDependsTaskList()?.forEach &#123; clz: Class&lt;out AnchorTask&gt; -&gt;</span><br><span class="line">            var list = taskChildMap[clz]</span><br><span class="line">            if (list == null) &#123;</span><br><span class="line">                list = ArrayList&lt;Class&lt;out AnchorTask&gt;&gt;()</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(anchorTask.javaClass)</span><br><span class="line">            taskChildMap[clz] = list</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 使用 BFS 方法获得有向无环图的拓扑排序</span><br><span class="line">    while (!queue.isEmpty()) &#123;</span><br><span class="line">        val anchorTask = queue.pop()</span><br><span class="line">        result.add(anchorTask)</span><br><span class="line">        val clz = anchorTask.javaClass</span><br><span class="line">        taskChildMap[clz]?.forEach &#123; // 遍历所有依赖这个顶点的顶点，移除该顶点之后，如果入度为 0，加入到改队列当中</span><br><span class="line">            var result = taskIntegerHashMap[it] ?: 0</span><br><span class="line">            result--</span><br><span class="line">            if (result == 0) &#123;</span><br><span class="line">                queue.offer(taskMap[it])</span><br><span class="line">            &#125;</span><br><span class="line">            taskIntegerHashMap[it] = result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // size 不相等，证明有环</span><br><span class="line">    if (list.size != result.size) &#123;</span><br><span class="line">        throw AnchorTaskException(&quot;Ring appeared，Please check.list is $list, result is $result&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="AnchorTaskDispatcher"><a href="#AnchorTaskDispatcher" class="headerlink" title="AnchorTaskDispatcher"></a>AnchorTaskDispatcher</h3><p>AnchorTaskDispatcher 这个类很重要，有向无环图的拓扑排序和多线程的依赖唤醒，都是借助这个核心类完成的。</p>
<p>它主要有几个成员变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 存储所有的任务</span><br><span class="line">    private val list: MutableList&lt;AnchorTask&gt; = ArrayList()</span><br><span class="line"></span><br><span class="line">    // 存储所有的任务,key 是 Class&lt;out AnchorTask&gt;，value 是 AnchorTask</span><br><span class="line">    private val taskMap: MutableMap&lt;Class&lt;out AnchorTask&gt;, AnchorTask&gt; = HashMap()</span><br><span class="line"></span><br><span class="line">    // 储存当前任务的子任务， key 是当前任务的 class，value 是 AnchorTask 的 list</span><br><span class="line">    private val taskChildMap: MutableMap&lt;Class&lt;out AnchorTask&gt;, ArrayList&lt;Class&lt;out AnchorTask&gt;&gt;?&gt; =</span><br><span class="line">        HashMap()</span><br><span class="line"></span><br><span class="line">    // 拓扑排序之后的主线程任务</span><br><span class="line">    private val mainList: MutableList&lt;AnchorTask&gt; = ArrayList()</span><br><span class="line"></span><br><span class="line">    // 拓扑排序之后的子线程任务</span><br><span class="line">    private val threadList: MutableList&lt;AnchorTask&gt; = ArrayList()</span><br><span class="line"></span><br><span class="line">    //需要等待的任务总数，用于阻塞</span><br><span class="line">    private lateinit var countDownLatch: CountDownLatch</span><br><span class="line"></span><br><span class="line">    //需要等待的任务总数，用于CountDownLatch</span><br><span class="line">    private val needWaitCount: AtomicInteger = AtomicInteger()</span><br></pre></td></tr></table></figure>


<p>它有一个比较重要的方法 <code>setNotifyChildren(anchorTask: AnchorTask)</code> ，有一个方法参数 AnchorTask，它的作用是通知该任务的子任务，当前任务执行完毕，入度数减一。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  通知 child countdown,当前的阻塞任务书也需要 countdown</span><br><span class="line"> */</span><br><span class="line">fun setNotifyChildren(anchorTask: AnchorTask) &#123;</span><br><span class="line">    taskChildMap[anchorTask::class.java]?.forEach &#123;</span><br><span class="line">        taskMap[it]?.countdown()</span><br><span class="line">    &#125;</span><br><span class="line">    if (anchorTask.needWait()) &#123;</span><br><span class="line">        countDownLatch.countDown()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来看一下 start 方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun start(): AnchorTaskDispatcher &#123;</span><br><span class="line">        if (Looper.myLooper() != Looper.getMainLooper()) &#123;</span><br><span class="line">            throw AnchorTaskException(&quot;start method should be call on main thread&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">        startTime = System.currentTimeMillis()</span><br><span class="line"></span><br><span class="line">        val sortResult = AnchorTaskUtils.getSortResult(list, taskMap, taskChildMap)</span><br><span class="line">        LogUtils.i(TAG, &quot;start: sortResult is $sortResult&quot;)</span><br><span class="line">        sortResult.forEach &#123;</span><br><span class="line">            if (it.isRunOnMainThread()) &#123;</span><br><span class="line">                mainList.add(it)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                threadList.add(it)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        countDownLatch = CountDownLatch(needWaitCount.get())</span><br><span class="line"></span><br><span class="line">        val threadPoolExecutor =</span><br><span class="line">            this.threadPoolExecutor ?: TaskExecutorManager.instance.cpuThreadPoolExecutor</span><br><span class="line"></span><br><span class="line">        threadList.forEach &#123;</span><br><span class="line">            threadPoolExecutor.execute(AnchorTaskRunnable(this, anchorTask = it))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mainList.forEach &#123;</span><br><span class="line">            AnchorTaskRunnable(this, anchorTask = it).run()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>它主要干几件事</p>
<ul>
<li>检测是否在主线程，不是抛出异常，这里为什么要检测在主线程呢？主要是构建有向无环图的过程，我们必须保证是线程安全的</li>
<li>获取有向无环图的拓扑排序</li>
<li>根据拓扑排序的排序结果，执行相应的任务。可以看到在执行任务的时候，我们使用 <code>AnchorTaskRunnable</code> 包裹起来</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class AnchorTaskRunnable(</span><br><span class="line">    private val anchorTaskDispatcher: AnchorTaskDispatcher,</span><br><span class="line">    private val anchorTask: AnchorTask</span><br><span class="line">) : Runnable &#123;</span><br><span class="line"></span><br><span class="line">    override fun run() &#123;</span><br><span class="line">        Process.setThreadPriority(anchorTask.priority())</span><br><span class="line">        //  前置任务没有执行完毕的话，等待，执行完毕的话，往下走</span><br><span class="line">        anchorTask.await()</span><br><span class="line">        anchorTask.onStart()</span><br><span class="line">        // 执行任务</span><br><span class="line">        anchorTask.run()</span><br><span class="line">        anchorTask.onFinish()</span><br><span class="line">        // 通知子任务，当前任务执行完毕了，相应的计数器要减一。</span><br><span class="line">        anchorTaskDispatcher.setNotifyChildren(anchorTask)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>AnchorTaskRunnable 有点类似于装饰者模式，多线程依赖的执行关系在这里都得到体现，只有几行代码</p>
<ol>
<li>前置任务没有执行完毕的话，等待，执行完毕的话，往下走</li>
<li>执行任务</li>
<li>通知子任务，当前任务执行完毕了，相应的计数器（入度数）要减一。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>AnchorTask 的原理不复杂，本质是有向无环图与多线程知识的结合。</p>
<ol>
<li>根据 BFS 构建出有向无环图，并得到它的拓扑排序</li>
<li>在多线程执行过程中，我们是通过任务的子任务关系和 CounDownLatch 确保先后执行关系的<ol>
<li>前置任务没有执行完毕的话，等待，执行完毕的话，往下走</li>
<li>执行任务</li>
<li>通知子任务，当前任务执行完毕了，相应的计数器（入度数）要减一。</li>
</ol>
</li>
</ol>
<p>AnchorTask 源码已经更新到 github，<a href="https://github.com/gdutxiaoxu/AnchorTask">AnchorTask</a>。<br>我的微信公众号<strong>程序员徐公</strong>，有兴趣的可以<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c9363c4e7614b16aa5ae9cf62cfe5de~tplv-k3u1fbpfcp-zoom-1.image">点击扫码关注</a></p>
]]></content>
      <tags>
        <tag>Android 启动优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 启动优化（七） - JetPack App Startup 使用及源码浅析</title>
    <url>/p/4090.html</url>
    <content><![CDATA[<blockquote>
<p>本文收录于 <a href="https://github.com/gdutxiaoxu/AndroidGuide">https://github.com/gdutxiaoxu/AndroidGuide</a> 「Android学习+面试指南」一份涵盖大部分 Android 程序员所需要掌握的核心知识。准备 Android 面试，首选 AndroidGuide！<strong>微信公众号：程序员徐公</strong></p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前一阵子，写了几篇 Android 启动优化的文章，主要是从两个方面论述的。</p>
<ol>
<li>Application 多线程异步加载，以及怎么解决多线程任务依赖的问题</li>
<li>首页布局优化，从常规的布局嵌套优化到渐进式加载，再到异步加载。</li>
</ol>
<p><a href="https://mp.weixin.qq.com/s/xWYe-uxgXTPuitYcLgXYNg">Android 启动优化（一） - 有向无环图</a></p>
<p><a href="https://mp.weixin.qq.com/s/ShfxD_Z7M_NuWYNodn-vqA">Android 启动优化（二） - 拓扑排序的原理以及解题思路</a></p>
<p><a href="https://mp.weixin.qq.com/s/YRUpf9jKEwIHV0A4FqltXg">Android 启动优化（三）- AnchorTask 开源了</a></p>
<p><a href="https://mp.weixin.qq.com/s/6RKco9JTm6ZrFyw99k9Rlg">Android 启动优化（四）- AnchorTask 是怎么实现的</a></p>
<p><a href="https://mp.weixin.qq.com/s/0MsJa0ZepWkPUs-ymnVb-w">Android 启动优化（五）- AnchorTask 1.0.0 版本正式发布了</a></p>
<p><a href="https://mp.weixin.qq.com/s/7_dQd2wGZYKWf9kHNlv2fg">Android 启动优化（六）- 深入理解布局优化</a></p>
<p>发布在掘金之后，几篇文章都被推荐上了掘金首页，深得大家的喜欢，阅读量也挺不错的。</p>
<p>有不少公众号粉丝在后台问我 <strong>JetPack App Startup</strong> 是什么，跟我开源的 <a href="https://github.com/gdutxiaoxu/AnchorTask">AnchorTask</a> 有什么区别？</p>
<p>今天，就让我们来聊一聊 JetPack App Startup。</p>
<p>目录大概是这样的</p>
<blockquote>
<p>1 什么是 JetPack App Startup <br/><br>2 JetPack App Startup 能解决什么问题 <br/><br>3 JetPack App Startup 基本使用 <br/><br>4 JetPack App Startup 进阶使用 <br/><br>5 JetPack App Startup 源码浅析 <br/><br>6 小结</p>
</blockquote>
<h2 id="什么是-JetPack-App-Startup"><a href="#什么是-JetPack-App-Startup" class="headerlink" title="什么是 JetPack App Startup"></a>什么是 JetPack App Startup</h2><p>我们先来看一下官方的解释，<a href="https://developer.android.com/topic/libraries/app-startup">官方地址</a>：<a href="https://developer.android.com/topic/libraries/app-startup">https://developer.android.com/topic/libraries/app-startup</a></p>
<blockquote>
<p>The App Startup library provides a straightforward, performant way to initialize components at application startup. Both library developers and app developers can use App Startup to streamline startup sequences and explicitly set the order of initialization.</p>
</blockquote>
<blockquote>
<p>Instead of defining separate content providers for each component you need to initialize, App Startup allows you to define component initializers that share a single content provider. This can significantly improve app startup time.</p>
</blockquote>
<p>翻译过来就是：</p>
<ol>
<li>App Startup 这个库提供了一个组件，可以在应用程序启动的时候初始化。</li>
<li>开发人员可以使用这个组件精简启动序列和显式地设置初始化的顺序。 　</li>
<li>我们不需要为每个组件定义单独的 ContentProvider,App Startup 允许您定义的所有组件化共享一个内容提供者。这样可以<strong>极大地减少高应用程序的启动时间</strong></li>
</ol>
<h2 id="JetPack-App-Startup-能解决什么问题"><a href="#JetPack-App-Startup-能解决什么问题" class="headerlink" title="JetPack App Startup 能解决什么问题"></a>JetPack App Startup 能解决什么问题</h2><p><strong>听了上面的介绍，是不是还有点懵？</strong></p>
<p>App Startup 能减少高应用程序的启动时间，它是怎么做到的？</p>
<p>做过 Android 启动优化的，可能都知道，Android 的启动流程是这样的。</p>
<p><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/02/20210417133422.png"></p>
<p>从 <code>Application#attachBaseContext</code> 到 <code>ContentProvider#onCreate</code>，到 <code>Application#onCreate</code> 再到 <code>MainActivity#onCreate</code>。</p>
<p>而 <strong>App Startup</strong> 设计的初衷，正是为了收拢 ContentProvider。有不少第三方的 SDk，为了使用者不必手动调用 <code>SDK#init</code> 方法，使用了 ContentProvider 这一个骚操作。</p>
<p>在 AndroidManifest 里面注册了自己的 xxSDkProvider，然后在 xxSDkProvider 的 onCreate 方面里面进行初始化，确实调用者不需要自己初始化了，可却增加了启动耗时，如果要作优化，还得自己剔除 ContentProvider 的初始化，值不值得，我是感觉没必要，这操作是<strong>真的骚</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;application ...&gt;</span><br><span class="line"></span><br><span class="line">    &lt;provider</span><br><span class="line">        android:name=&quot;.xxSDkProvider&quot;</span><br><span class="line">        android:authorities=&quot;$&#123;applicationId&#125;.xxSDkProvider&quot;</span><br><span class="line">        android:exported=&quot;false&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class XXSDKProvider : ContentProvider() &#123;</span><br><span class="line"></span><br><span class="line">    override fun onCreate(): Boolean &#123;</span><br><span class="line">        Log.d(TAG, &quot;XXSDKProvider create()&quot;)</span><br><span class="line">        XXSDK.init()</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<p><strong>同时，这里给做启动优化的同学提供了一种思路。打开你的 Apk，看一下 AndroidManiest 里面有多少 provider，看一下是否有这样的骚操作。如果有，改一下，说不定启动优化，一下子就减少了 100 多 毫秒。</strong></p>
<p>接下来，我们来看一下 AppStartUp 怎么使用</p>
<h2 id="AppStartUp-基本使用"><a href="#AppStartUp-基本使用" class="headerlink" title="AppStartUp 基本使用"></a>AppStartUp 基本使用</h2><p>简单来说，分为三步</p>
<ol>
<li>gradle 文件引入App Startup 库。</li>
<li>自定义一个用于初始化的 Initializer。</li>
<li>将自定义 Initializer 配置到 AndroidManifest.xml 当中。</li>
</ol>
<p><strong>第一步，在 build.gradle 文件添加依赖</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &quot;androidx.startup:startup-runtime:1.0.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二步：自定义实现 Initializer 类</strong></p>
<p>主要有两个方法</p>
<ol>
<li><code>T create(@NonNull Context context)</code> 初始化一个组件，返回给 Application</li>
<li><code>List&lt;Class&lt;? extends Initializer&lt;?&gt;&gt;&gt; dependencies()</code> 当前的 Initializer 依赖于哪些 Initializers，通过这个可以确定先后启动的顺序</li>
</ol>
<p>我们以官方的例子来讲解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Initializes WorkManager.</span><br><span class="line">class WorkManagerInitializer : Initializer&lt;WorkManager&gt; &#123;</span><br><span class="line">    override fun create(context: Context): WorkManager &#123;</span><br><span class="line">        val configuration = Configuration.Builder().build()</span><br><span class="line">        WorkManager.initialize(context, configuration)</span><br><span class="line">        return WorkManager.getInstance(context)</span><br><span class="line">    &#125;</span><br><span class="line">    override fun dependencies(): List&lt;Class&lt;out Initializer&lt;*&gt;&gt;&gt; &#123;</span><br><span class="line">        // No dependencies on other libraries.</span><br><span class="line">        return emptyList()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WorkManagerInitializer 返回一个 WorkManager，它不需要依赖于其他的 Initializer，直接返回 emptyList() 即可。</p>
<p>如果需要依赖其他的 Initializer，重写 dependencies 方法，返回即可。如下面的 ExampleLoggerInitializer 依赖于 WorkManagerInitializer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Initializes ExampleLogger.</span><br><span class="line">class ExampleLoggerInitializer : Initializer&lt;ExampleLogger&gt; &#123;</span><br><span class="line">    override fun create(context: Context): ExampleLogger &#123;</span><br><span class="line">        // WorkManager.getInstance() is non-null only after</span><br><span class="line">        // WorkManager is initialized.</span><br><span class="line">        return ExampleLogger(WorkManager.getInstance(context))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun dependencies(): List&lt;Class&lt;out Initializer&lt;*&gt;&gt;&gt; &#123;</span><br><span class="line">        // Defines a dependency on WorkManagerInitializer so it can be</span><br><span class="line">        // initialized after WorkManager is initialized.</span><br><span class="line">        return listOf(WorkManagerInitializer::class.java)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  ExampleLogger(val workManager: WorkManager)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步：在 AndroidManifest 里面配置自定义的 InitializationProvider</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;provider</span><br><span class="line">    android:name=&quot;androidx.startup.InitializationProvider&quot;</span><br><span class="line">    android:authorities=&quot;$&#123;applicationId&#125;.androidx-startup&quot;</span><br><span class="line">    android:exported=&quot;false&quot;</span><br><span class="line">    tools:node=&quot;merge&quot;&gt;</span><br><span class="line">    &lt;!-- This entry makes ExampleLoggerInitializer discoverable. --&gt;</span><br><span class="line">    &lt;meta-data  android:name=&quot;com.xj.anchortask.appstartup.ExampleLoggerInitializer&quot;</span><br><span class="line">        android:value=&quot;androidx.startup&quot; /&gt;</span><br><span class="line">&lt;/provider&gt;</span><br></pre></td></tr></table></figure>

<p>它是有固定格式的，配置者只需要配置 meta-data 中的 name 即可。<br><code>android:name=&quot;com.xj.anchortask.appstartup.ExampleLoggerInitializer&quot;</code> 这里的 name 是我们自定义的 Initializer 全路径。</p>
<p>程序运行跑起来，可以看到以下输出结果，符合我们的预期</p>
<blockquote>
<p>2021-04-17 17:48:42.049 28059-28059&#x2F;com.xj.anchortask I&#x2F;AnchorTaskApplication: attachBaseContext:<br>2021-04-17 17:48:42.077 28059-28059&#x2F;com.xj.anchortask I&#x2F;AnchorTaskApplication: create: WorkManagerInitializer init<br>2021-04-17 17:48:42.077 28059-28059&#x2F;com.xj.anchortask I&#x2F;AnchorTaskApplication: create: ExampleLoggerInitializer init<br>2021-04-17 17:48:42.084 28059-28059&#x2F;com.xj.anchortask I&#x2F;AnchorTaskApplication: onCreate: </p>
</blockquote>
<h2 id="AppStartUp-进阶使用"><a href="#AppStartUp-进阶使用" class="headerlink" title="AppStartUp 进阶使用"></a>AppStartUp 进阶使用</h2><h3 id="手动初始化"><a href="#手动初始化" class="headerlink" title="手动初始化"></a>手动初始化</h3><p>上面我们讲解了 AppStartUp 的基本使用步骤，如果我们不像在 Application onCreate 之前执行我们的 ExampleLoggerInitializer，要怎么使用呢？</p>
<p>其实很简单，</p>
<ol>
<li>第一步，在 AndroidManifest InitializationProvider 中移除 移除 <code>&lt;meta-data</code> 标签</li>
<li>在代码中调用 AppInitializer initializeComponent 方法初始化</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;provider</span><br><span class="line">    android:name=&quot;androidx.startup.InitializationProvider&quot;</span><br><span class="line">    android:authorities=&quot;$&#123;applicationId&#125;.androidx-startup&quot;</span><br><span class="line">    android:exported=&quot;false&quot;</span><br><span class="line">    tools:node=&quot;merge&quot;&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/provider&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AppInitializer.getInstance(context).initializeComponent(ExampleLoggerInitializer::class.java)</span><br></pre></td></tr></table></figure>

<h2 id="App-start-up-源码分析"><a href="#App-start-up-源码分析" class="headerlink" title="App start up 源码分析"></a>App start up 源码分析</h2><p>我们首先来看一下他的结构，只有简单的几个类</p>
<p><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/02/20210417180733.png"></p>
<p><strong>Initializer</strong> 这个接口就没有必要说了，很简单，只有两个方法。</p>
<p><strong>InitializationProvider</strong> 继承了 ContentProvider，借助了 ContentProvider 会在 Application onCreate 之前执行的特点。来执行一些初始化操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final class InitializationProvider extends ContentProvider &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onCreate() &#123;</span><br><span class="line">        Context context = getContext();</span><br><span class="line">        if (context != null) &#123;</span><br><span class="line">            AppInitializer.getInstance(context).discoverAndInitialize();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new StartupException(&quot;Context cannot be null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ----</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到在 onCreate 方法中调用  AppInitializer discoverAndInitialize 方法进行初始化。</p>
<ol>
<li>找到 AndroidManifest InitializationProvider 下的 meta 便签</li>
<li>判断 meta 便签下 value 的值是不是 androidx.startup</li>
<li>判断是不是实现 Initializer 接口，是的话，执行 doInitialize 方法</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void discoverAndInitialize() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Trace.beginSection(SECTION_NAME);</span><br><span class="line">        ComponentName provider = new ComponentName(mContext.getPackageName(),</span><br><span class="line">                InitializationProvider.class.getName());</span><br><span class="line">        ProviderInfo providerInfo = mContext.getPackageManager()</span><br><span class="line">                .getProviderInfo(provider, GET_META_DATA);</span><br><span class="line">        Bundle metadata = providerInfo.metaData;</span><br><span class="line">        String startup = mContext.getString(R.string.androidx_startup);</span><br><span class="line">        // 找到 metadata 标签</span><br><span class="line">        if (metadata != null) &#123;</span><br><span class="line">            Set&lt;Class&lt;?&gt;&gt; initializing = new HashSet&lt;&gt;();</span><br><span class="line">            Set&lt;String&gt; keys = metadata.keySet();</span><br><span class="line">            for (String key : keys) &#123;</span><br><span class="line">                String value = metadata.getString(key, null);</span><br><span class="line">                // 判断 value 的值是不是 androidx.startup</span><br><span class="line">                // 判断是不是实现了 Initializer 接口，是的话，反射初始化</span><br><span class="line">                if (startup.equals(value)) &#123;</span><br><span class="line">                    Class&lt;?&gt; clazz = Class.forName(key);</span><br><span class="line">                    if (Initializer.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                        Class&lt;? extends Initializer&lt;?&gt;&gt; component =</span><br><span class="line">                                (Class&lt;? extends Initializer&lt;?&gt;&gt;) clazz;</span><br><span class="line">                        mDiscovered.add(component);</span><br><span class="line">                        if (StartupLogger.DEBUG) &#123;</span><br><span class="line">                            StartupLogger.i(String.format(&quot;Discovered %s&quot;, key));</span><br><span class="line">                        &#125;</span><br><span class="line">                        doInitialize(component, initializing);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (PackageManager.NameNotFoundException | ClassNotFoundException exception) &#123;</span><br><span class="line">        throw new StartupException(exception);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        Trace.endSection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>doInitialize 方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; T doInitialize(</span><br><span class="line">        @NonNull Class&lt;? extends Initializer&lt;?&gt;&gt; component,</span><br><span class="line">        @NonNull Set&lt;Class&lt;?&gt;&gt; initializing) &#123;</span><br><span class="line">    synchronized (sLock) &#123;</span><br><span class="line">        boolean isTracingEnabled = Trace.isEnabled();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (isTracingEnabled) &#123;</span><br><span class="line">                // Use the simpleName here because section names would get too big otherwise.</span><br><span class="line">                Trace.beginSection(component.getSimpleName());</span><br><span class="line">            &#125;</span><br><span class="line">            if (initializing.contains(component)) &#123;</span><br><span class="line">                String message = String.format(</span><br><span class="line">                        &quot;Cannot initialize %s. Cycle detected.&quot;, component.getName()</span><br><span class="line">                );</span><br><span class="line">                throw new IllegalStateException(message);</span><br><span class="line">            &#125;</span><br><span class="line">            Object result;</span><br><span class="line">            if (!mInitialized.containsKey(component)) &#123;</span><br><span class="line">                initializing.add(component);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Object instance = component.getDeclaredConstructor().newInstance();</span><br><span class="line">                    Initializer&lt;?&gt; initializer = (Initializer&lt;?&gt;) instance;</span><br><span class="line">                    List&lt;Class&lt;? extends Initializer&lt;?&gt;&gt;&gt; dependencies =</span><br><span class="line">                            initializer.dependencies();</span><br><span class="line"></span><br><span class="line">                    if (!dependencies.isEmpty()) &#123;</span><br><span class="line">                        for (Class&lt;? extends Initializer&lt;?&gt;&gt; clazz : dependencies) &#123;</span><br><span class="line">                            if (!mInitialized.containsKey(clazz)) &#123;</span><br><span class="line">                                doInitialize(clazz, initializing);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (StartupLogger.DEBUG) &#123;</span><br><span class="line">                        StartupLogger.i(String.format(&quot;Initializing %s&quot;, component.getName()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    result = initializer.create(mContext);</span><br><span class="line">                    if (StartupLogger.DEBUG) &#123;</span><br><span class="line">                        StartupLogger.i(String.format(&quot;Initialized %s&quot;, component.getName()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    initializing.remove(component);</span><br><span class="line">                    mInitialized.put(component, result);</span><br><span class="line">                &#125; catch (Throwable throwable) &#123;</span><br><span class="line">                    throw new StartupException(throwable);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                result = mInitialized.get(component);</span><br><span class="line">            &#125;</span><br><span class="line">            return (T) result;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            Trace.endSection();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到在执行初始化的时候，先判断了是否有依赖项，有的话先执行依赖项的初始化</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>App start up，我觉得他的设计初衷应该是为了收拢 ContentProvider，实际上对启动优化的帮助不是很大。</li>
<li>如果你的项目都是同步初始化的话，并且使用到了多个ContentProvider，App Startup可能有一定的优化空间，毕竟统一到了一个ContentProvider中，同时支持了简单的顺序依赖。</li>
<li>ContentProvider 初始化的这个思想，目前有挺多 SDK 这么做的，像 FaceBook 广告 SDK，友盟 SDk 等。我们在启动优化的时候，是不是可以去掉相应的 ContentProvider，减少创建 Provider 的时间</li>
<li>实际项目中 启动优化，大多数啊都会使用多线程异步加载，这时候 App start up 就显得很鸡肋了，没用</li>
</ul>
<p><strong>参考博客：</strong><br><a href="https://blog.csdn.net/guolin_blog/article/details/108026357">Jetpack新成员，App Startup一篇就懂</a></p>
<blockquote>
<p>本文收录于 <a href="https://github.com/gdutxiaoxu/AndroidGuide">https://github.com/gdutxiaoxu/AndroidGuide</a> 「Android学习+面试指南」一份涵盖大部分 Android 程序员所需要掌握的核心知识。准备 Android 面试，首选 AndroidGuide！微信公众号：<strong>程序员徐公</strong></p>
</blockquote>
<p><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/02/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BE%90%E5%85%AC%20(new).png"></p>
]]></content>
      <tags>
        <tag>Android 启动优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 启动系统相机，相册，裁剪图片及6.0权限管理</title>
    <url>/p/null.html</url>
    <content><![CDATA[<p>在日常开发中，我们经常需要用到上传图片的 功能，这个时候通常有两种做法，第一种，从相机获取，第二种，从相册获取。今天这篇博客主要讲解利用系统的Intent怎样获取？</p>
<p>主要内容如下</p>
<ul>
<li>怎样通过相机获取我们的图片</li>
<li>怎样启动相册获取我们想要的图片</li>
<li>在Android 6.0中的动态权限处理】</li>
<li>调用系统Intent和自定义相册的优缺点对比</li>
</ul>
<h2 id="怎样通过相机获取我们的图片"><a href="#怎样通过相机获取我们的图片" class="headerlink" title="怎样通过相机获取我们的图片"></a>怎样通过相机获取我们的图片</h2><p>总共有两种方式，</p>
<h3 id="第一种方式："><a href="#第一种方式：" class="headerlink" title="第一种方式："></a>第一种方式：</h3><p>第一步，通过 MediaStore.ACTION_IMAGE_CAPTURE 启动我们的相机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">pIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MediaStore.ACTION_IMAGE_CAPTURE);<span class="comment">//调用摄像头action</span></span><br><span class="line">startActivityForResult(pIntent, INTENT_CODE_IMAGE_CAPTURE1);<span class="comment">//requestcode</span></span><br></pre></td></tr></table></figure>

<p>第二步，在onActivityResult进行处理，，核心代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent data)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> INTENT_CODE_IMAGE_CAPTURE1:</span><br><span class="line">            <span class="keyword">if</span> (resultCode == RESULT_OK) &#123;</span><br><span class="line">                <span class="type">Bundle</span> <span class="variable">pBundle</span> <span class="operator">=</span> data.getExtras(); <span class="comment">//从intent对象中获取数据，</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pBundle != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">Bitmap</span> <span class="variable">pBitmap</span> <span class="operator">=</span> (Bitmap) pBundle.get(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (pBitmap != <span class="literal">null</span>) &#123;</span><br><span class="line">                        mIv.setImageBitmap(pBitmap);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="第二种-方式"><a href="#第二种-方式" class="headerlink" title="第二种 方式"></a>第二种 方式</h3><p>第一步，通过 MediaStore.ACTION_IMAGE_CAPTURE 启动相机，并指定 MediaStore.EXTRA_OUTPUT ，intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mFile)); 传入我们的URI，这样，最终返回的信息会存储在我们的mFile中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startCameraWithHighBitmap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//确定存储拍照得到的图片文件路径</span></span><br><span class="line">    <span class="keyword">if</span> (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">        mFile = <span class="keyword">new</span> <span class="title class_">File</span>(Environment.getExternalStorageDirectory(),</span><br><span class="line">                getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;请插入sd卡&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mFile.createNewFile();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">    intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">    <span class="comment">//加载Uri型的文件路径</span></span><br><span class="line">    intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mFile));</span><br><span class="line">    <span class="comment">//向onActivityResult发送intent，requestCode为INTENT_CODE_IMAGE_CAPTURE2</span></span><br><span class="line">    startActivityForResult(intent, INTENT_CODE_IMAGE_CAPTURE2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>第二步：在onActivityResult进行处理，并对图片进行相应的压缩，防止在大图片的情况下发生OOM</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> INTENT_CODE_IMAGE_CAPTURE2:</span><br><span class="line">    <span class="keyword">if</span> (resultCode == RESULT_OK) &#123;</span><br><span class="line">        <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> ImageZip.decodeSampledBitmapFromFile(mFile.getAbsolutePath(),</span><br><span class="line">                mWidth, mHeight);</span><br><span class="line">        mIv.setImageBitmap(bitmap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title function_">decodeSampledBitmapFromFile</span><span class="params">(String pathName, <span class="type">int</span> reqWidth, <span class="type">int</span> reqHeight)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> BitmapFactory.<span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BitmapFactory</span>.Options();</span><br><span class="line">        options.inJustDecodeBounds = <span class="literal">true</span>;</span><br><span class="line">        BitmapFactory.decodeFile(pathName, options);</span><br><span class="line">        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);</span><br><span class="line">        options.inJustDecodeBounds = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Bitmap</span> <span class="variable">src</span> <span class="operator">=</span> BitmapFactory.decodeFile(pathName, options);</span><br><span class="line"><span class="comment">//        return createScaleBitmap(src, reqWidth, reqHeight, options.inSampleSize);</span></span><br><span class="line">        <span class="keyword">return</span> src;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateInSampleSize</span><span class="params">(BitmapFactory.Options options,</span></span><br><span class="line"><span class="params">                                         <span class="type">int</span> reqWidth, <span class="type">int</span> reqHeight)</span> &#123;</span><br><span class="line">    <span class="comment">// 源图片的高度和宽度</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> options.outHeight;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> options.outWidth;</span><br><span class="line">    <span class="type">int</span> <span class="variable">inSampleSize</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">halfHeight</span> <span class="operator">=</span> height / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">halfWidth</span> <span class="operator">=</span> width / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// Calculate the largest inSampleSize value that is a power of 2 and keeps both</span></span><br><span class="line">        <span class="comment">// height and width larger than the requested height and width.</span></span><br><span class="line">        <span class="keyword">while</span> ((halfHeight / inSampleSize) &gt; reqHeight &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) &#123;</span><br><span class="line">            inSampleSize *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inSampleSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="两种方法的区别"><a href="#两种方法的区别" class="headerlink" title="两种方法的区别"></a>两种方法的区别</h3><p>第一种方法获取的bitmap是被缩放的bitmap，第二种方法获取的bitmap是完整的bitmap，实际使用中根据需求情况决定使用哪一种方法。</p>
<p><a href="https://developer.android.com/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE">官网参考地址</a></p>
<hr>
<h2 id="怎样启动相册获取我们想要的图片"><a href="#怎样启动相册获取我们想要的图片" class="headerlink" title="怎样启动相册获取我们想要的图片"></a>怎样启动相册获取我们想要的图片</h2><p>第一步，通过 Intent.ACTION_GET_CONTENT 这个Intent，并设置相应的type，启动相册。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_GET_CONTENT, <span class="literal">null</span>);</span><br><span class="line">i.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, <span class="string">&quot;image/*&quot;</span>);</span><br><span class="line">startActivityForResult(i, INTENT_CODE_IMAGE_GALLERY1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 第二步，在onActivityResult中对返回的uri数据进行处理</p>
<ul>
<li>需要注意的是：这里我们需要注意是不是MIUI系统，如果不是MIUI系统，我们只需要进行一下处理，就OK了</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setPhotoForNormalSystem</span><span class="params">(Intent data)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> getRealPathFromURI(data.getData());</span><br><span class="line">    <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> ImageZip.decodeSampledBitmapFromFile(filePath, mWidth, mHeight);</span><br><span class="line">    mIv.setImageBitmap(bitmap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析Intent.getdata()得到的uri为String型的filePath</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> contentUri</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getRealPathFromURI</span><span class="params">(Uri contentUri)</span> &#123;</span><br><span class="line">    String[] proj = &#123;MediaStore.Audio.Media.DATA&#125;;</span><br><span class="line">    <span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> managedQuery(contentUri, proj, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">column_index</span> <span class="operator">=</span> cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DATA);</span><br><span class="line">    cursor.moveToFirst();</span><br><span class="line">    <span class="keyword">return</span> cursor.getString(column_index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>如果是MIUI系统，我们需要进行一下处理</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private void setPhotoForMiuiSystem(Intent data) &#123;</span><br><span class="line">    Uri localUri = data.getData();</span><br><span class="line">    String scheme = localUri.getScheme();</span><br><span class="line">    String imagePath = &quot;&quot;;</span><br><span class="line">    if (&quot;content&quot;.equals(scheme)) &#123;</span><br><span class="line">        String[] filePathColumns = &#123;MediaStore.Images.Media.DATA&#125;;</span><br><span class="line">        Cursor c = getContentResolver().query(localUri, filePathColumns, null, null, null);</span><br><span class="line">        c.moveToFirst();</span><br><span class="line">        int columnIndex = c.getColumnIndex(filePathColumns[0]);</span><br><span class="line">        imagePath = c.getString(columnIndex);</span><br><span class="line">        c.close();</span><br><span class="line">    &#125; else if (&quot;file&quot;.equals(scheme)) &#123;//小米4选择云相册中的图片是根据此方法获得路径</span><br><span class="line">        imagePath = localUri.getPath();</span><br><span class="line">    &#125;</span><br><span class="line">    Bitmap bitmap = ImageZip.decodeSampledBitmapFromFile(imagePath, mWidth, mHeight);</span><br><span class="line">    mIv.setImageBitmap(bitmap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>在代码中的体现如下，即判断是否是MIUI系统，对于不同的系统采用不同的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent data)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    <span class="keyword">if</span> (resultCode != RESULT_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> INTENT_CODE_IMAGE_GALLERY1:</span><br><span class="line">            <span class="keyword">if</span> (SystemUtils.isMIUI()) &#123;</span><br><span class="line">                setPhotoForMiuiSystem(data);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setPhotoForNormalSystem(data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Android6-0动态权限管理"><a href="#Android6-0动态权限管理" class="headerlink" title="Android6.0动态权限管理"></a>Android6.0动态权限管理</h2><p>我们知道在Android6.0以上的系统，有一些权限需要动态授予 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">group:android.permission-group.CONTACTS</span><br><span class="line">  permission:android.permission.WRITE_CONTACTS</span><br><span class="line">  permission:android.permission.GET_ACCOUNTS</span><br><span class="line">  permission:android.permission.READ_CONTACTS</span><br><span class="line"></span><br><span class="line">group:android.permission-group.PHONE</span><br><span class="line">  permission:android.permission.READ_CALL_LOG</span><br><span class="line">  permission:android.permission.READ_PHONE_STATE</span><br><span class="line">  permission:android.permission.CALL_PHONE</span><br><span class="line">  permission:android.permission.WRITE_CALL_LOG</span><br><span class="line">  permission:android.permission.USE_SIP</span><br><span class="line">  permission:android.permission.PROCESS_OUTGOING_CALLS</span><br><span class="line">  permission:com.android.voicemail.permission.ADD_VOICEMAIL</span><br><span class="line"></span><br><span class="line">group:android.permission-group.CALENDAR</span><br><span class="line">  permission:android.permission.READ_CALENDAR</span><br><span class="line">  permission:android.permission.WRITE_CALENDAR</span><br><span class="line"></span><br><span class="line">group:android.permission-group.CAMERA</span><br><span class="line">  permission:android.permission.CAMERA</span><br><span class="line"></span><br><span class="line">group:android.permission-group.SENSORS</span><br><span class="line">  permission:android.permission.BODY_SENSORS</span><br><span class="line"></span><br><span class="line">group:android.permission-group.LOCATION</span><br><span class="line">  permission:android.permission.ACCESS_FINE_LOCATION</span><br><span class="line">  permission:android.permission.ACCESS_COARSE_LOCATION</span><br><span class="line"></span><br><span class="line">group:android.permission-group.STORAGE</span><br><span class="line">  permission:android.permission.READ_EXTERNAL_STORAGE</span><br><span class="line">  permission:android.permission.WRITE_EXTERNAL_STORAGE</span><br><span class="line"></span><br><span class="line">group:android.permission-group.MICROPHONE</span><br><span class="line">  permission:android.permission.RECORD_AUDIO</span><br><span class="line"></span><br><span class="line">group:android.permission-group.SMS</span><br><span class="line">  permission:android.permission.READ_SMS</span><br><span class="line">  permission:android.permission.RECEIVE_WAP_PUSH</span><br><span class="line">  permission:android.permission.RECEIVE_MMS</span><br><span class="line">  permission:android.permission.RECEIVE_SMS</span><br><span class="line">  permission:android.permission.SEND_SMS</span><br><span class="line">  permission:android.permission.READ_CELL_BROADCASTS</span><br></pre></td></tr></table></figure>

<p>我们这里容易 得知读取相机需要的权限有，写sd卡权限，读取camera权限，这两个权限都需要动态授予。</p>
<h3 id="这里我们以检查是否授予camera权限为例子讲解"><a href="#这里我们以检查是否授予camera权限为例子讲解" class="headerlink" title="这里我们以检查是否授予camera权限为例子讲解"></a>这里我们以检查是否授予camera权限为例子讲解</h3><p>第一步，在启动相机的时候检查时候已经授予camera权限，没有的话 ，请求camera权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (ContextCompat.checkSelfPermission(this, permission)</span><br><span class="line">        != PackageManager.PERMISSION_GRANTED) &#123;//还没有授予权限</span><br><span class="line">    if (ActivityCompat.shouldShowRequestPermissionRationale(this, permission)) &#123;</span><br><span class="line">        Toast.makeText(this, &quot;您已禁止该权限，需要重新开启。&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ActivityCompat.requestPermissions(this, new String[]&#123;permission&#125;,</span><br><span class="line">                request_camera2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;// 已经授予权限</span><br><span class="line">    startCameraWithHighBitmap();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private void startCameraWithHighBitmap() &#123;</span><br><span class="line">    //确定存储拍照得到的图片文件路径</span><br><span class="line">    if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">        mFile = new File(Environment.getExternalStorageDirectory(),</span><br><span class="line">                getName());</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        Toast.makeText(this, &quot;请插入sd卡&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        mFile.createNewFile();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Intent intent = new Intent();</span><br><span class="line">    intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">    //加载Uri型的文件路径</span><br><span class="line">    intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mFile));</span><br><span class="line">    //向onActivityResult发送intent，requestCode为INTENT_CODE_IMAGE_CAPTURE2</span><br><span class="line">    startActivityForResult(intent, INTENT_CODE_IMAGE_CAPTURE2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二步:重写onRequestPermissionsResult方法，判断是否授权成功，成功的话启动相机，核心代码如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,</span><br><span class="line">                                       @NonNull int[] grantResults) &#123;</span><br><span class="line">    super.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    switch (requestCode) &#123;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        case request_camera2:</span><br><span class="line">            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                startCameraWithHighBitmap();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // Permission Denied</span><br><span class="line">                Toast.makeText(this, &quot;Permission Denied&quot;, Toast</span><br><span class="line">                        .LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至于检查sd卡写权限的，这里不再阐述，有兴趣的话，可以下载源码看一下。</p>
<p>关于Android6.0动态获取权限的，可以参考这一篇博客<a href="http://gudong.name/%E6%8A%80%E6%9C%AF/2015/11/10/android_m_permission.html">在Android 6.0 设备上动态获取权限</a></p>
<hr>
<h2 id="调用系统Intent和自定义相册的优缺点对比"><a href="#调用系统Intent和自定义相册的优缺点对比" class="headerlink" title="调用系统Intent和自定义相册的优缺点对比"></a>调用系统Intent和自定义相册的优缺点对比</h2><h3 id="调用系统Intent启动相册"><a href="#调用系统Intent启动相册" class="headerlink" title="调用系统Intent启动相册"></a>调用系统Intent启动相册</h3><p>优点： 代码简洁</p>
<p>缺点：对于不同的手机厂商，room往往被修改了，有时候调用系统的Intent，会有一些一项不到的bug， 不能实现多张图片的选择</p>
<h3 id="自定义相册"><a href="#自定义相册" class="headerlink" title="自定义相册"></a>自定义相册</h3><p>优点： 实现的样式可以自己定制，可以实现多张图片的选择等</p>
<p>缺点： 代码量稍微多一些</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>综上所述，对于本地相册的功能，本人还是强烈推荐自己实现，因为采用系统的，灵活性差，更重要的是，经常会有一些 莫名其妙的bug</p>
<p>这里给大家推荐两种实现方式，一个是鸿洋大神以前写的，一个是GitHub的开源库。</p>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/39943731">Android 超高仿微信图片选择器 图片该这么加载</a></p>
<p>Android仿微信图片上传，可以选择多张图片，缩放预览，拍照上传等</p>
<p><a href="https://github.com/zfdang/android-multiple-images-selector">android-multiple-images-selector</a></p>
<hr>
<h2 id="裁剪图片"><a href="#裁剪图片" class="headerlink" title="裁剪图片"></a>裁剪图片</h2><p>关于裁剪图片的Intent，网上的大多数做法是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title function_">cropPic</span><span class="params">(Uri imageUri)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;com.android.camera.action.CROP&quot;</span>);</span><br><span class="line"></span><br><span class="line">    intent.putExtra(<span class="string">&quot;crop&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置x,y的比例，截图方框就按照这个比例来截 若设置为0,0，或者不设置 则自由比例截图</span></span><br><span class="line">    intent.putExtra(<span class="string">&quot;aspectX&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    intent.putExtra(<span class="string">&quot;aspectY&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 裁剪区的宽和高 其实就是裁剪后的显示区域 若裁剪的比例不是显示的比例，</span></span><br><span class="line">    <span class="comment">// 则自动压缩图片填满显示区域。若设置为0,0 就不显示。若不设置，则按原始大小显示</span></span><br><span class="line">    intent.putExtra(<span class="string">&quot;outputX&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    intent.putExtra(<span class="string">&quot;outputY&quot;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不知道有啥用。。可能会保存一个比例值 需要相关文档啊</span></span><br><span class="line">    intent.putExtra(<span class="string">&quot;scale&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// true的话直接返回bitmap，可能会很占内存 不建议</span></span><br><span class="line">    intent.putExtra(<span class="string">&quot;return-data&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 上面设为false的时候将MediaStore.EXTRA_OUTPUT即&quot;output&quot;关联一个Uri</span></span><br><span class="line">    intent.putExtra(<span class="string">&quot;output&quot;</span>, imageUri);</span><br><span class="line">    <span class="comment">// 看参数即可知道是输出格式</span></span><br><span class="line">    intent.putExtra(<span class="string">&quot;outputFormat&quot;</span>, Bitmap.CompressFormat.JPEG.toString());</span><br><span class="line">    <span class="comment">// 面部识别 这里用不上</span></span><br><span class="line">    intent.putExtra(<span class="string">&quot;noFaceDetection&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> intent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当你运行代码的时候，部分设备会报错，大致的意思是：com.android.camera.action.CROP 的Activity  not found</p>
<p>解决方法，我们可以捕获一下异常，防止发生崩溃，并弹出吐司提醒用户不支持裁剪功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> IntentUtils.cropPic(Uri.fromFile(mF));</span><br><span class="line">    startActivityForResult(intent,req_crop);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ActivityNotFoundException a)&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> <span class="string">&quot;Your device doesn&#x27;t support the crop action!&quot;</span>;</span><br><span class="line">    <span class="type">Toast</span> <span class="variable">toast</span> <span class="operator">=</span> Toast.makeText(<span class="built_in">this</span>, errorMessage, Toast.LENGTH_SHORT);</span><br><span class="line">    toast.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然，github上面有两个比较好的开源库</p>
<p><a href="https://github.com/jdamcd/android-crop">android-crop</a></p>
<p><a href="https://github.com/edmodo/cropper">cropper</a></p>
<hr>
<p><strong><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53411790">文章首发地址CSDN：</a><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53411790">http://blog.csdn.net/gdutxiaoxu/article/details/53411790</a></strong></p>
<p><strong><a href="http://download.csdn.net/detail/gdutxiaoxu/9698246">源码下载地址：</a><a href="http://download.csdn.net/detail/gdutxiaoxu/9698246">http://download.csdn.net/detail/gdutxiaoxu/9698246</a></strong></p>
]]></content>
      <tags>
        <tag>启动系统相机</tag>
        <tag>启动相册</tag>
        <tag>6.0权限管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 命令行教程及实例教程</title>
    <url>/p/21644.html</url>
    <content><![CDATA[<p><strong>前言：前几天在写博客  手把手教你用Hexo + github 搭建自己博客的时候，经常需要用到一些git操作，截了好多图，于是就想干脆整理成一系列的git 教程，总结如下</strong></p>
<ul>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573286">Git下载及配置环境变量</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573339">Git 命令行教程及实例教程</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573399">Git ssh 配置及使用</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573426"> git ssh 配置多个账户</a></li>
</ul>
<hr>
<p>本篇博客主要讲解以下问题：</p>
<ul>
<li>Git 常用命令<ul>
<li>创建新仓库</li>
<li>检出仓库</li>
<li>添加与提交</li>
<li>推送改动</li>
<li>分支</li>
<li>更新与合并</li>
<li>标签</li>
<li>替换本地改动</li>
</ul>
</li>
<li>Git实例教程</li>
<li>操作小技巧</li>
</ul>
<h2 id="Git-常用命令常用命令"><a href="#Git-常用命令常用命令" class="headerlink" title="Git 常用命令常用命令"></a><strong>Git 常用命令常用命令</strong></h2><h3 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h3><p>创建新文件夹，打开，然后执行 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>以创建新的 git 仓库。</p>
<h3 id="检出仓库"><a href="#检出仓库" class="headerlink" title="检出仓库"></a>检出仓库</h3><p>执行如下命令以创建一个本地仓库的克隆版本：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">git clone /path/<span class="keyword">to</span>/repository </span><br></pre></td></tr></table></figure>


<p>如果是远端服务器上的仓库，你的命令会是这个样子：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">git clone username<span class="variable">@host</span><span class="symbol">:/path/to/repository</span></span><br></pre></td></tr></table></figure>

<p>工作流<br>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 工作目录，它持有实际文件；第二个是 缓存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，指向你最近一次提交后的结果。</p>
<p><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1famnvghkwrj20p008wgmd.jpg"></p>
<h3 id="添加与提交"><a href="#添加与提交" class="headerlink" title="添加与提交"></a>添加与提交</h3><p>你可以计划改动（把它们添加到缓存区），使用如下命令：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="language-bash"> &lt;filename&gt;</span></span><br><span class="line">git <span class="keyword">add</span><span class="language-bash"> *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有文件</span></span><br><span class="line">git  <span class="keyword">add</span><span class="language-bash"> .</span></span><br></pre></td></tr></table></figure>


<p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">commit</span> <span class="operator">-</span>m &quot;代码提交信息&quot;</span><br></pre></td></tr></table></figure>


<p>现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。</p>
<h3 id="推送改动"><a href="#推送改动" class="headerlink" title="推送改动"></a>推送改动</h3><p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">push</span> origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>可以把 master 换成你想要推送的任何分支。 </p>
<p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p>
<figure class="highlight vbscript-html"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"># 注意 server必须是存在的仓库</span></span><br><span class="line"><span class="language-xml">git remote add origin <span class="tag">&lt;<span class="name">server</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">git remote add origin https://github.com/gdutxiaoxu/test2.git</span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure>


<p>该命令是移除本地缓存已有的remote信息</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">remove</span> origin </span><br></pre></td></tr></table></figure>


<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。</p>
<p>创建一个叫做“feature_x”的分支，并切换过去：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git checkout -<span class="selector-tag">b</span> feature_x</span><br></pre></td></tr></table></figure>


<p>切换回主分支：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout master</span><br></pre></td></tr></table></figure>

<p>切换回分支：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout &lt;branch&gt;</span><br><span class="line">git checkout  feature_x</span><br></pre></td></tr></table></figure>


<p>再把新建的分支删掉：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">git branch -<span class="keyword">d</span> feature_x</span><br></pre></td></tr></table></figure>


<p>除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：</p>
<figure class="highlight vbscript-html"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">git push origin <span class="tag">&lt;<span class="name">branch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">git push origin  feature_x</span></span><br></pre></td></tr></table></figure>


<h3 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h3><p>要更新你的本地仓库至最新改动，执行：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> pull</span><br></pre></td></tr></table></figure>


<p>以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。<br>要合并其他分支到你的当前分支（例如 master），执行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">merge</span> <span class="operator">&lt;</span>branch<span class="operator">&gt;</span></span><br><span class="line">git <span class="keyword">merge</span> feature_x</span><br></pre></td></tr></table></figure>


<p>两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 冲突（conflicts） 了。改完之后，你需要执行如下命令以将它们标记为合并成功：</p>
<figure class="highlight vbscript-html"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">git add <span class="tag">&lt;<span class="name">filename</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>在合并改动之前，也可以使用如下命令查看：</p>
<figure class="highlight vbscript-html"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">git diff <span class="tag">&lt;<span class="name">source_branch</span>&gt;</span> <span class="tag">&lt;<span class="name">target_branch</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="number">1.0</span>.<span class="number">0</span> <span class="number">1</span>b2e1d63ff</span><br></pre></td></tr></table></figure>


<p>1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">log</span></span><br></pre></td></tr></table></figure>


<p>你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。</p>
<h3 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h3><p>假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git checkout <span class="comment">-- &lt;filename&gt;</span></span><br></pre></td></tr></table></figure>


<p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。</p>
<p>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">fetch</span> origin</span><br><span class="line">git reset <span class="comment">--hard origin/master</span></span><br></pre></td></tr></table></figure>


<h2 id="有用的贴士"><a href="#有用的贴士" class="headerlink" title="有用的贴士"></a>有用的贴士</h2><p>内建的图形化 git：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitk</span><br></pre></td></tr></table></figure>


<p>彩色的 git 输出：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attribute">color</span>.ui true</span><br></pre></td></tr></table></figure>


<p>显示历史记录时，只显示一行注释信息：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config format<span class="selector-class">.pretty</span> oneline</span><br></pre></td></tr></table></figure>


<p>交互地添加文件至缓存区：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">git add -<span class="built_in">i</span></span><br></pre></td></tr></table></figure>
<p>到此 git常用的命令已经 讲解完毕，下面开始讲解Git  实例教程</p>
<hr>
<h2 id="Git实例教程"><a href="#Git实例教程" class="headerlink" title="Git实例教程"></a><strong>Git实例教程</strong></h2><p>大概分为以下两步</p>
<ul>
<li>github账号的注册与Repo的创建</li>
<li>实例教程</li>
</ul>
<h3 id="github账号的注册与Repo的创建"><a href="#github账号的注册与Repo的创建" class="headerlink" title="github账号的注册与Repo的创建"></a>github账号的注册与Repo的创建</h3><ol>
<li>Github注册</li>
</ol>
<p>打开<a href="https://github.com/%EF%BC%8C%E5%9C%A8%E4%B8%8B%E5%9B%BE%E7%9A%84%E6%A1%86%E4%B8%AD%EF%BC%8C%E5%88%86%E5%88%AB%E8%BE%93%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%EF%BC%8C%E9%82%AE%E7%AE%B1%EF%BC%8C%E5%AF%86%E7%A0%81%E3%80%82">https://github.com/，在下图的框中，分别输入自己的用户名，邮箱，密码。</a></p>
<p><img src="http://ww4.sinaimg.cn/large/9fe4afa0gw1faljxemku5j20bo0as0tv.jpg"></p>
<p>然后前往自己刚才填写的邮箱，点开Github发送给你的注册确认信，确认注册，结束注册流程。</p>
<p>一定要确认注册，否则无法使用gh-pages！</p>
<ol start="2">
<li>创建代码库</li>
</ol>
<p>登陆之后，点击页面右上角的加号，选择New repository：</p>
<p><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1faljww56v8j20ci0a975c.jpg"></p>
<p>新建代码库</p>
<p>进入代码库创建页面：</p>
<p><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1famqd6t7bzj20my0gfdjm.jpg"></p>
<p>到此我们就创建好了repo，地址 为：<a href="https://github.com/gdutxiaoxu/test.git">https://github.com/gdutxiaoxu/test.git</a></p>
<h3 id="实例教程"><a href="#实例教程" class="headerlink" title="实例教程"></a>实例教程</h3><p>这里我们把仓库建在 G:&#x2F;&#x2F;test  目录下</p>
<ol>
<li>首先打开命令行，进入G 盘，输入以下命令</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 test目录下创建 README.md 文件</span></span><br><span class="line"> echo <span class="string">&quot;# test&quot;</span> &gt;&gt; <span class="variable constant_">README</span>.md</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>接着初始化仓库</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">init</span></span><br></pre></td></tr></table></figure>
<p>  可以看到如下图片的效果</p>
<p><img src="http://ww1.sinaimg.cn/large/9fe4afa0jw1famryzlcksj20bt04a74b.jpg"></p>
<ol start="3">
<li><p>将 README.md 文件添加到版本控制</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="language-bash"> README.md</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>提交文件到本地缓存，并添加说明</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">commit</span> <span class="operator">-</span>m &quot;first commit&quot;</span><br></pre></td></tr></table></figure>


<p><img src="http://ww4.sinaimg.cn/large/9fe4afa0jw1fams0l7v6jj20by04nwel.jpg"></p>
<ol start="5">
<li>将本地仓库与远程仓库 <a href="https://github.com/gdutxiaoxu/test.git">https://github.com/gdutxiaoxu/test.git</a> 联系起来</li>
</ol>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">add</span> origin https://github.<span class="keyword">com</span>/gdutxiaoxu/test.git</span><br></pre></td></tr></table></figure>


<ol start="6">
<li>将本地仓库缓存的文件提交到远程仓库中</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">push</span> -u origin master</span><br></pre></td></tr></table></figure>

<p>如果你没有配置ssh ，那么在这里需要输入你的github 账户的用户名和密码</p>
<p><img src="http://ww1.sinaimg.cn/large/9fe4afa0jw1famqv57c2cj20cd02k74d.jpg"></p>
<p>正确输入你的用户名和密码后，可以看到</p>
<p><img src="http://ww2.sinaimg.cn/large/9fe4afa0jw1famqx437x6j20f703kglx.jpg"></p>
<p>同时我们登陆我们的github 仓库 ：  <a href="https://github.com/gdutxiaoxu/test.git">https://github.com/gdutxiaoxu/test.git</a>  ，可以看到：</p>
<p><img src="http://ww4.sinaimg.cn/large/9fe4afa0jw1famqxkom1hj20sh09o3zu.jpg"></p>
<p>说明已经提交成功了。</p>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul>
<li>如果我们本地已经存在仓库了，那我们只需要执行以下命令就可以将我们本地仓库与远程绑定起来</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">add</span> origin https://github.<span class="keyword">com</span>/gdutxiaoxu/test.git</span><br><span class="line">git push -<span class="keyword">u</span> origin master</span><br><span class="line"></span><br><span class="line">git pull  https://github.<span class="keyword">com</span>/gdutxiaoxu/test.git master</span><br></pre></td></tr></table></figure>

<ul>
<li>如果本地仓库已经绑定别的远程仓库，我们可以用以下命令将其删除相应的仓库信息</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 该命令是移除本地缓存已有的remote信息</span><br><span class="line">git remote <span class="built_in">remove</span> origin </span><br></pre></td></tr></table></figure>

<ul>
<li>如果我们remote repo （即远端仓库已经存在了），那么我们只需要执行以下命令就OK了</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/gdutxiaoxu/test.git  &quot;you path&quot;</span></span><br></pre></td></tr></table></figure>

<p>比如我们想储存在 G:&#x2F;&#x2F;test 目录下，那么我们可以输入一下命令</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/gdutxiaoxu/test.git  G://test</span></span><br></pre></td></tr></table></figure>
<p> 效果图如下</p>
<p>  <img src="http://ww3.sinaimg.cn/large/9fe4afa0gw1famx238wqpj20j504bq3j.jpg"></p>
<hr>
<hr>
<h2 id="操作小技巧"><a href="#操作小技巧" class="headerlink" title="操作小技巧"></a>操作小技巧</h2><p>有时候在cmd 窗口中，你会发现复制，粘贴的快捷键失效了，对我们开发者来说很不方便，拿我们有什么解决方法你？  哈哈，就是开启快速插入模式。</p>
<p>右键点击，点击cmd  窗口</p>
<p><img src="http://ww1.sinaimg.cn/mw690/9fe4afa0jw1famvugz6enj211y0lcju0.jpg"></p>
<p>选择快速插入模式，在Cmd 窗口，按右键，就能实现粘贴了。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/9fe4afa0jw1famvwicxhuj20c20gpdhr.jpg"></p>
<p>同理，在git bash 窗口也是这样，这样就不在阐述了。</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git-命令行教程及实例教程</title>
    <url>/p/37597.html</url>
    <content><![CDATA[<p><strong>前言：前几天在写博客  <a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018">手把手教你用Hexo + github 搭建自己博客</a><br>的时候，经常需要用到一些git操作，截了好多图，于是就想干脆整理成一系列的git 教程，总结如下</strong></p>
<ul>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573286">Git下载及配置环境变量</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573339">Git 命令行教程及实例教程</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573399">Git ssh 配置及使用</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573426"> git ssh 配置多个账户</a></li>
</ul>
<hr>
<p>下载Git安装文件：</p>
<p><a href="https://git-scm.com/downloads">GIt官网下载地址：</a></p>
<p><a href="https://github-cloud.s3.amazonaws.com/releases/23216272/84b33b96-87f5-11e5-8f91-32080286239e.exe?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAISTNZFOVBIJMK3TQ/20161210/us-east-1/s3/aws4_request&X-Amz-Date=20161210T033734Z&X-Amz-Expires=300&X-Amz-Signature=912c155bbe0fe970ca7b948f5f0d5e8c68c712b7fb8006062f53c8638c62c7b6&X-Amz-SignedHeaders=host&actor_id=14971673&response-content-disposition=attachment;%20filename=Git-2.6.3-64-bit.exe&response-content-type=application/octet-stream">Git-2.6.3-64-bit.exe</a></p>
<p>然后就进入了Git的安装界面，如图：</p>
<p><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1fampzoik7ej20e70b1q5o.jpg"></p>
<p>Git安装界面</p>
<p><img src="http://ww1.sinaimg.cn/large/9fe4afa0gw1faljmdsfd9j20dv0atq4u.jpg"></p>
<p>和Node.js一样，大部分设置都只需要保持默认，但是出于我们操作方便考虑，建议PATH选项按照下图选择：</p>
<p>Git PATH设置</p>
<p><img src="http://ww4.sinaimg.cn/large/9fe4afa0gw1faljmop0mbj20dz0atwhi.jpg"></p>
<p>这是对上图的解释，不需要了解请直接跳过 Git的默认设置下，出于安全考虑，只有在Git Bash中才能进行Git的相关操作。按照上图进行的选择，将会使得Git安装程序在系统PATH中加入Git的相关路径，使得你可以在CMD界面下调用Git，不用打开Git Bash了。<br>一样的，我们来检查一下Git是不是安装正确了，打开命令行，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>

<p>如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。</p>
<p><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1faljp87tpkj20it0cbdgo.jpg"></p>
<p><img src="http://ww1.sinaimg.cn/large/9fe4afa0gw1faljm42qvnj20dz0atwh2.jpg"></p>
<p>Git安装界面</p>
<p><img src="http://ww1.sinaimg.cn/large/9fe4afa0gw1faljmdsfd9j20dv0atq4u.jpg"></p>
<p>大部分设置都只需要保持默认，但是出于我们操作方便考虑，建议PATH选项按照下图选择：</p>
<p>Git PATH设置</p>
<p><img src="http://ww4.sinaimg.cn/large/9fe4afa0gw1faljmop0mbj20dz0atwhi.jpg"></p>
<p>这是对上图的解释，不需要了解请直接跳过 Git的默认设置下，出于安全考虑，只有在Git Bash中才能进行Git的相关操作。按照上图进行的选择，将会使得Git安装程序在系统PATH中加入Git的相关路径，使得你可以在CMD界面下调用Git，不用打开Git Bash了。<br>一样的，我们来检查一下Git是不是安装正确了，打开命令行，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>

<p>如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。</p>
<p><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1faljp87tpkj20it0cbdgo.jpg"></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title> Retrofit使用教程（一）- Retrofit入门详解</title>
    <url>/p/ce27b25b.html</url>
    <content><![CDATA[<h1 id="Retrofit使用教程（一）-Retrofit入门详解"><a href="#Retrofit使用教程（一）-Retrofit入门详解" class="headerlink" title="Retrofit使用教程（一）- Retrofit入门详解"></a>Retrofit使用教程（一）- Retrofit入门详解</h1><hr>
<p><strong><a href="http://blog.csdn.net/gdutxiaoxu/article/details/52745491">转载请注明博客地址：</a><a href="http://blog.csdn.net/gdutxiaoxu/article/details/52745491">http://blog.csdn.net/gdutxiaoxu/article/details/52745491</a></strong></p>
<p><strong><a href="https://github.com/gdutxiaoxu/RetrofitDemo.git">源码下载地址：</a><a href="https://github.com/gdutxiaoxu/RetrofitDemo.git">https://github.com/gdutxiaoxu/RetrofitDemo.git</a></strong></p>
<p><strong>本人已经好久没有更新 博客了，这次更新博客打算写一下retrofit的使用教程系列的 博客，写作思路大概如下</strong></p>
<ul>
<li>先从retrofit的基本使用讲起;</li>
<li>接着将retrofit结合RxJava的使用;</li>
<li>接着讲Retrofit的封装使用，（包括错误统一处理）;</li>
<li>有时间和能力的话会尝试研究一下retrofit的 源码.</li>
</ul>
<h2 id="本篇博客主要讲解以下问题"><a href="#本篇博客主要讲解以下问题" class="headerlink" title="本篇博客主要讲解以下问题"></a>本篇博客主要讲解以下问题</h2><ul>
<li>Retrofit简介</li>
<li>Retrofit的简单使用例子</li>
<li>Retrofit的get请求</li>
<li>Retrofit的put请求（提交表单数据）</li>
<li>如何为 retrofit添加header</li>
<li>如何提交json数据</li>
</ul>
<h2 id="Retrofit简介"><a href="#Retrofit简介" class="headerlink" title="Retrofit简介"></a>Retrofit简介</h2><p>Retrofit是square开源的网络请求库，底层是使用OKHttp封装的，网络请求速度很快.</p>
<h3 id="主要有一下几种请求方法"><a href="#主要有一下几种请求方法" class="headerlink" title="主要有一下几种请求方法"></a>主要有一下几种请求方法</h3><table>
<thead>
<tr>
<th>格式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>@GET</td>
<td>表示这是一个GET请求</td>
</tr>
<tr>
<td>@POST</td>
<td>表示这个一个POST请求</td>
</tr>
<tr>
<td>@PUT</td>
<td>表示这是一个PUT请求</td>
</tr>
<tr>
<td>@DELETE</td>
<td>表示这是一个DELETE请求</td>
</tr>
<tr>
<td>@HEAD</td>
<td>表示这是一个HEAD请求</td>
</tr>
<tr>
<td>@OPTIONS</td>
<td>表示这是一个OPTION请求</td>
</tr>
<tr>
<td>@PATCH</td>
<td>表示这是一个PAT请求</td>
</tr>
</tbody></table>
<h3 id="各种请求注解的意思"><a href="#各种请求注解的意思" class="headerlink" title="各种请求注解的意思"></a>各种请求注解的意思</h3><table>
<thead>
<tr>
<th>格式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>@Headers</td>
<td>添加请求头</td>
</tr>
<tr>
<td>@Path</td>
<td>替换路径</td>
</tr>
<tr>
<td>@Query</td>
<td>替代参数值，通常是结合get请求的</td>
</tr>
<tr>
<td>@FormUrlEncoded</td>
<td>用表单数据提交</td>
</tr>
<tr>
<td>@Field</td>
<td>替换参数值，是结合post请求的</td>
</tr>
</tbody></table>
<h2 id="Retrofit的简单使用例子"><a href="#Retrofit的简单使用例子" class="headerlink" title="Retrofit的简单使用例子"></a>Retrofit的简单使用例子</h2><p>要使用retrofit请求网络数据，大概可以分为以下几步</p>
<ul>
<li>1)添加依赖，这里以AndroidStudio为例：在build.grale添加如下依赖</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> compile <span class="string">&#x27;com.squareup.retrofit2:retrofit:2.1.0&#x27;</span></span><br><span class="line">compile <span class="string">&#x27;com.squareup.retrofit2:converter-gson:2.1.0&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2） 创建Retrofit对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Retrofit</span> <span class="variable">retrofit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">        <span class="comment">//使用自定义的mGsonConverterFactory</span></span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">        .baseUrl(<span class="string">&quot;http://apis.baidu.com/txapi/&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">mApi = retrofit.create(APi.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>3）发起网络请求</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mApi = retrofit.create(APi.class);</span><br><span class="line">Call&lt;News&gt; news = mApi.getNews(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;10&quot;</span>);</span><br><span class="line">news.enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>&lt;News&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(Call&lt;News&gt; call, Response&lt;News&gt; response)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Call&lt;News&gt; call, Throwable t)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">APi</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Headers(&quot;apikey:81bf9da930c7f9825a3c3383f1d8d766&quot;)</span></span><br><span class="line">    <span class="meta">@GET(&quot;word/word&quot;)</span></span><br><span class="line">    Call&lt;News&gt; <span class="title function_">getNews</span><span class="params">(<span class="meta">@Query(&quot;num&quot;)</span> String num,<span class="meta">@Query(&quot;page&quot;)</span>String page)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>到此一个简单的使用retrofit的网络请求就完成了。</strong>接下来我们来了解retrofit的各种请求方式。</p>
<hr>
<h2 id="Retrofit的get请求"><a href="#Retrofit的get请求" class="headerlink" title="Retrofit的get请求"></a>Retrofit的get请求</h2><p>加入我们想请求这样的网址：<a href="http://apis.baidu.com/txapi/world/world?num=10&page=1%EF%BC%8Cheader%E4%B8%BA%22apikey:81bf9da930c7f9825a3c3383f1d8d766%22,%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7%E8%AF%B7%E6%B1%82%EF%BC%9A">http://apis.baidu.com/txapi/world/world?num=10&amp;page=1，header为&quot;apikey:81bf9da930c7f9825a3c3383f1d8d766&quot;,我们可以这样请求：</a></p>
<p>第一步，在interface Api中 增加如下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Headers(&quot;apikey:81bf9da930c7f9825a3c3383f1d8d766&quot;)</span></span><br><span class="line"><span class="meta">@GET(&quot;word/word&quot;)</span></span><br><span class="line">Call&lt;News&gt; <span class="title function_">getNews</span><span class="params">(<span class="meta">@Query(&quot;num&quot;)</span> String num,<span class="meta">@Query(&quot;page&quot;)</span>String page)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二部，在代码里面请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建retrofit对象</span></span><br><span class="line"><span class="type">Retrofit</span> <span class="variable">retrofit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">        <span class="comment">//使用自定义的mGsonConverterFactory</span></span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">        .baseUrl(<span class="string">&quot;http://apis.baidu.com/txapi/&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line"><span class="comment">// 实例化我们的mApi对象</span></span><br><span class="line">mApi = retrofit.create(APi.class); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用我们的响应的方法</span></span><br><span class="line">Call&lt;News&gt; news = mApi.getNews(number, page);</span><br><span class="line">news.enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>&lt;News&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(Call&lt;News&gt; call, Response&lt;News&gt; response)</span> &#123;</span><br><span class="line">        <span class="type">News</span> <span class="variable">body</span> <span class="operator">=</span> response.body();</span><br><span class="line">        Logger.i(<span class="string">&quot;onResponse:   =&quot;</span>+body.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Call&lt;News&gt; call, Throwable t)</span> &#123;</span><br><span class="line">        Logger.i(<span class="string">&quot;onResponse:   =&quot;</span>+t.getMessage());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h3><p>假设BaseUrl是<a href="http://apis.baidu.com/txapi/%E7%9A%84%E5%89%8D%E6%8F%90%E4%B8%8B">http://apis.baidu.com/txapi/的前提下</a></p>
<ul>
<li>1）其中 @GET(“word&#x2F;word”)会追加到baseUrl ：<a href="http://apis.baidu.com/txapi/%E7%9A%84%E5%90%8E%E9%9D%A2%EF%BC%8C%E5%8D%B3%E5%8F%98%E6%88%90%EF%BC%9Ahttp://apis.baidu.com/txapi/world/world">http://apis.baidu.com/txapi/的后面，即变成：http://apis.baidu.com/txapi/world/world</a></li>
<li>2）@Query(“num”) String num,@Query(“page”)String page；分别对应键值的名称与值。会追加到<a href="http://apis.baidu.com/txapi/world/world%E7%9A%84%E5%90%8E%E9%9D%A2%EF%BC%8C%E8%AF%B7%E6%B1%82%E7%BD%91%E5%9D%80%E5%8D%B3%E5%8F%98%E6%88%90:http://apis.baidu.com/txapi/world/world?num=10&page=1">http://apis.baidu.com/txapi/world/world的后面，请求网址即变成:http://apis.baidu.com/txapi/world/world?num=10&amp;page=1</a></li>
<li>3）  @Headers(“apikey:81bf9da930c7f9825a3c3383f1d8d766”)是 在基础之上为 其添加响应头</li>
<li>4）如果想继续增加参数，只需要在方法参数追加这样的形式就OK了：<br> ,@Query(“page”)String page</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Headers(&quot;apikey:81bf9da930c7f9825a3c3383f1d8d766&quot;)</span></span><br><span class="line"><span class="meta">@GET(&quot;word/word&quot;)</span></span><br><span class="line">Call&lt;News&gt; <span class="title function_">getNews</span><span class="params">(<span class="meta">@Query(&quot;num&quot;)</span> String num,<span class="meta">@Query(&quot;page&quot;)</span>String page，<span class="meta">@Query(&quot;type&quot;)</span> String type)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>5)加入我们想要请求这样的网址<a href="http://apis.baidu.com/txapi/tiyu/tiyu?num=10&page=1%EF%BC%8C,%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7%E5%86%99">http://apis.baidu.com/txapi/tiyu/tiyu?num=10&amp;page=1，,我们可以这样写</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Headers(&#123;&quot;apikey:81bf9da930c7f9825a3c3383f1d8d766&quot; ,&quot;Content-Type:application/json&quot;&#125;)</span></span><br><span class="line"><span class="meta">@GET(&quot;&#123;type&#125;/&#123;type&#125;&quot;)</span></span><br><span class="line">Call&lt;News&gt; <span class="title function_">tiYu</span><span class="params">(<span class="meta">@Path(&quot;type&quot;)</span> String type, <span class="meta">@Query(&quot;num&quot;)</span> String num,<span class="meta">@Query(&quot;page&quot;)</span>String page)</span>;</span><br><span class="line">String type=<span class="string">&quot;tiyu&quot;</span>;</span><br><span class="line">Call&lt;News&gt; news = api.tiYu(type,number, page);</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="retrofit的post请求"><a href="#retrofit的post请求" class="headerlink" title="retrofit的post请求"></a>retrofit的post请求</h2><p>假如我们想要 请求这样的网址<a href="http://apis.baidu.com/txapi/world/world?%E4%BB%A5post%E7%9A%84">http://apis.baidu.com/txapi/world/world?以post的</a> 方式提交这样的 数据：num&#x3D;10&amp;page&#x3D;1，我们可以写成 如下的 样子，注意post的时候必须使用@Field这种形式的注解，而不是使用@Query这种形式的注解，其他的 与get请求一样，这样只给出核心代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@Headers(&#123;&quot;apikey:81bf9da930c7f9825a3c3383f1d8d766&quot; ,&quot;Content-Type:application/json&quot;&#125;)</span></span><br><span class="line"><span class="meta">@POST(&quot;world/world&quot;)</span></span><br><span class="line">Call&lt;News&gt; <span class="title function_">postNews</span><span class="params">(<span class="meta">@Field(&quot;num&quot;)</span> String num, <span class="meta">@Field(&quot;page&quot;)</span>String page)</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="如何为retrofit添加请求头head"><a href="#如何为retrofit添加请求头head" class="headerlink" title="如何为retrofit添加请求头head"></a>如何为retrofit添加请求头head</h2><p>总共有以下几种方式</p>
<h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>在OKHttpClient interceptors里面进行处理，这样添加的headKey不会覆盖掉 前面的 headKey</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">okHttpClient.interceptors().add(<span class="keyword">new</span> <span class="title class_">Interceptor</span>() &#123;  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Response <span class="title function_">intercept</span><span class="params">(Interceptor.Chain chain)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Request</span> <span class="variable">original</span> <span class="operator">=</span> chain.request();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Request customization: add request headers</span></span><br><span class="line">        Request.<span class="type">Builder</span> <span class="variable">requestBuilder</span> <span class="operator">=</span> original.newBuilder()</span><br><span class="line">                    .addHeader(<span class="string">&quot;header-key&quot;</span>, <span class="string">&quot;value1&quot;</span>)</span><br><span class="line">                    .addHeader(<span class="string">&quot;header-key&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> requestBuilder.build();</span><br><span class="line">        <span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>同样在在OKHttpClient interceptors里面进行处理，这样添加的headKey会覆盖掉 前面的 headKey</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">okHttpClient.interceptors().add(<span class="keyword">new</span> <span class="title class_">Interceptor</span>() &#123;  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Response <span class="title function_">intercept</span><span class="params">(Interceptor.Chain chain)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Request</span> <span class="variable">original</span> <span class="operator">=</span> chain.request();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Request customization: add request headers</span></span><br><span class="line">        Request.<span class="type">Builder</span> <span class="variable">requestBuilder</span> <span class="operator">=</span> original.newBuilder()</span><br><span class="line">                .header(<span class="string">&quot;headerkey&quot;</span>, <span class="string">&quot;header-value&quot;</span>); <span class="comment">// &lt;-- this is the important line</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> requestBuilder.build();</span><br><span class="line">        <span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h3><p>利用 retrofit自带的注解，比如我们想要添加这样的请求头：”apikey:81bf9da930c7f9825a3c3383f1d8d766” ,”Content-Type:application&#x2F;json”；则可以写成如下的 样式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Headers(&#123;&quot;apikey:81bf9da930c7f9825a3c3383f1d8d766&quot; ,&quot;Content-Type:application/json&quot;&#125;)</span></span><br><span class="line"><span class="meta">@GET(&quot;world/world&quot;)</span></span><br><span class="line">Call&lt;News&gt; <span class="title function_">getNews</span><span class="params">(<span class="meta">@Query(&quot;num&quot;)</span> String num,<span class="meta">@Query(&quot;page&quot;)</span>String page)</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="通过post提交json数据"><a href="#通过post提交json数据" class="headerlink" title="通过post提交json数据"></a>通过post提交json数据</h2><p>Post 提交JSON数据</p>
<p>有时提交的数据量比较大时，用键值对的方式提交参数不太方便，Retrofit可以通过@Body注释，直接传递一个对象给请求主体，Retrofit通过JSON转化器，把对象映射成JSON数据。</p>
<p>假设我们需要提交的数据为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;my task title&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口定义：</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TaskService</span> &#123;  </span><br><span class="line">    <span class="meta">@Headers(&#123;&quot;Content-Type: application/json&quot;,&quot;Accept:  application/json&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@POST(&quot;/tasks&quot;)</span></span><br><span class="line">    Call&lt;Task&gt; <span class="title function_">createTask</span><span class="params">(<span class="meta">@Body</span> Task task)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>传递实体需要有Model：</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Task</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Task</span><span class="params">(<span class="type">long</span> id, String text)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端调用：</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>(<span class="number">1</span>, <span class="string">&quot;my task title&quot;</span>);  </span><br><span class="line">Call&lt;Task&gt; call = taskService.createTask(task);  </span><br><span class="line">call.enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>&lt;Task&gt;() &#123;&#125;); </span><br></pre></td></tr></table></figure>

<ul>
<li>这样，服务端得到的是JOSN数据：</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;my task title&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p>到此，这篇博客为止</p>
<h2 id="题外话："><a href="#题外话：" class="headerlink" title="题外话："></a>题外话：</h2><p>其实retrofit在5月份实习的时候就接触了，之前为什么不写 博客了，因为网上的 使用教程很多，觉得没有必要。到后面学习的时候，发现retrofit的使用时 比较灵活的，并且使用方法也是相对较多的，于是，就写了retrofit这系列的使用博客。</p>
<p><strong><a href="http://blog.csdn.net/gdutxiaoxu/article/details/52745491">转载请注明博客地址：</a><a href="http://blog.csdn.net/gdutxiaoxu/article/details/52745491">http://blog.csdn.net/gdutxiaoxu/article/details/52745491</a></strong></p>
<p><strong><a href="https://github.com/gdutxiaoxu/RetrofitDemo.git">源码下载地址：</a><a href="https://github.com/gdutxiaoxu/RetrofitDemo.git">https://github.com/gdutxiaoxu/RetrofitDemo.git</a></strong></p>
<p><strong><a href="http://square.github.io/retrofit/">参考官网地址</a><a href="http://square.github.io/retrofit/">http://square.github.io/retrofit/</a></strong></p>
]]></content>
      <tags>
        <tag>Retrofit</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>你真的了解View的坐标吗？</title>
    <url>/p/42607.html</url>
    <content><![CDATA[<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53700020">文章首发CSDN地址 :</a></p>
<h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>View，对我们来说在熟悉不过了，从接触Android开始，我们就一直在接触View，界面当中到处都是 View，比如我们经常用到的TextView，Button，LinearLayout等等，但是我们真的了解View吗？尤其是View的坐标。mLeft,mRight,mY,mX,mTranslationY,mScoollY,相对于屏幕的坐标等等这些概念你真的清楚了吗？如果真的清楚了，那你没有必要读这篇博客，如果你还是有一些模糊，建议花上几分钟的时间读一下。</p>
<p>为什么要写这一篇博客呢？</p>
<p>因为掌握View的坐标很重要，尤其是对于自定义View，学习动画有重大的意义。</p>
<p>这篇博客主要讲解一下问题</p>
<ul>
<li>View 的 getLeft（）和get Right（）和  getTop（） 和getBottom（）</li>
<li>View 的 getＹ（）， getTranslationY() 和 getTop（） 之间的联系</li>
<li>View 的  getScroolY  和 View 的 scrollTo() 和 scrollBy（）</li>
<li>event.getY 和  event.getRawY()</li>
<li>扩展，怎样获取状态栏（StatusBar）和标题栏（titleBar）的高度</li>
</ul>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1faog7dpkajj20a90i70ty.jpg"></p>
<p> 简单说明一下（上图Activity采用默认Style，状态栏和标题栏都会显示）：最大的草绿色区域是屏幕界面，红色次大区域我们称之为“应用界面区域”，最小紫色的区域我们称之为“View绘制区域”；屏幕顶端、应用界面区之外的那部分显示手机电池网络运营商信息的为“状态栏”，应用区域顶端、View绘制区外部显示Activity名称的部分我们称为“标题栏”。</p>
<p>从这张图片我们可以看到<br>在Android中，当ActionBar存在的情况下，</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">屏幕的 高度=状态栏+应用区域的高度=状态栏的 高度+（标题栏的 高度+<span class="keyword">View</span> 绘制区域的高度）</span><br></pre></td></tr></table></figure>


<p>当ActionBar不存在的情况下</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">屏幕的高度=状态栏+应用区域的高度=状态栏的 高度+（<span class="keyword">View</span> 绘制区域的 高度）</span><br></pre></td></tr></table></figure>



<h2 id="View-的-getLeft（）和getRight（）和-getTop（）-和getBottom（）"><a href="#View-的-getLeft（）和getRight（）和-getTop（）-和getBottom（）" class="headerlink" title="View 的 getLeft（）和getRight（）和  getTop（） 和getBottom（）"></a>View 的 getLeft（）和getRight（）和  getTop（） 和getBottom（）</h2><figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="type">View</span>.getLeft<span class="literal">()</span> ;</span><br><span class="line"><span class="type">View</span>.getTop<span class="literal">()</span> ;</span><br><span class="line"><span class="type">View</span>.getBottom<span class="literal">()</span>;</span><br><span class="line"><span class="type">View</span>.getRight<span class="literal">()</span> ; </span><br></pre></td></tr></table></figure>

<p>top是左上角纵坐标，left是左上角横坐标，right是右下角横坐标，bottom是右下角纵坐标,都是相对于它的<strong>直接父View</strong>而言的，而不是相对于<strong>屏幕</strong>而言的。这一点要区分清楚。那那个坐标是相对于屏幕而言的呢，以及要怎样获取相对于屏幕的坐标呢？</p>
<p>目前View里面的变量还没有一个是相对于屏幕而言的，但是我们可以获取到相对于屏幕的坐标。一般来说，我们要获取View的坐标和高度 等，都必须等到View绘制完毕以后才能获取的到，在Activity 的 onCreate（）方法 里面 是获取不到的，必须 等到View绘制完毕以后才能获取地到View的响应的坐标，一般来说，主要 有以下两种方法。</p>
<p>第一种方法，onWindowFocusChanged（）方法里面进行调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onWindowFocusChanged</span><span class="params">(<span class="type">boolean</span> hasFocus)</span> &#123;</span><br><span class="line">  <span class="built_in">super</span>.onWindowFocusChanged(hasFocus); </span><br><span class="line">  <span class="comment">//确保只会调用一次</span></span><br><span class="line">   <span class="keyword">if</span>(first)&#123;</span><br><span class="line">     first=<span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">final</span> <span class="type">int</span>[] location = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];     </span><br><span class="line">     mView.getLocationOnScreen(location);</span><br><span class="line">     <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> location[<span class="number">0</span>]  ;</span><br><span class="line">     <span class="type">int</span> <span class="variable">y1</span> <span class="operator">=</span> location[<span class="number">1</span>]  ;</span><br><span class="line">     Log.i(TAG, <span class="string">&quot;onCreate: x1=&quot;</span> +x1);</span><br><span class="line">     Log.i(TAG, <span class="string">&quot;onCreate: y1=&quot;</span> +y1);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种方法，在视图树绘制完成的时候进行测量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mView.getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">new</span> <span class="title class_">ViewTreeObserver</span></span><br><span class="line">        .OnGlobalLayoutListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onGlobalLayout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//   移除监听器，确保只会调用一次，否则在视图树发挥改变的时候又会调用</span></span><br><span class="line">        mView.getViewTreeObserver().removeGlobalOnLayoutListener(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span>[] location = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        mView.getLocationOnScreen(location);</span><br><span class="line">        <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> location[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">y1</span> <span class="operator">=</span> location[<span class="number">1</span>];</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;onCreate: x1=&quot;</span> + x1);</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;onCreate: y1=&quot;</span> + y1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>




<h2 id="View-的-getY（），-getTranslationY-和-getTop（）-之间的联"><a href="#View-的-getY（），-getTranslationY-和-getTop（）-之间的联" class="headerlink" title="View 的 getＹ（）， getTranslationY() 和 getTop（） 之间的联"></a>View 的 getＹ（）， getTranslationY() 和 getTop（） 之间的联</h2><p>getＹ（）</p>
<blockquote>
<p>Added in API level 14<br>The visual y position of this view, in pixels.(返回的是View视觉上的图标，即我们眼睛看到位置的Y坐标，注意也是相对于<strong>直接父View</strong>而言的默认值跟getTop（）相同，别急，下面会解释）</p>
</blockquote>
<p>getTranslationY()</p>
<blockquote>
<p>Added in API level 14<br>The vertical position of this view relative to its top position, in pixels.(竖直方向上相对于top的偏移量，默认值为0）</p>
</blockquote>
<p>那 getY（） 和 getTranslationY（） 和 getTop （） 到底有什么关系呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewDebug</span>.ExportedProperty(category = <span class="string">&quot;drawing&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> mTop + getTranslationY();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ViewDebug</span>.ExportedProperty(category = <span class="string">&quot;drawing&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getTranslationY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mRenderNode.getTranslationY();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ViewDebug</span>.CapturedViewProperty</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getTop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mTop;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>从以上的源码我们可以知道 getY（）&#x3D; getTranslationY（）+ getTop （），而 getTranslationY（） 的默认值是0，除非我们通过 setTranlationY（） 来改变它，这也就是我们上面上到的 getY 默认值跟 getTop（）相同</p>
<p>那我们要怎样改变 top值 和 Y 值呢？ 很明显就是调用相应的set方法 ，即 setY（） 和setTop（） ，就可以改变他们 的值。</p>
<h2 id="View-的-getScroolY-和-View-的-scrollTo-和-scrollBy（）"><a href="#View-的-getScroolY-和-View-的-scrollTo-和-scrollBy（）" class="headerlink" title="View 的  getScroolY  和 View 的 scrollTo() 和 scrollBy（）"></a>View 的  getScroolY  和 View 的 scrollTo() 和 scrollBy（）</h2><p>getScrollY是一个比较特别的函数，因为它涉及一个值叫mScrollY，简单说，getScrollY一般得到的都是0，除非你调用过scrollTo或scrollBy这两个函数来改变它。</p>
<h3 id="scrollTo-和-scrollBy（）"><a href="#scrollTo-和-scrollBy（）" class="headerlink" title="scrollTo() 和 scrollBy（）"></a>scrollTo() 和 scrollBy（）</h3><p>从字面意思我们可以知道 scrollTo() 是滑动到哪里的意思 ，scrollBy（）是相对当前的位置滑动了多少。当然这一点在源码中也是可以体现出来的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scrollTo</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mScrollX != x || mScrollY != y) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldX</span> <span class="operator">=</span> mScrollX;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldY</span> <span class="operator">=</span> mScrollY;</span><br><span class="line">        mScrollX = x;</span><br><span class="line">        mScrollY = y;</span><br><span class="line">        invalidateParentCaches();</span><br><span class="line">        onScrollChanged(mScrollX, mScrollY, oldX, oldY);</span><br><span class="line">        <span class="keyword">if</span> (!awakenScrollBars()) &#123;</span><br><span class="line">            postInvalidateOnAnimation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scrollBy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    scrollTo(mScrollX + x, mScrollY + y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>有几点需要注意的是</p>
<ul>
<li>不论是scrollTo或scrollBy，其实都是对View的内容进行滚动而不是对View本身，你可以做个小实验，一个LinearLayouy背景是黄色，里面放置一个子LinearLayout背景是蓝色，调用scrollTo或scrollBy，移动的永远是蓝色的子LinearLayout。</li>
<li>还有就是scrollTo和scrollBy函数的参数和坐标系是“相反的”，比如scrollTo(-100,0)，View的内容是向X轴正方向移动的，这个相反打引号是因为并不是真正的相反，具体可以看源码，关于这两个函数的源码分析大家可以看<a href="http://blog.csdn.net/xplee0576/article/details/24242383?utm_source=tuicool&utm_medium=referral">Android——源码角度分析View的scrollBy()和scrollTo()的参数正负问题</a>，一目了然。</li>
</ul>
<h2 id="View-的-width-和-height"><a href="#View-的-width-和-height" class="headerlink" title="View 的 width 和 height"></a>View 的 width 和 height</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewDebug</span>.ExportedProperty(category = <span class="string">&quot;layout&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mBottom - mTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到 Android的 height 是由 mBottom  和 mTop 共同得出的，那我们要怎样设置Android的高度呢？有人会说直接在xml里面设置 android:height&#x3D;””  不就OK了，那我们如果要动态设置height的高度呢，怎么办？你可能会想到 setWidth（）方法？但是我们找遍了View的所有方法，都没有发现 setWidth（）方法，那要怎样动态设置height呢？其实有两种方法</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"> <span class="type">int</span> <span class="built_in">width</span>=<span class="number">50</span>;</span><br><span class="line"><span class="type">int</span> <span class="built_in">height</span>=<span class="number">100</span>;</span><br><span class="line">ViewGroup.<span class="property">LayoutParams</span> layoutParams = view.<span class="property">getLayoutParams</span>();</span><br><span class="line"><span class="keyword">if</span>(layoutParams==<span class="literal">null</span>)&#123;</span><br><span class="line">    layoutParams=<span class="keyword">new </span><span class="class title_">ViewGroup</span>.<span class="property">LayoutParams</span>(<span class="built_in">width</span>,<span class="built_in">height</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    layoutParams.<span class="property">height</span>=<span class="built_in">height</span>;</span><br><span class="line">&#125;</span><br><span class="line">view.<span class="property">setLayoutParams</span>(layoutParams);</span><br></pre></td></tr></table></figure>

<p>第二种方法，单独地改变top或者bottom的值，这种方法不推荐使用</p>
<p>至于width，它跟height基本一样，只不过它是有mRight 和mLeft 共同决定而已。</p>
<p>需要注意的是，平时我们在执行动画的过程，不推荐使用LayoutParams来改变View的状态，因为改变LayoutParams会调用requestLayout（）方法，会标记当前View及父容器，同时逐层向上提交，直到ViewRootImpl处理该事件，ViewRootImpl会调用三大流程，从measure开始，对于每一个含有标记位的view及其子View都会进行测量、布局、绘制，性能较差，源码体现如下：关于requestLayout （）方法的更多分析可以查看这一篇博客<a href="http://blog.csdn.net/a553181867/article/details/51583060">Android View 深度分析requestLayout、invalidate与postInvalidate</a></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLayoutParams</span>(<span class="params">ViewGroup.LayoutParams <span class="keyword">params</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">params</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;Layout parameters cannot be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mLayoutParams = <span class="keyword">params</span>;</span><br><span class="line">    resolveLayoutParams();</span><br><span class="line">    <span class="keyword">if</span> (mParent instanceof ViewGroup) &#123;</span><br><span class="line">        ((ViewGroup) mParent).onSetLayoutParams(<span class="keyword">this</span>, <span class="keyword">params</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    requestLayout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此我们如果在api 14 以后 ，在动画执行过程中，要改变View的状态，推荐使用setTranslationY（）和setTranslationX（0等方法，而 尽量避免改变LayoutParams.因为性能嫌贵来说较差。</p>
<h2 id="event-getY-和-event-getRawY"><a href="#event-getY-和-event-getRawY" class="headerlink" title="event.getY() 和  event.getRawY()"></a>event.getY() 和  event.getRawY()</h2><p> 要区分于MotionEvent.getRawX() 和MotionEvent.getX();,</p>
<p>在public boolean onTouch(View view, MotionEvent event) 中，当你触到控件时，x,y是相对于该控件左上点（控件本身）的相对位置。 而rawx,rawy始终是相对于屏幕的位置。getX()是表示Widget相对于自身左上角的x坐标,而getRawX()是表示相对于屏幕左上角的x坐标值 (注意:这个屏幕左上角是手机屏幕左上角,不管activity是否有titleBar或是否全屏幕)。</p>
<p><img src="http://ww4.sinaimg.cn/large/9fe4afa0jw1faplvwpqj3j207c06aaa5.jpg"></p>
<h2 id="扩展，怎样获取状态栏（StatusBar）和标题栏（titleBar）的高度"><a href="#扩展，怎样获取状态栏（StatusBar）和标题栏（titleBar）的高度" class="headerlink" title="扩展，怎样获取状态栏（StatusBar）和标题栏（titleBar）的高度"></a>扩展，怎样获取状态栏（StatusBar）和标题栏（titleBar）的高度</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> public void onWindowFocusChanged(boolean hasFocus) &#123;</span><br><span class="line">    super.onWindowFocusChanged(hasFocus);</span><br><span class="line"></span><br><span class="line">    //屏幕</span><br><span class="line">    DisplayMetrics dm = new DisplayMetrics();</span><br><span class="line">    getWindowManager().getDefaultDisplay().getMetrics(dm);</span><br><span class="line">    Log.e(TAG, &quot;屏幕高:&quot; + dm.heightPixels);</span><br><span class="line"></span><br><span class="line">    //应用区域</span><br><span class="line">    Rect outRect1 = new Rect();</span><br><span class="line">    getWindow().getDecorView().getWindowVisibleDisplayFrame(outRect1);</span><br><span class="line">    //这个也就是状态栏的 高度</span><br><span class="line">    Log.e(TAG, &quot;应用区顶部&quot; + outRect1.top);</span><br><span class="line">    </span><br><span class="line">    Log.e(TAG, &quot;应用区高&quot; + outRect1.height());</span><br><span class="line">    </span><br><span class="line">    // 这个方法必须在有actionBar的情况下才能获取到状态栏的高度</span><br><span class="line">    //View绘制区域</span><br><span class="line">    Rect outRect2 = new Rect();</span><br><span class="line">    getWindow().findViewById(Window.ID_ANDROID_CONTENT).getDrawingRect(outRect2);</span><br><span class="line">    Log.e(TAG, &quot;View绘制区域顶部-错误方法：&quot; + outRect2.top);   //不能像上边一样由outRect2.top获取，这种方式获得的top是0，可能是bug吧</span><br><span class="line">    Log.e(TAG, &quot;View绘制区域高度：&quot; + outRect2.height());</span><br><span class="line"></span><br><span class="line">    int viewTop = getWindow().findViewById(Window.ID_ANDROID_CONTENT).getTop();   //要用这种方法</span><br><span class="line">    Log.e(TAG, &quot;View绘制区域顶部-正确方法：&quot; + viewTop);</span><br><span class="line"></span><br><span class="line">    int titleBarHeight=viewTop;</span><br><span class="line"></span><br><span class="line">    Log.d(TAG, &quot;onWindowFocusChanged: 标题栏高度titleBarHeight=&quot; +titleBarHeight);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>这里我们需要注意的 是在ActionBar存在的情况下，通过这种方法我们才能够得出titleBar的高度，否则是无法得到的，因为viewTop 为0.</p>
<hr>
<p>这篇博客到此为止，关于更多自定义View 的一些例子，可以看我以下的博客 </p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/51765428"><strong>常用的自定义View例子一(FlowLayout)</strong></a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/51772308"><strong>自定义View常用例子二（点击展开隐藏控件，九宫格图片控件）</strong></a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/51804844"><strong>常用的自定义View例子三（MultiInterfaceView多界面处理）</strong></a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/51804865"><strong>常用的自定义控件四（QuickBarView）</strong></a></p>
]]></content>
  </entry>
  <entry>
    <title>字节跳动抖音 Android 校招面经，已拿 offer</title>
    <url>/p/5956.html</url>
    <content><![CDATA[<blockquote>
<p>作者：可爱猫图鉴赏员<br>链接：<a href="https://www.nowcoder.com/discuss/489732?type=0&order=0&pos=2992&page=1&channel=-2&source_id=discuss_tag">https://www.nowcoder.com/discuss/489732?type=0&amp;order=0&amp;pos=2992&amp;page=1&amp;channel=-2&amp;source_id=discuss_tag</a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天，在逛博客的时候，看到一篇不错的校招生面经，转载过来，大家可以看一下。</p>
<p>作者背景大概是这样的：</p>
<blockquote>
<p>2021应届秋招</p>
<p>个人背景 ：本科，软件工程专业，有一段暑期实习（美团）和几个安卓项目</p>
<p>提前批投递了字节头条的客户端，挂在了终面，正式批又投了抖音的客户端，简历通过后约了大概一周后面试</p>
</blockquote>
<h2 id="一面（-45min）"><a href="#一面（-45min）" class="headerlink" title="一面（~45min）"></a>一面（~45min）</h2><ol>
<li>介绍项目，讲述一下实习的工作内容和感想（~10min）</li>
<li>什么是内存泄漏，Android里有哪些内存泄漏的场景，原因是什么</li>
<li>JVM的GC过程，GC的算法都有哪些</li>
<li>进程和线程的概念，Android里怎样实现多线程？（Thread  Handler  AsyncTask  IntentService等等）</li>
<li>Handler的原理和使用</li>
<li>Handler是怎么和线程绑定的（Looper），为什么Looper.loop()要设计成死循环</li>
<li>Java的几种内部类，区别是什么</li>
<li>Activity的生命周期和启动模式</li>
<li>写题：二叉树的右视图（层序遍历即可）</li>
</ol>
<p>一面比较短，问的问题也比较基础，大概30分钟后开始二面</p>
<h2 id="二面（-1h30min）"><a href="#二面（-1h30min）" class="headerlink" title="二面（~1h30min）"></a>二面（~1h30min）</h2><ol>
<li>自我介绍</li>
<li>介绍项目，为什么要自学安卓（~5min）</li>
<li>Android如何实现多进程，应用场景是什么（答的不好）</li>
<li>Android的IPC机制（Binder）是否了解（答的也不好）</li>
<li>如何用两个队列（FIFO）实现栈（FILO）</li>
<li>HashMap和HashTable区别，HashMap原理和实现，hash()的算法</li>
<li>如果自己设计hash算***怎么设计，为什么（答的素数取余）</li>
<li>String的hashCode()和Object的hashCode()</li>
<li>虚拟内存和物理内存的概念和关系，内存分页的调度算法</li>
<li>怎么实现LRU缓存（参考leetcode T146）</li>
<li>可以自己写一个java.lang.Object类吗，系统会加载哪一个</li>
<li>Java里泛型的实现</li>
<li>了解常见排序算法吗，手写一下快排</li>
<li>Java里加锁的方式，synchornized关键字的原理，悲观锁和乐观锁都有哪些实现</li>
<li>死锁的条件和解决方法，讲讲银行家算法</li>
<li>TCP的三次握手四次挥手，为什么要四次挥手</li>
<li>TCP的流量控制算法（滑动窗口），拥塞控制算法</li>
<li>怎么解决用户高频点击打开新Activity导致的多实例问题（Activity启动模式）</li>
<li>怎么判断两个无环单链表是否相交</li>
<li>写题：leetcode 445</li>
<li>反问</li>
</ol>
<p>二面问题量非常的大，集中在Java&#x2F;OS&#x2F;算法，但并没有特别难以回答的问题，认真准备的话大部分都能答出来。面试官也非常友好，给了很多引导和提示。</p>
<p>因为三面面试官的时间问题，约了两天后的三面</p>
<h2 id="三面（-45min）"><a href="#三面（-45min）" class="headerlink" title="三面（~45min）"></a>三面（~45min）</h2><ol>
<li>自我介绍</li>
<li>介绍一下实习做的工作，是自己完成的吗，遇到什么困难，成果怎么样</li>
<li>RecyclerView怎么实现的item缓存，跟ListView有什么区别（因为项目用到了所以被问了）</li>
<li>写题：1233. 删除子文件夹</li>
<li>设计题：微信的联系人列表功能<ul>
<li>（1）设计添加联系人的API（从可能的方式，数据形式，接口参数方面回答）</li>
<li>（2）怎么实现联系人列表的UI（答的RecyclerView）</li>
<li>（3）怎么实现A-Z首字母的快速定位功能</li>
</ul>
</li>
<li>是自学的Android吗，为什么选择这个方向，有没有什么经验给同样想自学的学弟学妹</li>
<li>是哪里人，为什么想到上海来就业</li>
</ol>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>校招生面试，尤其是大厂，说到底，一般主要问几点</p>
<ol>
<li>基础，包括 Java 基础，计算机基础，Android 的一些基础，Handler，线程池原理</li>
<li>项目或者实习经历，做了什么，难点是什么，有什么收获</li>
<li>算法，这个可以多刷刷剑指 offer，leetcode 或者牛客。</li>
</ol>
<p>如果想进入大厂的，建议大二，大三的时候，可以着手开始准备。</p>
<ol>
<li>在大三的时候，尽量争取能够进入中大厂实习，这时候的竞争相对校招会小很多，表现不错的，基本可以直接留下来转正。</li>
<li>投递简历的时候，尽量找师兄师姐内推。简历还可以的，基本可以直接面试，免去了笔试。如果你身边没有熟人的话，我也可以帮你内推哦。</li>
</ol>
<p>最后，送给大家一些我大学时候整理的资料。</p>
<ol>
<li>公众号回复 <strong>Java</strong>，领取马士兵 java 学习视频</li>
<li>公众号回复 <strong>黑马</strong>，领取黑马 52 期不加密视频</li>
<li>公众号回复  <strong>剑指 offer</strong>，领取剑指 offer 题解</li>
</ol>
<h2 id="找到我"><a href="#找到我" class="headerlink" title="找到我"></a>找到我</h2><p>我是站在巨人的肩膀上成长起来的，同样，我也希望成为你们的巨人。觉得不错的话可以关注一下我的微信公众号程序员徐公，在此感谢各位大佬们。主要分享</p>
<p>1.<strong>Android 开发相关知识</strong>：包括 java，kotlin， Android 技术。<br>2.<strong>面试相关分享</strong>：包括常见的面试题目，大厂面试真题、面试经验套路分享。<br>3.<strong>算法相关学习笔记</strong>：比如怎么学习算法，leetcode 常见算法总结，跟大家一起学习算法。<br>4.<strong>时事点评</strong>：主要是关于互联网的，比如小米高管屌丝事件，拼多多女员工猝死事件等</p>
<p>希望我们可以成为朋友，成长路上的忠实伙伴！</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/32330cdfb6f0dfc77e5e0eccfc2d7dde.png"></p>
]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>巧用别名和 sh 脚本，adb 截图和录屏，快速提高你的效率</title>
    <url>/p/38659.html</url>
    <content><![CDATA[<blockquote>
<p>本文首发我的微信公众号：程序员徐公，微信公众号<strong>程序员徐公</strong>回复<strong>徐公666</strong>，可以获得简历模板</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在平时开发过程中，我们经常需要截图和录制视频，尤其是客户端开发和测试。</p>
<p>可能有一些人的姿势是这样的。在电脑上开个模拟器，使用第三方工具后进行截图和录屏。还有一种最原始的方式，在手机上截图和录制视频，然后再通过 QQ 等工具发送到电脑，这多累呀。</p>
<p>其实，有一种很简便的方式，那就是说通过别名和 adb，一个简单命令，让你快速截图和录制视频,如 adbshot， adbrecord。下面让我们一起来看一下，怎么实现？</p>
<h1 id="adb-命令和录制视频"><a href="#adb-命令和录制视频" class="headerlink" title="adb 命令和录制视频"></a>adb 命令和录制视频</h1><h2 id="adb-命令截图"><a href="#adb-命令截图" class="headerlink" title="adb 命令截图"></a>adb 命令截图</h2><p>第一种方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#（保存到SDCard）</span><br><span class="line">adb shell /system/bin/screencap -p /sdcard/screenshot.png</span><br><span class="line"># 从SD卡导出到电脑，注意/Users/junxu 为电脑路径，必须存在</span><br><span class="line">adb pull /sdcard/screenshot.png /Users/junxu</span><br></pre></td></tr></table></figure>


<p>如果你想删除手机上的图片，那么你可以使用这个命令来删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell rm /sdcard/screen.png</span><br></pre></td></tr></table></figure>

<h3 id="开始录制命令"><a href="#开始录制命令" class="headerlink" title="开始录制命令:"></a>开始录制命令:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell screenrecord --time-limit 10 /sdcard/demo.mp4</span><br></pre></td></tr></table></figure>



<p>说明:录制手机屏幕,视频格式为mp4,存放到手机sd卡里，默认录制时间为180s</p>
<h1 id="mac-设置别名"><a href="#mac-设置别名" class="headerlink" title="mac 设置别名"></a>mac 设置别名</h1><p>1、基本语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias lts =&quot;cd /Users/junxu/Desktop/sh&quot;</span><br></pre></td></tr></table></figure>


<p>2、修改文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure>


<p>加入 <code>alias lts=&quot;cd /data&quot;</code></p>
<p>保存</p>
<p>3、使别名命令生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>


<p>4、在命令行输入lts 就可以达成 <code>cd /Users/junxu/Desktop/sh</code>的效果</p>
<h1 id="配合别名，快速截图和录屏"><a href="#配合别名，快速截图和录屏" class="headerlink" title="配合别名，快速截图和录屏"></a>配合别名，快速截图和录屏</h1><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><strong>增加截图别名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias adbshot=&quot;sh /Users/junxu/Desktop/sh/shot.sh&quot;</span><br></pre></td></tr></table></figure>


<p><strong>截图 SH 脚本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># Android截图，定位和预览默认开启，如果想关闭，可以注释</span><br><span class="line"></span><br><span class="line">echo &quot;第一个参数为：$1&quot;;</span><br><span class="line"></span><br><span class="line">dd=`date +%Y-%m-%d-%H-%M-%S`</span><br><span class="line">pwd=`pwd`</span><br><span class="line">adb shell screencap -p /sdcard/screenshot.png</span><br><span class="line">adb pull /sdcard/screenshot.png</span><br><span class="line">adb shell rm /sdcard/screenshot.png</span><br><span class="line">mv screenshot.png $dd.png</span><br><span class="line">echo &quot;截图已保存为当前目录下的&quot;$pwd$dd.png</span><br><span class="line"># 修改图片尺寸，长或宽最大不超过960，等比缩放</span><br><span class="line">echo &quot;压缩图片...&quot;</span><br><span class="line">sips -Z 960 $pwd/$dd.png</span><br><span class="line"># 定位到文件</span><br><span class="line">open ./$dd.png -R</span><br><span class="line"># 打开预览</span><br><span class="line">open -a Preview $dd.png</span><br><span class="line"># 复制到剪切板</span><br><span class="line">osascript -e &#x27;on run args&#x27; -e &#x27;set the clipboard to POSIX file (first item of args)&#x27; -e end $pwd/$dd.png</span><br><span class="line">echo &quot;截图已复制到剪切板&quot;</span><br></pre></td></tr></table></figure>

<p>记得给 SH 脚本增加可执行权限。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /Users/junxu/Desktop/sh/shot.sh</span><br></pre></td></tr></table></figure>

<h2 id="录屏"><a href="#录屏" class="headerlink" title="录屏"></a>录屏</h2><p><strong>增加录屏别名</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias adbrecord=&quot;sh /Users/junxu/Desktop/sh/record.sh&quot;</span><br></pre></td></tr></table></figure>

<p><strong>录屏脚本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># Android录屏</span><br><span class="line">time=$1</span><br><span class="line"></span><br><span class="line">if [ ! $time ]; then  </span><br><span class="line">  time=5</span><br><span class="line">  echo &quot;IS NULL&quot;  </span><br><span class="line">else  </span><br><span class="line">  echo &quot;NOT NULL&quot;  </span><br><span class="line">fi   </span><br><span class="line"></span><br><span class="line">dd=`date +%Y-%m-%d-%H-%M-%S`&quot;-$time&quot;</span><br><span class="line">echo &quot;dd is $dd&quot;</span><br><span class="line">pwd=`pwd`</span><br><span class="line">adb shell screenrecord --time-limit $time /sdcard/screenrecord.mp4</span><br><span class="line">adb pull /sdcard/screenrecord.mp4</span><br><span class="line">adb shell rm /sdcard/screenrecord.mp4</span><br><span class="line">mv screenrecord.mp4 $dd.mp4</span><br><span class="line">echo &quot;$1秒视频已保存为当前目录下的&quot;$dd.mp4</span><br><span class="line"># 定位到文件</span><br><span class="line">open ./$dd.mp4 -R</span><br><span class="line"># 复制到剪切板</span><br><span class="line">osascript -e &#x27;on run args&#x27; -e &#x27;set the clipboard to POSIX file (first item of args)&#x27; -e end $pwd/$dd.mp4</span><br><span class="line">echo &quot;$1秒视频已复制到剪切板&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>记得给 SH 脚本增加可执行权限。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /Users/junxu/Desktop/sh/record.sh</span><br></pre></td></tr></table></figure>

<h2 id="其他常用-adb-常用别名"><a href="#其他常用-adb-常用别名" class="headerlink" title="其他常用 adb 常用别名"></a>其他常用 adb 常用别名</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias adbtop=&quot;adb shell dumpsys activity top | grep &quot;ACTIVITY&quot; &quot;</span><br><span class="line">alias adbd=&quot;adb devices&quot;</span><br><span class="line">alias adbs=&quot;adb shell&quot;</span><br></pre></td></tr></table></figure>


<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>写这篇文章的目的，是想告诉大家，有<strong>别名</strong>这个概念。对于开发者来说，配置一些自己常用的别名，真的是很方便，可以快速提高效率。大家如果觉得不错的话，可以关注我的微信公众号<strong>程序员徐公</strong></p>
<ol>
<li>公众号程序员徐公回复<em><strong>黑马</strong></em>，获取 Android 学习视频</li>
<li>公众号程序员徐公回复<em><strong>徐公666</strong></em>，获取简历模板，教你如何优化简历，走进大厂</li>
<li>公众号程序员徐公回复<em><strong>面试</strong></em>，可以获得面试常见算法，剑指 offer 题解</li>
<li>公众号程序员徐公回复<em><strong>马士兵</strong></em>，可以获得马士兵学习视频一份</li>
</ol>
<p><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/02/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BE%90%E5%85%AC%20(new).png"></p>
<p><a href="https://mp.weixin.qq.com/s/cqVo6UQqnWZtKdZ6mJt93w">程序员该如何写好自己的简历，一位 5 年中大厂老哥跟你聊聊</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzUzODQxMzYxNQ==&mid=2247485229&idx=1&sn=decb80fd2a5870764e954b2419f0e599&chksm=fad9586dcdaed17b9ca091578f156c80cc84238c742cbfbef0a7d959528e72ff9286e1bee079#rd">我的 5 年 Android 学习之路，那些年一起踩过的坑</a></p>
<p><a href="https://mp.weixin.qq.com/s/teU8bNyRnzoYo4aUx5HORQ">Android 启动优化（七） - JetPack App Startup 使用及源码浅析</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzUzODQxMzYxNQ==&mid=2247485155&idx=1&sn=59b7211f2b1414d4f99b0897aa132c50&chksm=fad959a3cdaed0b52ff20fe7cbd40c5fb0ef438ba4aea0a0ac59d04a8ddff817bb8bfe7dd2e8#rd">Android 启动优化（六）- 深入理解布局优化</a></p>
]]></content>
  </entry>
  <entry>
    <title>程序员如何写好自己的简历，一位 5 年中大厂老哥跟你聊聊</title>
    <url>/p/32752.html</url>
    <content><![CDATA[<blockquote>
<p>本文首发我的微信公众号：程序员徐公，微信公众号<strong>程序员徐公</strong>回复<strong>徐公666</strong>，可以获得简历模板</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家好，我是程序员徐公，双非本科，某中大厂程序员，加上实习，恰好有 5 年的程序员生涯。</p>
<p>从实习到校招，中途踩过不少坑。在职场中有一些自己的心得，今天，跟大家一起来聊聊，程序员应该如何写好自己的一份简历。</p>
<p>前段时间，有一些粉丝私信我说，<strong>明年我想进大厂，今年想开始准备，有什么建议嘛？</strong></p>
<p>我回复他的第一句话说，<strong>先整理好自己的简历，再进行下一步的计划</strong>。为什么这么说呢？</p>
<p>第一：整理简历的过程，其实是一次<strong>复盘总结</strong>。在这过程中，我们会知道自己哪些地方做得好的，哪些做得不好的，这样才能针对性地进行复习。</p>
<p>第二：挺多人，简历写不好，在筛选简历的时候，直接被 pass，连面试的机会都没有，这是很可惜的。</p>
<p>第三：简历写不好，<strong>没突出重点</strong>，面试官很难从短短的一个小时之内，发现你的亮点，空有一身才华，却得不到展现，多可惜呀。</p>
<p>下面，就让我们一起来聊一聊，对于技术人来说，怎样才算是一份好的简历？</p>
<h1 id="一、突出你的亮点"><a href="#一、突出你的亮点" class="headerlink" title="一、突出你的亮点"></a>一、突出你的亮点</h1><p>一份简历，简单来说，主要分为四部分</p>
<ol>
<li>个人基本信息</li>
<li>过往履历</li>
<li>个人技能</li>
<li>项目经历</li>
</ol>
<p>而 HR，面试官在筛选简历的时候，很有可能不超过一分钟，在这短短的 60 秒时间之内，如果要脱颖而出，简历一定要突出你的亮点，让人耳目一新，彰显自己的才能。</p>
<p>对于程序员来说，个人亮点，我们可以从以下及方面着手，比如说。</p>
<ol>
<li>解决了什么疑难杂症，如解决了 top crash， crash 率降低了 0.1% 等</li>
<li>性能上面带来了多少提升，如编译速度的提升，提升了多少，降低了多少 min等</li>
<li>你在这个项目作出了什么成绩，比如主导搭建了代码扫描框架，自动扫描，提高代码质量，减少 review 成本。</li>
</ol>
<p><strong>千里马常有，而伯乐不常有</strong>。一定要重视简历，让简历能够反映你的真实水平，先不说做到锦上添花，至少不要拖后腿。</p>
<h1 id="二、展现自己的个人技能"><a href="#二、展现自己的个人技能" class="headerlink" title="二、展现自己的个人技能"></a>二、展现自己的个人技能</h1><p>个人技能这块，也是简历中必不可少的一部分。</p>
<p><strong>第一，先说最重要的一点，按照掌握的程度分为几个等级，精通，熟悉，掌握，了解，强烈建议不要写精通，道理你懂的。</strong></p>
<p><strong>第二：不熟悉的点不要写到简历上面，否则就是给自己挖坑。</strong></p>
<p>比如，你只是使用了网络库 OkHttp，你在简历上面写熟悉&#x2F;掌握 Okhttp。恭喜你，兄弟，你给自己埋下了一颗<strong>定时炸弹</strong>。面试官可能会问你各种原理的，Okhttp  的设计原理是怎样，拦截器是怎样设计的，有什么优缺点，连接池等等？</p>
<p>说到这，想起了当年实习生面试的时候，写了某开源库，一问三不知。</p>
<p><strong>第三：技能要具体，突出重点，让面试官有话可问</strong>。</p>
<p>反例：</p>
<blockquote>
<p>熟悉 Java</p>
</blockquote>
<p>正例： </p>
<blockquote>
<p>熟悉类加载，并使用类加载技术开发了一个模块化框架</p>
</blockquote>
<p>面试其实是一个双向的选择过程，简历上面技能写得具体，面试官看到了，可能会往这个方面提问题，这是非常 nice 的，我们恰好可以展现自己的特长。</p>
<p>相反，如果简历上面写得不具体，面试官找不出想问的点，那可能就会往他&#x2F;她擅长的方面问，这时候，对于求职者来说，是非常吃亏的。</p>
<p>因为每个人都有擅长和不擅长的技能，不可能面面俱到。</p>
<p><strong>第四，写的技能一定要跟你应聘的岗位相关，不相关的不要写上去</strong>。</p>
<p>比如，你应聘的是 Android 开发工程师，你在简历上面写一堆后端技能。匹配度不高，简历可能会 pass。</p>
<p>当然，也不是不可以写与应聘岗位不相关的技能，只是说简历要跟我们应聘的岗位匹配度高一点。这样，简历筛选通过的几率比较高。</p>
<p><strong>最后，专有名词一定要写对，这体现一个人的专业素养和细心。比如 Java，不要写成 java，android 不要写成 Android</strong>。</p>
<h1 id="三、以项目为主体，展现自己的技术能力和项目贡献"><a href="#三、以项目为主体，展现自己的技术能力和项目贡献" class="headerlink" title="三、以项目为主体，展现自己的技术能力和项目贡献"></a>三、以项目为主体，展现自己的技术能力和项目贡献</h1><p>我们可以从以下思路，以项目为主体，设计我们的简历。</p>
<p>如图，大概分为以下层级</p>
<ol>
<li>项目名称，开始时间和结束时间，在项目中担任的角色</li>
<li>项目简介，说清楚这个项目主要是做什么的，有多少量级，尽量不要超过一行，切忌不要超过两行</li>
<li>项目职责，个人的建议，主要分为两大块，一个是技术职责，一个是业务职责。这样面试官能够很清楚的知道，你在项目中做了什么。</li>
</ol>
<p>项目职责，这一块是最重要的，也是展现我们能力的时候，尤其要重视。</p>
<p>在写一块的时候，建议分点论述，这样显得调理清晰。</p>
<ul>
<li>比如你解决了项目的什么疑难杂症，带来了什么收益。这块在面试当中也经常被问到，<strong>项目中你有遇到什么技术难点嘛，是怎么解决的</strong>？这块回答好了，可以给我们的面试加很多分</li>
<li>做了什么性能优化？这块可以有很多，根据自己擅长的领域和项目经历加上去即可。比如启动优化，编译速度优化，APK 瘦身等</li>
<li>你在这个项目中作出了什么成绩？这块要结合我们项目中的情况来说，比如你推动了 MVVM 框架，组件化的落地等</li>
</ul>
<h1 id="量化你的项目，给出数字"><a href="#量化你的项目，给出数字" class="headerlink" title="量化你的项目，给出数字"></a>量化你的项目，给出数字</h1><p>量化我们的项目，给出数字化结果，可以提高简历的专业度和说服力，给面试官和 hr 留下深刻的印象。</p>
<p>例子一</p>
<p>改写前：应用 xx 技术，解决了 top N 奔溃</p>
<p>改写后：应用 xx 技术，解决了 top N 奔溃，crash 率降低了 0.1% 等</p>
<p>例子二</p>
<p>改写前：应用 xx 技术，减少了内存泄露的发生</p>
<p>改写后：应用 xx 技术，减少了内存泄露的发生，内存 top 值极少了 xxM</p>
<p>例子三：</p>
<p>改写前：结合使用 xx，实现了 app 登录和个人资料的自动填充</p>
<p>改写后：结合使用 xx，实现了 app 登录和个人资料的自动填充，提高了多少的转化率</p>
<h1 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h1><p>写简历，有一些新手会经常犯一些错误，下面简单列举一下</p>
<ol>
<li>简历要用 PDF 格式，不要用 Word 格式，有兼容性问题，可能会乱码</li>
<li>简历命名，建议已这样的格式命名，<strong>昵称-应聘岗位-联系方式</strong>，这样可以一目了然</li>
<li>简历不要太长，尽量控制在两页之内。主要重点介绍你最近做过的项目或者你觉得自己做得比较好的项目</li>
<li>不要在简历中写之前的待遇和期望待遇。</li>
<li>如果平时有写博客，可以将博客地址写在简历上面，这是一个加分项。不过，如果你的博客上面只是单纯记流水账，就不要写上去了，反而容易减分。Github 也是同样的道理。</li>
</ol>
<p>暂时就想起这么多了，以后记得再补充，对了，我整理了一份简历模板，想获取的话，可以在我的微信公众号<strong>程序员徐公</strong>回复<strong>徐公666</strong></p>
<p><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/02/20210507091915.png"></p>
<h1 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h1><p>写好一份简历，有很多技巧，排版，量化数据等，但有一点最重要的是，自身要有底子，要有实力。不然，简历写得再好，一切都是泡沫。</p>
<p>十年磨一剑，铁杵磨成针。不管什么行业，想要脱颖而出，坚持是最重要的。唯有日复一日的坚持与打磨，才能走得更高更远。</p>
<p>以上，是我对如何写好简历的一些看法，觉得写得不错的，可以点个赞哦。微信公众号后台回复<strong>徐公666</strong>，可以获得我整理的简历模板一份。</p>
<h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MzUzODQxMzYxNQ==&mid=2247485229&idx=1&sn=decb80fd2a5870764e954b2419f0e599&chksm=fad9586dcdaed17b9ca091578f156c80cc84238c742cbfbef0a7d959528e72ff9286e1bee079#rd">我的 5 年 Android 学习之路，那些年一起踩过的坑</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzUzODQxMzYxNQ==&mid=2247485028&idx=2&sn=9df955d54f9eedd58f95bfae1d4717b1&chksm=fad95924cdaed03238715f1150827a8ce24f257dec390785ea2d6626c1d3a9f9e5f4d74c072f#rd">职场上这四件事，越早知道越好</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzUzODQxMzYxNQ==&mid=2247484166&idx=1&sn=1b4646ea54b01dcbc655f1fe747cb36f&chksm=fad95c46cdaed550adbdad109ad79d172ffff03a07a5b7aafe173f6f1e85414604842339bc6c#rd">今天，说三件小事</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzUzODQxMzYxNQ==&mid=2247484161&idx=2&sn=8d19078c3789c757f4aa4ca23e00a60e&chksm=fad95c41cdaed557b7a676ef23c7f9e94b797bf0d4a6e1fa8df9626fc98c4bffbcf0ce86afb2#rd">技术人的未来在哪里</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzUzODQxMzYxNQ==&mid=2247484138&idx=2&sn=5685e895e85ad1a08b30750885f78644&chksm=fad95daacdaed4bc0b7445db3db62a64894957be350bc87f9bc4b3eff2d0f425c54ed5422a8f#rd">致刚入职场的你 - 程序员的成长笔记</a></p>
<p>关注我的公众号<strong>程序员徐公</strong>，回复 <strong>徐公666</strong>  获取简历模板，回复 <strong>黑马</strong> ，获取黑马视频教程。</p>
<p><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/02/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BE%90%E5%85%AC%20(1).png"></p>
]]></content>
  </entry>
  <entry>
    <title>面试官，你真的了解 http 吗</title>
    <url>/p/64968.html</url>
    <content><![CDATA[<p>@[toc]</p>
<blockquote>
<p> 我的 CSDN 博客:<a href="https://blog.csdn.net/gdutxiaoxu">https://blog.csdn.net/gdutxiaoxu</a> <br><br> 我的掘金：<a href="https://juejin.im/user/58aa8508570c35006bbd9e03">https://juejin.im/user/58aa8508570c35006bbd9e03</a>  <br><br> github: <a href="https://github.com/gdutxiaoxu/">https://github.com/gdutxiaoxu/</a>  <br><br> 微信公众号：徐公码字(stormjun94)  <br><br> 知乎：<a href="https://www.zhihu.com/people/xujun94">https://www.zhihu.com/people/xujun94</a>  <br></p>
</blockquote>
<h2 id="往期文章"><a href="#往期文章" class="headerlink" title="往期文章"></a>往期文章</h2><p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/97885526">Android 面试必备 - http 与 https 协议</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/97618598">Android 面试必备 - 计算机网络基本知识（TCP，UDP，Http，https）</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/98475465">Android 面试必备 - 线程</a></p>
<p><a href="https://xujun.blog.csdn.net/article/details/98896053">Android 面试必备 - JVM 及 类加载机制</a></p>
<p><a href="https://xujun.blog.csdn.net/article/details/99006458">Android 面试必备 - 系统、App、Activity 启动过程</a></p>
<p><strong><a href="https://github.com/gdutxiaoxu/Android_interview">Android_interview github 地址</a></strong></p>
<p><strong>有兴趣的话可以关注我的公众号 徐公码字（stormjun94),第一时间会在上面更新</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE0LzE3MzRkZGUyNzQyYmNkMjg?x-oss-process=image/format,png" alt="image"></p>
<h2 id="面试常见"><a href="#面试常见" class="headerlink" title="面试常见"></a>面试常见</h2><h3 id="一道经典的面试题"><a href="#一道经典的面试题" class="headerlink" title="一道经典的面试题"></a>一道经典的面试题</h3><p>还记得这道经典的面试题目吗？从 URL 在浏览器被被输入到页面展现的过程中发生了什么？</p>
<p>总体来说分为以下几个过程:</p>
<ul>
<li>DNS 解析:将域名解析成 IP 地址</li>
<li>TCP 连接：TCP 三次握手</li>
<li>发送 HTTP 请求</li>
<li>服务器处理请求并返回 HTTP 报文</li>
<li>浏览器解析渲染页面</li>
<li>断开连接：TCP 四次挥手</li>
</ul>
<p>完整的可以看以下下面的图片</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE0LzE3MzRkZGUyNzQxN2I1OGQ?x-oss-process=image/format,png" alt="image"></p>
<h2 id="http-必备基础知识"><a href="#http-必备基础知识" class="headerlink" title="http 必备基础知识"></a>http 必备基础知识</h2><p>HTTP 是一种 超文本传输协议(Hypertext Transfer Protocol)，HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE0LzE3MzRkZGUyNzQzYmYxNTk?x-oss-process=image/format,png" alt="image"></p>
<p>HTTP 主要内容分为三部分，超文本（Hypertext）、传输（Transfer）、协议（Protocol）。</p>
<ul>
<li>超文本就是不单单只是本文，它还可以传输图片、音频、视频，甚至点击文字或图片能够进行超链接的跳转。</li>
<li>上面这些概念可以统称为数据，传输就是数据需要经过一系列的物理介质从一个端系统传送到另外一个端系统的过程。通常我们把传输数据包的一方称为请求方，把接到二进制数据包的一方称为应答方。</li>
<li>而协议指的就是是网络中(包括互联网)传递、管理信息的一些规范。如同人与人之间相互交流是需要遵循一定的规矩一样，计算机之间的相互通信需要共同遵守一定的规则，这些规则就称为协议，只不过是网络协议。</li>
</ul>
<h3 id="什么是无状态协议，HTTP-是无状态协议吗，怎么解决"><a href="#什么是无状态协议，HTTP-是无状态协议吗，怎么解决" class="headerlink" title="什么是无状态协议，HTTP 是无状态协议吗，怎么解决"></a>什么是无状态协议，HTTP 是无状态协议吗，怎么解决</h3><p>无状态协议(Stateless Protocol) 就是指浏览器对于事务的处理没有记忆能力。举个例子来说就是比如客户请求获得网页之后关闭浏览器，然后再次启动浏览器，登录该网站，但是服务器并不知道客户关闭了一次浏览器。</p>
<p>HTTP 就是一种无状态的协议，他对用户的操作没有记忆能力。可能大多数用户不相信，他可能觉得每次输入用户名和密码登陆一个网站后，下次登陆就不再重新输入用户名和密码了。这其实不是 HTTP 做的事情，起作用的是一个叫做 小甜饼(Cookie) 的机制。它能够让浏览器具有记忆能力。<br>如果你的浏览器允许 cookie 的话，查看方式 chrome:&#x2F;&#x2F;settings&#x2F;content&#x2F;cookies</p>
<h3 id="几种方法"><a href="#几种方法" class="headerlink" title="几种方法"></a>几种方法</h3><p>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法</p>
<p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT</p>
<ul>
<li>GET: 通常用于请求服务器发送某些资源</li>
<li>HEAD: 请求资源的头部信息, 并且这些头部与 HTTP GET 方法请求时返回的一致. 该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载, 以此可以节约带宽资源</li>
<li>OPTIONS: 用于获取目的资源所支持的通信选项</li>
<li>POST: 发送数据给服务器，是<strong>非幂等</strong>的</li>
<li>PUT: 跟POST方法很像，也是想服务器提交数据。但是，它们之间有不同。PUT指定了资源在服务器上的位置，而POST不需要置顶资源在服务器的位置，是<strong>幂等</strong>的</li>
<li>DELETE: 用于删除指定的资源</li>
<li>PATCH: 用于对资源进行部分修改</li>
<li>CONNECT: HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器</li>
<li>TRACE: 回显服务器收到的请求，主要用于测试或诊断</li>
</ul>
<h3 id="http-get-和-post-区别"><a href="#http-get-和-post-区别" class="headerlink" title="http get 和 post 区别"></a>http get 和 post 区别</h3><table>
<thead>
<tr>
<th>Post一般用于更新或者添加资源信息</th>
<th align="center">Get一般用于查询操作，而且应该是安全和幂等的</th>
</tr>
</thead>
<tbody><tr>
<td>Post更加安全</td>
<td align="center">Get会把请求的信息放到URL的后面</td>
</tr>
<tr>
<td>Post传输量一般无大小限制</td>
<td align="center">Get不能大于2KB</td>
</tr>
<tr>
<td>Post执行效率低</td>
<td align="center">Get执行效率略高</td>
</tr>
</tbody></table>
<h3 id="http-put-和-post-区别"><a href="#http-put-和-post-区别" class="headerlink" title="http put 和 post 区别"></a>http put 和 post 区别</h3><p><strong>举一个简单的例子</strong></p>
<p>POST:用于提交请求，可以更新或者创建资源，是非幂等的</p>
<p>举个例子，在我们的支付系统中，一个api的功能是创建收款金额二维码，它和金额相关，每个用户可以有多个二维码，如果连续调用则会创建新的二维码，这个时候就用POST</p>
<p>PUT: 用于向指定的URI传送更新资源，是幂等的</p>
<p>还是那个例子，用户的账户二维码只和用户关联，而且是一一对应的关系，此时这个api就可以用PUT，因为每次调用它，都将刷新用户账户二维码</p>
<p><strong>如果从 RESTful API 的角度来理解，PUT 方法是这么工作的：</strong></p>
<p>把一个对象 V 绑定到地址 K 上；今后请求地址 K 时，就会返回对象 V。</p>
<p>如果地址 K 之前曾绑定过另一个对象，比如 V0，那么 V0 会被 V 替换。</p>
<p>举一个简单的例子，假设我的博客后台支持 RESTful API，我可以通过下面的请求发布这篇文章：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT https://gdutxiao.github.io/2018/04/16/http-put-vs-post HTTP/1.1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    /* 文章内容正文 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，使用 PUT 方法时，客户端需要在 HTTP 请求中明确指定地址 K。</p>
<p>正如 Java 的例子一样，PUT 方法应当支持幂等性。如果是同一个对象 V，PUT 多次与 PUT 一次返回的结果应该是相同的。客户端可以利用 PUT 的幂等性安全地重试请求，保证客户端的请求至少被服务端处理一次。</p>
<p>如果把上面发布文章的例子用 HTTP POST 方法重写，它可能会是下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST https://gdutxiao.github.io/post-article HTTP/1.1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    /* 文章内容正文 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说，地址 K 不是由客户端指定的，而是由服务端生成的。比如，服务端可能会根据日期和文章标题，为本文分配一个地址。</p>
<p>另外，与 PUT 方法不同，POST 方法是不支持幂等性的。同一个请求被处理两次，应当生成两份对象。换句话说，客户端应该只发送一次 POST 请求，而客户端的请求至多会被服务端处理一次。</p>
<blockquote>
<p>现在问题来了，如果真的遇到了网络故障，客户端应该如何重试 POST 请求呢？解决方法其实很简单，我们可以在 POST 请求中隐藏一个唯一的 token，服务端在处理请求后把 token 存入数据库，如果这个 token 之前遇到过，服务端就知道这是重复的 POST 请求，可以不再处理了。</p>
</blockquote>
<h2 id="http-版本"><a href="#http-版本" class="headerlink" title="http 版本"></a>http 版本</h2><h3 id="1-0-与-1-1"><a href="#1-0-与-1-1" class="headerlink" title="1.0 与 1.1"></a>1.0 与 1.1</h3><ul>
<li>http1.0一次只能处理一个请求，不能同时收发数据</li>
<li>http1.1可以处理多个请求，能同时收发数据</li>
<li>http1.1增加可更多字段，如cache-control,keep-alive.</li>
</ul>
<h3 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h3><ul>
<li>http 2.0采用二进制的格式传送数据，不再使用文本格式传送数据</li>
<li>http2.0对消息头采用hpack压缩算法，http1.x的版本消息头带有大量的冗余消息</li>
<li>http2.0 采用多路复用，即用一个tcp连接处理所有的请求，真正意义上做到了并发请求，流还支持优先级和流量控制（HTTP&#x2F;1.x 虽然通过 pipeline也能并发请求，但是多个请求之间的响应会被阻塞的，所以 pipeline 至今也没有被普及应用，而 HTTP&#x2F;2 做到了真正的并发请求。同时，流还支持优先级和流量控制。）</li>
<li>http2.0支持server push，服务端可以主动把css，jsp文件主动推送到客户端，不需要客户端解析HTML，再发送请求，当客户端需要的时候，它已经在客户端了。</li>
</ul>
<p><strong>缺点</strong></p>
<p>虽然 HTTP&#x2F;2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题， <strong>主要是底层支撑的 TCP 协议造成的</strong><br>。HTTP&#x2F;2的缺点主要有以下几点：</p>
<ul>
<li>TCP 以及 TCP+TLS建立连接的延时</li>
</ul>
<p>HTTP&#x2F;2使用TCP协议来传输的，而如果使用HTTPS的话，还需要使用TLS协议进行安全传输，而使用TLS也需要一个握手过程，<br><strong>这样就需要有两个握手延迟过程</strong> ：</p>
<p>①在建立TCP连接的时候，需要和服务器进行三次握手来确认连接成功，也就是说需要在消耗完1.5个RTT之后才能进行数据传输。</p>
<p>②进行TLS连接，TLS有两个版本——TLS1.2和TLS1.3，每个版本建立连接所花的时间不同，大致是需要1~2个RTT。</p>
<p>总之，在传输数据之前，我们需要花掉 3～4 个 RTT。</p>
<ul>
<li>TCP的队头阻塞并没有彻底解决</li>
</ul>
<p>上文我们提到在HTTP&#x2F;2中，多个请求是跑在一个TCP管道中的。但当出现了丢包时，HTTP&#x2F;2 的表现反倒不如 HTTP&#x2F;1<br>了。因为TCP为了保证可靠传输，有个特别的“丢包重传”机制，丢失的包必须要等待重新传输确认，HTTP&#x2F;2出现丢包时，整个 TCP<br>都要开始等待重传，那么就会阻塞该TCP连接中的所有请求（如下图）。而对于 HTTP&#x2F;1.1 来说，可以开启多个 TCP<br>连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE0LzE3MzRkZGUyNzQ1MTVlNzg?x-oss-process=image/format,png" alt="image"></p>
<h3 id="Http-3-0"><a href="#Http-3-0" class="headerlink" title="Http 3.0"></a>Http 3.0</h3><p>Google 在推SPDY的时候就已经意识到了这些问题，于是就另起炉灶搞了一个基于 UDP 协议的“QUIC”协议，让HTTP跑在QUIC上而不是TCP上。<br>而这个“HTTP over QUIC”就是HTTP协议的下一个大版本，HTTP&#x2F;3。它在HTTP&#x2F;2的基础上又实现了质的飞跃，真正“完美”地解决了“队头阻塞”问题。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE0LzE3MzRkZGUyNzQ3MGZmZWM?x-oss-process=image/format,png" alt="image"></p>
<p>QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个QUIC新功能。不过HTTP&#x2F;3目前还处于草案阶段，正式发布前可能会有变动，所以本文尽量不涉及那些不稳定的细节。</p>
<h4 id="QUIC新功能"><a href="#QUIC新功能" class="headerlink" title="QUIC新功能"></a>QUIC新功能</h4><p>上面我们提到QUIC基于UDP，而UDP是“无连接”的，根本就不需要“握手”和“挥手”，所以就比TCP来得快。此外QUIC也实现了可靠传输，保证数据一定能够抵达目的地。它还引入了类似HTTP&#x2F;2的“流”和“多路复用”，单个“流”是有序的，可能会因为丢包而阻塞，但其他“流”不会受到影响。具体来说QUIC协议有以下特点：</p>
<ul>
<li>实现了类似TCP的流量控制、传输可靠性的功能。</li>
</ul>
<p>虽然UDP不提供可靠性的传输，但QUIC在UDP的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些TCP中存在的特性。</p>
<ul>
<li>实现了快速握手功能。</li>
</ul>
<p>由于QUIC是基于UDP的，所以QUIC可以实现使用0-RTT或者1-RTT来建立连接，这意味着QUIC可以用最快的速度来发送和接收数据，这样可以大大提升首次打开页面的速度。<br><strong>0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势</strong> 。</p>
<ul>
<li>集成了TLS加密功能。</li>
</ul>
<p>目前QUIC使用的是TLS1.3，相较于早期版本TLS1.3有更多的优点，其中最重要的一点是减少了握手所花费的RTT个数。</p>
<ul>
<li>多路复用，彻底解决TCP中队头阻塞的问题</li>
</ul>
<p>和TCP不同，QUIC实现了在同一物理连接上可以有多个独立的逻辑数据流（如下图）。实现了数据流的单独传输，就解决了TCP中队头阻塞的问题。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE0LzE3MzRkZGUyNzUxNmVhMzc?x-oss-process=image/format,png" alt="image"></p>
<p>关于 http 3.0 的，如果想了解更多，可以查看这一篇文章。<a href="https://juejin.im/post/5d9abde7e51d4578110dc77f">解密HTTP&#x2F;2与HTTP&#x2F;3 的新特性</a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>HTTP&#x2F;1.1有两个主要的缺点：安全不足和性能不高。</li>
<li>HTTP&#x2F;2完全兼容HTTP&#x2F;1，是“更安全的HTTP、更快的HTTPS”，头部压缩、多路复用等技术可以充分利用带宽，降低延迟，从而大幅度提高上网体验；</li>
<li>QUIC 基于 UDP 实现，是 HTTP&#x2F;3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议</li>
</ul>
<h2 id="http-状态码"><a href="#http-状态码" class="headerlink" title="http 状态码"></a>http 状态码</h2><table>
<thead>
<tr>
<th>Http 状态码</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>请求成功</td>
</tr>
<tr>
<td>206</td>
<td>支持断点下载（range &#x3D; byte &#x3D; 0 -1024)</td>
</tr>
<tr>
<td>301</td>
<td>永远移动</td>
</tr>
<tr>
<td>302</td>
<td>临时移动</td>
</tr>
<tr>
<td>303</td>
<td>See Other	查看其它地址。与301类似。使用GET和POST请求查看</td>
</tr>
<tr>
<td>304</td>
<td>无更新</td>
</tr>
<tr>
<td>400</td>
<td>Bad request,服务器无法识别</td>
</tr>
<tr>
<td>403</td>
<td>禁止访问</td>
</tr>
<tr>
<td>404</td>
<td>not found</td>
</tr>
<tr>
<td>405</td>
<td>Method Not Allowed	客户端请求中的方法被禁止</td>
</tr>
<tr>
<td>500</td>
<td>Internal Server Error	服务器内部错误，无法完成请求</td>
</tr>
</tbody></table>
<p>关于更详细的可以查看 </p>
<p><a href="https://www.runoob.com/http/http-status-codes.html">http 状态码</a></p>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>下一篇预告，将会推出 面试官系列 - https 真的安全吗，可以抓包吗，如何防止抓包。</p>
<p><strong>有兴趣的话可以关注我的公众号 徐公码字（stormjun94）</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE0LzE3MzRkZGUyYTE3NGY5ZWI?x-oss-process=image/format,png" alt="image"></p>
<p> <strong>目前从事于 Android 开发，除了分享 Android开发相关知识，还有职场心得，面试经验，学习心得，人生感悟等等。希望通过该公众号，让你看到程序猿不一样的一面，我们不只会敲代码，我们还会。。。。。。，期待你的参与</strong></p>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官，https 真的安全吗，可以抓包吗，如何防止抓包</title>
    <url>/p/19912.html</url>
    <content><![CDATA[<p>@[toc]<br> <strong>往期文章</strong></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/97885526">Android 面试必备 - http 与 https 协议</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/97618598">Android 面试必备 - 计算机网络基本知识（TCP，UDP，Http，https）</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/98475465">Android 面试必备 - 线程</a></p>
<p><a href="https://xujun.blog.csdn.net/article/details/98896053">Android 面试必备 - JVM 及 类加载机制</a></p>
<p><a href="https://xujun.blog.csdn.net/article/details/99006458">Android 面试必备 - 系统、App、Activity 启动过程</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/107349652">面试官系列- 你真的了解 http 吗</a></p>
<p><a href="https://xujun.blog.csdn.net/article/details/107393249">面试官问， https 真的安全吗，可以抓包吗，如何防止抓包吗</a></p>
<p><strong><a href="https://github.com/gdutxiaoxu/Android_interview">Android_interview github 地址</a></strong></p>
<blockquote>
<p> 我的 CSDN 博客:<a href="https://blog.csdn.net/gdutxiaoxu">https://blog.csdn.net/gdutxiaoxu</a> <br><br> 我的掘金：<a href="https://juejin.im/user/58aa8508570c35006bbd9e03">https://juejin.im/user/58aa8508570c35006bbd9e03</a>  <br><br> github: <a href="https://github.com/gdutxiaoxu/">https://github.com/gdutxiaoxu/</a>  <br><br> 微信公众号：徐公码字(stormjun94)  <br><br> 知乎：<a href="https://www.zhihu.com/people/xujun94">https://www.zhihu.com/people/xujun94</a>  <br></p>
</blockquote>
<p><strong>有兴趣的话可以关注我的公众号 徐公码字（stormjun94),第一时间会在上面更新</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMDUwMjAzLWMxMmNjNGUyYjEwMWI5NGE?x-oss-process=image/format,png" alt="image"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>转眼间，2020 年已过去一大半了，2020 年很难，各企业裁员的消息蛮多的，降职，不发年终奖等等。2020 年确实是艰难的一年。然而生活总是要继续，时间不给你丧的机会！如果我们能坚持下来，不断提高自己，说不定会有新的机会。</p>
<p>面试中，网络（http， https， tcp， udp）， jvm， 类加载机制等这些基础的知识点是高频出现的，每个程序员都能说上好多。但不一定说到重点，以及理解背后的原理。</p>
<p>我在面试的过程中也经常被问到，于是总结记录了下来。千万不要小瞧这些基础，有时候，你算法，项目经验都过了，但是基础答得不太好。结果可能会通过，但这肯定会影响你的评级，这是特别吃亏的。所以，不如花点时间背一下，理解一下背后的原理。</p>
<p>举一个简单的例子， https 连接过程是怎样的，使用了了哪种加密方式，可以抓包吗，怎样防止抓包，你是否能够对答如下。</p>
<p>废话不多说，开始进入正文。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们知道，http 通信存在以下问题：</p>
<ul>
<li>通信使用明文可能会被窃听</li>
<li>不验证通信方的身份可能遭遇伪装</li>
<li>无法证明报文的完整型，可能已遭篡改</li>
</ul>
<p>使用 https 可以解决数据安全问题，但是你真的理解 https 吗？</p>
<p><strong>当面试官连续对你发出灵魂追问的时候，你能对答如流吗</strong></p>
<ol>
<li>什么是 https，为什么需要 https</li>
<li>https 的连接过程</li>
<li>https 的加密方式是怎样的，对称加密和非对称加密，为什么要这样设计？内容传输为什么要使用对称机密</li>
<li>https 是绝对安全的吗</li>
<li>https 可以抓包吗</li>
</ol>
<p>如果你能对答自如，恭喜你，https 你已经掌握得差不多了，足够应付面试了。</p>
<h2 id="什么是-https"><a href="#什么是-https" class="headerlink" title="什么是 https"></a>什么是 https</h2><p>简单来说， https 是 http + ssl，对 http  通信内容进行加密，是HTTP的安全版，是使用TLS&#x2F;SSL加密的HTTP协议</p>
<p>Https的作用：</p>
<ol>
<li>内容加密 建立一个信息安全通道，来保证数据传输的安全；</li>
<li>身份认证 确认网站的真实性</li>
<li>数据完整性 防止内容被第三方冒充或者篡改</li>
</ol>
<h3 id="什么是SSL"><a href="#什么是SSL" class="headerlink" title="什么是SSL"></a>什么是SSL</h3><p>SSL 由 Netscape 公司于1994年创建，它旨在通过Web创建安全的Internet通信。它是一种标准协议，用于加密浏览器和服务器之间的通信。它允许通过Internet安全轻松地传输账号密码、银行卡、手机号等私密信息。</p>
<p>SSL证书就是遵守SSL协议，由受信任的CA机构颁发的数字证书。</p>
<p>SSL&#x2F;TLS的工作原理:</p>
<p>需要理解SSL&#x2F;TLS的工作原理，我们需要掌握加密算法。加密算法有两种：对称加密和非对称加密：</p>
<p><strong>对称加密</strong>：通信双方使用相同的密钥进行加密。特点是加密速度快，但是缺点是需要保护好密钥，如果密钥泄露的话，那么加密就会被别人破解。常见的对称加密有AES，DES算法。</p>
<p><strong>非对称加密</strong>：它需要生成两个密钥：公钥(Public Key)和私钥(Private Key)。</p>
<p>公钥顾名思义是公开的，任何人都可以获得，而私钥是私人保管的。相信大多程序员已经对这种算法很熟悉了：我们提交代码到github的时候，就可以使用SSH key：在本地生成私钥和公钥，私钥放在本地.ssh目录中，公钥放在github网站上，这样每次提交代码，不用麻烦的输入用户名和密码了，github会根据网站上存储的公钥来识别我们的身份。</p>
<p>公钥负责加密，私钥负责解密；或者，私钥负责加密，公钥负责解密。这种加密算法安全性更高，但是计算量相比对称加密大很多，加密和解密都很慢。常见的非对称算法有RSA。</p>
<h2 id="https-的连接过程"><a href="#https-的连接过程" class="headerlink" title="https 的连接过程"></a>https 的连接过程</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMDUwMjAzLTJhYTQyNTg5ZDY4YmMxODYucG5n?x-oss-process=image/format,png" alt="image.png"></p>
<p>https 的连接过程大概分为两个阶段，证书验证阶段和数据传输阶段</p>
<h3 id="证书验证阶段"><a href="#证书验证阶段" class="headerlink" title="证书验证阶段"></a>证书验证阶段</h3><p>大概分为三个步骤</p>
<ol>
<li>浏览器发起请求</li>
<li>服务器接收到请求之后，会返回证书，包括公钥</li>
<li>浏览器接收到证书之后，会检验证书是否合法，不合法的话，会弹出告警提示（怎样验证合法，下文会详细解析，这里先忽略）</li>
</ol>
<h3 id="数据传输阶段"><a href="#数据传输阶段" class="headerlink" title="数据传输阶段"></a>数据传输阶段</h3><p>证书验证合法之后</p>
<ol>
<li>浏览器会生成一个随机数，</li>
<li>使用公钥进行加密，发送给服务端</li>
<li>服务器收到浏览器发来的值，使用私钥进行解密</li>
<li>解析成功之后，使用对称加密算法进行加密，传输给客户端</li>
</ol>
<p>之后双方通信就使用第一步生成的随机数进行加密通信。</p>
<h2 id="https-的加密方式是怎样的，对称加密和非对称加密，为什么要这样设计"><a href="#https-的加密方式是怎样的，对称加密和非对称加密，为什么要这样设计" class="headerlink" title="https 的加密方式是怎样的，对称加密和非对称加密，为什么要这样设计"></a>https 的加密方式是怎样的，对称加密和非对称加密，为什么要这样设计</h2><p>从上面我们可以知道，https 加密是采用对称加密和非对称机密一起结合的。</p>
<p>在证书验证阶段，使用非对称加密。<br>在数据传输阶段，使用对称机密。</p>
<p>这样设计有一个好处，能最大程度得兼顾安全效率。</p>
<p>在证书验证阶段，使用非对称加密，需要公钥和私钥，假如浏览器的公钥泄漏了，我们还是能够确保随机数的安全，因为加密的数据只有用私钥才能解密。这样能最大程度确保随机数的安全。</p>
<p>在内容传输阶段，使用对称机密，可以大大提高加解密的效率。</p>
<h3 id="内容传输为什么要使用对称机密"><a href="#内容传输为什么要使用对称机密" class="headerlink" title="内容传输为什么要使用对称机密"></a>内容传输为什么要使用对称机密</h3><ol>
<li>对称加密效率比较高</li>
<li>一对公私钥只能实现单向的加解密。只有服务端保存了私钥。如果使用非对称机密，相当于客户端必须有自己的私钥，这样设计的话，每个客户端都有自己的私钥，这很明显是不合理的，因为私钥是需要申请的。</li>
</ol>
<h2 id="https-是绝对安全的吗"><a href="#https-是绝对安全的吗" class="headerlink" title="https 是绝对安全的吗"></a>https 是绝对安全的吗</h2><p>不是绝对安全的，可以通过中间人攻击。</p>
<h3 id="什么是中间人攻击"><a href="#什么是中间人攻击" class="headerlink" title="什么是中间人攻击"></a>什么是中间人攻击</h3><p>中间人攻击是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。</p>
<p>HTTPS 使用了 SSL 加密协议，是一种非常安全的机制，目前并没有方法直接对这个协议进行攻击，一般都是在建立 SSL 连接时，拦截客户端的请求，利用中间人获取到 CA证书、非对称加密的公钥、对称加密的密钥；有了这些条件，就可以对请求和响应进行拦截和篡改。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMDUwMjAzLTM1ZjE1YzFhNjllZTZiMDYucG5n?x-oss-process=image/format,png" alt="image.png"></p>
<p>过程原理：</p>
<ol>
<li>本地请求被劫持（如DNS劫持等），所有请求均发送到中间人的服务器</li>
<li>中间人服务器返回中间人自己的证书</li>
<li>客户端创建随机数，通过中间人证书的公钥对随机数加密后传送给中间人，然后凭随机数构造对称加密对传输内容进行加密传输</li>
<li>中间人因为拥有客户端的随机数，可以通过对称加密算法进行内容解密</li>
<li>中间人以客户端的请求内容再向正规网站发起请求</li>
<li>因为中间人与服务器的通信过程是合法的，正规网站通过建立的安全通道返回加密后的数据</li>
<li>中间人凭借与正规网站建立的对称加密算法对内容进行解密</li>
<li>中间人通过与客户端建立的对称加密算法对正规内容返回的数据进行加密传输</li>
<li>客户端通过与中间人建立的对称加密算法对返回结果数据进行解密</li>
</ol>
<p>由于缺少对证书的验证，所以客户端虽然发起的是 HTTPS 请求，但客户端完全不知道自己的网络已被拦截，传输内容被中间人全部窃取。</p>
<h3 id="https-是如何防止中间人攻击的"><a href="#https-是如何防止中间人攻击的" class="headerlink" title="https 是如何防止中间人攻击的"></a>https 是如何防止中间人攻击的</h3><p>在https中需要证书，证书的作用是为了防止”中间人攻击”的。 如果有个中间人M拦截客户端请求,然后M向客户端提供自己的公钥，M再向服务端请求公钥,作为”中介者” 这样客户端和服务端都不知道,信息已经被拦截获取了。这时候就需要证明服务端的公钥是正确的.</p>
<p>怎么证明呢?</p>
<p>就需要权威第三方机构来公正了.这个第三方机构就是CA. 也就是说CA是专门对公钥进行认证，进行担保的，也就是专门给公钥做担保的担保公司。 全球知名的CA也就100多个，这些CA都是全球都认可的，比如VeriSign、GlobalSign等，国内知名的CA有WoSign。</p>
<h3 id="浏览器是如何确保CA证书的合法性？"><a href="#浏览器是如何确保CA证书的合法性？" class="headerlink" title="浏览器是如何确保CA证书的合法性？"></a>浏览器是如何确保CA证书的合法性？</h3><p>一、证书包含什么信息？</p>
<p>颁发机构信息、公钥、公司信息、域名、有效期、指纹……</p>
<p>二、证书的合法性依据是什么？</p>
<p>首先，权威机构是要有认证的，不是随便一个机构都有资格颁发证书，不然也不叫做权威机构。另外，证书的可信性基于信任制，权威机构需要对其颁发的证书进行信用背书，只要是权威机构生成的证书，我们就认为是合法的。所以权威机构会对申请者的信息进行审核，不同等级的权威机构对审核的要求也不一样，于是证书也分为免费的、便宜的和贵的。</p>
<p>三、浏览器如何验证证书的合法性？</p>
<p>浏览器发起HTTPS请求时，服务器会返回网站的SSL证书，浏览器需要对证书做以下验证：</p>
<ol>
<li>验证域名、有效期等信息是否正确。证书上都有包含这些信息，比较容易完成验证；</li>
<li>判断证书来源是否合法。每份签发证书都可以根据验证链查找到对应的根证书，操作系统、浏览器会在本地存储权威机构的根证书，利用本地根证书可以对对应机构签发证书完成来源验证；</li>
<li>判断证书是否被篡改。需要与CA服务器进行校验；</li>
<li>判断证书是否已吊销。通过CRL（Certificate Revocation List 证书注销列表）和 OCSP（Online Certificate Status Protocol 在线证书状态协议）实现，其中 OCSP 可用于第3步中以减少与CA服务器的交互，提高验证效率。</li>
</ol>
<p>以上任意一步都满足的情况下浏览器才认为证书是合法的。</p>
<h2 id="https-可以抓包吗"><a href="#https-可以抓包吗" class="headerlink" title="https 可以抓包吗"></a>https 可以抓包吗</h2><p>HTTPS 的数据是加密的，常规下抓包工具代理请求后抓到的包内容是加密状态，无法直接查看。</p>
<p>但是，我们可以通过抓包工具来抓包。它的原理其实是模拟一个中间人。</p>
<p>通常 HTTPS 抓包工具的使用方法是会生成一个证书，用户需要手动把证书安装到客户端中，然后终端发起的所有请求通过该证书完成与抓包工具的交互，然后抓包工具再转发请求到服务器，最后把服务器返回的结果在控制台输出后再返回给终端，从而完成整个请求的闭环。</p>
<p>关于 httpps 抓包的原理可以看这一篇文章。</p>
<p><a href="https://juejin.im/post/5cc313755188252d6f11b463">Android平台HTTPS抓包解决方案及问题分析</a></p>
<p><strong>有人可能会问了，既然 HTTPS 不能防抓包，那 HTTPS 有什么意义？</strong></p>
<p>HTTPS 可以防止用户在不知情的情况下通信链路被监听，对于主动授信的抓包操作是不提供防护的，因为这个场景用户是已经对风险知情。要防止被抓包，需要采用应用级的安全防护，例如采用私有的对称加密，同时做好移动端的防反编译加固，防止本地算法被破解。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="如何防止抓包？"><a href="#如何防止抓包？" class="headerlink" title="如何防止抓包？"></a>如何防止抓包？</h3><p>对于HTTPS API接口，如何防止抓包呢？既然问题出在证书信任问题上，那么解决方法就是在我们的APP中预置证书。在TLS&#x2F;SSL握手时，用预置在本地的证书中的公钥校验服务器的数字签名，只有签名通过才能成功握手。由于数字签名是使用私钥生成的，而私钥只掌握在我们手上，中间人无法伪造一个有效的签名，因此攻击失败，无法抓包。</p>
<p>同时，为了防止预置证书被替换，在证书存储上，可以将证书进行加密后进行「嵌入存储」，如嵌入在图片中或一段语音中。这涉及到信息隐写的领域，这个话题我们有空了详细说。</p>
<p>关于 Android 中Https 请求如何防止中间人攻击和Charles抓包，可以看一下这一篇文章。</p>
<p><a href="https://www.jianshu.com/p/1dd77e56cc3c">Android中Https请求如何防止中间人攻击和Charles抓包原理</a></p>
<h3 id="预置证书-x2F-公钥更新问题"><a href="#预置证书-x2F-公钥更新问题" class="headerlink" title="预置证书&#x2F;公钥更新问题"></a>预置证书&#x2F;公钥更新问题</h3><p>这样做虽然解决了抓包问题，但是也带来了另外一个问题：我们购买的证书都是有有效期的，到期前需要对证书进行更新。主要有两种方式：</p>
<p>提供预置证书更新接口。在当前证书快过期时，APP请求获取新的预置证书，这过渡时期，两个证书同时有效，直到安全完成证书切换。这种方式有一定的维护成本，且不易测试。<br>在APP中只预埋公钥，这样只要私钥不变，即使证书更新也不用更新该公钥。但是，这样不太符合周期性更新私钥的安全审计需求。一个折中的方法是，一次性预置多个公钥，只要任意一个公钥验证通过即可。考虑到我们的证书一般购买周期是3-5年，那么3个公钥，可以使用9-15年，同时，我们在此期间还可以发布新版本废弃老公钥，添加新公钥，这样可以使公钥一直更新下去。</p>
<hr>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>开头说到的几个问题，你能对答如流了吗</p>
<ol>
<li>什么是 https，为什么需要 https</li>
<li>https 的连接过程</li>
<li>https 的加密方式是怎样的，对称加密和非对称加密，为什么要这样设计？内容传输为什么要使用对称机密</li>
<li>https 是绝对安全的吗</li>
<li>https 可以抓包吗</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMDUwMjAzLTU5YmRkYTdhMmU3OTQ1MDg?x-oss-process=image/format,png" alt="image"></p>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马 Android 52 期学习视频，不加密的，免费分享给大家</title>
    <url>/p/12651.html</url>
    <content><![CDATA[<h1 id="Android-黑马学习视频"><a href="#Android-黑马学习视频" class="headerlink" title="Android 黑马学习视频"></a>Android 黑马学习视频</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>01、安卓基础+JNI (14天)</li>
<li>02、Android应用开 发-代码版本管理和实战(1天)</li>
<li>03、android案 例与项目_手机安全卫士(12天)</li>
<li>04、自定义控件与视图(2天)</li>
<li>05、android项目实战_ 智慧北京(6天)</li>
<li>06、android项目实战_谷歌应用市场(6天)</li>
<li>07、android进阶高阶案例-QQ5.0特效专辑(2天)</li>
<li>08、android游戏开发_植物大战僵尸(3天)</li>
<li>09、android案例与项目_ .百度地图(1天_ 补充)</li>
<li>10、android项目实战_ 智能短信管理(3天_ 补充)</li>
<li>11、Android_ <em>WebView&amp;HTML5开发(1天</em> 补充)</li>
</ul>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p><a href="https://pan.baidu.com/s/123PF5W2t1SgjQ9wpoFW7Rg">百度云链接</a></p>
<p><a href="https://github.com/gdutxiaoxu/Android_interview">Android 学习 + 面试指南：</a></p>
<p>如果链接过期了，可以关注我的微信公众号“<strong>程序员徐公</strong>”，回复“<strong>黑马</strong>“两字，会自动发给你</p>
<ol>
<li>公众号程序员徐公回复<strong>黑马</strong>，获取 Android 学习视频</li>
<li>公众号程序员徐公回复<strong>徐公666</strong>，获取简历模板，教你如何优化简历，走进大厂</li>
<li>公众号程序员徐公回复<strong>面试</strong>，可以获得面试常见算法，剑指 offer 题解</li>
<li>公众号程序员徐公回复<strong>马士兵</strong>，可以获得马士兵学习视频一份</li>
</ol>
<p><img src="https://gitee.com/gdutxiaoxu/blog-picture/raw/master/21/02/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BE%90%E5%85%AC%20(new).png"></p>
]]></content>
      <tags>
        <tag>Android 学习资料</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Hook 机制之简单实战</title>
    <url>/p/13779.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是-Hook"><a href="#什么是-Hook" class="headerlink" title="什么是 Hook"></a>什么是 Hook</h3><p><strong>Hook 又叫“钩子”</strong>，它可以在事件传送的过程中截获并监控事件的传输，将自身的代码与系统方法进行融入。</p>
<p>这样当这些方法被调用时，也就可以执行我们自己的代码，这也是面向切面编程的思想（AOP）。</p>
<h3 id="Hook-分类"><a href="#Hook-分类" class="headerlink" title="Hook 分类"></a>Hook 分类</h3><p>1.根据Android开发模式，Native模式（C&#x2F;C++）和Java模式（Java）区分，在Android平台上 </p>
<ul>
<li>Java层级的Hook； </li>
<li>Native层级的Hook；</li>
</ul>
<p>2.根 Hook 对象与 Hook 后处理事件方式不同，Hook还分为： </p>
<ul>
<li>消息Hook； </li>
<li>API Hook；</li>
</ul>
<p>3.针对Hook的不同进程上来说，还可以分为： </p>
<ul>
<li>全局Hook； </li>
<li>单个进程Hook；</li>
</ul>
<h3 id="常见-Hook-框架"><a href="#常见-Hook-框架" class="headerlink" title="常见 Hook 框架"></a>常见 Hook 框架</h3><p>在Android开发中，有以下常见的一些Hook框架：</p>
<ol>
<li><strong>Xposed</strong></li>
</ol>
<p>通过替换 &#x2F;system&#x2F;bin&#x2F;app_process 程序控制 Zygote 进程，使得 app_process 在启动过程中会加载 XposedBridge.jar 这个 Jar 包，从而完成对 Zygote 进程及其创建的 Dalvik 虚拟机的劫持。 </p>
<p>Xposed 在开机的时候完成对所有的 Hook Function 的劫持，在原 Function 执行的前后加上自定义代码。</p>
<ol start="2">
<li><strong>Cydia Substrate</strong></li>
</ol>
<p>Cydia Substrate 框架为苹果用户提供了越狱相关的服务框架，当然也推出了 Android 版 。Cydia Substrate 是一个代码修改平台，它可以修改任何进程的代码。</p>
<p>不管是用 Java 还是 C&#x2F;C++（native代码）编写的，而 Xposed 只支持 Hook app_process 中的 Java 函数。</p>
<ol start="3">
<li>Legend</li>
</ol>
<p>Legend 是 Android 免 Root 环境下的一个 Apk Hook 框架，该框架代码设计简洁，通用性高，适合逆向工程时一些 Hook 场景。大部分的功能都放到了 Java 层，这样的兼容性就非常好。 </p>
<p>原理是这样的，直接构造出新旧方法对应的虚拟机数据结构，然后替换信息写到内存中即可。</p>
<h3 id="Hook-必须掌握的知识"><a href="#Hook-必须掌握的知识" class="headerlink" title="Hook 必须掌握的知识"></a>Hook 必须掌握的知识</h3><ul>
<li>反射</li>
</ul>
<p>如果你对反射还不是很熟悉的话，建议你先复习一下 java 反射的相关知识。有兴趣的，可以看一下我的这一篇博客 <a href="https://blog.csdn.net/gdutxiaoxu/article/details/68947735">Java 反射机制详解</a></p>
<ul>
<li>java 的动态代理</li>
</ul>
<p>动态代理是指在运行时动态生成代理类，不需要我们像静态代理那个去手动写一个个的代理类。在 java 中，我们可以使用 InvocationHandler 实现动态代理，有兴趣的，可以查看我的这一篇博客 <a href="https://blog.csdn.net/gdutxiaoxu/article/details/81394050">java  代理模式详解</a></p>
<p>本文的主要内容是讲解单个进程的 Hook，以及怎样 Hook。有兴趣的可以关注我的微信公众号：<strong>程序员徐公</strong><br><img src="https://img-blog.csdnimg.cn/20210414231709248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="Hook-使用实例"><a href="#Hook-使用实例" class="headerlink" title="Hook 使用实例"></a>Hook 使用实例</h2><h3 id="Hook-选择的关键点"><a href="#Hook-选择的关键点" class="headerlink" title="Hook 选择的关键点"></a>Hook 选择的关键点</h3><ul>
<li><p>Hook 的选择点：尽量静态变量和单例，因为一旦创建对象，它们不容易变化，非常容易定位。</p>
</li>
<li><p>Hook 过程：</p>
<ul>
<li>寻找 Hook 点，原则是尽量静态变量或者单例对象，尽量 Hook public 的对象和方法。</li>
<li>选择合适的代理方式，如果是接口可以用动态代理。</li>
<li>偷梁换柱——用代理对象替换原始对象。</li>
</ul>
</li>
<li><p>Android 的 API 版本比较多，方法和类可能不一样，所以要做好 API 的兼容工作。</p>
</li>
</ul>
<h3 id="简单案例一-使用-Hook-修改-View-OnClickListener-事件"><a href="#简单案例一-使用-Hook-修改-View-OnClickListener-事件" class="headerlink" title="简单案例一: 使用 Hook 修改 View.OnClickListener 事件"></a>简单案例一: 使用 Hook 修改 View.OnClickListener 事件</h3><p>首先，我们先分析 View.setOnClickListener 源码，找出合适的 Hook 点。可以看到 OnClickListener 对象被保存在了一个叫做 ListenerInfo 的内部类里，其中 mListenerInfo 是 View 的成员变量。ListeneInfo 里面保存了 View 的各种监听事件。因此，我们可以想办法 hook ListenerInfo 的 mOnClickListener 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void setOnClickListener(@Nullable OnClickListener l) &#123;</span><br><span class="line">    if (!isClickable()) &#123;</span><br><span class="line">        setClickable(true);</span><br><span class="line">    &#125;</span><br><span class="line">    getListenerInfo().mOnClickListener = l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static class ListenerInfo &#123;</span><br><span class="line"></span><br><span class="line">     ---</span><br><span class="line"></span><br><span class="line">    ListenerInfo getListenerInfo() &#123;</span><br><span class="line">        if (mListenerInfo != null) &#123;</span><br><span class="line">            return mListenerInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        mListenerInfo = new ListenerInfo();</span><br><span class="line">        return mListenerInfo;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ---</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，让我们一起来看一下怎样 Hook View.OnClickListener 事件？</p>
<p>大概分为三步：</p>
<ul>
<li>第一步：获取 ListenerInfo 对象</li>
</ul>
<p>从 View 的源代码，我们可以知道我们可以通过 getListenerInfo 方法获取，于是，我们利用反射得到 ListenerInfo 对象</p>
<ul>
<li>第二步：获取原始的 OnClickListener事件方法</li>
</ul>
<p>从上面的分析，我们知道 OnClickListener 事件被保存在 ListenerInfo 里面，同理我们利用反射获取</p>
<ul>
<li>第三步：偷梁换柱，用 Hook代理类 替换原始的 OnClickListener</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void hookOnClickListener(View view) throws Exception &#123;</span><br><span class="line">    // 第一步：反射得到 ListenerInfo 对象</span><br><span class="line">    Method getListenerInfo = View.class.getDeclaredMethod(&quot;getListenerInfo&quot;);</span><br><span class="line">    getListenerInfo.setAccessible(true);</span><br><span class="line">    Object listenerInfo = getListenerInfo.invoke(view);</span><br><span class="line">    // 第二步：得到原始的 OnClickListener事件方法</span><br><span class="line">    Class&lt;?&gt; listenerInfoClz = Class.forName(&quot;android.view.View$ListenerInfo&quot;);</span><br><span class="line">    Field mOnClickListener = listenerInfoClz.getDeclaredField(&quot;mOnClickListener&quot;);</span><br><span class="line">    mOnClickListener.setAccessible(true);</span><br><span class="line">    View.OnClickListener originOnClickListener = (View.OnClickListener) mOnClickListener.get(listenerInfo);</span><br><span class="line">    // 第三步：用 Hook代理类 替换原始的 OnClickListener</span><br><span class="line">    View.OnClickListener hookedOnClickListener = new HookedClickListenerProxy(originOnClickListener);</span><br><span class="line">    mOnClickListener.set(listenerInfo, hookedOnClickListener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class HookedClickListenerProxy implements View.OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">    private View.OnClickListener origin;</span><br><span class="line"></span><br><span class="line">    public HookedClickListenerProxy(View.OnClickListener origin) &#123;</span><br><span class="line">        this.origin = origin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        Toast.makeText(v.getContext(), &quot;Hook Click Listener&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        if (origin != null) &#123;</span><br><span class="line">            origin.onClick(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>执行以下代码，将会看到当我们点击该按钮的时候，会弹出 toast “Hook Click Listener”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mBtn1 = (Button) findViewById(R.id.btn_1);</span><br><span class="line">mBtn1.setOnClickListener(this);</span><br><span class="line">try &#123;</span><br><span class="line">    HookHelper.hookOnClickListener(mBtn1);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="简单案例二：-HooK-Notification"><a href="#简单案例二：-HooK-Notification" class="headerlink" title="简单案例二： HooK Notification"></a>简单案例二： HooK Notification</h3><p>发送消息到通知栏的核心代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">notificationManager.notify(id, builder.build());</span><br></pre></td></tr></table></figure>


<p>跟踪 notify 方法发现最终会调用到 notifyAsUser 方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void notify(String tag, int id, Notification notification)</span><br><span class="line">&#123;</span><br><span class="line">    notifyAsUser(tag, id, notification, new UserHandle(UserHandle.myUserId()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>而在 notifyAsUser 方法中，我们惊喜地发现 service 是一个单例，因此，我们可以想方法 hook 住这个 service，而 notifyAsUser 最终会调用到 service 的 enqueueNotificationWithTag 方法。因此 hook 住 service 的 enqueueNotificationWithTag 方法即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void notifyAsUser(String tag, int id, Notification notification, UserHandle user)</span><br><span class="line">&#123;</span><br><span class="line">    // </span><br><span class="line">    INotificationManager service = getService();</span><br><span class="line">    String pkg = mContext.getPackageName();</span><br><span class="line">    // Fix the notification as best we can.</span><br><span class="line">    Notification.addFieldsFromContext(mContext, notification);</span><br><span class="line">    if (notification.sound != null) &#123;</span><br><span class="line">        notification.sound = notification.sound.getCanonicalUri();</span><br><span class="line">        if (StrictMode.vmFileUriExposureEnabled()) &#123;</span><br><span class="line">            notification.sound.checkFileUriExposed(&quot;Notification.sound&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fixLegacySmallIcon(notification, pkg);</span><br><span class="line">    if (mContext.getApplicationInfo().targetSdkVersion &gt; Build.VERSION_CODES.LOLLIPOP_MR1) &#123;</span><br><span class="line">        if (notification.getSmallIcon() == null) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;Invalid notification (no valid small icon): &quot;</span><br><span class="line">                    + notification);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (localLOGV) Log.v(TAG, pkg + &quot;: notify(&quot; + id + &quot;, &quot; + notification + &quot;)&quot;);</span><br><span class="line">    final Notification copy = Builder.maybeCloneStrippedForDelivery(notification);</span><br><span class="line">    try &#123;</span><br><span class="line">        service.enqueueNotificationWithTag(pkg, mContext.getOpPackageName(), tag, id,</span><br><span class="line">                copy, user.getIdentifier());</span><br><span class="line">    &#125; catch (RemoteException e) &#123;</span><br><span class="line">        throw e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static INotificationManager sService;</span><br><span class="line"></span><br><span class="line">static public INotificationManager getService()</span><br><span class="line">&#123;</span><br><span class="line">    if (sService != null) &#123;</span><br><span class="line">        return sService;</span><br><span class="line">    &#125;</span><br><span class="line">    IBinder b = ServiceManager.getService(&quot;notification&quot;);</span><br><span class="line">    sService = INotificationManager.Stub.asInterface(b);</span><br><span class="line">    return sService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>综上，要 Hook  Notification，大概需要三步：</p>
<ul>
<li>第一步：得到 NotificationManager 的 sService</li>
<li>第二步：因为 sService 是接口，所以我们可以使用动态代理，获取动态代理对象</li>
<li>第三步：偷梁换柱，使用动态代理对象 proxyNotiMng 替换系统的 sService</li>
</ul>
<p>于是，我们可以写出如下的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public static void hookNotificationManager(final Context context) throws Exception &#123;</span><br><span class="line">    NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line"></span><br><span class="line">    Method getService = NotificationManager.class.getDeclaredMethod(&quot;getService&quot;);</span><br><span class="line">    getService.setAccessible(true);</span><br><span class="line">    // 第一步：得到系统的 sService</span><br><span class="line">    final Object sOriginService = getService.invoke(notificationManager);</span><br><span class="line"></span><br><span class="line">    Class iNotiMngClz = Class.forName(&quot;android.app.INotificationManager&quot;);</span><br><span class="line">    // 第二步：得到我们的动态代理对象</span><br><span class="line">    Object proxyNotiMng = Proxy.newProxyInstance(context.getClass().getClassLoader(), new</span><br><span class="line">            Class[]&#123;iNotiMngClz&#125;, new InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">            Log.d(TAG, &quot;invoke(). method:&quot; + method);</span><br><span class="line">            String name = method.getName();</span><br><span class="line">            Log.d(TAG, &quot;invoke: name=&quot; + name);</span><br><span class="line">            if (args != null &amp;&amp; args.length &gt; 0) &#123;</span><br><span class="line">                for (Object arg : args) &#123;</span><br><span class="line">                    Log.d(TAG, &quot;invoke: arg=&quot; + arg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Toast.makeText(context.getApplicationContext(), &quot;检测到有人发通知了&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            // 操作交由 sOriginService 处理，不拦截通知</span><br><span class="line">            return method.invoke(sOriginService, args);</span><br><span class="line">            // 拦截通知，什么也不做</span><br><span class="line">            //                    return null;</span><br><span class="line">            // 或者是根据通知的 Tag 和 ID 进行筛选</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    // 第三步：偷梁换柱，使用 proxyNotiMng 替换系统的 sService</span><br><span class="line">    Field sServiceField = NotificationManager.class.getDeclaredField(&quot;sService&quot;);</span><br><span class="line">    sServiceField.setAccessible(true);</span><br><span class="line">    sServiceField.set(notificationManager, proxyNotiMng);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="Hook-使用进阶"><a href="#Hook-使用进阶" class="headerlink" title="Hook 使用进阶"></a>Hook 使用进阶</h2><h3 id="Hook-ClipboardManager"><a href="#Hook-ClipboardManager" class="headerlink" title="Hook ClipboardManager"></a>Hook ClipboardManager</h3><h4 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h4><p>从上面的 hook NotificationManager 例子中，我们可以得知 NotificationManager 中有一个静态变量 sService，这个变量是远端的 service。因此，我们尝试查找 ClipboardManager 中是不是也存在相同的类似静态变量。</p>
<p>查看它的源码发现它存在 mService 变量，该变量是在 ClipboardManager 构造函数中初始化的，而 ClipboardManager 的构造方法用 @hide 标记，表明该方法对调用者不可见。</p>
<p>而我们知道 ClipboardManager，NotificationManager 其实这些都是单例的，即系统只会创建一次。因此我们也可以认为<br>ClipboardManager 的 mService 是单例的。因此 mService 应该是可以考虑 hook 的一个点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ClipboardManager extends android.text.ClipboardManager &#123;</span><br><span class="line">    private final Context mContext;</span><br><span class="line">    private final IClipboard mService;</span><br><span class="line"></span><br><span class="line">    /** &#123;@hide&#125; */</span><br><span class="line">    public ClipboardManager(Context context, Handler handler) throws ServiceNotFoundException &#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mService = IClipboard.Stub.asInterface(</span><br><span class="line">                ServiceManager.getServiceOrThrow(Context.CLIPBOARD_SERVICE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，我们再来一个看一下 ClipboardManager 的相关方法 setPrimaryClip ， getPrimaryClip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void setPrimaryClip(ClipData clip) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (clip != null) &#123;</span><br><span class="line">            clip.prepareToLeaveProcess(true);</span><br><span class="line">        &#125;</span><br><span class="line">        mService.setPrimaryClip(clip, mContext.getOpPackageName());</span><br><span class="line">    &#125; catch (RemoteException e) &#123;</span><br><span class="line">        throw e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Returns the current primary clip on the clipboard.</span><br><span class="line"> */</span><br><span class="line">public ClipData getPrimaryClip() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        return mService.getPrimaryClip(mContext.getOpPackageName());</span><br><span class="line">    &#125; catch (RemoteException e) &#123;</span><br><span class="line">        throw e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现这些方法最终都会调用到 mService 的相关方法。因此，ClipboardManager 的 mService 确实是一个可以 hook 的一个点。</p>
<p><strong>hook ClipboardManager.mService  的实现</strong></p>
<p>大概需要三个步骤</p>
<ul>
<li>第一步：得到 ClipboardManager 的 mService</li>
<li>第二步：初始化动态代理对象</li>
<li>第三步：偷梁换柱，使用 proxyNotiMng 替换系统的 mService</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void hookClipboardService(final Context context) throws Exception &#123;</span><br><span class="line">    ClipboardManager clipboardManager = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);</span><br><span class="line">    Field mServiceFiled = ClipboardManager.class.getDeclaredField(&quot;mService&quot;);</span><br><span class="line">    mServiceFiled.setAccessible(true);</span><br><span class="line">    // 第一步：得到系统的 mService</span><br><span class="line">    final Object mService = mServiceFiled.get(clipboardManager);</span><br><span class="line">    </span><br><span class="line">    // 第二步：初始化动态代理对象</span><br><span class="line">    Class aClass = Class.forName(&quot;android.content.IClipboard&quot;);</span><br><span class="line">    Object proxyInstance = Proxy.newProxyInstance(context.getClass().getClassLoader(), new</span><br><span class="line">            Class[]&#123;aClass&#125;, new InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">            Log.d(TAG, &quot;invoke(). method:&quot; + method);</span><br><span class="line">            String name = method.getName();</span><br><span class="line">            if (args != null &amp;&amp; args.length &gt; 0) &#123;</span><br><span class="line">                for (Object arg : args) &#123;</span><br><span class="line">                    Log.d(TAG, &quot;invoke: arg=&quot; + arg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (&quot;setPrimaryClip&quot;.equals(name)) &#123;</span><br><span class="line">                Object arg = args[0];</span><br><span class="line">                if (arg instanceof ClipData) &#123;</span><br><span class="line">                    ClipData clipData = (ClipData) arg;</span><br><span class="line">                    int itemCount = clipData.getItemCount();</span><br><span class="line">                    for (int i = 0; i &lt; itemCount; i++) &#123;</span><br><span class="line">                        ClipData.Item item = clipData.getItemAt(i);</span><br><span class="line">                        Log.i(TAG, &quot;invoke: item=&quot; + item);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Toast.makeText(context, &quot;检测到有人设置粘贴板内容&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; else if (&quot;getPrimaryClip&quot;.equals(name)) &#123;</span><br><span class="line">                Toast.makeText(context, &quot;检测到有人要获取粘贴板的内容&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            // 操作交由 sOriginService 处理，不拦截通知</span><br><span class="line">            return method.invoke(mService, args);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 第三步：偷梁换柱，使用 proxyNotiMng 替换系统的 mService</span><br><span class="line">    Field sServiceField = ClipboardManager.class.getDeclaredField(&quot;mService&quot;);</span><br><span class="line">    sServiceField.setAccessible(true);</span><br><span class="line">    sServiceField.set(clipboardManager, proxyInstance);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL213NjkwLzlmZTRhZmEwZ3kxZnR4ajVleWl6aWcyMGM3MG9wcTdyLmdpZg"></p>
<h4 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h4><p>对 Android 源码有基本了解的人都知道，Android 中的各种 Manager 都是通过 ServiceManager 获取的。因此，我们可以通过 ServiceManager hook 所有系统 Manager，ClipboardManager 当然也不例外。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final class ServiceManager &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns a reference to a service with the given name.</span><br><span class="line">     * </span><br><span class="line">     * @param name the name of the service to get</span><br><span class="line">     * @return a reference to the service, or &lt;code&gt;null&lt;/code&gt; if the service doesn&#x27;t exist</span><br><span class="line">     */</span><br><span class="line">    public static IBinder getService(String name) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            IBinder service = sCache.get(name);</span><br><span class="line">            if (service != null) &#123;</span><br><span class="line">                return service;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return getIServiceManager().getService(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (RemoteException e) &#123;</span><br><span class="line">            Log.e(TAG, &quot;error in getService&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>老套路</p>
<ul>
<li>第一步：通过反射获取剪切板服务的远程Binder对象，这里我们可以通过 ServiceManager getService 方法获得</li>
<li>第二步：创建我们的动态代理对象，动态代理原来的Binder对象</li>
<li>第三步：偷梁换柱，把我们的动态代理对象设置进去</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void hookClipboardService() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    //通过反射获取剪切板服务的远程Binder对象</span><br><span class="line">    Class serviceManager = Class.forName(&quot;android.os.ServiceManager&quot;);</span><br><span class="line">    Method getServiceMethod = serviceManager.getMethod(&quot;getService&quot;, String.class);</span><br><span class="line">    IBinder remoteBinder = (IBinder) getServiceMethod.invoke(null, Context.CLIPBOARD_SERVICE);</span><br><span class="line"></span><br><span class="line">    //新建一个我们需要的Binder，动态代理原来的Binder对象</span><br><span class="line">    IBinder hookBinder = (IBinder) Proxy.newProxyInstance(serviceManager.getClassLoader(),</span><br><span class="line">            new Class[]&#123;IBinder.class&#125;, new ClipboardHookRemoteBinderHandler(remoteBinder));</span><br><span class="line"></span><br><span class="line">    //通过反射获取ServiceManger存储Binder对象的缓存集合,把我们新建的代理Binder放进缓存</span><br><span class="line">    Field sCacheField = serviceManager.getDeclaredField(&quot;sCache&quot;);</span><br><span class="line">    sCacheField.setAccessible(true);</span><br><span class="line">    Map&lt;String, IBinder&gt; sCache = (Map&lt;String, IBinder&gt;) sCacheField.get(null);</span><br><span class="line">    sCache.put(Context.CLIPBOARD_SERVICE, hookBinder);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ClipboardHookRemoteBinderHandler implements InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    private IBinder remoteBinder;</span><br><span class="line">    private Class iInterface;</span><br><span class="line">    private Class stubClass;</span><br><span class="line"></span><br><span class="line">    public ClipboardHookRemoteBinderHandler(IBinder remoteBinder) &#123;</span><br><span class="line">        this.remoteBinder = remoteBinder;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.iInterface = Class.forName(&quot;android.content.IClipboard&quot;);</span><br><span class="line">            this.stubClass = Class.forName(&quot;android.content.IClipboard$Stub&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        Log.d(&quot;RemoteBinderHandler&quot;, method.getName() + &quot;() is invoked&quot;);</span><br><span class="line">        if (&quot;queryLocalInterface&quot;.equals(method.getName())) &#123;</span><br><span class="line">            //这里不能拦截具体的服务的方法，因为这是一个远程的Binder，还没有转化为本地Binder对象</span><br><span class="line">            //所以先拦截我们所知的queryLocalInterface方法，返回一个本地Binder对象的代理</span><br><span class="line">            return Proxy.newProxyInstance(remoteBinder.getClass().getClassLoader(),</span><br><span class="line">                    new Class[]&#123;this.iInterface&#125;,</span><br><span class="line">                    new ClipboardHookLocalBinderHandler(remoteBinder, stubClass));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return method.invoke(remoteBinder, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Hook-Activity"><a href="#Hook-Activity" class="headerlink" title="Hook Activity"></a>Hook Activity</h3><p>关于怎样 hook activity，以及怎样启动没有在 AndroidManifet 注册的 activity，可以查看我的这一篇博客。</p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/81459910">Android Hook Activity 的几种姿势</a></p>
<p><strong>源码下载地址</strong>： <a href="https://github.com/gdutxiaoxu/HookDemo">HookDemo</a></p>
<hr>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://mp.weixin.qq.com/s/xWYe-uxgXTPuitYcLgXYNg">Android 启动优化（一） - 有向无环图</a></p>
<p><a href="https://mp.weixin.qq.com/s/ShfxD_Z7M_NuWYNodn-vqA">Android 启动优化（二） - 拓扑排序的原理以及解题思路</a></p>
<p><a href="https://mp.weixin.qq.com/s/YRUpf9jKEwIHV0A4FqltXg">Android 启动优化（三）- AnchorTask 开源了</a></p>
<p><a href="https://mp.weixin.qq.com/s/6RKco9JTm6ZrFyw99k9Rlg">Android 启动优化（四）- AnchorTask 是怎么实现的</a></p>
<p><a href="https://mp.weixin.qq.com/s/0MsJa0ZepWkPUs-ymnVb-w">Android 启动优化（五）- AnchorTask 1.0.0 版本正式发布了</a></p>
<p><a href="https://mp.weixin.qq.com/s/7_dQd2wGZYKWf9kHNlv2fg">Android 启动优化（六）- 深入理解布局优化</a></p>
<p>这几篇文章从 0 到 1，讲解 DAG 有向无环图是怎么实现的，以及在 Android 启动优化的应用。</p>
<p><strong>推荐理由：现在挺多文章一谈到启动优化，动不动就聊拓扑结构，这篇文章从数据结构到算法、到设计都给大家说清楚了，开源项目也有非常强的借鉴意义。</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210414231709248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>hook</tag>
      </tags>
  </entry>
  <entry>
    <title>Android lifecyle 源码解剖</title>
    <url>/p/5201.html</url>
    <content><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>本次推出 Android  Architecture Components 系列文章，目前写好了四篇，主要是关于 lifecycle，livedata 的使用和源码分析，其余的 Navigation， Paging library，Room，WorkMannager 等春节结束之后会更新，欢迎关注我的公众号，有更新的话会第一时间会在公众号上面通知。</p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660746">Android lifecycle 使用详解</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660760">Android LiveData 使用详解</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660766">Android lifecyle 源码解剖</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660776">Android livedata 源码解剖</a></p>
<p><a href="https://github.com/gdutxiaoxu/ArchiteComponentsSample">github sample 地址： ArchiteComponentsSample</a></p>
<p><strong>徐公码字，一位不羁的码农。</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8xMC84LzE2ZGFhZTAwZDUyNmMxNTM?x-oss-process=image/format,png"></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前两篇博客，我们已经讲解了 lifecycle ，liveData， ViewModel 的使用，这一篇博客，让我们一起来看一下 lifecycle 的原理。</p>
<hr>
<h2 id="从自定义的-lifecycle-说起"><a href="#从自定义的-lifecycle-说起" class="headerlink" title="从自定义的 lifecycle 说起"></a>从自定义的 lifecycle 说起</h2><p>首先我们先来复习一下，如果要自定义 lifecycle，我们要这样做。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">CustomLifecycleActivity</span> <span class="keyword">extends</span> <span class="title class_ inherited__">FragmentActivity</span> implements <span class="title class_">LifecycleOwner</span> &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="title class_">LifecycleRegistry</span> mLifecycleRegistry;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> final <span class="title class_">String</span> <span class="variable constant_">TAG</span> = <span class="string">&quot;CustomLifecycleActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    protected <span class="keyword">void</span> <span class="title function_">onCreate</span>(<span class="params">Bundle savedInstanceState</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onCreate</span>(savedInstanceState);</span><br><span class="line">        <span class="title function_">setContentView</span>(R.<span class="property">layout</span>.<span class="property">activity_custom_lifecycle</span>);</span><br><span class="line">        mLifecycleRegistry = <span class="keyword">new</span> <span class="title class_">LifecycleRegistry</span>(<span class="variable language_">this</span>);</span><br><span class="line">        mLifecycleRegistry.<span class="title function_">markState</span>(<span class="title class_">Lifecycle</span>.<span class="property">State</span>.<span class="property">CREATED</span>);</span><br><span class="line">        <span class="title function_">getLifecycle</span>().<span class="title function_">addObserver</span>(<span class="keyword">new</span> <span class="title class_">GenericLifecycleObserver</span>() &#123;</span><br><span class="line">            @<span class="title class_">Override</span></span><br><span class="line">            public <span class="keyword">void</span> <span class="title function_">onStateChanged</span>(<span class="params">LifecycleOwner source, Lifecycle.Event event</span>) &#123;</span><br><span class="line">                <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onStateChanged: event = &quot;</span> + event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	    @<span class="title class_">Override</span></span><br><span class="line">    protected <span class="keyword">void</span> <span class="title function_">onStart</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onStart</span>();</span><br><span class="line">        mLifecycleRegistry.<span class="title function_">markState</span>(<span class="title class_">Lifecycle</span>.<span class="property">State</span>.<span class="property">STARTED</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    protected <span class="keyword">void</span> <span class="title function_">onResume</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onResume</span>();</span><br><span class="line">        mLifecycleRegistry.<span class="title function_">markState</span>(<span class="title class_">Lifecycle</span>.<span class="property">State</span>.<span class="property">RESUMED</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    protected <span class="keyword">void</span> <span class="title function_">onDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onDestroy</span>();</span><br><span class="line">        mLifecycleRegistry.<span class="title function_">markState</span>(<span class="title class_">Lifecycle</span>.<span class="property">State</span>.<span class="property">DESTROYED</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">NonNull</span></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="title class_">Lifecycle</span> <span class="title function_">getLifecycle</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mLifecycleRegistry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>第一步:先实现  LifecycleOwner 接口，并返回 mLifecycleRegistry</li>
<li>第二步：在 Activity 生命周期变化的时候，调用   mLifecycleRegistry.markState() 方法标记相应的状态</li>
<li>如果想添加 observer，调用 addObserver 方法添加观察者，这样会在 activity 生命周期变化的时候，回调 observer 的 onchange 方法。</li>
</ol>
<p>我们先来看一下 getLifecycle() 方法， getLifecycle() 它返回的是一个 Lifecycle 的实例，sdk 中默认的实现类为 LifecycleRegistry。</p>
<p>接下来，我们一起来看一下它的 observer 方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void addObserver(@NonNull LifecycleObserver observer) &#123;</span><br><span class="line">  // 判断是否是 DESTROYED，如果是将初始状态置为 DESTROYED，否则为 INITIALIZED</span><br><span class="line">    State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;</span><br><span class="line"> // ObserverWithState 包装</span><br><span class="line">    ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);</span><br><span class="line">	//  将 observer 作为key，在缓存的 mObserverMap 中查找是否存在</span><br><span class="line">    ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);</span><br><span class="line">  </span><br><span class="line">   // 存在，直接返回回去，证明该 observer 已经添加过了。否则，证明还没有添加过该 observer</span><br><span class="line">    if (previous != null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">	 </span><br><span class="line">    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class="line">    if (lifecycleOwner == null) &#123;</span><br><span class="line">        // it is null we should be destroyed. Fallback quickly</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 这里 mAddingObserverCounter 为 0 ，mHandlingEvent 为 false</span><br><span class="line">    boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent;</span><br><span class="line">    State targetState = calculateTargetState(observer);</span><br><span class="line">    mAddingObserverCounter++;</span><br><span class="line">    while ((statefulObserver.mState.compareTo(targetState) &lt; 0</span><br><span class="line">            &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class="line">        pushParentState(statefulObserver.mState);</span><br><span class="line">        statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class="line">        popParentState();</span><br><span class="line">        // mState / subling may have been changed recalculate</span><br><span class="line">        targetState = calculateTargetState(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!isReentrance) &#123;</span><br><span class="line">        // we do sync only on the top level.</span><br><span class="line">        sync();</span><br><span class="line">    &#125;</span><br><span class="line">    mAddingObserverCounter--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 addObserver 方法中，它主要干这几件事情</p>
<ol>
<li>首先，先初始化状态， 判断当前 mState 是否是 DESTROYED，如果是将初始状态置为 DESTROYED，否则为 INITIALIZED，接着用 ObserverWithState 包装 observer 和 初始化状态 initialState</li>
<li>将 observer 作为 key，在缓存的 mObserverMap 中查找是否存在，如果存在，证明该 observer 已经添加过，直接返回回去，不必再进行处理。</li>
<li>addObserver 方法中第 21 行 ， isReentrance 一般情况下为 false，什么情况 为 true，暂时未想到，</li>
</ol>
<p>接下来我们先来看 calculateTargetState 方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private State calculateTargetState(LifecycleObserver observer) &#123;</span><br><span class="line">   // 取出 mObserverMap 的上一个 entry，previous</span><br><span class="line">    Entry&lt;LifecycleObserver, ObserverWithState&gt; previous = mObserverMap.ceil(observer);</span><br><span class="line"></span><br><span class="line">   // 如果不为空，获取它的状态</span><br><span class="line">    State siblingState = previous != null ? previous.getValue().mState : null;</span><br><span class="line">	// 判断 mParentStates 是否为 null，不为 null，去最后的一个状态，否则，为 null</span><br><span class="line">    State parentState = !mParentStates.isEmpty() ? mParentStates.get(mParentStates.size() - 1)</span><br><span class="line">            : null;</span><br><span class="line">    // 取最小的状态</span><br><span class="line">    return min(min(mState, siblingState), parentState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>首先，取出 mObserverMap 中上一个的 entry，该 LifecycleRegistry 实例如果是第一次调用 addObserver 实例的话，那么是 null，否则是上一个 observer 的 entry</li>
<li>根据 previous 是否为 null，设置 siblingState 的值</li>
<li>判断 mParentStates 是否为 null，不为 null，取 mParentStates 最后一次的状态</li>
<li>取 mState, siblingState 最小的状态 a，再取  a 与 parentState 的状态 b</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public enum State &#123;</span><br><span class="line">   </span><br><span class="line">    DESTROYED,</span><br><span class="line"></span><br><span class="line">    INITIALIZED,</span><br><span class="line"></span><br><span class="line">    CREATED,</span><br><span class="line"></span><br><span class="line">    STARTED,</span><br><span class="line"></span><br><span class="line">    RESUMED;</span><br><span class="line"></span><br><span class="line">    public boolean isAtLeast(@NonNull State state) &#123;</span><br><span class="line">        return compareTo(state) &gt;= 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>State 中，他们排序的顺序是 DESTROYED &lt; INITIALIZED &lt; CREATED &lt; STARTED &lt; RESUMED。</p>
<p>我们知道，我们在 activity 的 onCreate 方法中初始化 LifecycleRegistry，并标记它的状态为 CREATED。当我们第一次在 onCreate 方法调用 addObserver 的时候，在 calculateTargetState 方法中，若是首次调用 previous 为 null，则 siblingState，parentState 为 null， 而 mState 为 CREATED，所以最终的状态为 CREATED，即 State targetState &#x3D; calculateTargetState(observer); 中 targetState 为 CREATED</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取最小的状态</span></span><br><span class="line"><span class="keyword">return</span> min(min(mState, siblingState), parentState);</span><br></pre></td></tr></table></figure>

<p>看完 calculateTargetState 方法，我们回过头再来看一下 addObserver 方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void addObserver(@NonNull LifecycleObserver observer) &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">     // 省略若干行</span><br><span class="line"></span><br><span class="line">    // 这里 mAddingObserverCounter 为 0 ，mHandlingEvent 为 false</span><br><span class="line">    boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent;</span><br><span class="line">    State targetState = calculateTargetState(observer);</span><br><span class="line">    mAddingObserverCounter++;</span><br><span class="line">    while ((statefulObserver.mState.compareTo(targetState) &lt; 0</span><br><span class="line">            &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class="line">        pushParentState(statefulObserver.mState);</span><br><span class="line">        statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class="line">        popParentState();</span><br><span class="line">        // mState / subling may have been changed recalculate</span><br><span class="line">        targetState = calculateTargetState(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!isReentrance) &#123;</span><br><span class="line">        // we do sync only on the top level.</span><br><span class="line">        sync();</span><br><span class="line">    &#125;</span><br><span class="line">    mAddingObserverCounter--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里 statefulObserver.mState 为 DESTROYED 或者 INITIALIZED，肯定比  CREATED 小。而 mObserverMap.contains(observer) 必定为 true，除非我们手动移除掉 mObserverMap。因而，会走进 while循环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pushParentState</span><span class="params">(State state)</span> &#123;</span><br><span class="line">    mParentStates.add(state);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;State&gt; mParentStates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>
<p>pushParentState(statefulObserver.mState);  很简单，只是将 statefulObserver 的状态添加到 mParentStates 集合中。</p>
<p>继续往下走，接着会调用  statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState)); </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Event <span class="title function_">upEvent</span><span class="params">(State state)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">        <span class="keyword">case</span> INITIALIZED:</span><br><span class="line">        <span class="keyword">case</span> DESTROYED:</span><br><span class="line">            <span class="keyword">return</span> ON_CREATE;</span><br><span class="line">        <span class="keyword">case</span> CREATED:</span><br><span class="line">            <span class="keyword">return</span> ON_START;</span><br><span class="line">        <span class="keyword">case</span> STARTED:</span><br><span class="line">            <span class="keyword">return</span> ON_RESUME;</span><br><span class="line">        <span class="keyword">case</span> RESUMED:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unexpected state value &quot;</span> + state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>upEvent 方法也很简单，只是返回它的下一个 event。这里因为他们的 state为 INITIALIZED，所以它会返回 ON_CREATE。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">dispatchEvent</span><span class="params">(LifecycleOwner owner, Event event)</span> &#123;</span><br><span class="line">    <span class="type">State</span> <span class="variable">newState</span> <span class="operator">=</span> getStateAfter(event);</span><br><span class="line">    mState = min(mState, newState);</span><br><span class="line">    mLifecycleObserver.onStateChanged(owner, event);</span><br><span class="line">    mState = newState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> State <span class="title function_">getStateAfter</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (event) &#123;</span><br><span class="line">        <span class="keyword">case</span> ON_CREATE:</span><br><span class="line">        <span class="keyword">case</span> ON_STOP:</span><br><span class="line">            <span class="keyword">return</span> CREATED;</span><br><span class="line">        <span class="keyword">case</span> ON_START:</span><br><span class="line">        <span class="keyword">case</span> ON_PAUSE:</span><br><span class="line">            <span class="keyword">return</span> STARTED;</span><br><span class="line">        <span class="keyword">case</span> ON_RESUME:</span><br><span class="line">            <span class="keyword">return</span> RESUMED;</span><br><span class="line">        <span class="keyword">case</span> ON_DESTROY:</span><br><span class="line">            <span class="keyword">return</span> DESTROYED;</span><br><span class="line">        <span class="keyword">case</span> ON_ANY:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unexpected event value &quot;</span> + event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="这里-event-为-ON-CREATE，所以-newState-也为-CREATED。-mState-x3D-min-mState-newState-mState-newState，两者状态相同，所以-mState-也为-CREATED。接着回调-mLifecycleObserver-的-onStateChanged-方法。所以，这里，会收到我们的-onCreate-事件，与我们的预想相符。但是我们并没有在-onStart，onResume-onPause-onStop-和-onDestroy-方法中调用-mLifecycleRegistry-handleLifecycleEvent-方法，它又是怎样促发-Observer-的-onStateChanged-方法的。这里先不揭晓，我们先来看一下-26-1-0-以后的-AppCompatActivity，待会你就明白了，会感叹-google-真的牛逼！"><a href="#这里-event-为-ON-CREATE，所以-newState-也为-CREATED。-mState-x3D-min-mState-newState-mState-newState，两者状态相同，所以-mState-也为-CREATED。接着回调-mLifecycleObserver-的-onStateChanged-方法。所以，这里，会收到我们的-onCreate-事件，与我们的预想相符。但是我们并没有在-onStart，onResume-onPause-onStop-和-onDestroy-方法中调用-mLifecycleRegistry-handleLifecycleEvent-方法，它又是怎样促发-Observer-的-onStateChanged-方法的。这里先不揭晓，我们先来看一下-26-1-0-以后的-AppCompatActivity，待会你就明白了，会感叹-google-真的牛逼！" class="headerlink" title=" 这里 event 为 ON_CREATE，所以 newState 也为 CREATED。   mState &#x3D; min(mState, newState); mState newState，两者状态相同，所以 mState 也为 CREATED。接着回调 mLifecycleObserver 的 onStateChanged 方法。所以，这里，会收到我们的 onCreate 事件，与我们的预想相符。但是我们并没有在 onStart，onResume, onPause , onStop 和 onDestroy 方法中调用 mLifecycleRegistry.handleLifecycleEvent 方法，它又是怎样促发 Observer 的 onStateChanged 方法的。这里先不揭晓，我们先来看一下 26.1.0 以后的 AppCompatActivity，待会你就明白了，会感叹 google 真的牛逼！
 "></a> 这里 event 为 ON_CREATE，所以 newState 也为 CREATED。   mState &#x3D; min(mState, newState); mState newState，两者状态相同，所以 mState 也为 CREATED。接着回调 mLifecycleObserver 的 onStateChanged 方法。所以，这里，会收到我们的 onCreate 事件，与我们的预想相符。<br><br><strong>但是我们并没有在 onStart，onResume, onPause , onStop 和 onDestroy 方法中调用 mLifecycleRegistry.handleLifecycleEvent 方法，它又是怎样促发 Observer 的 onStateChanged 方法的。这里先不揭晓，我们先来看一下 26.1.0 以后的 AppCompatActivity，待会你就明白了，会感叹 google 真的牛逼！</strong>
 </h2><h2 id="从-26-1-0-以后-AppCompatActivity-的设计说起"><a href="#从-26-1-0-以后-AppCompatActivity-的设计说起" class="headerlink" title="从 26.1.0 以后 AppCompatActivity 的设计说起"></a>从 26.1.0 以后 AppCompatActivity 的设计说起</h2><p> 我们知道，在 26.1.0 以后，如果我们要使用 lifecycle，我们只需要调用以下的方法即可。</p>
<h3 id="SupportActivity"><a href="#SupportActivity" class="headerlink" title="SupportActivity"></a>SupportActivity</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getLifecycle</span>().<span class="title function_">addObserver</span>(<span class="keyword">new</span> <span class="title class_">GenericLifecycleObserver</span>() &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onStateChanged</span>(<span class="params">LifecycleOwner source, Lifecycle.Event event</span>) &#123;</span><br><span class="line">        <span class="title class_">Log</span>.<span class="title function_">d</span>(<span class="variable constant_">TAG</span>, <span class="string">&quot;onStateChanged: event =&quot;</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>跟踪 getLifecycle() 方法，它会跳转到 SupportActivity 的 getLifecycle 方法 中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SupportActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> <span class="keyword">implements</span> <span class="title class_">LifecycleOwner</span>, Component &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">LifecycleRegistry</span> <span class="variable">mLifecycleRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LifecycleRegistry</span>(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ReportFragment.injectIfNeededIn(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Lifecycle <span class="title function_">getLifecycle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mLifecycleRegistry;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 SupportActivity 中，它默认为我们初始化 mLifecycleRegistry，作为一个成员变量。接着，他在<br>onCreate 方法中调用了  ReportFragment.injectIfNeededIn(this); 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReportFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REPORT_FRAGMENT_TAG</span> <span class="operator">=</span> <span class="string">&quot;android.arch.lifecycle&quot;</span></span><br><span class="line">            + <span class="string">&quot;.LifecycleDispatcher.report_fragment_tag&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">injectIfNeededIn</span><span class="params">(Activity activity)</span> &#123;</span><br><span class="line">        <span class="comment">// ProcessLifecycleOwner should always correctly work and some activities may not extend</span></span><br><span class="line">        <span class="comment">// FragmentActivity from support lib, so we use framework fragments for activities</span></span><br><span class="line">        android.app.<span class="type">FragmentManager</span> <span class="variable">manager</span> <span class="operator">=</span> activity.getFragmentManager();</span><br><span class="line">        <span class="keyword">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class="literal">null</span>) &#123;</span><br><span class="line">            manager.beginTransaction().add(<span class="keyword">new</span> <span class="title class_">ReportFragment</span>(), REPORT_FRAGMENT_TAG).commit();</span><br><span class="line">            <span class="comment">// Hopefully, we are the first to make a transaction.</span></span><br><span class="line">            manager.executePendingTransactions();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在 injectIfNeededIn 方法中，它会判断我们是否已经添加 ReportFragment，没有的话，添加进去。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">ReportFragment</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Fragment</span> &#123;</span><br><span class="line">    private <span class="keyword">static</span> final <span class="title class_">String</span> <span class="variable constant_">REPORT_FRAGMENT_TAG</span> = <span class="string">&quot;android.arch.lifecycle&quot;</span></span><br><span class="line">            + <span class="string">&quot;.LifecycleDispatcher.report_fragment_tag&quot;</span>;</span><br><span class="line"></span><br><span class="line">    private <span class="title class_">ActivityInitializationListener</span> mProcessListener;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">void</span> <span class="title function_">dispatchCreate</span>(<span class="params">ActivityInitializationListener listener</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (listener != <span class="literal">null</span>) &#123;</span><br><span class="line">            listener.<span class="title function_">onCreate</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">void</span> <span class="title function_">dispatchStart</span>(<span class="params">ActivityInitializationListener listener</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (listener != <span class="literal">null</span>) &#123;</span><br><span class="line">            listener.<span class="title function_">onStart</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">void</span> <span class="title function_">dispatchResume</span>(<span class="params">ActivityInitializationListener listener</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (listener != <span class="literal">null</span>) &#123;</span><br><span class="line">            listener.<span class="title function_">onResume</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onActivityCreated</span>(<span class="params">Bundle savedInstanceState</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onActivityCreated</span>(savedInstanceState);</span><br><span class="line">        <span class="title function_">dispatchCreate</span>(mProcessListener);</span><br><span class="line">        <span class="title function_">dispatch</span>(<span class="title class_">Lifecycle</span>.<span class="property">Event</span>.<span class="property">ON_CREATE</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onStart</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onStart</span>();</span><br><span class="line">        <span class="title function_">dispatchStart</span>(mProcessListener);</span><br><span class="line">        <span class="title function_">dispatch</span>(<span class="title class_">Lifecycle</span>.<span class="property">Event</span>.<span class="property">ON_START</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onResume</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onResume</span>();</span><br><span class="line">        <span class="title function_">dispatchResume</span>(mProcessListener);</span><br><span class="line">        <span class="title function_">dispatch</span>(<span class="title class_">Lifecycle</span>.<span class="property">Event</span>.<span class="property">ON_RESUME</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onPause</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onPause</span>();</span><br><span class="line">        <span class="title function_">dispatch</span>(<span class="title class_">Lifecycle</span>.<span class="property">Event</span>.<span class="property">ON_PAUSE</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onStop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onStop</span>();</span><br><span class="line">        <span class="title function_">dispatch</span>(<span class="title class_">Lifecycle</span>.<span class="property">Event</span>.<span class="property">ON_STOP</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">onDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">onDestroy</span>();</span><br><span class="line">        <span class="title function_">dispatch</span>(<span class="title class_">Lifecycle</span>.<span class="property">Event</span>.<span class="property">ON_DESTROY</span>);</span><br><span class="line">        <span class="comment">// just want to be sure that we won&#x27;t leak reference to an activity</span></span><br><span class="line">        mProcessListener = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>然后，它在 onCreat ，onStart， onResume， onPause， onStop， onDestroy 方法中分别调用 dispatch 方法进行分发生命周期。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">private <span class="keyword">void</span> <span class="title function_">dispatch</span>(<span class="params">Lifecycle.Event event</span>) &#123;</span><br><span class="line">    <span class="title class_">Activity</span> activity = <span class="title function_">getActivity</span>();</span><br><span class="line">    <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> <span class="title class_">LifecycleRegistryOwner</span>) &#123;</span><br><span class="line">        ((<span class="title class_">LifecycleRegistryOwner</span>) activity).<span class="title function_">getLifecycle</span>().<span class="title function_">handleLifecycleEvent</span>(event);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> <span class="title class_">LifecycleOwner</span>) &#123;</span><br><span class="line">        <span class="title class_">Lifecycle</span> lifecycle = ((<span class="title class_">LifecycleOwner</span>) activity).<span class="title function_">getLifecycle</span>();</span><br><span class="line">        <span class="keyword">if</span> (lifecycle <span class="keyword">instanceof</span> <span class="title class_">LifecycleRegistry</span>) &#123;</span><br><span class="line">            ((<span class="title class_">LifecycleRegistry</span>) lifecycle).<span class="title function_">handleLifecycleEvent</span>(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 dispatch 方法中，会先判断 activity 是不是实现了 LifecycleRegistryOwner ，如果是，直接分发，不过不是，判断是否实现 LifecycleOwner，获取它的 lifecycle，调用它 的 handleLifecycleEvent 进行分发。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SupportActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> <span class="keyword">implements</span> <span class="title class_">LifecycleOwner</span>, Component &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="type">LifecycleRegistry</span> <span class="variable">mLifecycleRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LifecycleRegistry</span>(<span class="built_in">this</span></span><br></pre></td></tr></table></figure>

<p>而很明显，高版本的 SupportActivity 实现了 LifecycleOwner 接口，并写 LifecycleOwner.getLifecycle() 是 LifecycleRegistry </p>
<h3 id="普通的-Activity"><a href="#普通的-Activity" class="headerlink" title="普通的 Activity"></a>普通的 Activity</h3><p>对于 26.1.0 以后的版本，你会发现，对于普通的 Activity，如果你想要使用 lifecycle，你只需要实现<br>LifecycleOwner 接口即可。当生命周期变化的时候，它也可以回调 Observer 的 onStateChanged 方法。</p>
<p>回到我们前面的问题：</p>
<p><strong>我们并没有在 onStart，onResume, onPause , onStop 和 onDestroy 方法中调用 mLifecycleRegistry.handleLifecycleEvent 方法，它又是怎样促发 onStateChanged 方法的</strong></p>
<p><strong>我们猜想它也是通过 ReportFragment 实现的。</strong>但是在 Activity 的 onCreate 方法中，我们并没有发现它有添加 ReportFragment，我们在 As 全局搜一下，看哪些地方使用到 ReportFragment。如下图</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzlmZTRhZmEwZ3kxZnpoenFuam5nMGoyMGt6MDVlZ2xyLmpwZw?x-oss-process=image/format,png"></p>
<p>从图中可以看到，有几个地方使用到他。我们先来看一下 LifecycleDispatcher</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LifecycleDispatcher</span> &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> final <span class="title class_">String</span> <span class="variable constant_">REPORT_FRAGMENT_TAG</span> = <span class="string">&quot;android.arch.lifecycle&quot;</span></span><br><span class="line">            + <span class="string">&quot;.LifecycleDispatcher.report_fragment_tag&quot;</span>;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="title class_">AtomicBoolean</span> sInitialized = <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span>(<span class="params">Context context</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sInitialized.<span class="title function_">getAndSet</span>(<span class="literal">true</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">// 在 init 方法中，监听全局 activity 的创建，从而来添加 fragment</span></span><br><span class="line">        ((<span class="title class_">Application</span>) context.<span class="title function_">getApplicationContext</span>())</span><br><span class="line">                .<span class="title function_">registerActivityLifecycleCallbacks</span>(<span class="keyword">new</span> <span class="title class_">DispatcherActivityCallback</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">SuppressWarnings</span>(<span class="string">&quot;WeakerAccess&quot;</span>)</span><br><span class="line">    @<span class="title class_">VisibleForTesting</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DispatcherActivityCallback</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EmptyActivityLifecycleCallbacks</span> &#123;</span><br><span class="line">        private final <span class="title class_">FragmentCallback</span> mFragmentCallback;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">DispatcherActivityCallback</span>() &#123;</span><br><span class="line">            mFragmentCallback = <span class="keyword">new</span> <span class="title class_">FragmentCallback</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title class_">Override</span></span><br><span class="line">        public <span class="keyword">void</span> <span class="title function_">onActivityCreated</span>(<span class="params">Activity activity, Bundle savedInstanceState</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> <span class="title class_">FragmentActivity</span>) &#123;</span><br><span class="line">                ((<span class="title class_">FragmentActivity</span>) activity).<span class="title function_">getSupportFragmentManager</span>()</span><br><span class="line">                        .<span class="title function_">registerFragmentLifecycleCallbacks</span>(mFragmentCallback, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title class_">ReportFragment</span>.<span class="title function_">injectIfNeededIn</span>(activity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title class_">Override</span></span><br><span class="line">        public <span class="keyword">void</span> <span class="title function_">onActivityStopped</span>(<span class="params">Activity activity</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> <span class="title class_">FragmentActivity</span>) &#123;</span><br><span class="line">                <span class="title function_">markState</span>((<span class="title class_">FragmentActivity</span>) activity, <span class="variable constant_">CREATED</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title class_">Override</span></span><br><span class="line">        public <span class="keyword">void</span> <span class="title function_">onActivitySaveInstanceState</span>(<span class="params">Activity activity, Bundle outState</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> <span class="title class_">FragmentActivity</span>) &#123;</span><br><span class="line">                <span class="title function_">markState</span>((<span class="title class_">FragmentActivity</span>) activity, <span class="variable constant_">CREATED</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 省略若干代码</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，它 在 init 方法中，通过 context.getApplicationContext() .registerActivityLifecycleCallbacks 监听全局 activity 的创建，在 activity oncreate 的时候，调用 ReportFragment.injectIfNeededIn(activity) ，从而来添加 fragment，进而分发相应的事件。</p>
<p>那 LifecycleDispatcher 的 init 方法又是在哪里调用的呢？ 我们全局搜索一下 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">ProcessLifecycleOwnerInitializer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ContentProvider</span> &#123;</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public boolean <span class="title function_">onCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">LifecycleDispatcher</span>.<span class="title function_">init</span>(<span class="title function_">getContext</span>());</span><br><span class="line">        <span class="title class_">ProcessLifecycleOwner</span>.<span class="title function_">init</span>(<span class="title function_">getContext</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到它是在 ProcessLifecycleOwnerInitializer 的 onCreate 方法中调用的。而 ProcessLifecycleOwnerInitializer 是一个 ContentProvider。我们知道 ContentProvider 一般是在 AndroidManifest 中生命的。</p>
<p>果然，在 extensions-1.1.1.aar 中，我们惊喜地发现，它在 Manifest 里面注册了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;manifest xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    <span class="keyword">package</span>=<span class="string">&quot;android.arch.lifecycle.extensions&quot;</span> &gt;</span><br><span class="line"></span><br><span class="line">    &lt;uses-sdk android:minSdkVersion=<span class="string">&quot;14&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application&gt;</span><br><span class="line">        &lt;provider</span><br><span class="line">            android:name=<span class="string">&quot;android.arch.lifecycle.ProcessLifecycleOwnerInitializer&quot;</span></span><br><span class="line">            android:authorities=<span class="string">&quot;$&#123;applicationId&#125;.lifecycle-trojan&quot;</span></span><br><span class="line">            android:exported=<span class="string">&quot;false&quot;</span></span><br><span class="line">            android:multiprocess=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line"></span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>

<p>而 ContentProvider 的 onCreate 方法优先于 Application 的 onCreate 执行，所以在 Application 之前我们就调用了  ProcessLifecycleOwnerInitializer init 方法，监听了 Activity 的创建，当 Actiivty 创建的时候，会尝试为 Activity 添加 ReportFragment。而 ReportFragment 会在 Activity 生命周期变化的时候帮助我们分发生命周期。</p>
<p>ContentProvider 的 onCreate 方法优先于 Application 的 onCreate 执行，可以查看这一篇博客 <a href="https://blog.csdn.net/long117long/article/details/66477562">Android系统中的Application和四大组件一些方法的启动顺序和一些坑</a></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ok，我们来梳理一下。</p>
<p><strong>对于 26.1.0 以后的 SupportActivity</strong></p>
<p>它在 Activity onCreate 的时候添加了 ReportFragment，这个 ReportFragment 相当于一个代理，它在 onActivityCreated 的时候  dispatch(Lifecycle.Event.ON_CREATE) 进行分发生命周期，onStart， onResume, onPause, onStop,  onDestroy 的时候也是如此。而 在  dispatch 中 它调用了 LifecycleRegistry handleLifecycleEvent 的方法。而 LifecycleRegistry 方法中经过一系列处理，它又调用了 observer 的 onStateChange 方法，去通知相应的 observer。</p>
<p><strong>对于普通的 Activity</strong></p>
<p>它利用了 ContentProvide 的特征，它是在 Application onCreate 之前初始化的，他在 ProcessLifecycleOwnerInitializer oncreate 的时候监听 Activity 的创建，在 Activity 创建的时候，判断是否已经添加过 ReportFragment，没有的话，添加进去。<em><strong>这是一个很巧妙的设计，隐式初始化了 lifecycle。</strong></em></p>
<p>用流程图表示如下：</p>
<p>该图片引用自  <a href="https://blog.csdn.net/zhuzp_blog/article/details/78871374">Android 架构组件（一）——Lifecycle</a></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL213NjkwLzlmZTRhZmEwZ3kxZnppenp0OHVvdmoyMHlnMWthd240LmpwZw?x-oss-process=image/format,png"></p>
<h3 id="Lifecycle-设计借鉴"><a href="#Lifecycle-设计借鉴" class="headerlink" title="Lifecycle 设计借鉴"></a>Lifecycle 设计借鉴</h3><ol>
<li>利用 ProcessLifecycleOwnerInitializer contentProvider 来隐式加载</li>
</ol>
<p>想一下，如果 ProcessLifecycleOwnerInitializer 不利用 contentProvider 来隐式加载的话，对于 普通的 Activity，旧版本等，如果想使用 lifecycle，那必须在基类中，手动调用  ReportFragment.injectIfNeededIn(activity) 的方法。</p>
<ol start="2">
<li>利用 fragment 来分发生命周期</li>
</ol>
<p>利用  fragment 来分发生命周期有两个优点</p>
<ul>
<li>将逻辑从 Activity 中剥离出来，减少耦合，方便复用</li>
<li>可以做到在 Activity onCreate 之后才回调 observer 的 CREATED Event 事件。如果是通过 Application registerActivityLifecycleCallbacks 方法来分发生命周期的话，因为 ActivityLifecycleCallbacks 的 onActivityCreated 是在 Activity oncreate 之前调用的。</li>
</ul>
<p>下一篇：<a href="https://blog.csdn.net/gdutxiaoxu/article/details/86660776">Android livedata 源码解剖</a></p>
<p><strong>推荐阅读：</strong></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/81394050">java 代理模式详解</a><br><a href="https://blog.csdn.net/gdutxiaoxu/article/details/51824769">观察者设计模式 Vs 事件委托（java）</a><br><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86498647">Android Fragment 的妙用 - 优雅地申请权限和处理 onActivityResult</a></p>
]]></content>
      <tags>
        <tag>Android lifecycle</tag>
      </tags>
  </entry>
  <entry>
    <title>使用CoordinatorLayout打造各种炫酷的效果</title>
    <url>/p/56a07e02.html</url>
    <content><![CDATA[<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/52858598">使用CoordinatorLayout打造各种炫酷的效果</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53453958">自定义Behavior —— 仿知乎，FloatActionButton隐藏与展示</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/71553411">NestedScrolling 机制深入解析</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/71616547"> 一步步带你读懂 CoordinatorLayout 源码</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/71732642">自定义 Behavior -仿新浪微博发现页的实现</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/52939127">ViewPager，ScrollView 嵌套ViewPager滑动冲突解决</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/88383135">自定义 behavior - 完美仿 QQ 浏览器首页，美团商家详情页</a></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6feca452620f4c3231c99bc90ca6f88b.png"></p>
<hr>
<h2 id="CoordinatorLayout简介"><a href="#CoordinatorLayout简介" class="headerlink" title="CoordinatorLayout简介"></a>CoordinatorLayout简介</h2><p>CoordinatorLayout是在 Google IO&#x2F;15 大会发布的，遵循Material 风格，包含在 support Library中，结合AppbarLayout, CollapsingToolbarLayout等 可 产生各种炫酷的效果</p>
<h2 id="CoordinatorLayout简介通常用来-干什么"><a href="#CoordinatorLayout简介通常用来-干什么" class="headerlink" title="CoordinatorLayout简介通常用来 干什么"></a>CoordinatorLayout简介通常用来 干什么</h2><p><a href="https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html">Google官方地址</a></p>
<blockquote>
<p>CoordinatorLayout is intended for two primary use cases:</p>
</blockquote>
<blockquote>
<p>As a top-level application decor or chrome layout</p>
</blockquote>
<blockquote>
<p>As a container for a specific interaction with one or more child views</p>
</blockquote>
<p>简单来说就是</p>
<ul>
<li>作为最上层的View</li>
<li>作为一个 容器与一个或者多个子View进行交互</li>
</ul>
<h2 id="下面我们一起先来看一下我们实现的效果图"><a href="#下面我们一起先来看一下我们实现的效果图" class="headerlink" title="下面我们一起先来看一下我们实现的效果图"></a>下面我们一起先来看一下我们实现的效果图</h2><p>动态图</p>
<h3 id="结合ToolBar"><a href="#结合ToolBar" class="headerlink" title="结合ToolBar"></a>结合ToolBar</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtYzM1ZjA4ZGFiODQ3NjE3NC5naWY"></p>
<h3 id="结合ViewPager"><a href="#结合ViewPager" class="headerlink" title="结合ViewPager"></a>结合ViewPager</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtZTlhYjFkNzY1YzkyZjFhYi5qcGc" alt="ViewPager"></p>
<h3 id="结合ViewPager的视觉特差"><a href="#结合ViewPager的视觉特差" class="headerlink" title="结合ViewPager的视觉特差"></a>结合ViewPager的视觉特差</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtOWM2ZGVkYTAyZTY1NmYxYS5naWY"></p>
<hr>
<h2 id="AppBarLayout"><a href="#AppBarLayout" class="headerlink" title="AppBarLayout"></a>AppBarLayout</h2><p>它是继承与LinearLayout的，默认 的 方向 是Vertical</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtNDhlYzI5ODdlNzg5NjcxMi5qcGc"></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int SCROLL_FLAG_ENTER_ALWAYS</td>
<td>When entering (scrolling on screen) the view will scroll on any downwards scroll event, regardless of whether the scrolling view is also scrolling.</td>
</tr>
<tr>
<td>int SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED</td>
<td>An additional flag for ‘enterAlways’ which modifies the returning view to only initially scroll back to it’s collapsed height.</td>
</tr>
<tr>
<td>int SCROLL_FLAG_EXIT_UNTIL_COLLAPSED</td>
<td>When exiting (scrolling off screen) the view will be scrolled until it is ‘collapsed’.</td>
</tr>
<tr>
<td>int SCROLL_FLAG_SCROLL</td>
<td>The view will be scroll in direct relation to scroll events.</td>
</tr>
<tr>
<td>int SCROLL_FLAG_SNAP</td>
<td>Upon a scroll ending, if the view is only partially visible then it will be snapped and scrolled to it’s closest edge.</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int SCROLL_FLAG_ENTER_ALWAYS</td>
<td>W((entering) &#x2F; (scrolling on screen))下拉的时候，这个View也会跟着滑出。</td>
</tr>
<tr>
<td>int SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED</td>
<td>另一种enterAlways，但是只显示折叠后的高度。</td>
</tr>
<tr>
<td>int SCROLL_FLAG_EXIT_UNTIL_COLLAPSED</td>
<td>((exiting) &#x2F; (scrolling off screen))上拉的时候，这个View会跟着滑动直到折叠。</td>
</tr>
<tr>
<td>int SCROLL_FLAG_SCROLL</td>
<td>这个View将会响应Scroll事件</td>
</tr>
<tr>
<td>int SCROLL_FLAG_SNAP</td>
<td>在Scroll滑动事件结束以前 ，如果这个View部分可见，那么这个View会停在最接近当前View的位置</td>
</tr>
</tbody></table>
<p>我们可以通过两种 方法设置这个Flag</p>
<ul>
<li>方法一</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setScrollFlags(int) </span><br></pre></td></tr></table></figure>

<ul>
<li>方法二</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">app:layout_scrollFlags=<span class="string">&quot;scroll|enterAlways&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>AppBarLayout必须作为CoordinatorLayout的直接子View，否则它的大部分功能将不会生效，如layout_scrollFlags等。</p>
<h2 id="首先我们先来看一下我们-效果图一是怎样实现的"><a href="#首先我们先来看一下我们-效果图一是怎样实现的" class="headerlink" title="首先我们先来看一下我们 效果图一是怎样实现的"></a>首先我们先来看一下我们 效果图一是怎样实现的</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;android.support.design.widget.CoordinatorLayout</span><br><span class="line">    android:id=<span class="string">&quot;@+id/main_content&quot;</span></span><br><span class="line">    xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.AppBarLayout</span><br><span class="line">        android:id=<span class="string">&quot;@+id/appbar&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:theme=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;android.support.v7.widget.Toolbar</span><br><span class="line">            android:id=<span class="string">&quot;@+id/toolbar&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;?attr/actionBarSize&quot;</span></span><br><span class="line">            android:background=<span class="string">&quot;?attr/colorPrimary&quot;</span></span><br><span class="line">            app:layout_scrollFlags=<span class="string">&quot;scroll|enterAlways&quot;</span></span><br><span class="line">            app:popupTheme=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">       .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/recyclerView&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        app:layout_behavior=<span class="string">&quot;@string/appbar_scrolling_view_behavior&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.FloatingActionButton</span><br><span class="line">        android:id=<span class="string">&quot;@+id/fab&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;end|bottom&quot;</span></span><br><span class="line">        android:layout_margin=<span class="string">&quot;15dp&quot;</span></span><br><span class="line">        android:src=<span class="string">&quot;@drawable/add_2&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="思路-分析"><a href="#思路-分析" class="headerlink" title="思路 分析"></a>思路 分析</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtOWU2Nzc1ZjJkNThjMGE2Ni5qcGc"></p>
<p>从图中我们可以知道 layout_scrollFlags&#x3D;”scroll|enterAlways，<br>前面已经说到layout_scrollFlags&#x3D;scroll的时候，这个View会 跟着 滚动 事件响应，<br>layout_scrollFlags&#x3D;“enterAlways”的时候 这个View会响应下拉事件<br>所以呈现出来的结果应该是我们在上拉的时候toolBar 会隐藏，下拉的时候toolBar会出来</p>
<p>那如果当我们的toolBar 等于  app:layout_scrollFlags&#x3D;”scroll|snap”的时候 ，<br>layout_scrollFlags&#x3D;scroll的时候，这个View会 跟着 滚动 事件响应，<br>layout_scrollFlags&#x3D;“snap”的时候 在Scroll滑动事件结束以前 ，如果这个View部分可见，那么这个View会停在最接近当前View的位置。<br><em>综上呈现的效果如下</em>，代码见ToolBarSampleSnar的布局文件</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtNDhlMjAzMjU0ZDVmYmRiZC5naWY"></p>
<h2 id="结合ViewPager-1"><a href="#结合ViewPager-1" class="headerlink" title="结合ViewPager"></a>结合ViewPager</h2><h3 id="布局代码如下"><a href="#布局代码如下" class="headerlink" title="布局代码如下"></a>布局代码如下</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;android.support.design.widget.CoordinatorLayout</span><br><span class="line">    android:id=<span class="string">&quot;@+id/main_content&quot;</span></span><br><span class="line">    xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.AppBarLayout</span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;250dp&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;ImageView android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">                   android:layout_height=<span class="string">&quot;200dp&quot;</span></span><br><span class="line">                   android:background=<span class="string">&quot;?attr/colorPrimary&quot;</span></span><br><span class="line">                   android:scaleType=<span class="string">&quot;fitXY&quot;</span></span><br><span class="line">                   android:src=<span class="string">&quot;@drawable/tangyan&quot;</span></span><br><span class="line">                   app:layout_scrollFlags=<span class="string">&quot;scroll|enterAlways&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;android.support.design.widget.TabLayout</span><br><span class="line">            android:id=<span class="string">&quot;@+id/tabs&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_alignParentBottom=<span class="string">&quot;true&quot;</span></span><br><span class="line">            android:background=<span class="string">&quot;?attr/colorPrimary&quot;</span></span><br><span class="line">            app:tabIndicatorColor=<span class="string">&quot;@color/colorAccent&quot;</span></span><br><span class="line">            app:tabIndicatorHeight=<span class="string">&quot;4dp&quot;</span></span><br><span class="line">            app:tabSelectedTextColor=<span class="string">&quot;#000&quot;</span></span><br><span class="line">            app:tabTextColor=<span class="string">&quot;#fff&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;android.support.v4.view.ViewPager</span><br><span class="line"></span><br><span class="line">        android:id=<span class="string">&quot;@+id/viewpager&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        app:layout_behavior=<span class="string">&quot;@string/appbar_scrolling_view_behavior&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.FloatingActionButton</span><br><span class="line">        android:id=<span class="string">&quot;@+id/fab&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;end|bottom&quot;</span></span><br><span class="line">        android:layout_margin=<span class="string">&quot;15dp&quot;</span></span><br><span class="line">        android:src=<span class="string">&quot;@drawable/add_2&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>

<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtNDFjY2JlNDQ5ZWY3MjA1MS5qcGc"></p>
<p>其实相对于前 一个例子，只是把 摆放RecyclerView 的位置替换成ViewPager而已，为了有页面导航器的效果，再使用 TabLayout而已，而TabLayout 在我们滑动的时候最终会停靠在 最顶部，是因为我们没有设置其layout_scrollFlags，即TabLayout是静态的</p>
<p>运行以后，即可看到以下的结果</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtZTlhYjFkNzY1YzkyZjFhYi5qcGc" alt="ViewPager"></p>
<h3 id="下面我们一起来看一下-TabLayout是怎样结合ViewPager直线-导航器的效果的"><a href="#下面我们一起来看一下-TabLayout是怎样结合ViewPager直线-导航器的效果的" class="headerlink" title="下面我们一起来看一下 TabLayout是怎样结合ViewPager直线 导航器的效果的"></a>下面我们一起来看一下 TabLayout是怎样结合ViewPager直线 导航器的效果的</h3><p>代码注释 里面已经解释地很清楚了 ，这里我就不解释了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewPagerSample</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    ViewPager mViewPager;</span><br><span class="line">    List&lt;Fragment&gt; mFragments;</span><br><span class="line"></span><br><span class="line">    String[] mTitles = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">            <span class="string">&quot;主页&quot;</span>, <span class="string">&quot;微博&quot;</span>, <span class="string">&quot;相册&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> TabLayout mTabLayout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_third);</span><br><span class="line">        <span class="comment">// 第一步，初始化ViewPager和TabLayout</span></span><br><span class="line">        mViewPager = (ViewPager) findViewById(R.id.viewpager);</span><br><span class="line">        mTabLayout = (TabLayout) findViewById(R.id.tabs);</span><br><span class="line">        setupViewPager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setupViewPager</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        mFragments = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mTitles.length; i++) &#123;</span><br><span class="line">            <span class="type">ListFragment</span> <span class="variable">listFragment</span> <span class="operator">=</span> ListFragment.newInstance(mTitles[i]);</span><br><span class="line">            mFragments.add(listFragment);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二步：为ViewPager设置适配器</span></span><br><span class="line">        <span class="type">BaseFragmentAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BaseFragmentAdapter</span>(getSupportFragmentManager(), mFragments, mTitles);</span><br><span class="line"></span><br><span class="line">        mViewPager.setAdapter(adapter);</span><br><span class="line">        <span class="comment">//  第三步：将ViewPager与TableLayout 绑定在一起</span></span><br><span class="line">        mTabLayout.setupWithViewPager(mViewPager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果我们想更改Indicator的相关样式，我们可以在布局文件里面使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;android.support.design.widget.TabLayout</span><br><span class="line">    android:id=<span class="string">&quot;@+id/tabs&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:layout_alignParentBottom=<span class="string">&quot;true&quot;</span></span><br><span class="line">    android:background=<span class="string">&quot;?attr/colorPrimary&quot;</span></span><br><span class="line">    app:tabIndicatorColor=<span class="string">&quot;@color/colorAccent&quot;</span></span><br><span class="line">    app:tabIndicatorHeight=<span class="string">&quot;4dp&quot;</span></span><br><span class="line">    app:tabSelectedTextColor=<span class="string">&quot;#000&quot;</span></span><br><span class="line">    app:tabTextColor=<span class="string">&quot;#fff&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>如果你不想使用Google 帮我们 封装好的控件的话，你也可以自己自定义一个控件，你可以参考我的这一篇博客<a href="http://blog.csdn.net/gdutxiaoxu/article/details/52081609">仿网易新闻的顶部导航指示器</a></strong></p>
<hr>
<p>在看例子结合ViewPager的视觉特差之前 ，我们需要先了解CollapsingToolbarLayout这个控件</p>
<h2 id="CollapsingToolbarLayout"><a href="#CollapsingToolbarLayout" class="headerlink" title="CollapsingToolbarLayout"></a>CollapsingToolbarLayout</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtOWU0OTkzMTYxODUyOTBkMS5qcGc"></p>
<p>CollapsingToolbarLayout继承与FrameLayout，<a href="https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html">官网地址</a>,请自备梯子。</p>
<p>简单来说 ,CollapsingToolbarLayout是工具栏的包装器,它通常作为AppBarLayout的孩子。主要实现以下功能</p>
<ul>
<li>Collapsing title（可以折叠 的 标题 ）</li>
<li>Content scrim（内容装饰），当我们滑动的位置 到达一定阀值的时候，内容 装饰将会被显示或者隐藏</li>
<li>Status bar scrim（状态栏布）</li>
<li>Parallax scrolling children，滑动的时候孩子呈现视觉特差效果</li>
<li>Pinned position children，固定位置的 孩子</li>
</ul>
<p>下面我们一起来看一下几个常量</p>
<table>
<thead>
<tr>
<th>常量</th>
<th>解释说明</th>
</tr>
</thead>
<tbody><tr>
<td>int COLLAPSE_MODE_OFF</td>
<td>The view will act as normal with no collapsing behavior.(这个 View将会 呈现正常的结果，不会表现出折叠效果）</td>
</tr>
<tr>
<td>int COLLAPSE_MODE_PARALLAX</td>
<td>The view will scroll in a parallax fashion. See setParallaxMultiplier(float) to change the multiplier used.（在滑动的时候这个View 会呈现 出 视觉特差效果 ）</td>
</tr>
<tr>
<td>int COLLAPSE_MODE_PIN</td>
<td>The view will pin in place until it reaches the bottom of the CollapsingToolbarLayout.（当这个View到达 CollapsingToolbarLayout的底部的时候，这个View 将会被放置，即代替整个CollapsingToolbarLayout）</td>
</tr>
</tbody></table>
<p>我们有两种方法可以设置这个常量,</p>
<p>方法一：在代码中使用这个方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setCollapseMode(int collapseMode)</span><br></pre></td></tr></table></figure>

<p>方法 二：在布局文件中使用自定义属性 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">app:layout_collapseMode=<span class="string">&quot;pin&quot;</span></span><br></pre></td></tr></table></figure>

<p>到此 ，CollapsingToolbarLayout的一些重要属性已经讲解完毕，下面我们一起来看一下我们是怎样结合ViewPager实现视差效果的</p>
<hr>
<h2 id="结合ViewPager的视觉特差-1"><a href="#结合ViewPager的视觉特差-1" class="headerlink" title="结合ViewPager的视觉特差"></a>结合ViewPager的视觉特差</h2><h3 id="布局代码"><a href="#布局代码" class="headerlink" title="布局代码"></a>布局代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;android.support.design.widget.CoordinatorLayout</span><br><span class="line">    xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:background=<span class="string">&quot;@android:color/background_light&quot;</span></span><br><span class="line">    android:fitsSystemWindows=<span class="string">&quot;true&quot;</span></span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.AppBarLayout</span><br><span class="line">        android:id=<span class="string">&quot;@+id/main.appbar&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;300dp&quot;</span></span><br><span class="line">        android:fitsSystemWindows=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:theme=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">        &lt;android.support.design.widget.CollapsingToolbarLayout</span><br><span class="line">            android:id=<span class="string">&quot;@+id/main.collapsing&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;250dp&quot;</span></span><br><span class="line">            android:fitsSystemWindows=<span class="string">&quot;true&quot;</span></span><br><span class="line">            app:contentScrim=<span class="string">&quot;?attr/colorPrimary&quot;</span></span><br><span class="line">            app:expandedTitleMarginEnd=<span class="string">&quot;64dp&quot;</span></span><br><span class="line">            app:expandedTitleMarginStart=<span class="string">&quot;48dp&quot;</span></span><br><span class="line">            app:layout_scrollFlags=<span class="string">&quot;scroll|exitUntilCollapsed&quot;</span></span><br><span class="line">        &gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/main.backdrop&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">                android:fitsSystemWindows=<span class="string">&quot;true&quot;</span></span><br><span class="line">                android:scaleType=<span class="string">&quot;centerCrop&quot;</span></span><br><span class="line">                android:src=<span class="string">&quot;@drawable/tangyan&quot;</span></span><br><span class="line">                app:layout_collapseMode=<span class="string">&quot;parallax&quot;</span></span><br><span class="line">            /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;android.support.v7.widget.Toolbar</span><br><span class="line">                android:id=<span class="string">&quot;@+id/toolbar&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;?attr/actionBarSize&quot;</span></span><br><span class="line">                app:layout_collapseMode=<span class="string">&quot;pin&quot;</span></span><br><span class="line">                app:popupTheme=<span class="string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;/android.support.design.widget.CollapsingToolbarLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;android.support.design.widget.TabLayout</span><br><span class="line">            android:id=<span class="string">&quot;@+id/tabs&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_alignParentBottom=<span class="string">&quot;true&quot;</span></span><br><span class="line">            android:background=<span class="string">&quot;?attr/colorPrimary&quot;</span></span><br><span class="line">            app:tabIndicatorColor=<span class="string">&quot;@color/colorAccent&quot;</span></span><br><span class="line">            app:tabIndicatorHeight=<span class="string">&quot;4dp&quot;</span></span><br><span class="line">            app:tabSelectedTextColor=<span class="string">&quot;#000&quot;</span></span><br><span class="line">            app:tabTextColor=<span class="string">&quot;#fff&quot;</span>/&gt;</span><br><span class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;android.support.v4.view.ViewPager</span><br><span class="line">            android:id=<span class="string">&quot;@+id/viewpager&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            app:layout_behavior=<span class="string">&quot;@string/appbar_scrolling_view_behavior&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android.support.v4.view.ViewPager&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.FloatingActionButton</span><br><span class="line">        android:id=<span class="string">&quot;@+id/fab&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;end|bottom&quot;</span></span><br><span class="line">        android:layout_margin=<span class="string">&quot;15dp&quot;</span></span><br><span class="line">        android:src=<span class="string">&quot;@drawable/add_2&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="效果图如下"><a href="#效果图如下" class="headerlink" title="效果图如下"></a>效果图如下</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtOWM2ZGVkYTAyZTY1NmYxYS5naWY"></p>
<h3 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtOWEyYzM3MGJkNDJmMzczZC5qcGc"></p>
<ul>
<li><p>结构图如图片所示，先说明CollapsingToolbarLayout的变化</p>
<p>CollapsingToolbarLayout里面 包含ImageView 和ToolBar，ImageView的app:layout_collapseMode&#x3D;”parallax”，表示视差效果，ToolBar的 app:layout_collapseMode&#x3D;”pin”，当这个TooBar到达 CollapsingToolbarLayout的底部的时候，会代替整个CollapsingToolbarLayout显示</p>
</li>
<li><p>接着说明TabLayout的变化</p>
<p>从前面的描述我们已经知道当 没有指定app:layout_scrollFlags的时候，最终TabLayout会静止，不会随着滑动的 时候消失不见</p>
</li>
</ul>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>如果我们仅仅 改变CollapsingToolbarLayout的app:layout_scrollFlags&#x3D;”scroll|exitUntilCollapsed|snap”的时候，其它代码不变，运行以后，我们将可以看到如下效果图</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzIwNTAyMDMtZjU5MzM0ZmRhYjZhMTE3NS5naWY"></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇博客主要讲解了CoordinatorLayout，AppBarLayout，CollapsingToolbarLayout的一些相关属性。</p>
<ul>
<li>对于AppBarLayout，我们主要 讲解了这个属性app:layout_scrollFlags，设置不同 的属性我们可以在滚动的时候显示不同 的效果</li>
<li>对于CollapsingToolbarLayout，我们主要讲解了app:layout_collapseMode这个属性，设置不同的值，我们可以让其子View呈现不同的 炫酷效果，如parallax和pin等</li>
</ul>
<p>CoordinatorLayout的相关用法还有很多，有兴趣 了解的请自行阅读: <a href="https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html">官方文档地址</a></p>
<hr>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>CoordinatorLayout这个控件真的很强大，使用它可以实现各种炫酷的效果，简化了开发者的许多工作，有能力的话可以去研究一下源码 ，看是怎样实现的？</p>
<p>参考文章：<a href="http://www.jianshu.com/p/f418bf95db2d">android-[译]掌握CoordinatorLayout</a></p>
<p><strong><a href="https://github.com/gdutxiaoxu/CoordinatorLayoutExample.git">源码下载地址：</a><a href="https://github.com/gdutxiaoxu/CoordinatorLayoutExample.git">https://github.com/gdutxiaoxu/CoordinatorLayoutExample.git</a></strong></p>
<h2 id="找到我"><a href="#找到我" class="headerlink" title="找到我"></a>找到我</h2><p>我是站在巨人的肩膀上成长起来的，同样，我也希望成为你们的巨人。觉得不错的话可以关注一下我的微信公众号程序员徐公，在此感谢各位大佬们。主要分享</p>
<p>1.Android 开发相关知识：包括 java，kotlin， Android 技术。<br>2.面试相关分享：包括常见的面试题目，大厂面试真题、面试经验套路分享。<br>3.算法相关学习笔记：比如怎么学习算法，leetcode 常见算法总结，跟大家一起学习算法。<br>4.时事点评：主要是关于互联网的，比如小米高管屌丝事件，拼多多女员工猝死事件等</p>
<p>希望我们可以成为朋友，成长路上的忠实伙伴！<br><img src="https://img-blog.csdnimg.cn/img_convert/6feca452620f4c3231c99bc90ca6f88b.png"></p>
]]></content>
  </entry>
  <entry>
    <title>常用的自定义View例子一(FlowLayout)</title>
    <url>/p/aa8975a9.html</url>
    <content><![CDATA[<p>﻿</p>
<h1 id="常用的自定义View例子一（-FlowLayout）"><a href="#常用的自定义View例子一（-FlowLayout）" class="headerlink" title="常用的自定义View例子一（ FlowLayout）"></a>常用的自定义View例子一（ FlowLayout）</h1><p><strong>在Android开发中，我们经常会遇到流布式的布局，经常会用来一些标签的显示，比如qq中个人便签，搜索框下方提示的词语，这些是指都是流布式的布局，今天我就我们日常开放中遇到的流布式布局坐一些总结</strong></p>
<p><strong><a href="http://blog.csdn.net/gdutxiaoxu/article/details/51765428">转载请注明博客地址：</a><a href="http://blog.csdn.net/gdutxiaoxu/article/details/51765428">http://blog.csdn.net/gdutxiaoxu/article/details/51765428</a></strong></p>
<p>**<a href="https://github.com/gdutxiaoxu/CustomViewDemo.git">源码下载地址：</a><a href="https://github.com/gdutxiaoxu/CustomViewDemo.git">https://github.com/gdutxiaoxu/CustomViewDemo.git</a> **</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2050203-5c7ec8613c260711?imageMogr2/auto-orient/strip" alt="效果图"></p>
<h2 id="1-先给大家看一下效果"><a href="#1-先给大家看一下效果" class="headerlink" title="1. 先给大家看一下效果"></a>1. 先给大家看一下效果</h2><ul>
<li>图一</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/2050203-853e808198e625ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<hr>
<ul>
<li>图二</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/2050203-29a7127ebbcc1d0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<hr>
<p><strong>仔细观察，我们可以知道图二其实是图一效果的升级版，图一当我们控件的宽度超过这一行的时候，剩余的宽度它不会自动分布到每个控件中，而图二的效果当我们换行的时候，如控件还没有占满这一行的时候，它会自动把剩余的宽度分布到每个控件中</strong></p>
<h2 id="2-废话不多说了，大家来直接看来看一下图一的源码"><a href="#2-废话不多说了，大家来直接看来看一下图一的源码" class="headerlink" title="2.废话不多说了，大家来直接看来看一下图一的源码"></a>2.废话不多说了，大家来直接看来看一下图一的源码</h2><h3 id="1）代码如下"><a href="#1）代码如下" class="headerlink" title="1）代码如下"></a>1）代码如下</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 博客地址：http://blog.csdn.net/gdutxiaoxu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2016/6/20 23:49.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFlowLayout</span> <span class="keyword">extends</span> <span class="title class_">ViewGroup</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>  <span class="variable">verticalSpacing</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleFlowLayout</span><span class="params">(Context context )</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写onMeasure方法是为了确定最终的大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> widthMeasureSpec</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> heightMeasureSpec</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">widthSpecMode</span> <span class="operator">=</span> MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">widthSpecSize</span> <span class="operator">=</span> MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">heightSpecMode</span> <span class="operator">=</span> MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">heightSpecSize</span> <span class="operator">=</span> MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">paddingLeft</span> <span class="operator">=</span> getPaddingLeft();</span><br><span class="line">        <span class="type">int</span> <span class="variable">paddingRight</span> <span class="operator">=</span> getPaddingRight();</span><br><span class="line">        <span class="type">int</span> <span class="variable">paddingTop</span> <span class="operator">=</span> getPaddingTop();</span><br><span class="line">        <span class="type">int</span> <span class="variable">paddingBottom</span> <span class="operator">=</span> getPaddingBottom();</span><br><span class="line"><span class="comment">//处理Padding属性，让当前的ViewGroup支持Padding</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">widthUsed</span> <span class="operator">=</span> paddingLeft + paddingRight;</span><br><span class="line">        <span class="type">int</span> <span class="variable">heightUsed</span> <span class="operator">=</span> paddingTop + paddingBottom;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">childMaxHeightOfThisLine</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">childCount</span> <span class="operator">=</span> getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            <span class="type">View</span> <span class="variable">child</span> <span class="operator">=</span> getChildAt(i);</span><br><span class="line">            <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class="line"><span class="comment">//       已用的宽度</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">childUsedWidth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//      已用的高度</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">childUsedHeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//  调用ViewGroup自身的方法测量孩子的宽度和高度，我们也可以自己根据MeasureMode来测量</span></span><br><span class="line">                measureChild(child,widthMeasureSpec,heightMeasureSpec);</span><br><span class="line">                childUsedWidth += child.getMeasuredWidth();</span><br><span class="line">                childUsedHeight += child.getMeasuredHeight();</span><br><span class="line"><span class="comment">//处理Margin，支持孩子的Margin属性</span></span><br><span class="line">                <span class="type">Rect</span> <span class="variable">marginRect</span> <span class="operator">=</span> getMarginRect(child);</span><br><span class="line">                <span class="type">int</span> leftMargin=marginRect.left;</span><br><span class="line">                <span class="type">int</span> rightMargin=marginRect.right;</span><br><span class="line">                <span class="type">int</span> topMargin=marginRect.top;</span><br><span class="line">                <span class="type">int</span> bottomMargin=marginRect.bottom;</span><br><span class="line"></span><br><span class="line">                childUsedWidth += leftMargin + rightMargin;</span><br><span class="line">                childUsedHeight += topMargin + bottomMargin;</span><br><span class="line"><span class="comment">//总宽度没有超过本行</span></span><br><span class="line">                <span class="keyword">if</span> (widthUsed + childUsedWidth &lt; widthSpecSize) &#123;</span><br><span class="line">                    widthUsed += childUsedWidth;</span><br><span class="line">                    <span class="keyword">if</span> (childUsedHeight &gt; childMaxHeightOfThisLine) &#123;</span><br><span class="line">                        childMaxHeightOfThisLine = childUsedHeight;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//总宽度已经超过本行</span></span><br><span class="line">                    heightUsed += childMaxHeightOfThisLine + verticalSpacing;</span><br><span class="line">                    widthUsed = paddingLeft + paddingRight + childUsedWidth;</span><br><span class="line">                    childMaxHeightOfThisLine = childUsedHeight;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//加上最后一行的最大高度</span></span><br><span class="line">        heightUsed += childMaxHeightOfThisLine;</span><br><span class="line">        setMeasuredDimension(widthSpecSize, heightUsed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onLayout</span><span class="params">(<span class="type">boolean</span> changed, <span class="type">int</span> l, <span class="type">int</span> t, <span class="type">int</span> r, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">paddingLeft</span> <span class="operator">=</span> getPaddingLeft();</span><br><span class="line">        <span class="type">int</span> <span class="variable">paddingRight</span> <span class="operator">=</span> getPaddingRight();</span><br><span class="line">        <span class="type">int</span> <span class="variable">paddingTop</span> <span class="operator">=</span> getPaddingTop();</span><br><span class="line">        <span class="type">int</span> <span class="variable">paddingBottom</span> <span class="operator">=</span> getPaddingBottom();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 为了 支持Padding属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">childStartLayoutX</span> <span class="operator">=</span> paddingLeft;</span><br><span class="line">        <span class="type">int</span> <span class="variable">childStartLayoutY</span> <span class="operator">=</span> paddingTop;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">widthUsed</span> <span class="operator">=</span> paddingLeft + paddingRight;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">childMaxHeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">childCount</span> <span class="operator">=</span> getChildCount();</span><br><span class="line"><span class="comment">//摆放每一个孩子的高度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            <span class="type">View</span> <span class="variable">child</span> <span class="operator">=</span> getChildAt(i);</span><br><span class="line">            <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class="line">                <span class="type">int</span> childNeededWidth, childNeedHeight;</span><br><span class="line">                <span class="type">int</span> left, top, right, bottom;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">childMeasuredWidth</span> <span class="operator">=</span> child.getMeasuredWidth();</span><br><span class="line">                <span class="type">int</span> <span class="variable">childMeasuredHeight</span> <span class="operator">=</span> child.getMeasuredHeight();</span><br><span class="line"></span><br><span class="line">                <span class="type">Rect</span> <span class="variable">marginRect</span> <span class="operator">=</span> getMarginRect(child);</span><br><span class="line">                <span class="type">int</span> leftMargin=marginRect.left;</span><br><span class="line">                <span class="type">int</span> rightMargin=marginRect.right;</span><br><span class="line">                <span class="type">int</span> topMargin=marginRect.top;</span><br><span class="line">                <span class="type">int</span> bottomMargin=marginRect.bottom;</span><br><span class="line">                childNeededWidth = leftMargin + rightMargin + childMeasuredWidth;</span><br><span class="line">                childNeedHeight = topMargin + topMargin + childMeasuredHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                没有超过本行</span></span><br><span class="line">                <span class="keyword">if</span> (widthUsed + childNeededWidth &lt;= r - l) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (childNeedHeight &gt; childMaxHeight) &#123;</span><br><span class="line">                        childMaxHeight = childNeedHeight;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left = childStartLayoutX + leftMargin;</span><br><span class="line">                    top = childStartLayoutY + topMargin;</span><br><span class="line">                    right = left + childMeasuredWidth;</span><br><span class="line">                    bottom = top + childMeasuredHeight;</span><br><span class="line">                    widthUsed += childNeededWidth;</span><br><span class="line">                    childStartLayoutX += childNeededWidth;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    childStartLayoutY += childMaxHeight + verticalSpacing;</span><br><span class="line">                    childStartLayoutX = paddingLeft;</span><br><span class="line">                    widthUsed = paddingLeft + paddingRight;</span><br><span class="line">                    left = childStartLayoutX + leftMargin;</span><br><span class="line">                    top = childStartLayoutY + topMargin;</span><br><span class="line">                    right = left + childMeasuredWidth;</span><br><span class="line">                    bottom = top + childMeasuredHeight;</span><br><span class="line">                    widthUsed += childNeededWidth;</span><br><span class="line">                    childStartLayoutX += childNeededWidth;</span><br><span class="line">                    childMaxHeight = childNeedHeight;</span><br><span class="line">                &#125;</span><br><span class="line">                child.layout(left, top, right, bottom);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Rect <span class="title function_">getMarginRect</span><span class="params">(View child)</span> &#123;</span><br><span class="line">        <span class="type">LayoutParams</span> <span class="variable">layoutParams</span> <span class="operator">=</span> child.getLayoutParams();</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftMargin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightMargin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">topMargin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bottomMargin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (layoutParams <span class="keyword">instanceof</span> MarginLayoutParams) &#123;</span><br><span class="line">            <span class="type">MarginLayoutParams</span> <span class="variable">marginLayoutParams</span> <span class="operator">=</span> (MarginLayoutParams) layoutParams;</span><br><span class="line">            leftMargin = marginLayoutParams.leftMargin;</span><br><span class="line">            rightMargin = marginLayoutParams.rightMargin;</span><br><span class="line">            topMargin = marginLayoutParams.topMargin;</span><br><span class="line">            bottomMargin = marginLayoutParams.bottomMargin;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Rect</span>(leftMargin, topMargin, rightMargin, bottomMargin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2）思路解析"><a href="#2）思路解析" class="headerlink" title="2）思路解析"></a>2）思路解析</h3><ol>
<li><p>首先我们重写onMeasure方法，在OnMeasure方法里面我们调用measureChild（）这个方法去获取每个孩子的宽度和高度，每次增加一个孩子我们执行 widthUsed +&#x3D; childUsedWidth;</p>
</li>
<li><p>添加完一个孩子以后我们判断widthUsed是够超出控件本身的最大宽度widthSpecSize，<br>若没有超过执行 </p>
<pre><code>    widthUsed += childUsedWidth;
    if (childUsedHeight &gt; childMaxHeightOfThisLine) &#123;
     childMaxHeightOfThisLine = childUsedHeight;
     &#125;
</code></pre>
</li>
</ol>
<p>超过控件的宽度执行</p>
<pre><code>        heightUsed += childMaxHeightOfThisLine + verticalSpacing;
        widthUsed = paddingLeft + paddingRight + childUsedWidth;
        childMaxHeightOfThisLine = childUsedHeight;  
</code></pre>
<p>最后调用 setMeasuredDimension(widthSpecSize, heightUsed);这个方法去设置它的大小<br>3.在OnLayout方法里面，所做的工作就是去摆放每一个孩子的位置  ，判断需不需要换行，不需要更改left值，需要换行，更改top值</p>
<h3 id="3）注意事项"><a href="#3）注意事项" class="headerlink" title="3）注意事项"></a>3）注意事项</h3><p>讲解之前，我们先来了解一下一个基本知识</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://upload-images.jianshu.io/upload_images/2050203-41f01da256c4c30c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></h2><p><strong>从这张图片里面我们可以得出这样结论</strong></p>
<ol>
<li>Width&#x3D;控件真正的宽度（realWidth）+PaddingLeft+PaddingRight</li>
<li>margin是子控件相对于父控件的距离</li>
</ol>
<p><strong>注意事项</strong></p>
<ol>
<li>为了支持控件本身的padding属性，我们做了处理，主要代码如下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int widthUsed = paddingLeft + paddingRight;</span><br><span class="line">int heightUsed = paddingTop + paddingBottom;</span><br><span class="line">     ----------</span><br><span class="line">    if (widthUsed + childUsedWidth &lt; widthSpecSize) &#123;</span><br><span class="line">            widthUsed += childUsedWidth;</span><br><span class="line">            if (childUsedHeight &gt; childMaxHeightOfThisLine) &#123;</span><br><span class="line">                  childMaxHeightOfThisLine = childUsedHeight;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; </span><br></pre></td></tr></table></figure></li>
<li>为了支持子控件的margin属性，我们同样也做了处理<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rect marginRect = getMarginRect(child);</span><br><span class="line">int leftMargin=marginRect.left;</span><br><span class="line">int rightMargin=marginRect.right;</span><br><span class="line">int topMargin=marginRect.top;</span><br><span class="line">int bottomMargin=marginRect.bottom;</span><br><span class="line">	</span><br><span class="line">childUsedWidth += leftMargin + rightMargin;</span><br><span class="line">childUsedHeight += topMargin + bottomMargin;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>即我们在计算孩子所占用的宽度和高度的时候加上margin属性的高度，接着在计算需要孩子总共用的宽高度的时候加上每个孩子的margin属性的宽高度，这样自然就支持了孩子的margin属性了</p>
<h3 id="4-缺陷"><a href="#4-缺陷" class="headerlink" title="4.缺陷"></a>4.缺陷</h3><p>如下图所见，在控件宽度参差不齐的情况下，控件换行会留下一些剩余的宽度，作为想写出鲁棒性的代码的我们会觉得别扭，于是我们相处了解决办法。<br><img src="http://upload-images.jianshu.io/upload_images/2050203-6cf16ca4cb7c2302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>解决方法见下面    </p>
<h2 id="图二源码解析"><a href="#图二源码解析" class="headerlink" title="图二源码解析"></a>图二源码解析</h2><p><img src="http://upload-images.jianshu.io/upload_images/2050203-29a7127ebbcc1d0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<h3 id="废话不多说，先看源码"><a href="#废话不多说，先看源码" class="headerlink" title="废话不多说，先看源码"></a>废话不多说，先看源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 博客地址：http://blog.csdn.net/gdutxiaoxu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2016/6/26 22:54.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrefectFlowLayout</span> <span class="keyword">extends</span> <span class="title class_">ViewGroup</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrefectFlowLayout</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrefectFlowLayout</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrefectFlowLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父容器宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> parentWidthSize;</span><br><span class="line">    <span class="comment">//水平间距</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">horizontalSpacing</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="comment">//垂直间距</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">verticalSpacing</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="comment">//当前行</span></span><br><span class="line">    <span class="keyword">private</span> Line currentLine;</span><br><span class="line">    <span class="comment">//所有行的集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Line&gt; mLines = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//当前行已使用宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">userWidth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 行对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Line</span> &#123;</span><br><span class="line">        <span class="comment">//一行里面所添加的子View集合</span></span><br><span class="line">        <span class="keyword">private</span> List&lt;View&gt; children;</span><br><span class="line">        <span class="comment">//当前行高度</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> height;</span><br><span class="line">        <span class="comment">//当前行已使用宽度</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">lineWidth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Line</span><span class="params">()</span> &#123;</span><br><span class="line">            children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 添加一个子控件</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> child</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addChild</span><span class="params">(View child)</span> &#123;</span><br><span class="line">            children.add(child);</span><br><span class="line">            <span class="keyword">if</span> (child.getMeasuredHeight() &gt; height) &#123;</span><br><span class="line">                <span class="comment">//当前行高度以子控件最大高度为准</span></span><br><span class="line">                height = child.getMeasuredHeight();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将每个子控件宽度进行累加，记录使用的宽度</span></span><br><span class="line">            lineWidth += child.getMeasuredWidth();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取行的高度</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> height;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取子控件的数量</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getChildCount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> children.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 放置每一行里面的子控件的位置</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> l 距离最左边的距离</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> t 距离最顶端的距离</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLayout</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> t)</span> &#123;</span><br><span class="line">            <span class="comment">//当前行使用的宽度，等于每个子控件宽度之和+子控件之间的水平距离</span></span><br><span class="line">            lineWidth += horizontalSpacing * (children.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">surplusChild</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">surplus</span> <span class="operator">=</span> parentWidthSize - lineWidth;<span class="comment">//剩余宽度</span></span><br><span class="line">            <span class="keyword">if</span> (surplus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果有剩余宽度，则将剩余宽度平分给每一个子控件</span></span><br><span class="line">                surplusChild = (<span class="type">int</span>) (surplus / children.size()+<span class="number">0.5</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; children.size(); i++) &#123;</span><br><span class="line">                <span class="type">View</span> <span class="variable">child</span> <span class="operator">=</span> children.get(i);</span><br><span class="line">                child.getLayoutParams().width=child.getMeasuredWidth()+surplusChild;</span><br><span class="line">                <span class="keyword">if</span> (surplusChild&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//如果长度改变了后，需要重新测量，否则布局中的属性大小还会是原来的大小</span></span><br><span class="line">                    child.measure(MeasureSpec.makeMeasureSpec(</span><br><span class="line">                            child.getMeasuredWidth()+surplusChild,MeasureSpec.EXACTLY)</span><br><span class="line">                            ,MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY));</span><br><span class="line">                &#125;</span><br><span class="line">                child.layout(l, t, l + child.getMeasuredWidth(), t + child.getMeasuredHeight());</span><br><span class="line">                l += child.getMeasuredWidth() + horizontalSpacing;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  getMeasuredWidth()   控件实际的大小</span></span><br><span class="line">    <span class="comment">// getWidth()  控件显示的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">        <span class="comment">//将之前测量的数据进行清空，以防复用时影响下次测量</span></span><br><span class="line">        mLines.clear();</span><br><span class="line">        currentLine = <span class="literal">null</span>;</span><br><span class="line">        userWidth = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//获取父容器的宽度和模式</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">widthMode</span> <span class="operator">=</span> MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        parentWidthSize = MeasureSpec.getSize(widthMeasureSpec)</span><br><span class="line">                - getPaddingLeft() - getPaddingRight();</span><br><span class="line">        <span class="comment">//获取父容器的高度和模式</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">heigthMode</span> <span class="operator">=</span> MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">heightSize</span> <span class="operator">=</span> MeasureSpec.getSize(heightMeasureSpec)</span><br><span class="line">                - getPaddingTop() - getPaddingBottom();</span><br><span class="line">        <span class="type">int</span> childWidthMode, childHeightMode;</span><br><span class="line">        <span class="comment">//为了测量每个子控件，需要指定每个子控件的测量规则</span></span><br><span class="line">        <span class="comment">//子控件设置为WRAP_CONTENT，具体测量规则详见，ViewGroup的getChildMeasureSpec()方法</span></span><br><span class="line">        <span class="keyword">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">            childWidthMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            childWidthMode = widthMode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (heigthMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">            childHeightMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            childHeightMode = heigthMode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取到子控件高和宽的测量规则</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">childWidthMeasureSpec</span> <span class="operator">=</span> MeasureSpec.makeMeasureSpec(parentWidthSize, childWidthMode);</span><br><span class="line">        <span class="type">int</span> <span class="variable">childHeightMeasureSpec</span> <span class="operator">=</span> MeasureSpec.makeMeasureSpec(heightSize, childHeightMode);</span><br><span class="line">        currentLine = <span class="keyword">new</span> <span class="title class_">Line</span>();<span class="comment">//创建第一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; getChildCount(); i++) &#123;</span><br><span class="line">            <span class="type">View</span> <span class="variable">child</span> <span class="operator">=</span> getChildAt(i);</span><br><span class="line">            <span class="comment">//测量每一个孩子</span></span><br><span class="line">            child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">            <span class="comment">//获取当前子控件的实际宽度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">childMeasuredWidth</span> <span class="operator">=</span> child.getMeasuredWidth();</span><br><span class="line">            <span class="comment">//让当前行使用宽度加上当前子控件宽度</span></span><br><span class="line">            userWidth += childMeasuredWidth;</span><br><span class="line">            <span class="keyword">if</span> (userWidth &lt;= parentWidthSize) &#123;</span><br><span class="line">                <span class="comment">//如果当前行使用宽度小于父控件的宽度，则加入该行</span></span><br><span class="line">                currentLine.addChild(child);</span><br><span class="line">                <span class="comment">//当前行使用宽度加上子控件之间的水平距离</span></span><br><span class="line">                userWidth += horizontalSpacing;</span><br><span class="line">                <span class="comment">//如果当前行加上水平距离后超出父控件宽度,则换行</span></span><br><span class="line">                <span class="keyword">if</span> (userWidth &gt; parentWidthSize) &#123;</span><br><span class="line">                    newLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//以防出现一个子控件宽度超过父控件的情况出现</span></span><br><span class="line">                <span class="keyword">if</span> (currentLine.getChildCount() == <span class="number">0</span>) &#123;</span><br><span class="line">                    currentLine.addChild(child);</span><br><span class="line">                &#125;</span><br><span class="line">                newLine();</span><br><span class="line">                <span class="comment">//并将超出范围的当前的子控件加入新的行中</span></span><br><span class="line">                currentLine.addChild(child);</span><br><span class="line">                <span class="comment">//并将使用宽度加上子控件的宽度;</span></span><br><span class="line">                userWidth = child.getMeasuredWidth()+horizontalSpacing;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//加入最后一行，因为如果最后一行宽度不足父控件宽度时，就未换行</span></span><br><span class="line">        <span class="keyword">if</span> (!mLines.contains(currentLine)) &#123;</span><br><span class="line">            mLines.add(currentLine);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalHeight</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//总高度</span></span><br><span class="line">        <span class="keyword">for</span> (Line line : mLines) &#123;</span><br><span class="line">            <span class="comment">//总高度等于每一行的高度+垂直间距</span></span><br><span class="line">            totalHeight += line.getHeight() + verticalSpacing;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//resolveSize(),将实际高度与父控件高度进行比较，选取最合适的</span></span><br><span class="line">        setMeasuredDimension(parentWidthSize + getPaddingLeft() + getPaddingRight(),</span><br><span class="line">                resolveSize(totalHeight + getPaddingTop() + getPaddingBottom(), heightMeasureSpec));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 换行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">newLine</span><span class="params">()</span> &#123;</span><br><span class="line">        mLines.add(currentLine);<span class="comment">//记录之前行</span></span><br><span class="line">        currentLine = <span class="keyword">new</span> <span class="title class_">Line</span>();<span class="comment">//重新创建新的行</span></span><br><span class="line">        userWidth = <span class="number">0</span>;<span class="comment">//将使用宽度初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放置每个子控件的位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> changed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onLayout</span><span class="params">(<span class="type">boolean</span> changed, <span class="type">int</span> l, <span class="type">int</span> t, <span class="type">int</span> r, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        l += getPaddingLeft();</span><br><span class="line">        t += getPaddingTop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mLines.size(); i++) &#123;</span><br><span class="line">            <span class="type">Line</span> <span class="variable">line</span> <span class="operator">=</span> mLines.get(i);</span><br><span class="line">            <span class="comment">//设置每一行的位置，每一行的子控件由其自己去分配</span></span><br><span class="line">            line.onLayout(l, t);</span><br><span class="line">            <span class="comment">//距离最顶端的距离，即每一行高度和垂直间距的累加</span></span><br><span class="line">            t += line.getHeight() + verticalSpacing;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取子控件的测量规则</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode 父控件的测量规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 子控件设置为WRAP_CONTENT，具体测量规则详见，ViewGroup的getChildMeasureSpec()方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getMode</span><span class="params">(<span class="type">int</span> mode)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">childMode</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (mode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">            childMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            childMode = mode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> childMode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-思路解析"><a href="#2-思路解析" class="headerlink" title="2.思路解析"></a>2.思路解析</h3><ol>
<li><p>对比图一的实现思路，我们封装了Line这个内部类，看到这个名字，相信大家都猜到是什么意思了，其实就是一个Line实例对象代表一行，Line里面的List<View> children用来存放孩子</p>
<pre><code> private List&lt;View&gt; children;//一行里面所添加的子View集合
</code></pre>
</li>
<li><p>Line里面还封装了void onLayout(int l, int t)方法，即自己去拜访每个孩子的位置，<br>实现剩余的宽度平均分配，主要体现在这几行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> if (surplus &gt; 0) &#123;</span><br><span class="line"> //如果有剩余宽度，则将剩余宽度平分给每一个子控件</span><br><span class="line">      surplusChild = (int) (surplus / children.size()+0.5);</span><br><span class="line">  &#125;</span><br><span class="line">             -------</span><br><span class="line">//重新分配每个孩子的大小</span><br><span class="line"></span><br><span class="line">   child.measure(MeasureSpec.makeMeasureSpec(</span><br><span class="line">   child.getMeasuredWidth()+surplusChild,MeasureSpec.EXACTLY)</span><br><span class="line">           ,MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY));</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="今天就写到这里了，有时间再来补充，最近考试比较忙，已经好久没有更新博客了。"><a href="#今天就写到这里了，有时间再来补充，最近考试比较忙，已经好久没有更新博客了。" class="headerlink" title="今天就写到这里了，有时间再来补充，最近考试比较忙，已经好久没有更新博客了。"></a>今天就写到这里了，有时间再来补充，最近考试比较忙，已经好久没有更新博客了。</h3><p><a href="https://github.com/gdutxiaoxu/CustomViewDemo.git"><strong>源码下载地址：</strong></a><a href="https://github.com/gdutxiaoxu/CustomViewDemo.git">https://github.com/gdutxiaoxu/CustomViewDemo.git</a></p>
]]></content>
      <tags>
        <tag>FlowLayout</tag>
        <tag>自定义控件</tag>
        <tag>流布式布局</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你用Hexo+Github 搭建属于自己的博客</title>
    <url>/p/50430.html</url>
    <content><![CDATA[<p><strong>程序员徐公，希望让你看到程序猿不同的一面，除了分享 Coding，，还有职场心得，面试经验，学习心得，人生感悟等等。希望通过该公众号，我们不只会敲代码，我们还会。。。。。。</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210406233311953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>在大三的时候，一直就想搭建属于自己的一个博客，但由于各种原因，最终都不了了之，恰好最近比较有空，于是就自己参照网上的教程，搭建了属于自己的博客。</p>
<p>至于为什么要搭建自己的博客了？</p>
<p>哈哈，大概是为了装逼吧，同时自己搭建博客的话，样式的选择也比较自由，可以自己选择，不需要受限于各大平台。</p>
<p>转载请注明原博客地址：<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018">手把手教你用Hexo+Github 搭建属于自己的博客</a></p>
<p>大概可以分为以下几个步骤</p>
<ol>
<li>搭建环境准备（包括node.js和git环境，gitHub账户的配置）</li>
<li>安装Hexo</li>
<li>配置Hexo</li>
<li>怎样将Hexo与github page 联系起来</li>
<li>怎样发布文章</li>
<li>主题 推荐</li>
<li>主题Net的简单配置</li>
<li>添加sitemap和feed插件</li>
<li>添加404 公益页面</li>
</ol>
<h2 id="搭建环境准备"><a href="#搭建环境准备" class="headerlink" title="搭建环境准备"></a><strong>搭建环境准备</strong></h2><p>大概可以分为以下三步</p>
<ul>
<li>Node.js 的安装和准备</li>
<li>git的安装和准备</li>
<li>gitHub账户的配置</li>
</ul>
<h3 id="配置Node-js环境"><a href="#配置Node-js环境" class="headerlink" title="配置Node.js环境"></a>配置Node.js环境</h3><ol>
<li>下载Node.js安装文件：</li>
</ol>
<ul>
<li><a href="https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi">Windows Installer 32-bit</a></li>
<li><a href="https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi">Windows Installer 64-bit</a></li>
</ul>
<p>根据自己的Windows版本选择相应的安装文件，要是不知道，就安装32-bit的吧- -。 如图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/573d6502fed68f7b6088bff827f5d38a.png"></p>
<p>保持默认设置即可，一路Next，安装很快就结束了。 然后我们检查一下是不是要求的组件都安装好了，同时按下Win和R，打开运行窗口：</p>
<p>Windows的运行界面</p>
<p><img src="https://img-blog.csdnimg.cn/20210417191348220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>在新打开的窗口中输入cmd，敲击回车，打开命令行界面。（下文将直接用打开命令行来表示以上操作，记住哦~） 在打开的命令行界面中，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。</p>
<p><img src="https://img-blog.csdnimg.cn/2021041719141554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="配置Git环境"><a href="#配置Git环境" class="headerlink" title="配置Git环境"></a>配置Git环境</h3><p>下载Git安装文件：</p>
<p><a href="https://git-scm.com/downloads">GIt官网下载地址：</a></p>
<p><a href="https://github-cloud.s3.amazonaws.com/releases/23216272/84b33b96-87f5-11e5-8f91-32080286239e.exe?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAISTNZFOVBIJMK3TQ/20161210/us-east-1/s3/aws4_request&X-Amz-Date=20161210T033734Z&X-Amz-Expires=300&X-Amz-Signature=912c155bbe0fe970ca7b948f5f0d5e8c68c712b7fb8006062f53c8638c62c7b6&X-Amz-SignedHeaders=host&actor_id=14971673&response-content-disposition=attachment;%20filename=Git-2.6.3-64-bit.exe&response-content-type=application/octet-stream">Git-2.6.3-64-bit.exe</a></p>
<p>然后就进入了Git的安装界面，如图：</p>
<p><img src="https://img-blog.csdnimg.cn/20210417191433141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>Git安装界面</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9800536a9332846c27e3e0d7d6449ae9.png"></p>
<p>和Node.js一样，大部分设置都只需要保持默认，但是出于我们操作方便考虑，建议PATH选项按照下图选择：</p>
<p>Git PATH设置</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e0e7904ab77974fd281801aa30dee01e.png"></p>
<p>这是对上图的解释，不需要了解请直接跳过 Git的默认设置下，出于安全考虑，只有在Git Bash中才能进行Git的相关操作。按照上图进行的选择，将会使得Git安装程序在系统PATH中加入Git的相关路径，使得你可以在CMD界面下调用Git，不用打开Git Bash了。<br>一样的，我们来检查一下Git是不是安装正确了，打开命令行，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>

<p>如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。</p>
<p><img src="https://img-blog.csdnimg.cn/20210417191452606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>关于 git的下载即安装，可以参考我的这一篇博客： <a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573286">Git下载及配置环境变量</a></p>
<h3 id="github账户的注册和配置"><a href="#github账户的注册和配置" class="headerlink" title="github账户的注册和配置"></a>github账户的注册和配置</h3><p>如果已经拥有账号，请跳过此步~</p>
<p>第一步: Github注册</p>
<p>打开<a href="https://github.com/%EF%BC%8C%E5%9C%A8%E4%B8%8B%E5%9B%BE%E7%9A%84%E6%A1%86%E4%B8%AD%EF%BC%8C%E5%88%86%E5%88%AB%E8%BE%93%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%EF%BC%8C%E9%82%AE%E7%AE%B1%EF%BC%8C%E5%AF%86%E7%A0%81%E3%80%82">https://github.com/，在下图的框中，分别输入自己的用户名，邮箱，密码。</a></p>
<p><img src="https://img-blog.csdnimg.cn/20210417191509394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>然后前往自己刚才填写的邮箱，点开Github发送给你的注册确认信，确认注册，结束注册流程。</p>
<p>一定要确认注册，否则无法使用gh-pages！</p>
<p>第二步: 创建代码库</p>
<p>登陆之后，点击页面右上角的加号，选择New repository：</p>
<p><img src="https://img-blog.csdnimg.cn/20210417191528405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70"></p>
<p>新建代码库</p>
<p>进入代码库创建页面：</p>
<p>在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20210417191553408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>注意：比如我的github名称是gdutxiaoxu ,这里你就填 gdutxiaoxu.github.io,如果你的名字是xujun，那你就填 xujun.github.io</strong></p>
<p>第三步: . 代码库设置</p>
<p>正确创建之后，你将会看到如下界面：</p>
<p><img src="https://img-blog.csdnimg.cn/20210417191610749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，如图：</p>
<p><img src="https://img-blog.csdnimg.cn/20210417191634165.png"></p>
<p>Github pages</p>
<p><img src="https://img-blog.csdnimg.cn/20210417191652331.png"></p>
<p>点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果你的配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了~ 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。</p>
<p>到此搭建hexo博客的相关环境配置已经完成，下面开始讲解Hexo的相关配置</p>
<hr>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a><strong>安装Hexo</strong></h2><p>在自己认为合适的地方创建一个文件夹，这里我以E：&#x2F;hexo 为例子讲解，首先在E盘目录下创建Hexo文件夹，并在命令行的窗口进入到该目录</p>
<p><img src="https://img-blog.csdnimg.cn/20210417191711751.png" alt="在这里插入图片描述"></p>
<p>在命令行中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>


<p>然后你将会看到:</p>
<p><img src="https://img-blog.csdnimg.cn/20210417191733391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure>

<p>然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>如果你看到了如图文字，则说明已经安装成功了。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9cb2f935baed299cd52c30f346c7366b.png"></p>
<hr>
<h2 id="hexo的相关配置"><a href="#hexo的相关配置" class="headerlink" title="hexo的相关配置"></a><strong>hexo的相关配置</strong></h2><p><strong>初始化Hexo</strong></p>
<p>接着上面的操作，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>


<p>然后输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>


<p>之后npm将会自动安装你需要的组件，只需要等待npm操作即可。</p>
<p><strong>首次体验Hexo</strong></p>
<p>继续操作，同样是在命令行中，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>


<p><img src="https://img-blog.csdnimg.cn/2021041719175613.png" alt="在这里插入图片描述"></p>
<p>然后输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>然后会提示：</p>
<blockquote>
<p>INFO  Hexo is running at <a href="http://0.0.0.0:4000/">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>
</blockquote>
<p>在浏览器中打开<a href="http://localhost:4000/%EF%BC%8C%E4%BD%A0%E5%B0%86%E4%BC%9A%E7%9C%8B%E5%88%B0%EF%BC%9A">http://localhost:4000/，你将会看到：</a></p>
<p><img src="https://img-blog.csdnimg.cn/2021041719181532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>到目前为止，Hexo在本地的配置已经全都结束了。</p>
<p>下面会讲解怎样将Hexo与github page 联系起来</p>
<hr>
<h2 id="怎样将Hexo与github-page-联系起来"><a href="#怎样将Hexo与github-page-联系起来" class="headerlink" title="怎样将Hexo与github page 联系起来"></a><strong>怎样将Hexo与github page 联系起来</strong></h2><p>大概分为以下几步</p>
<ul>
<li>配置git个人信息</li>
<li>配置Deployment</li>
</ul>
<h3 id="配置Git个人信息"><a href="#配置Git个人信息" class="headerlink" title="配置Git个人信息"></a>配置Git个人信息</h3><p>如果你之前已经配置好git个人信息，请跳过这一个 步骤，直接来到</p>
<p>1、设置Git的user name和email：(如果是第一次的话)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xujun&quot;</span><br><span class="line">git config --global user.email &quot;gdutxiaoxu@163.com&quot;</span><br></pre></td></tr></table></figure>

<p>2、生成密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;gdutxiaoxu@163.com&quot;</span><br></pre></td></tr></table></figure>


<h3 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h3><p>同样在_config.yml文件中，找到Deployment，然后按照如下修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>比如我的仓库的地址是<a href="mailto:&#x67;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;">&#x67;&#x69;&#x74;&#64;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;</a>:gdutxiaoxu&#x2F;gdutxiaoxu.github.io.git，所以配置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:gdutxiaoxu/gdutxiaoxu.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="写博客、发布文章"><a href="#写博客、发布文章" class="headerlink" title="写博客、发布文章"></a>写博客、发布文章</h2><p>新建一篇博客，执行下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;article title&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210417191837780.png" alt="在这里插入图片描述"></p>
<p>这时候在我的 电脑的目录下 F:\hexo\source\ _posts 将会看到  article title.md 文件</p>
<p> 用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g   // 生成</span><br><span class="line">hexo d   // 部署</span><br></pre></td></tr></table></figure>

<p>当然你也可以执行下面的命令，相当于上面两条命令的效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d -g #在部署前先生成</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20210417191858877.png" alt="在这里插入图片描述"></p>
<p>部署成功后访问 你的地址，<a href="https://yourName.github.io（这里输入我的地址：">https://yourName.github.io（这里输入我的地址：</a> <a href="https://gdutxiao.github.io/">https://gdutxiao.github.io</a> ),将可以看到生成的文章。</p>
<p><strong>踩坑提醒</strong></p>
<ul>
<li>1）注意需要提前安装一个扩展：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p> <strong>如果没有执行者行命令，将会提醒</strong></p>
<blockquote>
<p>deloyer not found:git</p>
</blockquote>
<ul>
<li>2）如果出现下面这样的错误，<blockquote>
<p>Permission denied (publickey).<br>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights<br>and the repository exists.</p>
</blockquote>
</li>
</ul>
<p>则是因为没有设置好public key所致。<br>在本机生成public key,不懂的可以参考我的这一篇博客<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573399">Git ssh 配置及使用</a></p>
<hr>
<h2 id="主题推荐"><a href="#主题推荐" class="headerlink" title="主题推荐"></a><strong>主题推荐</strong></h2><p>每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。有两个比较好的主题推荐给大家。</p>
<p><strong>Yilia</strong></p>
<p>Yilia 是为 hexo 2.4+制作的主题。<br>崇尚简约优雅，以及极致的性能。</p>
<p><img src="https://img-blog.csdnimg.cn/20210417191921903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><a href="https://litten.github.io/">Yilia地址</a></p>
<p><strong>NexT</strong></p>
<p>我的网站就是采用这个主题，简洁美观。<br>目前Github上Star最高的Hexo主题，支持几种不同的风格。<br>作者提供了非常完善的配置说明。</p>
<p><img src="https://img-blog.csdnimg.cn/20210417191939669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<hr>
<h2 id="Net主题的配置"><a href="#Net主题的配置" class="headerlink" title="Net主题的配置"></a><strong>Net主题的配置</strong></h2><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>， 后者称为 <strong>主题配置文件</strong>。</p>
<p>比如我的电脑下的  F:\hexo 目录下的成为 站点配置文件，F:\hexo\themes\next 目录下的成为主题配置文件。</p>
<p>1）<strong>安装 NexT</strong></p>
<p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。</p>
<p>下载主题</p>
<p>如果你熟悉 Git， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。</p>
<p>克隆最新版本<br>下载稳定版本<br>在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>



<p>2）<strong>启用主题</strong></p>
<p>与所有 Hexo 主题启用的模式一样。 当 克隆&#x2F;下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。</p>
<p>启用 NexT 主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。</p>
<p>3）<strong>验证主题</strong></p>
<p>首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 hexo s –debug。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p>
<blockquote>
<p>INFO  Hexo is running at <a href="http://0.0.0.0:4000/">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>
</blockquote>
<p>此时即可使用浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> ，检查站点是否正确运行。</p>
<p>当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p>
<p><img src="https://img-blog.csdnimg.cn/20210417192009136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70"></p>
<p>现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。</p>
<p>4）<strong>主题设定</strong></p>
<p>选择 Scheme</p>
<p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class="line">Mist - Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class="line">Pisces - 双栏 Scheme，小家碧玉似的清新</span><br><span class="line">Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面</span><br></pre></td></tr></table></figure>
<p>注释 # 即可。</p>
<p>选择 Pisce Scheme</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure>

<p>5）<strong>设置语言</strong></p>
<p>编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure>

<p>目前 NexT 支持的语言如以下表格所示：</p>
<table>
<thead>
<tr>
<th>语言</th>
<th>代码</th>
<th>设定实例</th>
</tr>
</thead>
<tbody><tr>
<td>English</td>
<td>en</td>
<td>language: en</td>
</tr>
<tr>
<td>简体中文</td>
<td>zh-Hans</td>
<td>language: zh-Hans</td>
</tr>
<tr>
<td>Français</td>
<td>fr-FR</td>
<td>language: fr-FR</td>
</tr>
<tr>
<td>Português</td>
<td>pt</td>
<td>language: pt</td>
</tr>
<tr>
<td>繁體中文</td>
<td>zh-hk 或者 zh-tw</td>
<td>language: zh-hk</td>
</tr>
<tr>
<td>Русский язык</td>
<td>ru</td>
<td>language: ru</td>
</tr>
<tr>
<td>Deutsch</td>
<td>de</td>
<td>language: de</td>
</tr>
<tr>
<td>日本語</td>
<td>ja</td>
<td>language: ja</td>
</tr>
<tr>
<td>Indonesian</td>
<td>id</td>
<td>language: id</td>
</tr>
</tbody></table>
<p>6）<strong>设置 菜单</strong></p>
<p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 Font Awesome 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。</p>
<p>编辑主题配置文件，修改以下内容：</p>
<p>设定菜单内容，对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。</p>
<p>菜单示例配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  #about: /about</span><br><span class="line">  #categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></table></figure>

<p>若你的站点运行在子目录中，请将链接前缀的 &#x2F; 去掉</p>
<p>NexT 默认的菜单项有（标注  的项表示需要手动创建这个页面）：</p>
<table>
<thead>
<tr>
<th>键值</th>
<th>设定值</th>
<th>显示文本（简体中文）</th>
</tr>
</thead>
<tbody><tr>
<td>home</td>
<td>home: &#x2F;</td>
<td>主页</td>
</tr>
<tr>
<td>archives</td>
<td>archives: &#x2F;archives</td>
<td>归档页</td>
</tr>
<tr>
<td>categories</td>
<td>categories: &#x2F;categories</td>
<td>分类页</td>
</tr>
<tr>
<td>tags</td>
<td>tags: &#x2F;tags</td>
<td>标签页</td>
</tr>
<tr>
<td>about</td>
<td>about: &#x2F;about</td>
<td>关于页面</td>
</tr>
<tr>
<td>commonweal</td>
<td>commonweal: &#x2F;404.html</td>
<td>公益 404</td>
</tr>
</tbody></table>
<p>设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 languages&#x2F;{language}.yml （{language} 为你所使用的语言）。</p>
<p>以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 languages&#x2F;zh-Hans.yml，在 menu 字段下添加一项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  something: 有料</span><br></pre></td></tr></table></figure>

<p>设定菜单项的图标，对应的字段是 menu_icons。 此设定格式是 item name: icon name，其中 item name 与上一步所配置的菜单名字对应，icon name 是 Font Awesome 图标的 名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。</p>
<p>菜单图标配置示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mapping.</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  commonweal: heartbeat</span><br></pre></td></tr></table></figure>

<p>在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用  作为图标。</p>
<p>请注意键值（如 home）的大小写要严格匹配</p>
<p>7）** 侧栏**</p>
<p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 主题配置文件 中的 sidebar 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p>
<p>设置侧栏的位置，修改 sidebar.position 的值，支持的选项有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">left - 靠左放置</span><br><span class="line">right - 靠右放置</span><br></pre></td></tr></table></figure>

<p>目前仅 Pisces Scheme 支持 position 配置。影响版本5.0.0及更低版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  position: left</span><br></pre></td></tr></table></figure>

<p>设置侧栏显示的时机，修改 sidebar.display 的值，支持的选项有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post - 默认行为，在文章页面（拥有目录列表）时显示</span><br><span class="line">always - 在所有页面中都显示</span><br><span class="line">hide - 在所有页面中都隐藏（可以手动展开）</span><br><span class="line">remove - 完全移除</span><br><span class="line">sidebar:</span><br><span class="line">  display: post</span><br></pre></td></tr></table></figure>

<p>已知侧栏在 use motion: false 的情况下不会展示。 影响版本5.0.0及更低版本。</p>
<p>8）<strong>设置 头像</strong></p>
<p>编辑 站点配置文件， 新增字段 avatar， 值设置成头像的链接地址。其中，头像的链接地址可以是：</p>
<table>
<thead>
<tr>
<th>地址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>完整的互联网 URI</td>
<td><a href="http://example.com/avtar.png">http://example.com/avtar.png</a></td>
</tr>
<tr>
<td>站点内的地址</td>
<td>将头像放置主题目录下的 source&#x2F;uploads&#x2F; （新建uploads目录若不存在） 配置为：avatar: &#x2F;uploads&#x2F;avatar.png 或者 放置在 source&#x2F;images&#x2F; 目录下 , 配置为：avatar: &#x2F;images&#x2F;avatar.png</td>
</tr>
</tbody></table>
<p>头像设置示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">avatar: http://example.com/avtar.png</span><br></pre></td></tr></table></figure>

<p>9)<strong>设置 作者昵称</strong></p>
<p>编辑 站点配置文件， 设置 author 为你的昵称。</p>
<p>10)<strong>站点描述</strong></p>
<p>编辑 站点配置文件， 设置 </p>
<p>字段为你的站点描述。站点描述可以是你喜欢的一句签名:)</p>
<p><a href="http://theme-next.iissnan.com/getting-started.html">net主题的官方文档地址</a></p>
<hr>
<h2 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h2><p>添加sitemap和feed插件</p>
<p>切换到你本地的hexo 目录CIA，在命令行窗口，属兔以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed -save</span><br><span class="line">npm install hexo-generator-sitemap -save</span><br></pre></td></tr></table></figure>

<p>修改_config.yml，增加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">Plugins:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">#sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></table></figure>


<p>再执行以下命令，部署服务端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>


<p>配完之后，就可以访问 <a href="https://gdutxiaoxu.github.io/atom.xml">https://gdutxiaoxu.github.io/atom.xml</a> 和 <a href="https://gdutxiaoxu.github.io/sitemap.xml">https://gdutxiaoxu.github.io/sitemap.xml</a> ，发现这两个文件已经成功生成了。</p>
<hr>
<h2 id="添加404-页面"><a href="#添加404-页面" class="headerlink" title="添加404 页面"></a>添加404 页面</h2><p>GitHub Pages有提供制作404页面的指引：<a href="https://help.github.com/articles/creating-a-custom-404-page-for-your-github-pages-site/">Custom 404 Pages</a><br>直接在根目录下创建自己的404.html或者404.md就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。</p>
<p>推荐使用<a href="http://www.qq.com/404/">腾讯公益404</a></p>
<p>我的404页面配置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://www.qq.com/404/search_children.js&quot;</span><br><span class="line">        charset=&quot;utf-8&quot; homePageUrl=&quot;gdutxiaoxu.github.io&quot;</span><br><span class="line">        homePageName=&quot;回到我的主页&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://hexo.io/">Hexo主页</a></p>
<p><a href="https://xuanwo.org/2015/03/26/hexo-intor/">史上最详细的Hexo博客搭建图文教程</a></p>
<p>我的git系列参考教程</p>
<ul>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573286">Git下载及配置环境变量</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573339">Git 命令行教程及实例教程</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573399">Git ssh 配置及使用</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53573426"> git ssh 配置多个账户</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/79253737">Git config 使用说明</a></li>
<li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/79254607">Git 配置别名 —— 让命令变得更简单</a></li>
<li><a href="https://blog.csdn.net/gdutxiaoxu/article/details/80455810">git 设置  mergetool，difftool 为 BeyondCompare </a></li>
<li><a href="https://blog.csdn.net/gdutxiaoxu/article/details/89606676">git 补丁 - diff 和 patch 使用详解</a></li>
</ul>
<p>转载请注明原博客地址：<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018">手把手教你用Hexo+Github 搭建属于自己的博客</a></p>
<p>欢迎关注我的微信公众号<strong>程序员徐公</strong>，即可关注。 目前专注于 Android 开发，主要分享 Android开发相关知识和一些相关的优秀文章，包括个人总结，职场经验等。<br><img src="https://img-blog.csdnimg.cn/20210406233329415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dkdXR4aWFveHU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>搭建个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Behavior —— 仿知乎，FloatActionButton隐藏与展示</title>
    <url>/p/57f6cb3f.html</url>
    <content><![CDATA[<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/52858598">使用CoordinatorLayout打造各种炫酷的效果</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53453958">自定义Behavior —— 仿知乎，FloatActionButton隐藏与展示</a></p>
<p>前段时间写了一篇博客<a href="http://blog.csdn.net/gdutxiaoxu/article/details/52858598">使用CoordinatorLayout打造各种炫酷的效果</a>,主要介绍了APPBarLayout和CollapsingToolbarLayout的基本用法，AppBarLayout主要用来实现在滚动的时候ToolBar的 隐藏于展示，CollapsingToolbarLayout主要用来实现parallax和pin等效果。如果你对CoordinatorLayout还不了解的话，请先阅读这篇文章。</p>
<p><strong>写作思路</strong></p>
<ul>
<li>CoordinatorLayout Behavior 简介</li>
<li>怎样自定义 Behavior</li>
<li>仿知乎效果 自定义 Behavior 的实现</li>
<li>自定义 Behavior 两种方法的 对比</li>
<li>FloatActionButton 自定义 Behavior 效果的实现</li>
<li>题外话</li>
</ul>
<p>今天就来讲解怎样通过自定义behavior来实现各种炫酷的效果 ，效果图如下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2050203-f12821aa91a41c79.jpg?imageMogr2/auto-orient/strip"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2050203-afd17ba4e0ffde71.jpg?imageMogr2/auto-orient/strip"></p>
<h2 id="下面让我们一起来看一下怎样实现仿知乎的效果"><a href="#下面让我们一起来看一下怎样实现仿知乎的效果" class="headerlink" title="下面让我们一起来看一下怎样实现仿知乎的效果"></a>下面让我们一起来看一下怎样实现仿知乎的效果</h2><p>老规矩，先看代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;android.support.design.widget.CoordinatorLayout</span><br><span class="line">    android:id=<span class="string">&quot;@+id/coordinatorLayout&quot;</span></span><br><span class="line">    xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line"></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.AppBarLayout</span><br><span class="line">        android:id=<span class="string">&quot;@+id/index_app_bar&quot;</span></span><br><span class="line">        theme=<span class="string">&quot;@style/AppTheme.AppBarOverlay&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;RelativeLayout</span><br><span class="line">            android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;?attr/actionBarSize&quot;</span></span><br><span class="line">            android:background=<span class="string">&quot;@color/colorPrimary&quot;</span></span><br><span class="line">            app:layout_scrollFlags=<span class="string">&quot;scroll|enterAlways&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/search&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;24dp&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;24dp&quot;</span></span><br><span class="line">                android:layout_centerVertical=<span class="string">&quot;true&quot;</span></span><br><span class="line">                android:layout_marginLeft=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">                android:src=<span class="string">&quot;@drawable/search&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                android:layout_centerVertical=<span class="string">&quot;true&quot;</span></span><br><span class="line">                android:layout_marginLeft=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">                android:layout_toRightOf=<span class="string">&quot;@id/search&quot;</span></span><br><span class="line">                android:text=<span class="string">&quot;搜索话题、问题或人&quot;</span></span><br><span class="line">                android:textSize=<span class="string">&quot;16sp&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/recyclerView&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        app:layout_behavior=<span class="string">&quot;@string/appbar_scrolling_view_behavior&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android.support.v7.widget.RecyclerView&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--使用RadioGroup来实现tab的切换--&gt;</span><br><span class="line">    &lt;RadioGroup</span><br><span class="line">        android:id=<span class="string">&quot;@+id/rg&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;bottom&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;@color/bg_tab&quot;</span></span><br><span class="line">        android:orientation=<span class="string">&quot;horizontal&quot;</span></span><br><span class="line">        app:layout_behavior=<span class="string">&quot;@string/behavior_footer&quot;</span></span><br><span class="line">        &gt;</span><br><span class="line"></span><br><span class="line">        &lt;RadioButton</span><br><span class="line">            android:id=<span class="string">&quot;@+id/rb_home&quot;</span></span><br><span class="line">            style=<span class="string">&quot;@style/bottom_tab&quot;</span></span><br><span class="line">            android:drawableTop=<span class="string">&quot;@drawable/sel_home&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;Home&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RadioButton</span><br><span class="line">            android:id=<span class="string">&quot;@+id/rb_course&quot;</span></span><br><span class="line">            style=<span class="string">&quot;@style/bottom_tab&quot;</span></span><br><span class="line">            android:drawableTop=<span class="string">&quot;@drawable/sel_course&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;course&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RadioButton</span><br><span class="line">            android:id=<span class="string">&quot;@+id/rb_direct_seeding&quot;</span></span><br><span class="line">            style=<span class="string">&quot;@style/bottom_tab&quot;</span></span><br><span class="line">            android:drawableTop=<span class="string">&quot;@drawable/sel_direct_seeding&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;direct&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;RadioButton</span><br><span class="line">            android:id=<span class="string">&quot;@+id/rb_me&quot;</span></span><br><span class="line">            style=<span class="string">&quot;@style/bottom_tab&quot;</span></span><br><span class="line">            android:drawableTop=<span class="string">&quot;@drawable/sel_me&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;me&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/RadioGroup&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style name=&quot;bottom_tab&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_width&quot;&gt;0dp&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_height&quot;&gt;60dp&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_weight&quot;&gt;1&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:text&quot;&gt;0dp&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:gravity&quot;&gt;center&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:textColor&quot;&gt;@drawable/sel_bottom_tab_text&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:padding&quot;&gt;10dp&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:button&quot;&gt;@null&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;style name=&quot;bottom_tab&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_width&quot;&gt;0dp&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_height&quot;&gt;60dp&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_weight&quot;&gt;1&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:text&quot;&gt;0dp&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:gravity&quot;&gt;center&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:textColor&quot;&gt;@drawable/sel_bottom_tab_text&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:padding&quot;&gt;10dp&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:button&quot;&gt;@null&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a><strong>思路分析</strong></h3><p>根据动态如可以看到，主要有两个效果</p>
<ul>
<li>上面的AppBarLayout 向上滑动的时候会隐藏，向下滑动的时候会展示，说白了就是给APPLayout的子View Relativelayout 设置   app:layout_scrollFlags&#x3D;”scroll|enterAlways”，核心代码如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;android.support.design.widget.AppBarLayout</span><br><span class="line">    android:id=&quot;@+id/index_app_bar&quot;</span><br><span class="line">    theme=&quot;@style/AppTheme.AppBarOverlay&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">        android:background=&quot;@color/colorPrimary&quot;</span><br><span class="line">        app:layout_scrollFlags=&quot;scroll|enterAlways&quot;&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">      ----</span><br><span class="line"></span><br><span class="line">    &lt;/RelativeLayout&gt;</span><br><span class="line"> &lt;/android.support.design.widget.AppBarLayout&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>下面的 RadioGroup ，我们可以看到，向上 滑动的时候会隐藏，向下滑动的时候会显示，其实我们只是给其设置了 behavior 而已 app:layout_behavior&#x3D;”@string&#x2F;behavior_footer”，那这个behavior_footer是什么东西，别急 ，下面就是介绍了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;string name=&quot;behavior_footer&quot;&gt;com.xujun.contralayout.behavior.FooterBehavior&lt;/string&gt;</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="Behavior简介"><a href="#Behavior简介" class="headerlink" title="Behavior简介"></a>Behavior简介</h2><p><img src="http://upload-images.jianshu.io/upload_images/2050203-29feb55fbedd7f2e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p>
<p>Behavior是CoordinatorLayout里面的一个内部类，通过它我们可以与 CoordinatorLayout的一个或者多个子View进行交互，包括 drag，swipes, flings等手势动作。</p>
<p>今天 我们主要着重介绍里面的几个方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>boolean	layoutDependsOn(CoordinatorLayout parent, V child, View dependency)</td>
<td>确定child View 是否有一个特定的兄弟View作为布局的依赖（即dependency）</td>
</tr>
<tr>
<td>boolean	onDependentViewChanged(CoordinatorLayout parent, V child, View dependency)</td>
<td>当child View 的 dependent view 发生变化的时候，这个方法会调用</td>
</tr>
<tr>
<td>boolean	onStartNestedScroll(CoordinatorLayout coordinatorLayout, V child, View directTargetChild, View target, int nestedScrollAxes)</td>
<td>当CoordinatorLayout 的直接或者非直接子View开始准备嵌套滑动的时候会调用</td>
</tr>
<tr>
<td>void	onNestedScroll(CoordinatorLayout coordinatorLayout, V child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed)</td>
<td>当嵌套滑动的 时候，target尝试滑动或者正在滑动的 时候会调用</td>
</tr>
</tbody></table>
<p>关于更多方法，请参考官<a href="https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html">网文档说明</a></p>
<h2 id="怎样自定义Behavior"><a href="#怎样自定义Behavior" class="headerlink" title="怎样自定义Behavior"></a>怎样自定义Behavior</h2><p>前面已经说到，今天主要介绍四个方法，这里我们把它分为两组。</p>
<p>第一组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 决定child 依赖于把一个 dependency</span><br><span class="line">boolean	layoutDependsOn(CoordinatorLayout parent, V child, View dependency)</span><br><span class="line"></span><br><span class="line">// 当 dependency View 改变的时候 child 要做出怎样的响应</span><br><span class="line">boolean	onDependentViewChanged(CoordinatorLayout parent, V child, View dependency)</span><br></pre></td></tr></table></figure>


<p>第二组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 当CoordinatorLayout的直接或者非直接子View开始嵌套滑动的时候，会调用这个方法</span><br><span class="line">boolean	onStartNestedScroll(CoordinatorLayout coordinatorLayout, V child, View directTargetChild, View target, int nestedScrollAxes)</span><br><span class="line"></span><br><span class="line">// 当嵌套滑动的时候，target 尝试滑动或者正在滑动会调用这个方法</span><br><span class="line">onNestedScroll(CoordinatorLayout coordinatorLayout, V child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed)</span><br></pre></td></tr></table></figure>


<h3 id="首先我们先看第一组是怎样实现的？"><a href="#首先我们先看第一组是怎样实现的？" class="headerlink" title="首先我们先看第一组是怎样实现的？"></a>首先我们先看第一组是怎样实现的？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 知乎效果底部behavior 依赖于 AppBarLayout</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujun  on 2016/11/30.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> gdutxiaoxu@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FooterBehaviorDependAppBar</span> <span class="keyword">extends</span> <span class="title class_">CoordinatorLayout</span>.Behavior&lt;View&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;xujun&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FooterBehaviorDependAppBar</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当 dependency instanceof AppBarLayout 返回TRUE，将会调用onDependentViewChanged（）方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>   dependency <span class="keyword">instanceof</span> AppBarLayout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> &#123;</span><br><span class="line">        <span class="comment">//根据dependency top值的变化改变 child 的 translationY</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">translationY</span> <span class="operator">=</span> Math.abs(dependency.getTop());</span><br><span class="line">        child.setTranslationY(translationY);</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;onDependentViewChanged: &quot;</span> + translationY);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>思路分析</em></p>
<p>这里我们要分清两个概念，child  和  dependency ，child 是我们要改变的坐标的view，而 dependency 是child 的 附属 ，即child 会随着 dependency 坐标的改变而改变。</p>
<p>比如上面的例子：当我们把 app:layout_behavior&#x3D;”com.xujun.contralayout.behavior.FooterBehaviorDependAppBar” 设置给 RadioGroup 的时候，这时候 child 就是 RadioGroup ，而 dependency 就是 APPBarLayout ，因为我们在 layoutDependsOn 方法里面 ，返回 dependency instanceof AppBarLayout ，即当 dependency 是 AppBarLayout 或者 AppBarLayout的子类的时候返回TRUE。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//当 dependency instanceof AppBarLayout 返回TRUE，将会调用onDependentViewChanged（）方法</span><br><span class="line">    @Override</span><br><span class="line">    public boolean layoutDependsOn(CoordinatorLayout parent, View child, View dependency) &#123;</span><br><span class="line">        return   dependency instanceof AppBarLayout;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>而之所以 RadioGroup 在向上滑动的时候会隐藏，向下滑动的时候会显示，是因为我们在 onDependentViewChanged 方法的时候 动态地根据 dependency 的 top 值改变 RadioGroup 的 translationY 值，核心 代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onDependentViewChanged(CoordinatorLayout parent, View child, View dependency) &#123;</span><br><span class="line">    //根据dependency top值的变化改变 child 的 translationY</span><br><span class="line">    float translationY = Math.abs(dependency.getTop());</span><br><span class="line">    child.setTranslationY(translationY);</span><br><span class="line">    Log.i(TAG, &quot;onDependentViewChanged: &quot; + translationY);</span><br><span class="line">    return true;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>到此第一种思路分析为止</p>
<h3 id="第二种思路"><a href="#第二种思路" class="headerlink" title="第二种思路"></a>第二种思路</h3><p>主要是根据 onStartNestedScroll（） 和 onNestedPreScroll()方法 来实现的，</p>
<ul>
<li>当我们开始滑动的时候，我们判断是否是垂直滑动，如果是返回TRUE，否则返回 FALSE，返回TRUE，会接着调用onNestedPreScroll（）等一系列方法。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1.判断滑动的方向 我们需要垂直滑动</span><br><span class="line">@Override</span><br><span class="line">public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child,</span><br><span class="line">                                   View directTargetChild, View target, int nestedScrollAxes) &#123;</span><br><span class="line">    return (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在 onNestedPreScroll（） 方法里面，我们根据我们的逻辑来决定是否显示 target ， 在这里我们是向上上滑动的时候，如果我们滑动的距离超过 target 的高度 并且 当前是可见的状态下，我们执行动画，隐藏 target，当我们向下滑动的时候，并且 View 是不可见的情况下，我们执行动画 ，显示target</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//2.根据滑动的距离显示和隐藏footer view</span><br><span class="line">  @Override</span><br><span class="line">  public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child,</span><br><span class="line">                                View target, int dx, int dy, int[] consumed) &#123;</span><br><span class="line">      if (dy &gt; 0 &amp;&amp; sinceDirectionChange &lt; 0 || dy &lt; 0 &amp;&amp; sinceDirectionChange &gt; 0) &#123;</span><br><span class="line">          child.animate().cancel();</span><br><span class="line">          sinceDirectionChange = 0;</span><br><span class="line">      &#125;</span><br><span class="line">      sinceDirectionChange += dy;</span><br><span class="line">      int visibility = child.getVisibility();</span><br><span class="line">      if (sinceDirectionChange &gt; child.getHeight() &amp;&amp; visibility == View.VISIBLE) &#123;</span><br><span class="line">          hide(child);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          if (sinceDirectionChange &lt; 0 &amp;&amp; (visibility == View.GONE || visibility == View</span><br><span class="line">                  .INVISIBLE)) &#123;</span><br><span class="line">              show(child);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


<p> 全部代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 知乎效果底部 behavior</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xujun  on 2016/11/30.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> gdutxiaoxu@163.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FooterBehavior</span> <span class="keyword">extends</span> <span class="title class_">CoordinatorLayout</span>.Behavior&lt;View&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Interpolator</span> <span class="variable">INTERPOLATOR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastOutSlowInInterpolator</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sinceDirectionChange;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FooterBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.判断滑动的方向 我们需要垂直滑动</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onStartNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child,</span></span><br><span class="line"><span class="params">                                       View directTargetChild, View target, <span class="type">int</span> nestedScrollAxes)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.根据滑动的距离显示和隐藏footer view</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNestedPreScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child,</span></span><br><span class="line"><span class="params">                                  View target, <span class="type">int</span> dx, <span class="type">int</span> dy, <span class="type">int</span>[] consumed)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dy &gt; <span class="number">0</span> &amp;&amp; sinceDirectionChange &lt; <span class="number">0</span> || dy &lt; <span class="number">0</span> &amp;&amp; sinceDirectionChange &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            child.animate().cancel();</span><br><span class="line">            sinceDirectionChange = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sinceDirectionChange += dy;</span><br><span class="line">        <span class="type">int</span> <span class="variable">visibility</span> <span class="operator">=</span> child.getVisibility();</span><br><span class="line">        <span class="keyword">if</span> (sinceDirectionChange &gt; child.getHeight() &amp;&amp; visibility == View.VISIBLE) &#123;</span><br><span class="line">            hide(child);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (sinceDirectionChange &lt; <span class="number">0</span> &amp;&amp; (visibility == View.GONE || visibility == View</span><br><span class="line">                    .INVISIBLE)) &#123;</span><br><span class="line">                show(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">hide</span><span class="params">(<span class="keyword">final</span> View view)</span> &#123;</span><br><span class="line">        <span class="type">ViewPropertyAnimator</span> <span class="variable">animator</span> <span class="operator">=</span> view.animate().translationY(view.getHeight()).</span><br><span class="line">                setInterpolator(INTERPOLATOR).setDuration(<span class="number">200</span>);</span><br><span class="line">        animator.setListener(<span class="keyword">new</span> <span class="title class_">Animator</span>.AnimatorListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationStart</span><span class="params">(Animator animator)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationEnd</span><span class="params">(Animator animator)</span> &#123;</span><br><span class="line">                view.setVisibility(View.GONE);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationCancel</span><span class="params">(Animator animator)</span> &#123;</span><br><span class="line">                show(view);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationRepeat</span><span class="params">(Animator animator)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        animator.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="keyword">final</span> View view)</span> &#123;</span><br><span class="line">        <span class="type">ViewPropertyAnimator</span> <span class="variable">animator</span> <span class="operator">=</span> view.animate().translationY(<span class="number">0</span>).</span><br><span class="line">                setInterpolator(INTERPOLATOR).</span><br><span class="line">                setDuration(<span class="number">200</span>);</span><br><span class="line">        animator.setListener(<span class="keyword">new</span> <span class="title class_">Animator</span>.AnimatorListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationStart</span><span class="params">(Animator animator)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationEnd</span><span class="params">(Animator animator)</span> &#123;</span><br><span class="line">                view.setVisibility(View.VISIBLE);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationCancel</span><span class="params">(Animator animator)</span> &#123;</span><br><span class="line">                hide(view);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationRepeat</span><span class="params">(Animator animator)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        animator.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h2 id="两种实现方法的对比和总结"><a href="#两种实现方法的对比和总结" class="headerlink" title="两种实现方法的对比和总结"></a>两种实现方法的对比和总结</h2><ul>
<li><p>我们知道第一种方法我们主要是重写layoutDependsOn 和 onDependentViewChanged 这两个方法，这个方法在 layoutDependsOn 判断 dependency 是否是 APpBarLayout 的实现类，所以 会导致 child 依赖于 AppBarLayout，灵活性不是太强</p>
</li>
<li><p>而第二种方法，我们主要是重写 onStartNestedScroll 和 onNestedPreScroll 这两个方法，判断是否是垂直滑动，是的话就进行处理，灵活性大大增强，推荐使用这一种方法</p>
</li>
<li><p>需要注意的是不管是第一种方法，还是第二种方法，我们都需要重写带两个构造方法的函数，因为底层机制会采用反射的形式获得该对象</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public FooterBehavior(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="自定义-Behavior-实现-FloatingActionButton-的显示与隐藏"><a href="#自定义-Behavior-实现-FloatingActionButton-的显示与隐藏" class="headerlink" title="自定义 Behavior 实现 FloatingActionButton 的显示与隐藏"></a>自定义 Behavior 实现 FloatingActionButton 的显示与隐藏</h2><p><strong>效果图如下</strong></p>
<p>缩放隐藏的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2050203-455f05edf132a3d9.jpg?imageMogr2/auto-orient/strip"></p>
<p>向上向下隐藏的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2050203-f50b9c3d22a393f8.jpg?imageMogr2/auto-orient/strip"></p>
<h3 id="布局代码"><a href="#布局代码" class="headerlink" title="布局代码"></a>布局代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;android.support.design.widget.CoordinatorLayout</span><br><span class="line">    android:id=&quot;@+id/activity_floating_action_button&quot;</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    tools:context=&quot;com.xujun.contralayout.UI.FloatingActionButtonActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.AppBarLayout</span><br><span class="line">        android:id=&quot;@+id/index_app_bar&quot;</span><br><span class="line">        theme=&quot;@style/AppTheme.AppBarOverlay&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;RelativeLayout</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">            android:background=&quot;@color/colorPrimary&quot;</span><br><span class="line">            app:layout_scrollFlags=&quot;scroll|enterAlways&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id=&quot;@+id/search&quot;</span><br><span class="line">                android:layout_width=&quot;24dp&quot;</span><br><span class="line">                android:layout_height=&quot;24dp&quot;</span><br><span class="line">                android:layout_centerVertical=&quot;true&quot;</span><br><span class="line">                android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">                android:src=&quot;@drawable/search&quot;/&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                android:layout_centerVertical=&quot;true&quot;</span><br><span class="line">                android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">                android:layout_toRightOf=&quot;@id/search&quot;</span><br><span class="line">                android:text=&quot;搜索话题、问题或人&quot;</span><br><span class="line">                android:textSize=&quot;16sp&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id=&quot;@+id/recyclerView&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android.support.v7.widget.RecyclerView&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.FloatingActionButton</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_gravity=&quot;bottom|right|end&quot;</span><br><span class="line">        android:layout_marginBottom=&quot;40dp&quot;</span><br><span class="line">        android:layout_marginRight=&quot;25dp&quot;</span><br><span class="line">        android:background=&quot;@android:color/holo_green_light&quot;</span><br><span class="line">        android:src=&quot;@drawable/add&quot;</span><br><span class="line">        app:layout_behavior=&quot;@string/behavior_my_fab_scale&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>


<p>如果想使用不同的效果，只需要给 FloatingActionButton 制定不同的 bevaior 即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app:layout_behavior=&quot;com.xujun.contralayout.behavior.MyFabBehavior&quot;</span><br></pre></td></tr></table></figure>



<h3 id="自定义behavior-代码"><a href="#自定义behavior-代码" class="headerlink" title="自定义behavior 代码"></a>自定义behavior 代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  FloatingActionButton behavior 向上向下隐藏的</span><br><span class="line"> * @author xujun  on 2016/12/1.</span><br><span class="line"> * @email gdutxiaoxu@163.com</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class MyFabBehavior extends CoordinatorLayout.Behavior&lt;View&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private static final Interpolator INTERPOLATOR = new FastOutSlowInInterpolator();</span><br><span class="line"></span><br><span class="line">    private float viewY;//控件距离coordinatorLayout底部距离</span><br><span class="line">    private boolean isAnimate;//动画是否在进行</span><br><span class="line"></span><br><span class="line">    public MyFabBehavior(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //在嵌套滑动开始前回调</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) &#123;</span><br><span class="line"></span><br><span class="line">        if(child.getVisibility() == View.VISIBLE&amp;&amp;viewY==0)&#123;</span><br><span class="line">            //获取控件距离父布局（coordinatorLayout）底部距离</span><br><span class="line">            viewY=coordinatorLayout.getHeight()-child.getY();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != 0;//判断是否竖直滚动</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //在嵌套滑动进行时，对象消费滚动距离前回调</span><br><span class="line">    @Override</span><br><span class="line">    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) &#123;</span><br><span class="line">        //dy大于0是向上滚动 小于0是向下滚动</span><br><span class="line"></span><br><span class="line">        if (dy &gt;=0&amp;&amp;!isAnimate&amp;&amp;child.getVisibility()==View.VISIBLE) &#123;</span><br><span class="line">            hide(child);</span><br><span class="line">        &#125; else if (dy &lt;0&amp;&amp;!isAnimate&amp;&amp;child.getVisibility()==View.GONE) &#123;</span><br><span class="line">            show(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //隐藏时的动画</span><br><span class="line">    private void hide(final View view) &#123;</span><br><span class="line">        ViewPropertyAnimator animator = view.animate().translationY(viewY).setInterpolator(INTERPOLATOR).setDuration(200);</span><br><span class="line"></span><br><span class="line">        animator.setListener(new Animator.AnimatorListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onAnimationStart(Animator animator) &#123;</span><br><span class="line">                isAnimate=true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onAnimationEnd(Animator animator) &#123;</span><br><span class="line">                view.setVisibility(View.GONE);</span><br><span class="line">                isAnimate=false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onAnimationCancel(Animator animator) &#123;</span><br><span class="line">                show(view);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onAnimationRepeat(Animator animator) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        animator.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //显示时的动画</span><br><span class="line">    private void show(final View view) &#123;</span><br><span class="line">        ViewPropertyAnimator animator = view.animate().translationY(0).setInterpolator(INTERPOLATOR).setDuration(200);</span><br><span class="line">        animator.setListener(new Animator.AnimatorListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onAnimationStart(Animator animator) &#123;</span><br><span class="line">                view.setVisibility(View.VISIBLE);</span><br><span class="line">                isAnimate=true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onAnimationEnd(Animator animator) &#123;</span><br><span class="line">                isAnimate=false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onAnimationCancel(Animator animator) &#123;</span><br><span class="line">                hide(view);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onAnimationRepeat(Animator animator) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        animator.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * &lt;p&gt;下拉时显示FAB，上拉隐藏，留出更多位置给用户。&lt;/p&gt;</span><br><span class="line"> * Created on 2016/12/1.</span><br><span class="line"> *</span><br><span class="line"> * @author xujun</span><br><span class="line"> */</span><br><span class="line">public class ScaleDownShowBehavior extends FloatingActionButton.Behavior &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 退出动画是否正在执行。</span><br><span class="line">     */</span><br><span class="line">    private boolean isAnimatingOut = false;</span><br><span class="line"></span><br><span class="line">    private OnStateChangedListener mOnStateChangedListener;</span><br><span class="line"></span><br><span class="line">    public ScaleDownShowBehavior(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, FloatingActionButton child, View directTargetChild, View target, int nestedScrollAxes) &#123;</span><br><span class="line">        return nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onNestedScroll(CoordinatorLayout coordinatorLayout, FloatingActionButton child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) &#123;</span><br><span class="line">        if ((dyConsumed &gt; 0 || dyUnconsumed &gt; 0) &amp;&amp; !isAnimatingOut &amp;&amp; child.getVisibility() == View.VISIBLE) &#123;//往下滑</span><br><span class="line">            AnimatorUtil.scaleHide(child, viewPropertyAnimatorListener);</span><br><span class="line">            if (mOnStateChangedListener != null) &#123;</span><br><span class="line">                mOnStateChangedListener.onChanged(false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if ((dyConsumed &lt; 0 || dyUnconsumed &lt; 0) &amp;&amp; child.getVisibility() != View.VISIBLE) &#123;</span><br><span class="line">            AnimatorUtil.scaleShow(child, null);</span><br><span class="line">            if (mOnStateChangedListener != null) &#123;</span><br><span class="line">                mOnStateChangedListener.onChanged(true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOnStateChangedListener(OnStateChangedListener mOnStateChangedListener) &#123;</span><br><span class="line">        this.mOnStateChangedListener = mOnStateChangedListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 外部监听显示和隐藏。</span><br><span class="line">    public interface OnStateChangedListener &#123;</span><br><span class="line">        void onChanged(boolean isShow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;V extends View&gt; ScaleDownShowBehavior from(V view) &#123;</span><br><span class="line">        ViewGroup.LayoutParams params = view.getLayoutParams();</span><br><span class="line">        if (!(params instanceof CoordinatorLayout.LayoutParams)) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;The view is not a child of CoordinatorLayout&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params).getBehavior();</span><br><span class="line">        if (!(behavior instanceof ScaleDownShowBehavior)) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;The view is not associated with ScaleDownShowBehavior&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return (ScaleDownShowBehavior) behavior;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ViewPropertyAnimatorListener viewPropertyAnimatorListener = new ViewPropertyAnimatorListener() &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onAnimationStart(View view) &#123;</span><br><span class="line">            isAnimatingOut = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onAnimationEnd(View view) &#123;</span><br><span class="line">            isAnimatingOut = false;</span><br><span class="line">            view.setVisibility(View.GONE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onAnimationCancel(View arg0) &#123;</span><br><span class="line">            isAnimatingOut = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>思路这里就不详细展开了，因为前面在讲解 仿知乎效果的时候已经讲过了，大概就是根据不同的滑动行为执行不同的动画 而已</p>
<hr>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><ul>
<li>通过这篇博客，熟悉 CoordinatorLayout 的 各种用法，同时也初步理解了自定义Behavior的思路</li>
<li>同时复习了动画的相关知识</li>
<li>如果你觉得效果还不错，欢迎到我的github上面star，<a href="https://github.com/gdutxiaoxu/CoordinatorLayoutExample.git">github地址</a></li>
</ul>
<p><strong><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53453958">文章首发地址CSDN：</a><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53453958">http://blog.csdn.net/gdutxiaoxu/article/details/53453958</a></strong></p>
<p><strong><a href="https://github.com/gdutxiaoxu/CoordinatorLayoutExample.git">源码下载地址：</a><a href="https://github.com/gdutxiaoxu/CoordinatorLayoutExample.git">https://github.com/gdutxiaoxu/CoordinatorLayoutExample.git</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>面试官， 怎样实现 Router 框架？</title>
    <url>/p/5169.html</url>
    <content><![CDATA[<p>Android 开发中，组件化，模块化是一个老生常谈的问题。随着项目复杂性的增长，模块化是一个必然的趋势。除非你能忍受改一下代码，就需要六七分钟的漫长时间。</p>
<p>模块化，组件化随之带来的另外一个问题是页面的跳转问题，由于代码的隔离，代码之间有时候会无法互相访问。于是，路由（Router）框架诞生了。</p>
<p>目前用得比较多的有阿里的 ARouter，美团的 WMRouter，ActivityRouter 等。</p>
<p>今天，就让我们一起来看一下怎样实现一个路由框架。<br>实现的功能有。</p>
<ol>
<li>基于编译时注解，使用方便</li>
<li>结果回调，每次跳转 Activity 都会回调跳转结果</li>
<li>除了可以使用注解自定义路由，还支持手动分配路由</li>
<li>支持多模块使用，支持组件化使用</li>
</ol>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>第一步，在要跳转的 activity 上面注明 path，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Route(path = &quot;activity/main&quot;)</span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在要跳转的地方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router.getInstance().build(&quot;activity/main&quot;).navigation(this);</span><br></pre></td></tr></table></figure>


<h3 id="如果想在多-moule-中使用"><a href="#如果想在多-moule-中使用" class="headerlink" title="如果想在多 moule 中使用"></a>如果想在多 moule 中使用</h3><p>第一步，使用 <code>@Modules(&#123;&quot;app&quot;, &quot;sdk&quot;&#125;)</code> 注明总共有多少个 moudle，并分别在 moudle 中注明当前 moudle 的 名字，使用 <code>@Module(&quot;&quot;)</code> 注解。注意 @Modules({“app”, “sdk”}) 要与 @Module(“”) 一一对应。</p>
<p>在主 moudle 中，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Modules(&#123;&quot;app&quot;, &quot;moudle1&quot;&#125;)</span><br><span class="line">@Module(&quot;app&quot;)</span><br><span class="line">public class RouterApplication extends Application &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void attachBaseContext(Context base) &#123;</span><br><span class="line">        super.attachBaseContext(base);</span><br><span class="line">        Router.getInstance().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 moudle1 中，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Route(path = &quot;my/activity/main&quot;)</span><br><span class="line">@Module(&quot;moudle1&quot;)</span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main_2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以支持多模块使用了。</p>
<h3 id="自定义注入-router"><a href="#自定义注入-router" class="headerlink" title="自定义注入 router"></a>自定义注入 router</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router.getInstance().add(&quot;activity/three&quot;, ThreeActivity.class);</span><br></pre></td></tr></table></figure>

<p>跳转的时候调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router.getInstance().build(&quot;activity/three&quot;).navigation(this);</span><br></pre></td></tr></table></figure>


<h3 id="结果回调"><a href="#结果回调" class="headerlink" title="结果回调"></a>结果回调</h3><p>路由跳转结果回调。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router.getInstance().build(&quot;my/activity/main&quot;, new RouterCallback() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean beforeOpen(Context context, Uri uri) &#123; </span><br><span class="line">    // 在打开路由之前</span><br><span class="line">        Log.i(TAG, &quot;beforeOpen: uri=&quot; + uri);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   // 在打开路由之后（即打开路由成功之后会回调）</span><br><span class="line">    @Override</span><br><span class="line">    public void afterOpen(Context context, Uri uri) &#123;</span><br><span class="line">        Log.i(TAG, &quot;afterOpen: uri=&quot; + uri);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 没有找到改 uri</span><br><span class="line">    @Override</span><br><span class="line">    public void notFind(Context context, Uri uri) &#123;</span><br><span class="line">        Log.i(TAG, &quot;notFind: uri=&quot; + uri);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 发生错误</span><br><span class="line">    @Override</span><br><span class="line">    public void error(Context context, Uri uri, Throwable e) &#123;</span><br><span class="line">        Log.i(TAG, &quot;error: uri=&quot; + uri + &quot;;e=&quot; + e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).navigation(this);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>startActivityForResult 跳转结果回调</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router.getInstance().build(&quot;activity/two&quot;).navigation(this, new Callback() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span><br><span class="line">        Log.i(TAG, &quot;onActivityResult: requestCode=&quot; + requestCode + &quot;;resultCode=&quot; + resultCode + &quot;;data=&quot; + data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h2><p>实现一个 Router 框架，涉及到的主要的知识点如下：</p>
<ol>
<li>注解的处理</li>
<li>怎样解决多个 module 之间的依赖问题，以及如何支持多 module 使用</li>
<li>router 跳转及 activty startActivityForResult 的处理</li>
</ol>
<p>我们带着这三个问题，一起来探索一下。</p>
<p>总共分为四个部分,router-annotion, router-compiler,router-api,stub</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2dkdXR4aWFveHUvYmxvZ19waWMvbWFzdGVyLzE5XzA5LzIwMTkxMTIzMTYwMjA3LnBuZw?x-oss-process=image/format,png"></p>
<p>router-annotion 主要是定义注解的，用来存放注解文件</p>
<p>router-compiler 主要是用来处理注解的，自动帮我们生成代码</p>
<p>router-api 是对外的 api，用来处理跳转的。</p>
<p>stub 这个是存放一些空的 java 文件，提前占坑。不会打包进 jar。</p>
<h2 id="router-annotion"><a href="#router-annotion" class="headerlink" title="router-annotion"></a>router-annotion</h2><p>主要定义了三个注解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.CLASS)</span><br><span class="line">public @interface Route &#123;</span><br><span class="line">    String path();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Retention(RetentionPolicy.CLASS)</span><br><span class="line">public @interface Modules &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Retention(RetentionPolicy.CLASS)</span><br><span class="line">public @interface Module &#123;</span><br><span class="line">    String value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Route 注解主要是用来注明跳转的 path 的。</p>
<p>Modules 注解，注明总共有多少个 moudle。</p>
<p>Module 注解，注明当前 moudle 的名字。</p>
<p>Modules，Module 注解主要是为了解决支持多 module 使用的。</p>
<hr>
<h2 id="router-compiler"><a href="#router-compiler" class="headerlink" title="router-compiler"></a>router-compiler</h2><p>router-compiler 只有一个类 RouterProcessor，他的原理其实也是比较简单的，扫描那些类用到注解，并将这些信息存起来，做相应的处理。这里是会生成相应的 java 文件。</p>
<p>主要包括以下两个步骤</p>
<ol>
<li>根据是否有 <code>@Modules</code> <code>@Module</code> 注解，然后生成相应的 <code>RouterInit</code> 文件</li>
<li>扫描 <code>@Route</code> 注解，并根据 <code>moudleName</code> 生成相应的 java 文件</li>
</ol>
<h3 id="注解基本介绍"><a href="#注解基本介绍" class="headerlink" title="注解基本介绍"></a>注解基本介绍</h3><p>在讲解 RouterProcessor 之前，我们先来了解一下注解的基本知识。</p>
<p>如果对于自定义注解还不熟悉的话，可以先看我之前写的这两篇文章。<a href="https://xujun.blog.csdn.net/article/details/70244169">Android 自定义编译时注解1 - 简单的例子</a>，<a href="https://blog.csdn.net/gdutxiaoxu/article/details/70822023">Android 编译时注解 —— 语法详解</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class RouterProcessor extends AbstractProcessor &#123;</span><br><span class="line">    private static final boolean DEBUG = true;</span><br><span class="line">    private Messager messager;</span><br><span class="line">    private Filer mFiler;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public synchronized void init(ProcessingEnvironment processingEnv) &#123;</span><br><span class="line">        super.init(processingEnv);</span><br><span class="line">        messager = processingEnv.getMessager();</span><br><span class="line">        mFiler = processingEnv.getFiler();</span><br><span class="line">        UtilManager.getMgr().init(processingEnv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 定义你的注解处理器注册到哪些注解上</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Set&lt;String&gt; getSupportedAnnotationTypes() &#123;</span><br><span class="line">        Set&lt;String&gt; annotations = new LinkedHashSet&lt;&gt;();</span><br><span class="line">        annotations.add(Route.class.getCanonicalName());</span><br><span class="line">        annotations.add(Module.class.getCanonicalName());</span><br><span class="line">        annotations.add(Modules.class.getCanonicalName());</span><br><span class="line">        return annotations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * java版本</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public SourceVersion getSupportedSourceVersion() &#123;</span><br><span class="line">        return SourceVersion.latestSupported();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 首先我们先来看一下 <code>getSupportedAnnotationTypes</code> 方法,这个方法返回的是我们支持扫描的注解。</p>
<h3 id="注解的处理"><a href="#注解的处理" class="headerlink" title="注解的处理"></a>注解的处理</h3><p> 接下来我们再一起来看一下 <code>process</code> 方法</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> @Override</span><br><span class="line">public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123;</span><br><span class="line">    // 注解为 null，直接返回</span><br><span class="line">    if (annotations == null || annotations.size() == 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UtilManager.getMgr().getMessager().printMessage(Diagnostic.Kind.NOTE, &quot;process&quot;);</span><br><span class="line">    boolean hasModule = false;</span><br><span class="line">    boolean hasModules = false;</span><br><span class="line">    // module</span><br><span class="line">    String moduleName = &quot;RouterMapping&quot;;</span><br><span class="line">    Set&lt;? extends Element&gt; moduleList = roundEnv.getElementsAnnotatedWith(Module.class);</span><br><span class="line">    if (moduleList != null &amp;&amp; moduleList.size() &gt; 0) &#123;</span><br><span class="line">        Module annotation = moduleList.iterator().next().getAnnotation(Module.class);</span><br><span class="line">        moduleName = moduleName + &quot;_&quot; + annotation.value();</span><br><span class="line">        hasModule = true;</span><br><span class="line">    &#125;</span><br><span class="line">    // modules</span><br><span class="line">    String[] moduleNames = null;</span><br><span class="line">    Set&lt;? extends Element&gt; modulesList = roundEnv.getElementsAnnotatedWith(Modules.class);</span><br><span class="line">    if (modulesList != null &amp;&amp; modulesList.size() &gt; 0) &#123;</span><br><span class="line">        Element modules = modulesList.iterator().next();</span><br><span class="line">        moduleNames = modules.getAnnotation(Modules.class).value();</span><br><span class="line">        hasModules = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    debug(&quot;generate modules RouterInit annotations=&quot; + annotations + &quot; roundEnv=&quot; + roundEnv);</span><br><span class="line">    debug(&quot;generate modules RouterInit hasModules=&quot; + hasModules + &quot; hasModule=&quot; + hasModule);</span><br><span class="line">    // RouterInit</span><br><span class="line">    if (hasModules) &#123; // 有使用 @Modules 注解，生成 RouterInit 文件，适用于多个 moudle</span><br><span class="line">        debug(&quot;generate modules RouterInit&quot;);</span><br><span class="line">        generateModulesRouterInit(moduleNames);</span><br><span class="line">    &#125; else if (!hasModule) &#123; // 没有使用 @Modules 注解，并且有使用 @Module，生成相应的 RouterInit 文件，使用与单个 moudle</span><br><span class="line">        debug(&quot;generate default RouterInit&quot;);</span><br><span class="line">        generateDefaultRouterInit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 扫描 Route 注解</span><br><span class="line">    Set&lt;? extends Element&gt; elements = roundEnv.getElementsAnnotatedWith(Route.class);</span><br><span class="line">    List&lt;TargetInfo&gt; targetInfos = new ArrayList&lt;&gt;();</span><br><span class="line">    for (Element element : elements) &#123;</span><br><span class="line">        System.out.println(&quot;elements =&quot; + elements);</span><br><span class="line">        // 检查类型</span><br><span class="line">        if (!Utils.checkTypeValid(element)) continue;</span><br><span class="line">        TypeElement typeElement = (TypeElement) element;</span><br><span class="line">        Route route = typeElement.getAnnotation(Route.class);</span><br><span class="line">        targetInfos.add(new TargetInfo(typeElement, route.path()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 根据 module 名字生成相应的 java 文件</span><br><span class="line">    if (!targetInfos.isEmpty()) &#123;</span><br><span class="line">        generateCode(targetInfos, moduleName);</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>，首先判断是否有注解需要处理，没有的话直接返回 <code>annotations == null || annotations.size() == 0</code> 。</p>
<p> 接着我们会判断是否有 <code>@Modules</code> 注解（这种情况是多个 moudle 使用），有的话会调用 <code>generateModulesRouterInit(String[] moduleNames)</code> 方法生成 RouterInit java 文件，当没有 <code>@Modules</code> 注解，并且没有 <code>@Module</code> （这种情况是单个 moudle 使用），会生成默认的 RouterInit 文件。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> private void generateModulesRouterInit(String[] moduleNames) &#123;</span><br><span class="line">    MethodSpec.Builder initMethod = MethodSpec.methodBuilder(&quot;init&quot;)</span><br><span class="line">            .addModifiers(Modifier.PUBLIC, Modifier.FINAL, Modifier.STATIC);</span><br><span class="line">    for (String module : moduleNames) &#123;</span><br><span class="line">        initMethod.addStatement(&quot;RouterMapping_&quot; + module + &quot;.map()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    TypeSpec routerInit = TypeSpec.classBuilder(&quot;RouterInit&quot;)</span><br><span class="line">            .addModifiers(Modifier.PUBLIC, Modifier.FINAL)</span><br><span class="line">            .addMethod(initMethod.build())</span><br><span class="line">            .build();</span><br><span class="line">    try &#123;</span><br><span class="line">        JavaFile.builder(Constants.ROUTE_CLASS_PACKAGE, routerInit)</span><br><span class="line">                .build()</span><br><span class="line">                .writeTo(mFiler);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>假设说我们有”app”,”moudle1” 两个 moudle，那么我们最终生成的代码是这样的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final class RouterInit &#123;</span><br><span class="line">  public static final void init() &#123;</span><br><span class="line">    RouterMapping_app.map();</span><br><span class="line">    RouterMapping_moudle1.map();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们都没有使用 @Moudles 和 @Module 注解，那么生成的 RouterInit 文件大概是这样的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final class RouterInit &#123;</span><br><span class="line">  public static final void init() &#123;</span><br><span class="line">    RouterMapping.map();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这也就是为什么有 stub module 的原因。因为默认情况下，我们需要借助 RouterInit 去初始化 map。如果没有这两个文件，ide 编辑器 在 compile 的时候就会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compileOnly project(path: &#x27;:stub&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2dkdXR4aWFveHUvYmxvZ19waWMvbWFzdGVyLzE5XzA5LzIwMTkxMTIzMTczODQzLnBuZw?x-oss-process=image/format,png"></p>
<p>我们引入的方式是使用 compileOnly，这样的话再生成 jar 的时候，不会包括这两个文件，但是可以在 ide 编辑器中运行。这也是一个小技巧。</p>
<h3 id="Route-注解的处理"><a href="#Route-注解的处理" class="headerlink" title="Route 注解的处理"></a>Route 注解的处理</h3><p>我们回过来看 process 方法连对 Route 注解的处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 扫描 Route 自己注解</span><br><span class="line">Set&lt;? extends Element&gt; elements = roundEnv.getElementsAnnotatedWith(Route.class);</span><br><span class="line">List&lt;TargetInfo&gt; targetInfos = new ArrayList&lt;&gt;();</span><br><span class="line">for (Element element : elements) &#123;</span><br><span class="line">    System.out.println(&quot;elements =&quot; + elements);</span><br><span class="line">    // 检查类型</span><br><span class="line">    if (!Utils.checkTypeValid(element)) continue;</span><br><span class="line">    TypeElement typeElement = (TypeElement) element;</span><br><span class="line">    Route route = typeElement.getAnnotation(Route.class);</span><br><span class="line">    targetInfos.add(new TargetInfo(typeElement, route.path()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 根据 module 名字生成相应的 java 文件</span><br><span class="line">if (!targetInfos.isEmpty()) &#123;</span><br><span class="line">    generateCode(targetInfos, moduleName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先会扫描所有的 Route 注解，并添加到 targetInfos list 当中，接着调用 <code>generateCode</code> 方法生成相应的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private void generateCode(List&lt;TargetInfo&gt; targetInfos, String moduleName) &#123;</span><br><span class="line">      </span><br><span class="line">        MethodSpec.Builder methodSpecBuilder = MethodSpec.methodBuilder(&quot;map&quot;)</span><br><span class="line">//                .addAnnotation(Override.class)</span><br><span class="line">                .addModifiers(Modifier.STATIC)</span><br><span class="line">                .addModifiers(Modifier.PUBLIC);</span><br><span class="line"></span><br><span class="line">//                .addParameter(parameterSpec);</span><br><span class="line">        for (TargetInfo info : targetInfos) &#123;</span><br><span class="line">            methodSpecBuilder.addStatement(&quot;com.xj.router.api.Router.getInstance().add($S, $T.class)&quot;, info.getRoute(), info.getTypeElement());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        TypeSpec typeSpec = TypeSpec.classBuilder(moduleName)</span><br><span class="line">//                .addSuperinterface(ClassName.get(interfaceType))</span><br><span class="line">                .addModifiers(Modifier.PUBLIC)</span><br><span class="line">                .addMethod(methodSpecBuilder.build())</span><br><span class="line">                .addJavadoc(&quot;Generated by Router. Do not edit it!\n&quot;)</span><br><span class="line">                .build();</span><br><span class="line">        try &#123;</span><br><span class="line">            JavaFile.builder(Constants.ROUTE_CLASS_PACKAGE, typeSpec)</span><br><span class="line">                    .build()</span><br><span class="line">                    .writeTo(UtilManager.getMgr().getFiler());</span><br><span class="line">            System.out.println(&quot;generateCode: =&quot; + Constants.ROUTE_CLASS_PACKAGE + &quot;.&quot; + Constants.ROUTE_CLASS_NAME);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(&quot;generateCode:e  =&quot; + e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这个方法主要是使用 javapoet 生成 java 文件，关于 javaposet 的使用可以见<a href="https://github.com/square/javapoet">官网文档</a>,生成的 java 文件是这样的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xj.router.impl;</span><br><span class="line"></span><br><span class="line">import com.xj.arounterdemo.MainActivity;</span><br><span class="line">import com.xj.arounterdemo.OneActivity;</span><br><span class="line">import com.xj.arounterdemo.TwoActivity;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Generated by Router. Do not edit it!</span><br><span class="line"> */</span><br><span class="line">public class RouterMapping_app &#123;</span><br><span class="line">  public static void map() &#123;</span><br><span class="line">    com.xj.router.api.Router.getInstance().add(&quot;activity/main&quot;, MainActivity.class);</span><br><span class="line">    com.xj.router.api.Router.getInstance().add(&quot;activity/one&quot;, OneActivity.class);</span><br><span class="line">    com.xj.router.api.Router.getInstance().add(&quot;activity/two&quot;, TwoActivity.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到我们定义的注解信息，最终都会调用 <code>Router.getInstance().add()</code> 方法存放起来。</p>
<hr>
<h2 id="router-api"><a href="#router-api" class="headerlink" title="router-api"></a>router-api</h2><p>这个 module 主要是多外暴露的 api，最主要的一个文件是 Router。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Router &#123;</span><br><span class="line"></span><br><span class="line">    private static final String TAG = &quot;ARouter&quot;;</span><br><span class="line"></span><br><span class="line">    private static final Router instance = new Router();</span><br><span class="line"></span><br><span class="line">    private Map&lt;String, Class&lt;? extends Activity&gt;&gt; routeMap = new HashMap&lt;&gt;();</span><br><span class="line">    private boolean loaded;</span><br><span class="line"></span><br><span class="line">    private Router() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Router getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void init() &#123;</span><br><span class="line">        if (loaded) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        RouterInit.init();</span><br><span class="line">        loaded = true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们想要初始化  Router 的时候，代用 init 方法即可。 init 方法会先判断是否初始化过，没有初始化过，会调用 RouterInit#init 方法区初始化。</p>
<p>而在 RouterInit#init 中，会调用 RouterMap_{@moduleName}#map 方法初始化，改方法又调用 <code>Router.getInstance().add()</code> 方法，从而完成初始化</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2dkdXR4aWFveHUvYmxvZ19waWMvbWFzdGVyLzE5XzA5LzIwMTkxMTI2MTU0NDAwLnBuZw?x-oss-process=image/format,png"></p>
<h3 id="router-跳转回调"><a href="#router-跳转回调" class="headerlink" title="router 跳转回调"></a>router 跳转回调</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface RouterCallback &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 在跳转 router 之前</span><br><span class="line">     * @param context</span><br><span class="line">     * @param uri</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    boolean beforeOpen(Context context, Uri uri);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 在跳转 router 之后</span><br><span class="line">     * @param context</span><br><span class="line">     * @param uri</span><br><span class="line">     */</span><br><span class="line">    void afterOpen(Context context, Uri uri);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 没有找到改 router</span><br><span class="line">     * @param context</span><br><span class="line">     * @param uri</span><br><span class="line">     */</span><br><span class="line">    void notFind(Context context, Uri uri);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 跳转 router 错误</span><br><span class="line">     * @param context</span><br><span class="line">     * @param uri</span><br><span class="line">     * @param e</span><br><span class="line">     */</span><br><span class="line">    void error(Context context, Uri uri, Throwable e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void navigation(Activity context, int requestCode, Callback callback) &#123;</span><br><span class="line">    beforeOpen(context);</span><br><span class="line">    boolean isFind = false;</span><br><span class="line">    try &#123;</span><br><span class="line">        Activity activity = (Activity) context;</span><br><span class="line">        Intent intent = new Intent();</span><br><span class="line">        intent.setComponent(new ComponentName(context.getPackageName(), mActivityName));</span><br><span class="line">        intent.putExtras(mBundle);</span><br><span class="line">        getFragment(activity)</span><br><span class="line">                .setCallback(callback)</span><br><span class="line">                .startActivityForResult(intent, requestCode);</span><br><span class="line">        isFind = true;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        errorOpen(context, e);</span><br><span class="line">        tryToCallNotFind(e, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (isFind) &#123;</span><br><span class="line">        afterOpen(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void tryToCallNotFind(Exception e, Context context) &#123;</span><br><span class="line">    if (e instanceof ClassNotFoundException &amp;&amp; mRouterCallback != null) &#123;</span><br><span class="line">        mRouterCallback.notFind(context, mUri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主要看 navigation 方法，在跳转 activity 的时候，首先会会调用<br>beforeOpen 方法回调 RouterCallback#beforeOpen。接着 catch exception 的时候，如果发生错误，会调用 errorOpen 方法回调 RouterCallback#errorOpen 方法。同时调用 tryToCallNotFind 方法判断是否是 ClassNotFoundException，是的话回调 RouterCallback#notFind。</p>
<p>如果没有发生 eception，会回调 RouterCallback#afterOpen。</p>
<h3 id="Activity-的-startActivityForResult-回调"><a href="#Activity-的-startActivityForResult-回调" class="headerlink" title="Activity 的 startActivityForResult 回调"></a>Activity 的 startActivityForResult 回调</h3><p>可以看到我们的 Router 也是支持 startActivityForResult 的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Router.getInstance().build(&quot;activity/two&quot;).navigation(this, new Callback() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span><br><span class="line">        Log.i(TAG, &quot;onActivityResult: requestCode=&quot; + requestCode + &quot;;resultCode=&quot; + resultCode + &quot;;data=&quot; + data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>它的实现原理其实很简单，是借助一个空白 fragment 实现的，原理的可以看我之前的这一篇文章。</p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86498647">Android Fragment 的妙用 - 优雅地申请权限和处理 onActivityResult</a></p>
<hr>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>如果觉得效果不错的话，请到 github 上面 star， 谢谢。 <a href="https://github.com/gdutxiaoxu/Router">Router</a></p>
<p>我们的 Router 框架，流程大概是这样的。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2dkdXR4aWFveHUvYmxvZ19waWMvbWFzdGVyLzE5XzA5LzIwMTkxMTI2MTQ1NjA3LnBuZw?x-oss-process=image/format,png"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2dkdXR4aWFveHUvYmxvZ19waWMvbWFzdGVyLzE5XzA5LzIwMTkxMTI2MTU0NDAwLnBuZw?x-oss-process=image/format,png"></p>
<hr>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>看了上面的文章，文章一开头提到的三个问题，你懂了吗，欢迎在评论区留言评论。</p>
<ol>
<li>注解的处理</li>
<li>怎样解决多个 module 之间的依赖问题，以及如何支持多 module 使用</li>
<li>router 跳转及 activty startActivityForResult 的处理</li>
</ol>
<p>其实，现在很多 router 框架都借助 gradle 插件来实现。这样有一个好处，就是在多 moudle 使用的时候，我们只需要 <code>apply plugin</code> 就 ok,对外屏蔽了一些细节。但其实，他的原理跟我们上面的原理都是差不多的。</p>
<p>接下来，我也会写 gradle plugin 相关的文章，并借助 gradle 实现 Router 框架。有兴趣的话可以关注我的微信公众号，徐公码字，谢谢。</p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/68926515">java Type 详解</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/68947735">java 反射机制详解</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/52017033">注解使用入门（一）</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/70244169">Android 自定义编译时注解1 - 简单的例子</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/70822023">Android 编译时注解 —— 语法详解</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/71512754">带你读懂 ButterKnife 的源码</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/86498647">Android Fragment 的妙用 - 优雅地申请权限和处理 onActivityResult</a></p>
<p><a href="https://xujun.blog.csdn.net/article/details/100998987">Android 点九图机制讲解及在聊天气泡中的应用</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/103263744">面试官，怎样实现 Router 框架？</a></p>
<p>扫一扫，欢迎关注我的微信公众号 <strong>stormjun94（徐公码字）</strong>， 目前是一名程序员，不仅分享 Android开发相关知识，同时还分享技术人成长历程，包括个人总结，职场经验，面试经验等，希望能让你少走一点弯路。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS85LzE4LzE2ZDQ0OGIwNzI4ZGQ3MTY?x-oss-process=image/format,png"></p>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义-Behavior-仿新浪微博发现页的实现</title>
    <url>/p/37809.html</url>
    <content><![CDATA[<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/52858598">使用CoordinatorLayout打造各种炫酷的效果</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53453958">自定义Behavior —— 仿知乎，FloatActionButton隐藏与展示</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/71553411">NestedScrolling 机制深入解析</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/71616547"> 一步步带你读懂 CoordinatorLayout 源码</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/71732642">自定义 Behavior -仿新浪微博发现页的实现</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/52939127">ViewPager，ScrollView 嵌套ViewPager滑动冲突解决</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/88383135">自定义 behavior - 完美仿 QQ 浏览器首页，美团商家详情页</a></p>
<p>  <strong>重磅消息：小编我开始运营自己的公众号了， 目前从事于 Android 开发，除了分享 Android开发相关知识，还有职场心得，面试经验，学习心得，人生感悟等等。希望通过该公众号，让你看到程序猿不一样的一面，我们不只会敲代码，我们还会。。。。。。</strong></p>
<p>  <strong>有兴趣的话可以关注我的公众号 徐公码字（stormjun94），或者拿起你的手机扫一扫，期待你的参与</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS85LzE2LzE2ZDM5ZGI0YmUyMjk5MGU?x-oss-process=image/format,png" alt="Android 技术人"></p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>我们先来看一下新浪微博发现页的效果：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS85LzE2LzE2ZDM5ZGI0YmYzMzFjY2E?x-oss-process=image/format,png"></p>
<p>接下来我们在来看一下我们仿照新浪微博实现的效果</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS85LzE2LzE2ZDM5ZGI0YmY0NTFhNDg?x-oss-process=image/format,png" alt="仿新浪微博效果图"></p>
<h2 id="实现思路分析"><a href="#实现思路分析" class="headerlink" title="实现思路分析"></a>实现思路分析</h2><p>我们这里先定义两种状态，open 和  close 状态。</p>
<ul>
<li>open 状态指 Tab+ViewPager 还没有滑动到顶部的时候，header 还 没有被完全移除屏幕的时候</li>
<li>close 状态指 Tab+ViewPager 滑动到顶部的时候，Header 被移除屏幕的时候</li>
</ul>
<p>从效果图，我们可以看到 在 open 状态下，我们向上滑动 ViewPager 里面的 RecyclerView  的 时候，<strong>RecyclerView 并不会向上移动（RecyclerView 的滑动事件交给 外部的容器处理，被被全部消费掉了），而是整个布局（指 Header + Tab +ViewPager）会向上偏移</strong> 。当 Tab 滑动到顶部的时候，我们向上滑动 ViewPager 里面的 RecyclerView 的时候，<strong>RecyclerView  可以正常向上滑动，即此时外部容器没有拦截滑动事件</strong>。</p>
<p>同时我们可以看到在 open 状态的时候，我们是不支持下拉刷新的，这个比较容易实现，监听页面的状态，如果是 open 状态，我们设置 SwipeRefreshLayout setEnabled 为 false，这样不会 拦截事件，在页面 close 的时候，设置 SwipeRefreshLayout setEnabled 为 TRUE，这样就可以支持下拉刷新了。</p>
<p>基于上面的分析，我们这里可以把整个效果划分为两个部分，第一部分为 Header，第二部分为 Tab+ViewPager。<strong>下文统一把第一部分称为 Header，第二部分称为 Content 。</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS85LzE2LzE2ZDM5ZGI0YzA5ZDJjZWU?x-oss-process=image/format,png"></p>
<p>需要实现的效果为：在页面状态为 open 的时候，向上滑动 Header 的时候，整体向上偏移，ViewPager 里面的 RecyclerView 向上滑动的时候，消费其滑动事件，并整体向上移动。在页面状态为 close 的时候，不消耗 RecyclerView  的 滑动事件。</p>
<p>在上一篇博客 <a href="http://blog.csdn.net/gdutxiaoxu/article/details/71616547">一步步带你读懂 CoordinatorLayout 源码</a> 中，我们有提到在 CoordinatorLayout中，我们可以通过 给子 View 自定义 Behavior 来处理事件。它是一个容器，实现了 NestedScrollingParent 接口。它并不会直接处理事件，而是会尽可能地交给子 View 的 Behavior 进行处理。因此，为了减少依赖，<strong>我们把这两部分的关系定义为 Content 依赖于  Header。Header 移动的时候，Content 跟着 移动。所以，我们在处理滑动事件的时候，只需要处理好 Header 部分的 Behavior 就oK了，Content 部分的 Behavior 不需要处理滑动事件，只需依赖于  Header ，跟着做相应的移动即可。</strong></p>
<hr>
<h2 id="Header-部分的实现"><a href="#Header-部分的实现" class="headerlink" title="Header 部分的实现"></a>Header 部分的实现</h2><p>Header 部分实现的两个关键点在于</p>
<ol>
<li>在页面状态为 open 的时候，ViewPager 里面的 RecyclerView 向上滑动的时候，消费其滑动事件，并整体向上移动。在页面状态为 close 的时候，不消耗 RecyclerView  的 滑动事件</li>
<li>在页面状态为 open 的时候，向上滑动 Header 的时候，整体向上偏移。</li>
</ol>
<h3 id="第一个关键点的实现"><a href="#第一个关键点的实现" class="headerlink" title="第一个关键点的实现"></a>第一个关键点的实现</h3><p>这里区分页面状态是 open 还是  close 状态是通过 Header 是否移除屏幕来区分的，即 child.getTranslationY() &#x3D;&#x3D; getHeaderOffsetRange() 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private boolean isClosed(View child) &#123;</span><br><span class="line">    boolean isClosed = child.getTranslationY() == getHeaderOffsetRange();</span><br><span class="line">    return isClosed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在<a href="http://blog.csdn.net/gdutxiaoxu/article/details/71553411">NestedScrolling 机制深入解析</a>博客中，我们对 NestedScrolling 机制做了如下的总结。</p>
<ul>
<li>在 Action_Down 的时候，Scrolling child 会调用 startNestedScroll 方法，通过 childHelper 回调 Scrolling Parent 的 startNestedScroll 方法。 </li>
<li>在 Action_move 的时候，Scrolling Child 要开始滑动的时候，会调用dispatchNestedPreScroll 方法，通过 ChildHelper 询问 Scrolling Parent 是否要先于 Child 进行 滑动，若需要的话，会调用 Parent 的 onNestedPreScroll 方法，协同 Child 一起进行滑动</li>
<li>当 ScrollingChild 滑动完成的时候，会调用 dispatchNestedScroll 方法，通过 ChildHelper 询问 Scrolling Parent 是否需要进行滑动，需要的话，会 调用 Parent 的 onNestedScroll 方法</li>
<li>在 Action_down,Action_move 的时候，会调用 Scrolling Child 的stopNestedScroll ，通过 ChildHelper 询问 Scrolling parent 的 stopNestedScroll 方法。</li>
<li>如果需要处理 Fling 动作，我们可以通过 VelocityTrackerCompat 获得相应的速度，并在 Action_up 的时候，调用 dispatchNestedPreFling 方法，通过 ChildHelper 询问 Parent 是否需要先于 child 进行 Fling 动作<br>在 Child 处理完 Fling 动作时候，如果 Scrolling Parent 还需要处理 Fling 动作，我们可以调用 dispatchNestedFling 方法，通过 ChildHelper ，调用 Parent 的 onNestedFling 方法</li>
</ul>
<p><strong>而 RecyclerView  也是 Scrolling Child （实现了 NestedScrollingChild 接口），RecyclerView 在开始滑动的 时候会先调用  CoordinatorLayout 的 startNestedScroll 方法，而 CoordinatorLayout 会 调用子 View  的 Behavior 的  startNestedScroll 方法。并且只有 boolean startNestedScroll   返回  TRUE 的 时候，才会调用接下里 Behavior 中的 onNestedPreScroll 和 onNestedScroll 方法。</strong></p>
<p>所以，我们在 WeiboHeaderPagerBehavior 的 onStartNestedScroll 方法可以这样写，可以确保 只拦截垂直方向上的滚动事件，且当前状态是打开的并且还可以继续向上收缩的时候还会拦截</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View</span><br><span class="line">        directTargetChild, View target, int nestedScrollAxes) &#123;</span><br><span class="line">    if (BuildConfig.DEBUG) &#123;</span><br><span class="line">        Log.d(TAG, &quot;onStartNestedScroll: nestedScrollAxes=&quot; + nestedScrollAxes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean canScroll = canScroll(child, 0);</span><br><span class="line">    //拦截垂直方向上的滚动事件且当前状态是打开的并且还可以继续向上收缩</span><br><span class="line">    return (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != 0 &amp;&amp; canScroll &amp;&amp;</span><br><span class="line">            !isClosed(child);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>拦截事件之后，我们需要在 RecyclerView 滑动之前消耗事件，并且移动 Header，让其向上偏移。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target,</span><br><span class="line">                              int dx, int dy, int[] consumed) &#123;</span><br><span class="line">    super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);</span><br><span class="line">    //dy&gt;0 scroll up;dy&lt;0,scroll down</span><br><span class="line">    Log.i(TAG, &quot;onNestedPreScroll: dy=&quot; + dy);</span><br><span class="line">    float halfOfDis = dy;</span><br><span class="line">    //    不能滑动了，直接给 Header 设置 终值，防止出错</span><br><span class="line">    if (!canScroll(child, halfOfDis)) &#123;</span><br><span class="line">        child.setTranslationY(halfOfDis &gt; 0 ? getHeaderOffsetRange() : 0);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        child.setTranslationY(child.getTranslationY() - halfOfDis);</span><br><span class="line">    &#125;</span><br><span class="line">    //consumed all scroll behavior after we started Nested Scrolling</span><br><span class="line">    consumed[1] = dy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然，我们也需要处理 Fling 事件，在页面没有完全关闭的 时候，消费所有 fling 事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onNestedPreFling(CoordinatorLayout coordinatorLayout, View child, View target,</span><br><span class="line">                                float velocityX, float velocityY) &#123;</span><br><span class="line">    // consumed the flinging behavior until Closed</span><br><span class="line">    return !isClosed(child);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>至于滑动到顶部的动画，我是通过 mOverScroller + FlingRunnable 来实现的 。完整代码如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class WeiboHeaderPagerBehavior extends ViewOffsetBehavior &#123;</span><br><span class="line">    private static final String TAG = &quot;UcNewsHeaderPager&quot;;</span><br><span class="line">    public static final int STATE_OPENED = 0;</span><br><span class="line">    public static final int STATE_CLOSED = 1;</span><br><span class="line">    public static final int DURATION_SHORT = 300;</span><br><span class="line">    public static final int DURATION_LONG = 600;</span><br><span class="line"></span><br><span class="line">    private int mCurState = STATE_OPENED;</span><br><span class="line">    private OnPagerStateListener mPagerStateListener;</span><br><span class="line"></span><br><span class="line">    private OverScroller mOverScroller;</span><br><span class="line"></span><br><span class="line">    private WeakReference&lt;CoordinatorLayout&gt; mParent;</span><br><span class="line">    private WeakReference&lt;View&gt; mChild;</span><br><span class="line"></span><br><span class="line">    public void setPagerStateListener(OnPagerStateListener pagerStateListener) &#123;</span><br><span class="line">        mPagerStateListener = pagerStateListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public WeiboHeaderPagerBehavior() &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public WeiboHeaderPagerBehavior(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void init() &#123;</span><br><span class="line">        mOverScroller = new OverScroller(BaseAPP.getAppContext());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void layoutChild(CoordinatorLayout parent, View child, int layoutDirection) &#123;</span><br><span class="line">        super.layoutChild(parent, child, layoutDirection);</span><br><span class="line">        mParent = new WeakReference&lt;CoordinatorLayout&gt;(parent);</span><br><span class="line">        mChild = new WeakReference&lt;View&gt;(child);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View</span><br><span class="line">            directTargetChild, View target, int nestedScrollAxes) &#123;</span><br><span class="line">        if (BuildConfig.DEBUG) &#123;</span><br><span class="line">            Log.d(TAG, &quot;onStartNestedScroll: nestedScrollAxes=&quot; + nestedScrollAxes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boolean canScroll = canScroll(child, 0);</span><br><span class="line">        //拦截垂直方向上的滚动事件且当前状态是打开的并且还可以继续向上收缩</span><br><span class="line">        return (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != 0 &amp;&amp; canScroll &amp;&amp;</span><br><span class="line">                !isClosed(child);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onNestedPreFling(CoordinatorLayout coordinatorLayout, View child, View target,</span><br><span class="line">                                    float velocityX, float velocityY) &#123;</span><br><span class="line">        // consumed the flinging behavior until Closed</span><br><span class="line"></span><br><span class="line">        boolean coumsed = !isClosed(child);</span><br><span class="line">        Log.i(TAG, &quot;onNestedPreFling: coumsed=&quot; +coumsed);</span><br><span class="line">        return coumsed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onNestedFling(CoordinatorLayout coordinatorLayout, View child, View target,</span><br><span class="line">                                 float velocityX, float velocityY, boolean consumed) &#123;</span><br><span class="line">        Log.i(TAG, &quot;onNestedFling: velocityY=&quot; +velocityY);</span><br><span class="line">        return super.onNestedFling(coordinatorLayout, child, target, velocityX, velocityY,</span><br><span class="line">                consumed);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean isClosed(View child) &#123;</span><br><span class="line">        boolean isClosed = child.getTranslationY() == getHeaderOffsetRange();</span><br><span class="line">        return isClosed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isClosed() &#123;</span><br><span class="line">        return mCurState == STATE_CLOSED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void changeState(int newState) &#123;</span><br><span class="line">        if (mCurState != newState) &#123;</span><br><span class="line">            mCurState = newState;</span><br><span class="line">            if (mCurState == STATE_OPENED) &#123;</span><br><span class="line">                if (mPagerStateListener != null) &#123;</span><br><span class="line">                    mPagerStateListener.onPagerOpened();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (mPagerStateListener != null) &#123;</span><br><span class="line">                    mPagerStateListener.onPagerClosed();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 表示 Header TransLationY 的值是否达到我们指定的阀值， headerOffsetRange，到达了，返回 false，</span><br><span class="line">    // 否则，返回 true。注意 TransLationY 是负数。</span><br><span class="line">    private boolean canScroll(View child, float pendingDy) &#123;</span><br><span class="line">        int pendingTranslationY = (int) (child.getTranslationY() - pendingDy);</span><br><span class="line">        int headerOffsetRange = getHeaderOffsetRange();</span><br><span class="line">        if (pendingTranslationY &gt;= headerOffsetRange &amp;&amp; pendingTranslationY &lt;= 0) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onInterceptTouchEvent(CoordinatorLayout parent, final View child, MotionEvent</span><br><span class="line">            ev) &#123;</span><br><span class="line"></span><br><span class="line">        boolean closed = isClosed();</span><br><span class="line">        Log.i(TAG, &quot;onInterceptTouchEvent: closed=&quot; + closed);</span><br><span class="line">        if (ev.getAction() == MotionEvent.ACTION_UP &amp;&amp; !closed) &#123;</span><br><span class="line">            handleActionUp(parent,child);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return super.onInterceptTouchEvent(parent, child, ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target,</span><br><span class="line">                                  int dx, int dy, int[] consumed) &#123;</span><br><span class="line">        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);</span><br><span class="line">        //dy&gt;0 scroll up;dy&lt;0,scroll down</span><br><span class="line">        Log.i(TAG, &quot;onNestedPreScroll: dy=&quot; + dy);</span><br><span class="line">        float halfOfDis = dy;</span><br><span class="line">        //    不能滑动了，直接给 Header 设置 终值，防止出错</span><br><span class="line">        if (!canScroll(child, halfOfDis)) &#123;</span><br><span class="line">            child.setTranslationY(halfOfDis &gt; 0 ? getHeaderOffsetRange() : 0);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            child.setTranslationY(child.getTranslationY() - halfOfDis);</span><br><span class="line">        &#125;</span><br><span class="line">        //consumed all scroll behavior after we started Nested Scrolling</span><br><span class="line">        consumed[1] = dy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //    需要注意的是  Header 我们是通过 setTranslationY 来移出屏幕的，所以这个值是负数</span><br><span class="line">    private int getHeaderOffsetRange() &#123;</span><br><span class="line">        return BaseAPP.getInstance().getResources().getDimensionPixelOffset(R.dimen</span><br><span class="line">                .weibo_header_offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void handleActionUp(CoordinatorLayout parent, final View child) &#123;</span><br><span class="line">        if (BuildConfig.DEBUG) &#123;</span><br><span class="line">            Log.d(TAG, &quot;handleActionUp: &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (mFlingRunnable != null) &#123;</span><br><span class="line">            child.removeCallbacks(mFlingRunnable);</span><br><span class="line">            mFlingRunnable = null;</span><br><span class="line">        &#125;</span><br><span class="line">        mFlingRunnable = new FlingRunnable(parent, child);</span><br><span class="line">        if (child.getTranslationY() &lt; getHeaderOffsetRange() / 6.0f) &#123;</span><br><span class="line">            mFlingRunnable.scrollToClosed(DURATION_SHORT);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            mFlingRunnable.scrollToOpen(DURATION_SHORT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void onFlingFinished(CoordinatorLayout coordinatorLayout, View layout) &#123;</span><br><span class="line">        changeState(isClosed(layout) ? STATE_CLOSED : STATE_OPENED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void openPager() &#123;</span><br><span class="line">        openPager(DURATION_LONG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param duration open animation duration</span><br><span class="line">     */</span><br><span class="line">    public void openPager(int duration) &#123;</span><br><span class="line">        View child = mChild.get();</span><br><span class="line">        CoordinatorLayout parent = mParent.get();</span><br><span class="line">        if (isClosed() &amp;&amp; child != null) &#123;</span><br><span class="line">            if (mFlingRunnable != null) &#123;</span><br><span class="line">                child.removeCallbacks(mFlingRunnable);</span><br><span class="line">                mFlingRunnable = null;</span><br><span class="line">            &#125;</span><br><span class="line">            mFlingRunnable = new FlingRunnable(parent, child);</span><br><span class="line">            mFlingRunnable.scrollToOpen(duration);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void closePager() &#123;</span><br><span class="line">        closePager(DURATION_LONG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param duration close animation duration</span><br><span class="line">     */</span><br><span class="line">    public void closePager(int duration) &#123;</span><br><span class="line">        View child = mChild.get();</span><br><span class="line">        CoordinatorLayout parent = mParent.get();</span><br><span class="line">        if (!isClosed()) &#123;</span><br><span class="line">            if (mFlingRunnable != null) &#123;</span><br><span class="line">                child.removeCallbacks(mFlingRunnable);</span><br><span class="line">                mFlingRunnable = null;</span><br><span class="line">            &#125;</span><br><span class="line">            mFlingRunnable = new FlingRunnable(parent, child);</span><br><span class="line">            mFlingRunnable.scrollToClosed(duration);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private FlingRunnable mFlingRunnable;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * For animation , Why not use &#123;@link android.view.ViewPropertyAnimator &#125; to play animation</span><br><span class="line">     * is of the</span><br><span class="line">     * other &#123;@link CoordinatorLayout.Behavior&#125; that depend on this could not receiving the</span><br><span class="line">     * correct result of</span><br><span class="line">     * &#123;@link View#getTranslationY()&#125; after animation finished for whatever reason that i don&#x27;t know</span><br><span class="line">     */</span><br><span class="line">    private class FlingRunnable implements Runnable &#123;</span><br><span class="line">        private final CoordinatorLayout mParent;</span><br><span class="line">        private final View mLayout;</span><br><span class="line"></span><br><span class="line">        FlingRunnable(CoordinatorLayout parent, View layout) &#123;</span><br><span class="line">            mParent = parent;</span><br><span class="line">            mLayout = layout;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void scrollToClosed(int duration) &#123;</span><br><span class="line">            float curTranslationY = ViewCompat.getTranslationY(mLayout);</span><br><span class="line">            float dy = getHeaderOffsetRange() - curTranslationY;</span><br><span class="line">            if (BuildConfig.DEBUG) &#123;</span><br><span class="line">                Log.d(TAG, &quot;scrollToClosed:offest:&quot; + getHeaderOffsetRange());</span><br><span class="line">                Log.d(TAG, &quot;scrollToClosed: cur0:&quot; + curTranslationY + &quot;,end0:&quot; + dy);</span><br><span class="line">                Log.d(TAG, &quot;scrollToClosed: cur:&quot; + Math.round(curTranslationY) + &quot;,end:&quot; + Math</span><br><span class="line">                        .round(dy));</span><br><span class="line">                Log.d(TAG, &quot;scrollToClosed: cur1:&quot; + (int) (curTranslationY) + &quot;,end:&quot; + (int) dy);</span><br><span class="line">            &#125;</span><br><span class="line">            mOverScroller.startScroll(0, Math.round(curTranslationY - 0.1f), 0, Math.round(dy +</span><br><span class="line">                    0.1f), duration);</span><br><span class="line">            start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void scrollToOpen(int duration) &#123;</span><br><span class="line">            float curTranslationY = ViewCompat.getTranslationY(mLayout);</span><br><span class="line">            mOverScroller.startScroll(0, (int) curTranslationY, 0, (int) -curTranslationY,</span><br><span class="line">                    duration);</span><br><span class="line">            start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void start() &#123;</span><br><span class="line">            if (mOverScroller.computeScrollOffset()) &#123;</span><br><span class="line">                mFlingRunnable = new FlingRunnable(mParent, mLayout);</span><br><span class="line">                ViewCompat.postOnAnimation(mLayout, mFlingRunnable);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                onFlingFinished(mParent, mLayout);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            if (mLayout != null &amp;&amp; mOverScroller != null) &#123;</span><br><span class="line">                if (mOverScroller.computeScrollOffset()) &#123;</span><br><span class="line">                    if (BuildConfig.DEBUG) &#123;</span><br><span class="line">                        Log.d(TAG, &quot;run: &quot; + mOverScroller.getCurrY());</span><br><span class="line">                    &#125;</span><br><span class="line">                    ViewCompat.setTranslationY(mLayout, mOverScroller.getCurrY());</span><br><span class="line">                    ViewCompat.postOnAnimation(mLayout, this);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    onFlingFinished(mParent, mLayout);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * callback for HeaderPager &#x27;s state</span><br><span class="line">     */</span><br><span class="line">    public interface OnPagerStateListener &#123;</span><br><span class="line">        /**</span><br><span class="line">         * do callback when pager closed</span><br><span class="line">         */</span><br><span class="line">        void onPagerClosed();</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * do callback when pager opened</span><br><span class="line">         */</span><br><span class="line">        void onPagerOpened();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二个关键点的实现"><a href="#第二个关键点的实现" class="headerlink" title="第二个关键点的实现"></a>第二个关键点的实现</h3><p>在页面状态为 open 的时候，向上滑动 Header 的时候，整体向上偏移。</p>
<p>在第一个关键点的实现上，我们是通过自定义 Behavior 来处理 ViewPager 里面 RecyclerView 的移动的，那我们要怎样监听整个 Header 的滑动了。</p>
<p>那就是重写 LinearLayout，将滑动事件交给 ScrollingParent（这里是CoordinatorLayout） 去处理，CoordinatorLayout 再交给子 View 的 behavior 去处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class NestedLinearLayout extends LinearLayout implements NestedScrollingChild &#123;</span><br><span class="line"></span><br><span class="line">    private static final String TAG = &quot;NestedLinearLayout&quot;;</span><br><span class="line"></span><br><span class="line">    private final int[] offset = new int[2];</span><br><span class="line">    private final int[] consumed = new int[2];</span><br><span class="line"></span><br><span class="line">    private NestedScrollingChildHelper mScrollingChildHelper;</span><br><span class="line">    private int lastY;</span><br><span class="line"></span><br><span class="line">    public NestedLinearLayout(Context context) &#123;</span><br><span class="line">        this(context, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public NestedLinearLayout(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class="line">        this(context, attrs, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public NestedLinearLayout(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">        super(context, attrs, defStyleAttr);</span><br><span class="line">        initData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initData() &#123;</span><br><span class="line">        if (mScrollingChildHelper == null) &#123;</span><br><span class="line">            mScrollingChildHelper = new NestedScrollingChildHelper(this);</span><br><span class="line">            mScrollingChildHelper.setNestedScrollingEnabled(true);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">    public boolean onInterceptTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        switch (event.getAction())&#123;</span><br><span class="line">            case MotionEvent.ACTION_DOWN:</span><br><span class="line">                lastY = (int) event.getRawY();</span><br><span class="line">                // 当开始滑动的时候，告诉父view</span><br><span class="line">                startNestedScroll(ViewCompat.SCROLL_AXIS_HORIZONTAL</span><br><span class="line">                        | ViewCompat.SCROLL_AXIS_VERTICAL);</span><br><span class="line">                break;</span><br><span class="line">            case MotionEvent.ACTION_MOVE:</span><br><span class="line"></span><br><span class="line">                return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return super.onInterceptTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        switch (event.getAction())&#123;</span><br><span class="line">            case MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.i(TAG, &quot;onTouchEvent: ACTION_MOVE=&quot;);</span><br><span class="line">                int y = (int) (event.getRawY());</span><br><span class="line">                int dy =lastY- y;</span><br><span class="line">                lastY = y;</span><br><span class="line">                Log.i(TAG, &quot;onTouchEvent: lastY=&quot; + lastY);</span><br><span class="line">                Log.i(TAG, &quot;onTouchEvent: dy=&quot; + dy);</span><br><span class="line">                //  dy &lt; 0 下拉， dy&gt;0 赏花</span><br><span class="line">                if (dy &gt;0) &#123; // 上滑的时候才交给父类去处理</span><br><span class="line">                    if (startNestedScroll(ViewCompat.SCROLL_AXIS_VERTICAL) // 如果找到了支持嵌套滚动的父类</span><br><span class="line">                            &amp;&amp; dispatchNestedPreScroll(0, dy, consumed, offset)) &#123;//</span><br><span class="line">                        // 父类进行了一部分滚动</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    if (startNestedScroll(ViewCompat.SCROLL_AXIS_VERTICAL) // 如果找到了支持嵌套滚动的父类</span><br><span class="line">                            &amp;&amp; dispatchNestedScroll(0, 0, 0,dy, offset)) &#123;//</span><br><span class="line">                        // 父类进行了一部分滚动</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private NestedScrollingChildHelper getScrollingChildHelper() &#123;</span><br><span class="line">        return mScrollingChildHelper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 接口实现--------------------------------------------------</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setNestedScrollingEnabled(boolean enabled) &#123;</span><br><span class="line">        getScrollingChildHelper().setNestedScrollingEnabled(enabled);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isNestedScrollingEnabled() &#123;</span><br><span class="line">        return getScrollingChildHelper().isNestedScrollingEnabled();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean startNestedScroll(int axes) &#123;</span><br><span class="line">        return getScrollingChildHelper().startNestedScroll(axes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void stopNestedScroll() &#123;</span><br><span class="line">        getScrollingChildHelper().stopNestedScroll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean hasNestedScrollingParent() &#123;</span><br><span class="line">        return getScrollingChildHelper().hasNestedScrollingParent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed,</span><br><span class="line">                                        int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow) &#123;</span><br><span class="line">        return getScrollingChildHelper().dispatchNestedScroll(dxConsumed,</span><br><span class="line">                dyConsumed, dxUnconsumed, dyUnconsumed, offsetInWindow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed,</span><br><span class="line">                                           int[] offsetInWindow) &#123;</span><br><span class="line">        return getScrollingChildHelper().dispatchNestedPreScroll(dx, dy,</span><br><span class="line">                consumed, offsetInWindow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchNestedFling(float velocityX, float velocityY,</span><br><span class="line">                                       boolean consumed) &#123;</span><br><span class="line">        return getScrollingChildHelper().dispatchNestedFling(velocityX,</span><br><span class="line">                velocityY, consumed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchNestedPreFling(float velocityX, float velocityY) &#123;</span><br><span class="line">        return getScrollingChildHelper().dispatchNestedPreFling(velocityX,</span><br><span class="line">                velocityY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Content-部分的实现"><a href="#Content-部分的实现" class="headerlink" title="Content 部分的实现"></a>Content 部分的实现</h2><p>Content 部分的实现也主要有两个关键点</p>
<ul>
<li>整体置于 Header 之下</li>
<li>Content 跟着 Header 移动。即 Header 位置发生变化的时候，Content 也需要随着调整位置。</li>
</ul>
<h3 id="第一个关键点的实现-1"><a href="#第一个关键点的实现-1" class="headerlink" title="第一个关键点的实现"></a>第一个关键点的实现</h3><p>整体置于 Header 之下。这个我们可以参考 APPBarLayout 的 behavior，它是这样处理的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Copy from Android design library</span><br><span class="line"> * &lt;p/&gt;</span><br><span class="line"> * Created by xujun</span><br><span class="line"> */</span><br><span class="line">public abstract class HeaderScrollingViewBehavior extends ViewOffsetBehavior&lt;View&gt; &#123;</span><br><span class="line">    private final Rect mTempRect1 = new Rect();</span><br><span class="line">    private final Rect mTempRect2 = new Rect();</span><br><span class="line"></span><br><span class="line">    private int mVerticalLayoutGap = 0;</span><br><span class="line">    private int mOverlayTop;</span><br><span class="line"></span><br><span class="line">    public HeaderScrollingViewBehavior() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public HeaderScrollingViewBehavior(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onMeasureChild(CoordinatorLayout parent, View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed) &#123;</span><br><span class="line">        final int childLpHeight = child.getLayoutParams().height;</span><br><span class="line">        if (childLpHeight == ViewGroup.LayoutParams.MATCH_PARENT || childLpHeight == ViewGroup.LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            // If the menu&#x27;s height is set to match_parent/wrap_content then measure it</span><br><span class="line">            // with the maximum visible height</span><br><span class="line"></span><br><span class="line">            final List&lt;View&gt; dependencies = parent.getDependencies(child);</span><br><span class="line">            final View header = findFirstDependency(dependencies);</span><br><span class="line">            if (header != null) &#123;</span><br><span class="line">                if (ViewCompat.getFitsSystemWindows(header) &amp;&amp; !ViewCompat.getFitsSystemWindows(child)) &#123;</span><br><span class="line">                    // If the header is fitting system windows then we need to also,</span><br><span class="line">                    // otherwise we&#x27;ll get CoL&#x27;s compatible measuring</span><br><span class="line">                    ViewCompat.setFitsSystemWindows(child, true);</span><br><span class="line"></span><br><span class="line">                    if (ViewCompat.getFitsSystemWindows(child)) &#123;</span><br><span class="line">                        // If the set succeeded, trigger a new layout and return true</span><br><span class="line">                        child.requestLayout();</span><br><span class="line">                        return true;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (ViewCompat.isLaidOut(header)) &#123;</span><br><span class="line">                    int availableHeight = View.MeasureSpec.getSize(parentHeightMeasureSpec);</span><br><span class="line">                    if (availableHeight == 0) &#123;</span><br><span class="line">                        // If the measure spec doesn&#x27;t specify a size, use the current height</span><br><span class="line">                        availableHeight = parent.getHeight();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    final int height = availableHeight - header.getMeasuredHeight() + getScrollRange(header);</span><br><span class="line">                    final int heightMeasureSpec = View.MeasureSpec.makeMeasureSpec(height,</span><br><span class="line">                            childLpHeight == ViewGroup.LayoutParams.MATCH_PARENT ? View.MeasureSpec.EXACTLY : View.MeasureSpec.AT_MOST);</span><br><span class="line"></span><br><span class="line">                    // Now measure the scrolling view with the correct height</span><br><span class="line">                    parent.onMeasureChild(child, parentWidthMeasureSpec, widthUsed, heightMeasureSpec, heightUsed);</span><br><span class="line"></span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void layoutChild(final CoordinatorLayout parent, final View child, final int layoutDirection) &#123;</span><br><span class="line">        final List&lt;View&gt; dependencies = parent.getDependencies(child);</span><br><span class="line">        final View header = findFirstDependency(dependencies);</span><br><span class="line"></span><br><span class="line">        if (header != null) &#123;</span><br><span class="line">            final CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) child.getLayoutParams();</span><br><span class="line">            final Rect available = mTempRect1;</span><br><span class="line">            available.set(parent.getPaddingLeft() + lp.leftMargin, header.getBottom() + lp.topMargin,</span><br><span class="line">                    parent.getWidth() - parent.getPaddingRight() - lp.rightMargin,</span><br><span class="line">                    parent.getHeight() + header.getBottom() - parent.getPaddingBottom() - lp.bottomMargin);</span><br><span class="line"></span><br><span class="line">            final Rect out = mTempRect2;</span><br><span class="line">            GravityCompat.apply(resolveGravity(lp.gravity), child.getMeasuredWidth(), child.getMeasuredHeight(), available, out, layoutDirection);</span><br><span class="line"></span><br><span class="line">            final int overlap = getOverlapPixelsForOffset(header);</span><br><span class="line"></span><br><span class="line">            child.layout(out.left, out.top - overlap, out.right, out.bottom - overlap);</span><br><span class="line">            mVerticalLayoutGap = out.top - header.getBottom();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // If we don&#x27;t have a dependency, let super handle it</span><br><span class="line">            super.layoutChild(parent, child, layoutDirection);</span><br><span class="line">            mVerticalLayoutGap = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    float getOverlapRatioForOffset(final View header) &#123;</span><br><span class="line">        return 1f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final int getOverlapPixelsForOffset(final View header) &#123;</span><br><span class="line">        return mOverlayTop == 0</span><br><span class="line">                ? 0</span><br><span class="line">                : MathUtils.constrain(Math.round(getOverlapRatioForOffset(header) * mOverlayTop),</span><br><span class="line">                0, mOverlayTop);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static int resolveGravity(int gravity) &#123;</span><br><span class="line">        return gravity == Gravity.NO_GRAVITY ? GravityCompat.START | Gravity.TOP : gravity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract View findFirstDependency(List&lt;View&gt; views);</span><br><span class="line"></span><br><span class="line">    protected int getScrollRange(View v) &#123;</span><br><span class="line">        return v.getMeasuredHeight();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The gap between the top of the scrolling view and the bottom of the header layout in pixels.</span><br><span class="line">     */</span><br><span class="line">    final int getVerticalLayoutGap() &#123;</span><br><span class="line">        return mVerticalLayoutGap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Set the distance that this view should overlap any &#123;@link AppBarLayout&#125;.</span><br><span class="line">     *</span><br><span class="line">     * @param overlayTop the distance in px</span><br><span class="line">     */</span><br><span class="line">    public final void setOverlayTop(int overlayTop) &#123;</span><br><span class="line">        mOverlayTop = overlayTop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns the distance that this view should overlap any &#123;@link AppBarLayout&#125;.</span><br><span class="line">     */</span><br><span class="line">    public final int getOverlayTop() &#123;</span><br><span class="line">        return mOverlayTop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个基类的代码还是很好理解的，因为之前就说过了，正常来说被依赖的 View 会优先于依赖它的 View 处理，所以需要依赖的 View 可以在 measure&#x2F;layout 的时候，找到依赖的 View 并获取到它的测量&#x2F;布局的信息，这里的处理就是依靠着这种关系来实现的.</p>
<p>我们的实现类，需要重写的除了抽象方法 findFirstDependency 外，还需要重写 getScrollRange，我们把 Header<br>的 Id id_weibo_header 定义在 ids.xml 资源文件内，方便依赖的判断.</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS85LzE2LzE2ZDM5ZGI0YzI1ZWZiMTA?x-oss-process=image/format,png"></p>
<p>至于缩放的高度，根据 结果图 得知是 0，得出如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private int getFinalHeight() &#123;</span><br><span class="line">     Resources resources = BaseAPP.getInstance().getResources();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected int getScrollRange(View v) &#123;</span><br><span class="line">        if (isDependOn(v)) &#123;</span><br><span class="line">            return Math.max(0, v.getMeasuredHeight() - getFinalHeight());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return super.getScrollRange(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="第二个关键点的实现："><a href="#第二个关键点的实现：" class="headerlink" title="第二个关键点的实现："></a>第二个关键点的实现：</h3><p>Content 跟着 Header 移动。即 Header 位置发生变化的时候，Content 也需要随着调整位置。</p>
<p>主要的逻辑就是 在 layoutDependsOn 方法里面，判断 dependcy  是不是 HeaderView  ，是的话，返回TRUE，这样在 Header 位置发生变化的时候，会回调 onDependentViewChanged 方法，在该方法里面，做相应的偏移。TranslationY 是根据比例算出来的   translationY &#x3D; (int) (-dependencyTranslationY &#x2F; (getHeaderOffsetRange() * 1.0f) * getScrollRange(dependency));</p>
<p>完整代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class WeiboContentBehavior extends HeaderScrollingViewBehavior &#123;</span><br><span class="line">    private static final String TAG = &quot;WeiboContentBehavior&quot;;</span><br><span class="line"></span><br><span class="line">    public WeiboContentBehavior() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public WeiboContentBehavior(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean layoutDependsOn(CoordinatorLayout parent, View child, View dependency) &#123;</span><br><span class="line">        return isDependOn(dependency);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onDependentViewChanged(CoordinatorLayout parent, View child, View dependency) &#123;</span><br><span class="line">        if (BuildConfig.DEBUG) &#123;</span><br><span class="line">            Log.d(TAG, &quot;onDependentViewChanged&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        offsetChildAsNeeded(parent, child, dependency);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void offsetChildAsNeeded(CoordinatorLayout parent, View child, View dependency) &#123;</span><br><span class="line">        float dependencyTranslationY = dependency.getTranslationY();</span><br><span class="line">        int translationY = (int) (-dependencyTranslationY / (getHeaderOffsetRange() * 1.0f) * </span><br><span class="line">                getScrollRange(dependency));</span><br><span class="line">        Log.i(TAG, &quot;offsetChildAsNeeded: translationY=&quot; + translationY);</span><br><span class="line">        child.setTranslationY(translationY);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected View findFirstDependency(List&lt;View&gt; views) &#123;</span><br><span class="line">        for (int i = 0, z = views.size(); i &lt; z; i++) &#123;</span><br><span class="line">            View view = views.get(i);</span><br><span class="line">            if (isDependOn(view)) return view;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected int getScrollRange(View v) &#123;</span><br><span class="line">        if (isDependOn(v)) &#123;</span><br><span class="line">            return Math.max(0, v.getMeasuredHeight() - getFinalHeight());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return super.getScrollRange(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int getHeaderOffsetRange() &#123;</span><br><span class="line">        return BaseAPP.getInstance().getResources().getDimensionPixelOffset(R.dimen</span><br><span class="line">                .weibo_header_offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int getFinalHeight() &#123;</span><br><span class="line">        Resources resources = BaseAPP.getInstance().getResources();</span><br><span class="line"></span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean isDependOn(View dependency) &#123;</span><br><span class="line">        return dependency != null &amp;&amp; dependency.getId() == R.id.id_weibo_header;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><ul>
<li>NestedScrolling 机制，对比传统的事件分发机制真的很强大。这种仿新浪微博发现页效果， 如果用传统的事件分发机制来做，估计很难实现，处理起来会有一大堆坑。</li>
<li>看完了这种仿新浪微博发现页的效果，你是不是学到了什么?如果让你 模仿 仿 QQ 浏览器首页效果，你能实现话。</li>
</ul>
<p>最后，特别感谢写这篇博客 <a href="http://www.jianshu.com/p/f7989a2a3ec2">自定义Behavior的艺术探索-仿UC浏览器主页</a> 的开发者，没有这篇博客作为参考，这种效果我很大几率是实现 不了的。大家觉得效果还不错的话，顺手到 github 上面给我 star，谢谢。<a href="https://github.com/gdutxiaoxu/CoordinatorLayoutExample">github 地址</a></p>
<hr>
<p>参考文章：</p>
<p><a href="http://www.jianshu.com/p/f7989a2a3ec2">自定义Behavior的艺术探索-仿UC浏览器主页</a></p>
<p><a href="https://github.com/gdutxiaoxu/CoordinatorLayoutExample">github 地址</a></p>
<p>最后的最后，卖一下广告，欢迎大家关注我的微信公众号 徐公码字，扫一扫下方二维码或搜索微信号 stormjun94，即可关注。 目前专注于 Android 开发，主要分享 Android开发相关知识和一些相关的优秀文章，包括个人总结，职场经验等。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS85LzE2LzE2ZDM5ZGI0YzM2YmMyMDc?x-oss-process=image/format,png"></p>
]]></content>
  </entry>
  <entry>
    <title>2023 年idea 激活失效？ 提醒key is  invalid，解决方法都在这里了</title>
    <url>/p/40017.html</url>
    <content><![CDATA[<p>JetBrains 系列产品（IDEA、Pycharm 等）使用本站破解教程 (不论是执行激活脚本自动引入破解补丁，还是手动引入补丁)，在输入激活码时，部分小伙伴反应说提示 <code>Key is invalid</code> 无法激活, 如下图所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-0370.jpeg" alt="img"></p>
<h2 id="常见错误-不行再一个个排查）"><a href="#常见错误-不行再一个个排查）" class="headerlink" title="常见错误 (不行再一个个排查）"></a>常见错误 (不行再一个个排查）</h2><h3 id="1-记得执行以下脚本，不要出现中文路径"><a href="#1-记得执行以下脚本，不要出现中文路径" class="headerlink" title="1. 记得执行以下脚本，不要出现中文路径"></a>1. 记得执行以下脚本，不要出现中文路径</h3><p><a href="https://blog.junxu666.top/p/7624.html">2023 年 Pycharm 最新激活码_破解教程，亲测有用，永久有效</a></p>
<p><a href="https://blog.junxu666.top/p/29666.html">2023 IDEA 2022.3.2 最新激活教程、亲测有效</a></p>
<p>如果你按照我的文章  <a href="https://blog.junxu666.top/p/29666.html">2023 IDEA 2022.3.2 最新激活教程、亲测有效</a>，一步步执行，还是无法激活，可以优先试一下这个方法</p>
<p>第一：除把补丁复制到地址改配置文件外，进入到scripts目录下执行对应系统的脚本,</p>
<ul>
<li>windows 是执行 install-current-user.vbs 脚本</li>
<li>mac 是 install.sh 脚本</li>
</ul>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042104-9f40.png" alt="image-20230404213610710"></p>
<p><strong>执行完脚本记得重启</strong>,一定要重启软件，一定要重启软件</p>
<p>脚本运行后<strong>重新打开软件</strong>，重新输入激活码，不再出现Key is invalid，成功破解, </p>
<p><strong>同时记得不要出现中文路径和空格，百分九十的人就是不认真看教程，路径出现了中文和空格。</strong></p>
<h3 id="2、检查复制激活码时，是否缺漏"><a href="#2、检查复制激活码时，是否缺漏" class="headerlink" title="2、检查复制激活码时，是否缺漏"></a><strong>2、检查复制激活码时，是否缺漏</strong></h3><p>详细检查复制激活码的时候，是否缺漏，激活码是固定的，少一个字母都不行。</p>
<p>有时候因为网页复制过来的原因，激活码会错误，，有时候显示多行</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042104-eb6b.png" alt="image-20230404214622521"></p>
<p>导致激活不了，正确的激活码复制到 sublime 显示，应该是只有一行</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042104-650b.png" alt="image-20230404214814107"></p>
<p><strong>如果还不行，换一个新的激活码，新的激活码都在这里</strong></p>
<p><a href="https://blog.junxu666.top/p/46415.html"><strong>2023 年Jebrain 产品激活码（包括 idea，pycharm，datagrip 等）</strong></a></p>
<p><a href="https://blog.junxu666.top/p/46415.html"><strong>2023 年Jebrain 产品激活码（包括 idea，pycharm，datagrip 等）</strong></a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-10ed.png" alt="img"></p>
<h3 id="3、尝试降低一个小版本试试"><a href="#3、尝试降低一个小版本试试" class="headerlink" title="3、尝试降低一个小版本试试"></a><strong>3、尝试降低一个小版本试试</strong></h3><p>部分群里小伙伴反馈说，下载了小版本的 IDE, 再使用教程才 OK 了，比如 <code>2022.2.3</code> 版本降低到 <code>2022.2.2</code> 或者 <code>2022.2.1</code> 等小一点的版本，这种方法也可尝试一下~</p>
<p><strong>IDEA官方历史版本下载</strong></p>
<p><a href="https://www.jetbrains.com/idea/download/other.html">https://www.jetbrains.com/idea/download/other.html</a></p>
<h2 id="最新补丁和激活码"><a href="#最新补丁和激活码" class="headerlink" title="最新补丁和激活码"></a>最新补丁和激活码</h2><p>公众号 <strong>徐公</strong> 回复 <strong>idea2</strong>，即可获取</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-596a.png" alt="img"></p>
<h2 id="导致-Key-is-invalid-可能的原因汇总"><a href="#导致-Key-is-invalid-可能的原因汇总" class="headerlink" title="导致 Key is invalid 可能的原因汇总"></a><strong>导致</strong> <code>Key is invalid</code> <strong>可能的原因汇总</strong></h2><hr>
<p>这边汇总了小伙伴们反馈给我的，可能导致 <code>Key is invalid</code> 的原因，总之，五花八门，可对照查看是否犯有同样的错误：</p>
<h3 id="必看"><a href="#必看" class="headerlink" title="必看"></a>必看</h3><p><a href="https://blog.junxu666.top/p/10778.html">2023 年 Pycharm 最新激活码_破解教程，亲测有用，永久有效</a></p>
<p><a href="https://blog.junxu666.top/p/29666.html">2023 IDEA 2022.3.2 最新激活教程、亲测有效</a></p>
<p>如果你按照我的文章  <a href="https://blog.junxu666.top/p/29666.html">2023 IDEA 2022.3.2 最新激活教程、亲测有效</a>，一步步执行，还是无法激活，可以优先试一下这个方法</p>
<p>除把补丁复制到地址改配置文件外，进入到scripts目录下执行对应系统的脚本</p>
<p>脚本运行后重新打开软件输入激活码，不再出现Key is invalid，成功破解</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-d854.png" alt="img"></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-a874.png" alt="img"></p>
<h3 id="1、请勿登录-JetBrains-账号"><a href="#1、请勿登录-JetBrains-账号" class="headerlink" title="1、请勿登录 JetBrains 账号"></a><strong>1、请勿登录 JetBrains 账号</strong></h3><p><strong>使用本站教程的破解补丁，切记无需登录 JetBrains 账号：</strong></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-6b95.jpeg" alt="img"></p>
<p>使用破解补丁，无需登录 JetBrains 账号</p>
<h3 id="2、安装过老版本-IDE，-但是未卸载干净"><a href="#2、安装过老版本-IDE，-但是未卸载干净" class="headerlink" title="2、安装过老版本 IDE， 但是未卸载干净"></a><strong>2、安装过老版本 IDE， 但是未卸载干净</strong></h3><p>安装过老版本 IDE，但是没有卸载干净，这其中包括一些<em><strong>缓存目录、注册表未删除干净</strong></em>，可能会导致出现 <code>key is invalid</code>, 这里拿 IDEA 举例，其他如 Pycharm 、Webstorm 等也会出现这样的情况。</p>
<p>此情况笔者在 Mac Intel 芯片电脑上安装 IDEA 就亲身踩坑了，因为 IDEA 没卸载干净，导致无法激活成功，彻底卸载 IDEA 后，再重新按教程来就激活成功了。</p>
<h3 id="3、确认激活脚本是否执行成功？"><a href="#3、确认激活脚本是否执行成功？" class="headerlink" title="3、确认激活脚本是否执行成功？"></a><strong>3、确认激活脚本是否执行成功？</strong></h3><p>部分小伙伴使用的 <a href="https://www.quanxiaoha.com/article/idea-pojie.html"><em><strong>激活脚本 + 激活码（全自动模式）</strong></em></a> 这种方式，执行脚本后，提示 <code>Done</code> 才表示成功：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-10ed.jpeg" alt="img"></p>
<p>补丁执行成功后，提示 Done</p>
<p>执行脚本后，会添加相关环境变量，比如 IDEA 会添加 <code>IDEA_VM_OPTIONS</code>, 如下图所示：</p>
<p>以及在 <code>/jetbra/vmoptions</code> 文件夹中对应的 <code>.vmoptions</code> 配置文件中引入破解补丁的绝对路径，比如，你要激活的是 IDEA，那么会在对应的 <code>idea.vmoptions</code> 文件中引入补丁，如下图所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-a8f6.jpeg" alt="img"></p>
<p>所以，<strong>上面两点都需要确认是否正确添加，成功添加了，才表示脚本执行成功了，另外，补丁路径不能包含中文以及空格等特殊字符</strong>。</p>
<h3 id="4、只单独引用了破解补丁，其他相关破解文件丢失了"><a href="#4、只单独引用了破解补丁，其他相关破解文件丢失了" class="headerlink" title="4、只单独引用了破解补丁，其他相关破解文件丢失了"></a><strong>4、只单独引用了破解补丁，其他相关破解文件丢失了</strong></h3><p>部分小伙伴使用的 <a href="https://www.quanxiaoha.com/article/idea-jihuoma.html"><em><strong>破解补丁 + 激活码（手动引用补丁）</strong></em></a> 这种方式，结果不仔细看教程，激活过程中只单独复制了 <code>ja-netfilter.jar</code> 一个文件，结果输入激活码时报 <code>Key is invalid</code>, <strong>注意是所在的整个文件夹都需要复制，然后再引用补丁，而不是仅仅复制一个</strong> <code>ja-netfilter.jar</code> <strong>文件</strong>；</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-4db7.jpeg" alt="img"></p>
<p>复制整个破解补丁文件夹</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/CT4Q2BAAK4.jpeg" alt="img"></p>
<h3 id="5、引用格式不正确、路径中包含空格和中文"><a href="#5、引用格式不正确、路径中包含空格和中文" class="headerlink" title="5、引用格式不正确、路径中包含空格和中文"></a><strong>5、引用格式不正确、路径中包含空格和中文</strong></h3><p>注意，使用手动引用破解补丁这种方式的，配置文件中，引用补丁必须以 <code>-javaagent:</code> 开头，后面跟着补丁的绝对路径，开头不能丢，否则无法引用破解补丁成功；</p>
<p>检查引用的补丁路径中<strong>不能包含空格和中文，需要全英文才行</strong>；</p>
<h3 id="6、重启大法好"><a href="#6、重启大法好" class="headerlink" title="6、重启大法好"></a><strong>6、重启大法好</strong></h3><p>部分小伙伴反馈说重启系统后，才激活成功的，这种法子也可以尝试一下；</p>
<h3 id="7、补丁位置被挪动"><a href="#7、补丁位置被挪动" class="headerlink" title="7、补丁位置被挪动"></a><strong>7、补丁位置被挪动</strong></h3><p>检查破解补丁的位置是否动了，切记不要乱动，不然重启 IDE 又找不到补丁位置了，自然就失败了；</p>
<h3 id="8、补丁未使用公众号最新的补丁"><a href="#8、补丁未使用公众号最新的补丁" class="headerlink" title="8、补丁未使用公众号最新的补丁"></a><strong>8、补丁未使用公众号最新的补丁</strong></h3><p>还有这种情况：有的小伙伴之前通过本站激活成功了，想破解最新版本的 IDE, 因为不知道补丁已经换了，虽然补丁名字一样，于是没换补丁，只重新输入了激活码，结果显示 <code>Key is invalid</code>, <strong>请使用公众号最新补丁，虽然补丁名字可能一样</strong>。公众号 <strong>徐公</strong>，回复 <strong>idea2</strong></p>
<h3 id="10、尝试降低一个小版本试试"><a href="#10、尝试降低一个小版本试试" class="headerlink" title="10、尝试降低一个小版本试试"></a><strong>10、尝试降低一个小版本试试</strong></h3><p>部分群里小伙伴反馈说，下载了小版本的 IDE, 再使用教程才 OK 了，比如 <code>2022.2.3</code> 版本降低到 <code>2022.2.2</code> 或者 <code>2022.2.1</code> 等小一点的版本，这种方法也可尝试一下~</p>
<p><strong>IDEA官方历史版本下载</strong></p>
<p><a href="https://www.jetbrains.com/idea/download/other.html">https://www.jetbrains.com/idea/download/other.html</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-7eaa.png" alt="img"></p>
<h3 id="11、检查复制激活码时，是否缺漏"><a href="#11、检查复制激活码时，是否缺漏" class="headerlink" title="11、检查复制激活码时，是否缺漏"></a><strong>11、检查复制激活码时，是否缺漏</strong></h3><p>详细检查复制激活码的时候，是否缺漏，激活码是固定的，少一个字母都不行。如果还不行，换一个新的激活码</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-de81.png" alt="img"></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-4717.png" alt="img"></p>
<h2 id="最新补丁和激活码-1"><a href="#最新补丁和激活码-1" class="headerlink" title="最新补丁和激活码"></a>最新补丁和激活码</h2><p>公众号 <strong>徐公</strong> 回复 <strong>idea2</strong>，即可获取</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-0e04.png" alt="img"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>AsyncTask 使用及封装实践</title>
    <url>/p/62072.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/52000680">IntentService使用及源码分析</a> </p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/52060291">HandlerThread源码分析</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/57409326">AsyncTask使用及封装实践</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/57416380">AsyncTask源码分析</a></p>
<p>这篇博客主要是讲解AsyncTask的使用及封装实践，对于新手们还是有很大的参考意义的，尤其是AsyncTask的封装实践这部分。对于老鸟们，你们可以跳过了。同时需要声明的一点是，下面下载的例子只是进行简单的下载而已，并没有支持断点续传下载。需要的话请自行到github上面找相应的库，因为这并不是本篇博客的重点。</p>
<p>这篇博客主要讲解以下问题：</p>
<ul>
<li>AsyncTask的简单使用</li>
<li>AsyncTask的封装使用</li>
<li>AsyncTask使用注意事项</li>
</ul>
<hr>
<h2 id="AsyncTask的使用例子"><a href="#AsyncTask的使用例子" class="headerlink" title="AsyncTask的使用例子"></a>AsyncTask的使用例子</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>AsyncTask ，异步任务。没错，就想字面上理解的那样。它允许我们在子线程执行耗时任务，在UI 线程更新操作（如更新进度条等）。简单来说，就是帮我们做好了子线程与UI 线程的通讯，我们只需要调用响应的方法实现即可。底层是用Handler消息机制实现的。</p>
<p>在Android开发中，我们经常需要下载各种东西，为了给用户较好的体验，我们经常需要显示下载进度。今天我们用以这个为例子，来教大家怎样使用AsyncTak。当然，github上面有很多开源库，实现断点下载，文件重命名等。不过这些不是本篇博客的重点。</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/4c5a1691828bd45549e1c3ca1824118a.gif"></p>
<h3 id="AsyncTask的主要几个方法"><a href="#AsyncTask的主要几个方法" class="headerlink" title="AsyncTask的主要几个方法"></a>AsyncTask的主要几个方法</h3><ul>
<li>Void onPreExecute()</li>
</ul>
<p>在task 任务开始执行的时候调用，在doInBackground(Params… params)方法之前调用，在主线程中执行</p>
<ul>
<li>Result doInBackground(Params… params)</li>
</ul>
<p>主要用来执行耗时操作，在子线程中执行，Params为我们参数的类型。而Result这个泛型，是我们返回的类型（<strong>可以是Integer，Long，String等等类型，只要不是八种基本类型就OK</strong>），同时 Result 的类型将作为 onPostExecute(Result result)的参数。</p>
<ul>
<li>Void onProgressUpdate(Progress… values)</li>
</ul>
<p> Runs on the UI thread after publishProgress(Progress…) is invoked. 当我们调用 publishProgress（）方法的时候，会调用 onProgressUpdate（）这个方法</p>
<ul>
<li><p>Void onPostExecute(Result result)<br> 在doInBackground（）方法执行完毕之后，会调用这个方法，是在主线程中执行的。<strong>但如果我们手动调用了cancelled()方法，那么这个方法将不会被调用。</strong></p>
</li>
<li><p>void onCancelled()</p>
</li>
</ul>
<p>在Task 任务取消的时候会调用</p>
<ul>
<li>execute(Params… params)</li>
</ul>
<p>Executes the task with the specified parameters.当我们调用这个方法的时候，会执行任务</p>
<ul>
<li>executeOnExecutor(Executor exec, Params… params)</li>
</ul>
<p>在指定的线程池里面执行Task</p>
<p><strong>需要注意的是，Params，Progress，Result 并不是一种特定的类型，它其实是泛型，它支持除了八种基本类型之外的类型，跟普通的泛型一样。</strong></p>
<h3 id="AsyncTask使用的几个步骤"><a href="#AsyncTask使用的几个步骤" class="headerlink" title="AsyncTask使用的几个步骤"></a>AsyncTask使用的几个步骤</h3><p>这里我们以下载一个apk为例讲解</p>
<ol>
<li>写一个类继承AsyncTask，并传入Params，Progress，Result 。三个参数的类型。</li>
</ol>
<p>比如我们传入的 Params，Progress，Result 的参数的类型分别为 Void, FileInfo, FileInfo，那我们可以这样写。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private class MyDownloadTask extends AsyncTask&lt;Void, FileInfo, FileInfo&gt;&#123;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>那Void, FileInfo, FileInfo，这几个参数的类型在哪里体现出来呢？</p>
<p>请看下面注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private class MyDownloadTask extends AsyncTask&lt;Void, FileInfo, FileInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">   ---</span><br><span class="line">  </span><br><span class="line">   // 方法参数的类型为Void，跟我们传入的Void一致，返回类型为 FileInfo ，跟我们传入Result的类型FileInfo一致</span><br><span class="line">    @Override</span><br><span class="line">    protected FileInfo doInBackground(Void... params) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   // 方法参数类型为FileInfo，跟我们传入Progress的类型FileInfo一致</span><br><span class="line">    @Override</span><br><span class="line">    protected void onProgressUpdate(FileInfo... values) &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   // 方法参数FileInfo，跟我们传入Result的类型FileInfo一致</span><br><span class="line">    @Override</span><br><span class="line">    protected void onPostExecute(FileInfo fileInfo) &#123;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果我们更新进度的话，需要重写 onProgressUpdate（）方法，并在doInBackground（）方法里面调用publishProgress（）方法</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected FileInfo doInBackground(Void... params) &#123;</span><br><span class="line">   </span><br><span class="line">   publishProgress(fileInfo);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onProgressUpdate(FileInfo... values) &#123;</span><br><span class="line">    super.onProgressUpdate(values);</span><br><span class="line">    refreshProgress(values[0]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>当我们调用execute(Params… params) 或者 executeOnExecutor(Executor exec, Params… params) 方法的时候，Task将被防盗相应的 Executor 执行。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyDownloadTask myDownloadTask = new MyDownloadTask(mDownloadUrl, mDstPath);</span><br><span class="line">myDownloadTask.execute();</span><br></pre></td></tr></table></figure>

<p>完整的Task代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private class MyDownloadTask extends AsyncTask&lt;Void, FileInfo, FileInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">    String mDownLoadUrl;</span><br><span class="line">    String mDstPath;</span><br><span class="line"></span><br><span class="line">    public MyDownloadTask(String downloadUrl, String dstPath) &#123;</span><br><span class="line">        this.mDownLoadUrl = downloadUrl;</span><br><span class="line">        this.mDstPath = dstPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onPreExecute() &#123;</span><br><span class="line">        super.onPreExecute();</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected FileInfo doInBackground(Void... params) &#123;</span><br><span class="line">        //url字符串，检查网址是否已http:// 开头</span><br><span class="line">        mDownLoadUrl = (mDownLoadUrl.startsWith(&quot;http://&quot;)) ? mDownLoadUrl : &quot;http://&quot; +</span><br><span class="line">                mDownLoadUrl;</span><br><span class="line">        Log.d(TAG, &quot;doInBackground: mDownLoadUrl=&quot; + mDownLoadUrl);</span><br><span class="line">        Log.d(TAG, &quot;doInBackground: mDstPath=&quot; + mDstPath);</span><br><span class="line">        URL url = null;</span><br><span class="line">        FileInfo fileInfo = null;</span><br><span class="line">        int contentLength = -1;</span><br><span class="line">        int downloadLength = 0;</span><br><span class="line">        OutputStream output = null;</span><br><span class="line">        InputStream istream = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            url = new URL(mDownLoadUrl);</span><br><span class="line">            //打开到url的连接</span><br><span class="line">            HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">            contentLength = connection.getContentLength();</span><br><span class="line">            Log.i(TAG, &quot;doInBackground: contentLength=&quot; + contentLength);</span><br><span class="line">            //O部分，大体来说就是先检查文件夹是否存在，不存在则创建</span><br><span class="line">            istream = connection.getInputStream();</span><br><span class="line">            String filename = mDownLoadUrl.substring(mDownLoadUrl.lastIndexOf(&quot;/&quot;) + 1);</span><br><span class="line"></span><br><span class="line">            File dir = new File(mDstPath);</span><br><span class="line">            if (!dir.exists()) &#123;</span><br><span class="line">                dir.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            File file = new File(mDstPath + filename);</span><br><span class="line">            // 如果存在同名文件，重命名</span><br><span class="line">            if (file.exists()) &#123;</span><br><span class="line">                file = FileUtils.rename(file.getPath());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            output = new FileOutputStream(file);</span><br><span class="line">            byte[] buffer = new byte[1024 * 4];</span><br><span class="line">            int count = 0;</span><br><span class="line">            int len = -1;</span><br><span class="line">            while ((len = istream.read(buffer)) != -1) &#123;</span><br><span class="line">                output.write(buffer, 0, len);</span><br><span class="line">                downloadLength += len;</span><br><span class="line"></span><br><span class="line">                if (count == 10) &#123;</span><br><span class="line">                    fileInfo = new FileInfo(contentLength, downloadLength, file, file.getPath</span><br><span class="line">                            (), file.getName());</span><br><span class="line">                    publishProgress(fileInfo);</span><br><span class="line">                    count = 0;</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            //                有可能count还没有走到10</span><br><span class="line">            fileInfo = new FileInfo(contentLength, downloadLength, file, file.getPath(), file</span><br><span class="line">                    .getName());</span><br><span class="line">            publishProgress(fileInfo);</span><br><span class="line">            output.flush();</span><br><span class="line">            output.close();</span><br><span class="line">            istream.close();</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            try &#123;</span><br><span class="line">                IOUtils.close(output);</span><br><span class="line">                IOUtils.close(istream);</span><br><span class="line">            &#125; catch (IOException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                IOUtils.close(output);</span><br><span class="line">                IOUtils.close(istream);</span><br><span class="line">            &#125; catch (IOException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return fileInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onProgressUpdate(FileInfo... values) &#123;</span><br><span class="line">        super.onProgressUpdate(values);</span><br><span class="line">        refreshProgress(values[0]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onPostExecute(FileInfo fileInfo) &#123;</span><br><span class="line">        super.onPostExecute(fileInfo);</span><br><span class="line">        downloadfinish(fileInfo);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCancelled() &#123;</span><br><span class="line">        super.onCancelled();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void start() &#123;</span><br><span class="line">    mTvDownloadText.setText(&quot;开始下载&quot;);</span><br><span class="line">    mProgressBar.setMax(100);</span><br><span class="line">    mProgressBar.setProgress(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void downloadfinish(FileInfo fileInfo) &#123;</span><br><span class="line">    Log.i(TAG, &quot;onPostExecute: 下载完成=&quot; + fileInfo.mPath);</span><br><span class="line">    Toast.makeText(MainActivity.this, &quot;下载完成&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void refreshProgress(FileInfo value) &#123;</span><br><span class="line">    FileInfo fileInfo = value;</span><br><span class="line">    if (fileInfo != null) &#123;</span><br><span class="line">        mProgressBar.setMax((int) fileInfo.mLength);</span><br><span class="line">        mProgressBar.setProgress((int) fileInfo.mDownloadLength);</span><br><span class="line">        mDownText = fileInfo.mFile.getName() + &quot;下载了&quot; + fileInfo.mDownloadLength + &quot;总长度是&quot; +</span><br><span class="line">                fileInfo.mLength;</span><br><span class="line">        mTvDownloadText.setText(mDownText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="AsyncTask的封装使用"><a href="#AsyncTask的封装使用" class="headerlink" title="AsyncTask的封装使用"></a>AsyncTask的封装使用</h2><p>前面我们讲完了AsyncTask的基本使用，不知道你有没有发现，其实代码耦合性是挺高的，</p>
<ul>
<li>我们直接在 onProgressUpdata(),onPostExecute()方法里面更新我们的界面，即我们的AsyncTask访问了我们Activity里面的控件，那如果我们修改了Activity的控件，我们岂不是又要去阅读AsyncTask的代码，去做相应的修改。</li>
<li>下一次我们如果要下载别的东西，按照我们前面的代码，我们又要重新复制一份，这样无疑是做了很多重复的工作。</li>
</ul>
<p>说到这样，我相信大多数人的第一感觉就是把AsyncTask提取为外部类，封装起来。是的，确实，我们就是要把AsyncTask提取为外部类。那提取为歪不累之后呢？我们要访问Activity里面的空间，要怎样访问呢？</p>
<ol>
<li>在Activity里面定义静态方法</li>
<li>把需要访问的View对象通过构造函数传递进来</li>
<li>采用接口回调机制</li>
</ol>
<p>前面说到的三种方法，是可以做到AsyncTask与外界进行通讯的。但第一第二中方法明显不行。原因如下：</p>
<ul>
<li>第一种方法定义静态方法，那View对象也必须定义为static变量，这static变量的级别比较高，不易被垃圾回收机制回收，易发生没存泄露。</li>
<li>第二种方法，把需要访问的View对象通过构造函数传递进来。如果需要访问的对象少的话，勉强可以接受，如果多的话，那岂不是要定义很多成员变量。不过最致命的还算是代码耦合性太高了。还不如AsyncTask直接作为内部类。</li>
</ul>
<p>好了，说了这么多，下面我们一起来看怎样使用接口回调机制来进行解耦。</p>
<h3 id="AsyncTask-使用接口回调机制来进行解耦"><a href="#AsyncTask-使用接口回调机制来进行解耦" class="headerlink" title="AsyncTask 使用接口回调机制来进行解耦"></a>AsyncTask 使用接口回调机制来进行解耦</h3><ol>
<li>使用接口回调机制，首先我们必须有一个接口</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface DownloadListener &#123;</span><br><span class="line"></span><br><span class="line">    void onStart();</span><br><span class="line">    void onProgress(FileInfo fileInfo);</span><br><span class="line">    void onFinish(FileInfo FileInfo);</span><br><span class="line">    void onPaused(FileInfo fileInfo);</span><br><span class="line">    void onCancled();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将DownLoadTask提取为一个外部类，并将需要传递的参数传递进来</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class DownloadTask extends AsyncTask&lt;Void,FileInfo,FileInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private  String mDownloadUrl;</span><br><span class="line">    private final String mDstPath;</span><br><span class="line">    private final String mFileName;</span><br><span class="line">    private final DownloadListener mDownloadListener;</span><br><span class="line"></span><br><span class="line">    public DownloadTask(String downloadUrl, String dstPath, String fileName, DownloadListener downloadListener)&#123;</span><br><span class="line">        mDownloadUrl = downloadUrl;</span><br><span class="line">        mDstPath = dstPath;</span><br><span class="line">        mFileName = fileName;</span><br><span class="line">        mDownloadListener = downloadListener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在相应的地方调用我们接口的方法</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class DownloadTask extends AsyncTask&lt;Void,FileInfo,FileInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">    ----</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onPreExecute() &#123;</span><br><span class="line">        super.onPreExecute();</span><br><span class="line">        mDownloadListener.onStart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected FileInfo doInBackground(Void... params) &#123;</span><br><span class="line">    </span><br><span class="line">       ----</span><br><span class="line">            int len = -1;</span><br><span class="line">            while ((len = istream.read(buffer)) != -1) &#123;</span><br><span class="line">                output.write(buffer, 0, len);</span><br><span class="line">                downloadLength += len;</span><br><span class="line"></span><br><span class="line">                if (count == 10) &#123;</span><br><span class="line">                    fileInfo = new FileInfo(contentLength, downloadLength, file, file.getPath</span><br><span class="line">                            (), file.getName());</span><br><span class="line">                    publishProgress(fileInfo);</span><br><span class="line">                    count = 0;</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            //                有可能count还没有走到10</span><br><span class="line">            fileInfo = new FileInfo(contentLength, downloadLength, file, file.getPath(), file</span><br><span class="line">                    .getName());</span><br><span class="line">            publishProgress(fileInfo);</span><br><span class="line">            output.flush();</span><br><span class="line">            output.close();</span><br><span class="line">            istream.close();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">       </span><br><span class="line">        return fileInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onProgressUpdate(FileInfo... values) &#123;</span><br><span class="line">        super.onProgressUpdate(values);</span><br><span class="line">        mDownloadListener.onProgress(values[0]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onPostExecute(FileInfo fileInfo) &#123;</span><br><span class="line">        super.onPostExecute(fileInfo);</span><br><span class="line">        mDownloadListener.onFinish(fileInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCancelled() &#123;</span><br><span class="line">        super.onCancelled();</span><br><span class="line">        mDownloadListener.onCancled();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>以后我们要下载东西，只需要调用下面的方法即可。同时，如果产品再更改需求，比如，从显示一个进度条ProgressDialog对话框，改成显示一个ProgressBar，我们只需要在<br>onProgress（）里面做相应的修改就好了，在也不用去阅读DownloadTask里面的代码呢？减少了代码的耦合性，是不是瞬间感觉世界很美好呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mDownloadTask = new DownloadTask(mDownloadUrl, mDstPath, null, new</span><br><span class="line">        DownloadListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onStart() &#123;</span><br><span class="line">          start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onProgress(FileInfo fileInfo) &#123;</span><br><span class="line">        refreshProgress(fileInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onFinish(FileInfo fileInfo) &#123;</span><br><span class="line">        downloadfinish(fileInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onPaused(FileInfo fileInfo) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCancled() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mDownloadTask.execute();</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="AsyncTask使用的注意事项"><a href="#AsyncTask使用的注意事项" class="headerlink" title="AsyncTask使用的注意事项"></a>AsyncTask使用的注意事项</h2><ul>
<li>The AsyncTask class must be loaded on the UI thread. This is done automatically as of JELLY_BEAN.</li>
<li>The task instance must be created on the UI thread.（AsyncTask必须在UI 线程里面初始化</li>
<li>execute(Params…) must be invoked on the UI thread.</li>
<li>Do not call onPreExecute(), onPostExecute(Result), doInBackground(Params…), onProgressUpdate(Progress…) manually.（不要手动地调用 onPreExecute(), onPostExecute(Result), doInBackground(Params…), onProgressUpdate(Progress…) 这些方法）</li>
<li>The task can be executed only once (an exception will be thrown if a second execution is attempted.) （Task任务只能被执行一次，否则会抛出异常）</li>
</ul>
<hr>
<p>相关知识点推荐：</p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/52000680"><strong>IntentService使用及源码分析</strong></a> </p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/52060291"><strong>HandlerThread源码分析</strong></a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/57409326"><strong>AsyncTask使用及封装实践</strong></a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/57416380"><strong>AsyncTask源码分析</strong></a></p>
<p><a href="http://download.csdn.net/detail/gdutxiaoxu/9764362"><strong>Demo下载地址</strong></a></p>
]]></content>
  </entry>
  <entry>
    <title>2023 年Jebrain 产品激活码（包括 idea，pycharm，datagrip 等）</title>
    <url>/p/46415.html</url>
    <content><![CDATA[<p>重要的事情说三遍</p>
<p><a href="https://blog.junxu666.top/p/46415.html">原文地址</a></p>
<p><a href="https://blog.junxu666.top/p/46415.html">原文地址</a></p>
<p><a href="https://blog.junxu666.top/p/46415.html">原文地址</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>引入破解补丁后，需要填入对应 IDE 的激活码，每个 IDE 对应的激活码都不一样，本文罗列一些常用 IDE 的激活码，包括如下:</p>
<p>PS: 本文激活码需要搭配破解补丁一起使用，单独输入激活码是无效的，小伙伴们需要注意，如何 引入破解补丁可参考下文:</p>
<p><a href="https://blog.junxu666.top/categories/%E7%A0%B4%E8%A7%A3-%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/">Jebrain 破解&#x2F;激活教程</a></p>
<p>激活教程</p>
<ul>
<li>IDEA </li>
<li>Pycharm </li>
<li>Webstorm </li>
<li>DataGrip </li>
<li>Phpstorm </li>
<li>AppCode </li>
<li>Goland </li>
<li>RubyMine </li>
<li>Rider </li>
<li>CLion</li>
</ul>
<h2 id="可激活到-2025-年"><a href="#可激活到-2025-年" class="headerlink" title="可激活到 2025 年"></a>可激活到 2025 年</h2><h3 id="IDEA-激活码"><a href="#IDEA-激活码" class="headerlink" title="IDEA 激活码"></a>IDEA 激活码</h3><p>6G5NXCPJZB-eyJsaWNlbnNlSWQiOiI2RzVOWENQSlpCIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQUEMiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFJCIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA5MDJQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOi0xMDc4MzkwNTY4IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-SnRVlQQR1&#x2F;9nxZ2AXsQ0seYwU5OjaiUMXrnQIIdNRvykzqQ0Q+vjXlmO7iAUwhwlsyfoMrLuvmLYwoD7fV8Mpz9Gs2gsTR8DfSHuAdvZlFENlIuFoIqyO8BneM9paD0yLxiqxy&#x2F;WWuOqW6c1v9ubbfdT6z9UnzSUjPKlsjXfq9J2gcDALrv9E0RPTOZqKfnsg7PF0wNQ0&#x2F;d00dy1k3zI+zJyTRpDxkCaGgijlY&#x2F;LZ&#x2F;wqd&#x2F;kRfcbQuRzdJ&#x2F;JXa3nj26rACqykKXaBH5thuvkTyySOpZwZMJVJyW7B7ro&#x2F;hkFCljZug3K+bTw5VwySzJtDcQ9tDYuu0zSAeXrcv2qrOg&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="PhpStorm-激活码"><a href="#PhpStorm-激活码" class="headerlink" title="PhpStorm 激活码"></a>PhpStorm 激活码</h3><p>DXHN0R5Z4F-eyJsaWNlbnNlSWQiOiJEWEhOMFI1WjRGIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUFMiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDkwMlBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6LTE2MDY1NjU0NzQiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0&#x3D;-PXxjbi2g20tUcfzptAnY&#x2F;ZIKQbXW3FwXJ3P5scBMkXrya0Wg0YviqciwEWJe5laYfWevv8RzEEwrAcxz5ug1RYrg4bjZ7mJiQoOatsKahqGT1TDfU5YGpZPfbtjlKHAlYSszioJ0pka6go2qBa5AaPj4HmKfB4jkeGX4inRxPrIxc8PyAo0wyWWEaZ7R4pLC4ZDqIAYJ&#x2F;IzXIf1V84+p5hGYd6QD6ze1BCEGxI&#x2F;E8LjloaIvv0oNdkV2qTyDCH9IF3E42iheOwazyrlOWYivYyn&#x2F;ew0kvjGwwSdbrbIJH7SSbaz2nxlBWnR04yJaI4txnnS1eUbiUNQtEhKJ3uD6oQ&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="Pycharm-激活码"><a href="#Pycharm-激活码" class="headerlink" title="Pycharm 激活码"></a>Pycharm 激活码</h3><p>EUWT4EE9X2-eyJsaWNlbnNlSWQiOiJFVVdUNEVFOVgyIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDkwMlBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6MzUzOTQ0NTE3IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-FT9l1nyyF9EyNmlelrLP9rGtugZ6sEs3CkYIKqGgSi608LIamge623nLLjI8f6O4EdbCfjJcPXLxklUe1O&#x2F;5ASO3JnbPFUBYUEebCWZPgPfIdjw7hfA1PsGUdw1SBvh4BEWCMVVJWVtc9ktE+gQ8ldugYjXs0s34xaWjjfolJn2V4f4lnnCv0pikF7Ig&#x2F;Bsyd&#x2F;8bsySBJ54Uy9dkEsBUFJzqYSfR7Z&#x2F;xsrACGFgq96ZsifnAnnOvfGbRX8Q8IIu0zDbNh7smxOwrz2odmL72UaU51A5YaOcPSXRM9uyqCnSp&#x2F;ENLzkQa&#x2F;B9RNO+VA7kCsj3MlJWJp5Sotn5spyV+gA&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="Webstorm-激活码"><a href="#Webstorm-激活码" class="headerlink" title="Webstorm 激活码"></a>Webstorm 激活码</h3><p>8R927DG13X-eyJsaWNlbnNlSWQiOiI4UjkyN0RHMTNYIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IldTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA5MDJQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOjIwMTEzMjMwMjYiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0&#x3D;-Jev3eIT6wPDh59rzeBG67oHD8GcYHifz9+OkIePP3Qo49dGX1DqLTGJgOxSClHrshRzjOktdBYwkwpeTrDMwgeGu+cy0OhzvtQMeh7R3HrEQkhGbNBjfpbW6nq6Mhv8k6Duoiw3XiU434V5iM6DgRN3Yzo8VKxU7Kb4u&#x2F;SQnPTd+PR64hYJjblVXUzGHZUX4w8RBej3T0EREccs36bfnnPC2X91K&#x2F;qbvr9C0uY&#x2F;feHAMpuekMks0v4qApbInpw5O+elLE3l8txlNWhWSC8m&#x2F;O&#x2F;S7iydf27hV5mgePM5422Rpvm4dmA2DIQcq7xxdt4X67DmVGMC2yIFiH4hfkqySWg&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="DataGrip-激活码"><a href="#DataGrip-激活码" class="headerlink" title="DataGrip 激活码"></a>DataGrip 激活码</h3><p>VPQ9LWBJ0Z-eyJsaWNlbnNlSWQiOiJWUFE5TFdCSjBaIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjIwOTAyUFNBTjAwMDAwNSIsImhhc2giOiJUUklBTDotMjI4OTE3MTciLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0&#x3D;-Y35sXvjNUN0+WMouR7PGFzl62+ApqSBgPjwganzPG1ErZKJS1xh3O8MbkZnjiTPkjODi+pyBGjozBojATCzTGx4uCt61zccnyF+XI1fE9H9WTA5DAO3&#x2F;maxGFJ2KthOmkuktNnNi9qa0n7EyRuZ8rVVrc5+ETiEcfo2GctNcGqHKuRF96Bf8EL1GmCOkI8vU293X+n3XKEmN+Q1hEEBGbP9yiF5zhZDzFq0svj8g4c0fnTOrCc4GKyyEps6aDW2&#x2F;DurkotUFddzDhTCyoW1Gao0EZt0AnWUALsogI9ABjdtJq3ndyvuMrXTlOr2C&#x2F;hCGjqIN8ZDA0gf9mnrKBhcMbA&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="AppCode-激活码"><a href="#AppCode-激活码" class="headerlink" title="AppCode 激活码"></a>AppCode 激活码</h3><p>J7H3LFZ1RV-eyJsaWNlbnNlSWQiOiJKN0gzTEZaMVJWIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkFDIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFNXIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDkwMlBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6MTI2MjcxOTk3MCIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ&#x3D;&#x3D;-Bp7TAMPWxdU73VchIh+9yIz7AIx3loGv8gNcF5Gndb2+Svx1SMflNEnKIo86I9&#x2F;qvtnV&#x2F;NbK4k2V&#x2F;R7MXJqcX2pvXC33eF8+kKlJfs2NhOCyh0GsggysoWrtBKUUwhAwMiGTtRenV8cIgIzibnn2zICtiDimetbx2vFaSh0wQRNB1VsR+u78w1jhQZVN+9K1&#x2F;q+1a0MqKi4iZx4k6FXpPvWj6A4QAoAKNeV6dq&#x2F;JaxFpKTvbm2Kce3pDAcHUsqUPvFWIRx+B9s69fHSDtRyKYscILEIOVbWh6xhIVhLvnQ4J8pbRFTxUFHHly5fsLvIgPqAko4nDj9U3IVfIJM0tug&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="Goland-激活码"><a href="#Goland-激活码" class="headerlink" title="Goland 激活码"></a>Goland 激活码</h3><p>JZFLGE21ND-eyJsaWNlbnNlSWQiOiJKWkZMR0UyMU5EIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDkwMlBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6LTE1NTI3NDEyNzIiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0&#x3D;-cQoXljKE7uBjoI23ZBPd84P89vQAaprVvVhxj1&#x2F;nSOABUZKPZMCs6p2id5WKBP1n0EoPHykvzd0y7QcdcO2hxNwbaBRZxpPFuuMigGazrrt+zSd9+UlFXmtcseFTXlWn7Jw2qqp7WSVQlj+o3gf2Gic9&#x2F;Vp2pAmIajMGdFDsXcHbYUrLwTRVtFkNtggtsqh0AVS8xhzLuXMzGXJsqEEWPZCKMEjy0bURm&#x2F;FQvrRC&#x2F;gIptJzuybSb&#x2F;neqKmvxZefX1lhe98igS3tZsL&#x2F;E+hsQK7ueXVSP2AuuVEz&#x2F;6qHYknPS7K4UluWpd+ktIxTcHjIykK1tlWlwTsupZTxnvXFWQA&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="RubyMine-激活码"><a href="#RubyMine-激活码" class="headerlink" title="RubyMine 激活码"></a>RubyMine 激活码</h3><p>Q2AJCW53PE-eyJsaWNlbnNlSWQiOiJRMkFKQ1c1M1BFIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJNIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUkIiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDkwMlBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6NDA1MTEyNjE5IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-aPzOhosQS2wKjDd+az9MTUKLm3XarDs+2uAYs6LysK1DzwzKCMsXpd5Ci3dPc6hJmlL0+pW+P0h7+4ytG3ZFk38oYv4qm1NpOjeXVMyW9I2&#x2F;JM508J3RqzG+NQvuxkojBuzOLBP8uDLMUcGSVbANMgNWbzu4u9cQdwaKqxZd6lweU2PnCe8gfJpHxrJxDRJ24+S1o14aYhFLo8LhZCfj91KNDA3gyu82OyPU2jwfDgxEj5DHyBTaQsspJA4RfSie&#x2F;6vO7RRPLaDT91eGTzIlpPSsiBA4OtypIjqJSXrMaBFhVbAE9x3eWeV6EziCaVua69BKn0zkXYqCzgLWJbpVmw&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="Rider-激活码"><a href="#Rider-激活码" class="headerlink" title="Rider 激活码"></a>Rider 激活码</h3><p>1XRKDPDZ7U-eyJsaWNlbnNlSWQiOiIxWFJLRFBEWjdVIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJEIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUERCIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjIwOTAyUFNBTjAwMDAwNSIsImhhc2giOiJUUklBTDo3MjE2NjY1NjYiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0&#x3D;-gTyK3dSPyL3bBPlMluKOgvKmTIC7q8ARFWhz2ThZftKjUhRi1qgidlLdJaQ7ZznVza&#x2F;jJWFd0cfykT22bJCn6tEl1IMJxmFnxD40UFRix0K4oULiHY6w83V+jDSbNG6Jif&#x2F;O27q+jxNm1JVdMJPQZAJmeULiQkiEBVsHTLl7SuHoKGsN1+1Gn6+Iybe6SJoJXM22ypp&#x2F;hwlO6A&#x2F;Z5CT6lyrBCiBO&#x2F;NChzdiCjPu7IdgeMUofX369EiosMTwwYm+arXKmvDK&#x2F;Pd62cEmQmfjZpi9XDtN3oyJmul9lPsk+j2VOG6SS6vd6nZoyeTmljfUDWowkqEP5h3FBLx&#x2F;BKHF6Qg&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="CLion-激活码"><a href="#CLion-激活码" class="headerlink" title="CLion 激活码"></a>CLion 激活码</h3><p>GSSXZEZ56G-eyJsaWNlbnNlSWQiOiJHU1NYWkVaNTZHIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTVyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDkwMlBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6NTM5ODE5MDIyIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-iAUL9c89hA+oXgFAajsV9QyCOVsENJGkZiGQvW7XKaJID5XtXbxU4iBdMPaiJE1B8dZJy27Vt1WJjin+oQtnSC47t0MCx61vPOBGk&#x2F;KAvEBoi6d8mfP5u729g0GHva3nPXsY3+IbnsWm7SIsB0syvtr1VRmqt7tBKm2F6gRn4Z8SnvkoQuyrvtZN8juJBEz3hYGHH4h+jpMnAYjXZ0M92WaD4aIvtGazp41f4&#x2F;FuXW6IcSHTwualWVHuvS95fuxxAwpbyxPyYLom1Uh&#x2F;la6kY9+zi3R5Z1amOHEOCyZnSoFDcMeKF3yhQU6&#x2F;AjYiT&#x2F;fOfICNcaK&#x2F;BHYZ0VFMI8zOQA&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h2 id="可激活到-2023-年"><a href="#可激活到-2023-年" class="headerlink" title="可激活到 2023 年"></a>可激活到 2023 年</h2><h3 id="IDEA-激活码-1"><a href="#IDEA-激活码-1" class="headerlink" title="IDEA 激活码"></a>IDEA 激活码</h3><p>ZCB571FZHV-eyJsaWNlbnNlSWQiOiJaQ0I1NzFGWkhWIiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQREIiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUkIiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUEdPIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU1ciLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA3MDFQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOi01OTQ5ODgxMjIiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0&#x3D;-JNpWl3tvfBw9nYALTrBlJzoryrKHhqmiBxP5IljC6Hlgmb6YlOH8vPngzoyLYa+cGDMVj6fipEpm+BEqIA7oAoBYSu1ZPdzkHAa94apJg+CUQwuw+EJaATdKTANuKYTBsay6WsnrUh8vbIaJpGz19z+uOAc4xRP+gtuyjiwkNECZ6Y9qD+Dx3Gm5xXI3UvKqjPYIhXk23n1pjlxFIUmhD7BumdxF8JHmJJhd&#x2F;K5FaXQU&#x2F;K9pMp70GfmSS2KJgxm6SXfslWs&#x2F;bF5GTY3i1GA6ez05ZyJwsmJMZ1v6W7GWrWNHDLK7i7aXhOLdK9u+pCz+2FpKmadRznpSmixDzj37ig&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="Pycharm-激活码-1"><a href="#Pycharm-激活码-1" class="headerlink" title="Pycharm 激活码"></a>Pycharm 激活码</h3><p>VAE9B0CRYZ-eyJsaWNlbnNlSWQiOiJWQUU5QjBDUllaIiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDcwMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6MTMxNzYyODYxMCIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ&#x3D;&#x3D;-YxAJSVk5XIZkkI6vH33zgb&#x2F;hRmCdqia89zpsVHp2x52PY0XgOOiAlcR3&#x2F;BVhm0qRYLBYBBHMpPcz0+ZWr2diKy0QexfbtVIVsCRkVaRgl67Tbw9MKb5jVNqpqth2yEoW&#x2F;gmm2bZC5RS0qiGcPQpjD7AdRo66P78Vb2TrJ5hz055polMwR0hMxm9ECDedLnqKQXyzmcjkucStFNYYHbF0Gnn0I&#x2F;xrxnVoIDeHMdlsRiBXYPb6TGIVgOIh8ynuGwvP&#x2F;svLVPCI1dYPYF1V3ndDbOOQskOJaC+7K1&#x2F;80xVEb3TT7Orb7PJJDX1AiIjg0gsSctPulz3r1xLHIZNcZJcV0A&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="Webstorm-激活码-1"><a href="#Webstorm-激活码-1" class="headerlink" title="Webstorm 激活码"></a>Webstorm 激活码</h3><p>85KWOACE9J-eyJsaWNlbnNlSWQiOiI4NUtXT0FDRTlKIiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJXUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA3MDFQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOi0yMTI3NzA0ODYyIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-dQvLbQpLWvotOIV+CFbA+oQWn0MRgYLYtT+0zCgyiy9c0uj1cEC8ncS0nGnfLIV+uN21n7bG9gXuRC&#x2F;zWIwNDWb8CBMplt2TqQkbHKvhS1D6wVusypQa2sFKVtrGfBghUf&#x2F;o3&#x2F;IT4ko3RRF6oGau9NDwwIHQveSavlyI9QIMwJbSyVRMgydHs1YTek2yTk9P+NgW4VsTZS8YIsz6nXviv2Z&#x2F;ijvu+Zv7Jmxy8ioyRyebl6&#x2F;hzcOFzbKnUzf9m1qVMaIGrar&#x2F;xgWmr6swb1J&#x2F;1zvDEyC8IBn031sGw5rSCAe0bW378vHc5jzaw3LggskQmzTKC0oaBIRxvK0QE9UP&#x2F;Q&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="DataGrip-激活码-1"><a href="#DataGrip-激活码-1" class="headerlink" title="DataGrip 激活码"></a>DataGrip 激活码</h3><p>UQ99Q03MFY-eyJsaWNlbnNlSWQiOiJVUTk5UTAzTUZZIiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQREIiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkRCIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFNJIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjIwNzAxUFNBTjAwMDAwNSIsImhhc2giOiJUUklBTDotMjI1OTU1Njc5IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-d2YwlrEKsQxrYTT5V&#x2F;oo6&#x2F;vGvFxQoguCe2m55PfMJd7C2OWXzr3fRtOY4tp8OVv+UKK1gXMgpQx+zvZrrdgIQF8J3NBYIBek3W7RywlY93Eg4y56GAZu1V3+ER8U1hVvJiD0daS5TSgJKXp&#x2F;dus6NY+qMgDekGd+ccd1DD8wW83GLqMjBi+rGxYnDwE&#x2F;RzcScxfNfbBdE1AdUz+lOEq4RKfvuCxgjry+pD4gQE0nfAF1CK9UyCu+&#x2F;FFNzKl5E7sCKh7ONfE2RWwXts3zOcV0m4E092QHZ2IB08VU7zYuvQta44uZfsMsuOx27FVq4R3RZsgdcFD+vJeW7tIXM97vaw&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="Phpstorm-激活码"><a href="#Phpstorm-激活码" class="headerlink" title="Phpstorm 激活码"></a>Phpstorm 激活码</h3><p>MQPIMFLYCI-eyJsaWNlbnNlSWQiOiJNUVBJTUZMWUNJIiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDcwMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6LTE5OTg5NzcwNjYiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0&#x3D;-AAIqVo7C&#x2F;YShmuP7TodykiNDwYjltuRJYks5QkDoB7jqITtKBO89R6Oewnz+U+1owZzQxzooHvf1x4RNDjGwisWz5eEfVkvXLQ9gUcf0ACvxEFWch5srRvuJku7l9Gu03Dc&#x2F;mlzOeo8yzEXyNb7NlV9S1Z3VD2nw0KOkeWdX3zqlObNTPcgfx0&#x2F;Qsf+c+&#x2F;&#x2F;H6rtQ2GBD5yXSUPjxYO0j1&#x2F;nompjvTF9zrBOaM9StuFgJKXYxHXLYHIp4ukFfqOOW4MakqBWjJfqTCg9MUjS7AyFPS0PBkdv6g7PArtaMDkEsGjOsphvQvd5J+pO+Pk9p7LPJiH&#x2F;R46ehPWHCjqJ21w&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="AppCode-激活码-1"><a href="#AppCode-激活码-1" class="headerlink" title="AppCode 激活码"></a>AppCode 激活码</h3><p>9S7CDPSHOF-eyJsaWNlbnNlSWQiOiI5UzdDRFBTSE9GIiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJBQyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBTVyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDcwMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6MTc2MTc0NTY5NSIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ&#x3D;&#x3D;-BdLH6mD0UB&#x2F;y3eSpW1lmFB9EwTenbIK6tIwPO2EVBVxiAikiFZ5Mvw+yE3sDvg3OwzcJTlS8ydm41Atlwy0XaAxEfEZb4rDRy0VqywPEVsri8urpdpcilIZMA+eMV+QYaP2GtSCPgb8Fg86lqJSu2QTPFMa2fHHG81bu5hzea6TsFjEUKXeSQxI&#x2F;6ejnredzvtthV&#x2F;D5+XUuhFM2njqack&#x2F;nntBzG2PTZo1D+xoSZqCZQrvcL6pelo1YiDkYfZ09+wGR9NgDuXknrlkd8xndbPaIZp379PWQyMEnfy204I&#x2F;yFEvfWFP46zFAZJvdlwDg1rgHZB1lkPPzhZt6PCOTog&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="Goland-激活码-1"><a href="#Goland-激活码-1" class="headerlink" title="Goland 激活码"></a>Goland 激活码</h3><p>KHWR8IHNSA-eyJsaWNlbnNlSWQiOiJLSFdSOElITlNBIiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDcwMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6MTMwMDM2MTk4NiIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ&#x3D;&#x3D;-HSXeXwBpvEO32vcE3ZjmeBdPd6FljAQ9ZO7hqlibWbiJl9LbXIFFBGG9ZiKtvEcYXHdv22jTo8YQ3fB21jSXKVwVkS0UFextoyt+tS62g3cHlMYMrrzZrQnf1NoGyPGd6S03ZZiWl+IFq&#x2F;0ltPpZXYT0zBPr4LjYnnb6uDcu96QpoNDNwf2doSYkogRMdHErK9F&#x2F;SJP+i7Nv762pDzj3k+Jek+AlJITMDlMCMukjpHlXz8dB2RWlV+Hc8iYqAQKEH07I1AHnFJYsXk0RtgnoX8XQ4BTywS9V0xgrKy+woltYQZDYokF2dPI08gAR3qw7TJyeHrNtrg7VFE+F4vUzpg&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="RubyMine-激活码-1"><a href="#RubyMine-激活码-1" class="headerlink" title="RubyMine 激活码"></a>RubyMine 激活码</h3><p>1Y9O5L6FGW-eyJsaWNlbnNlSWQiOiIxWTlPNUw2RkdXIiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJSTSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBSQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDcwMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6MTczMjM2MTU4OSIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ&#x3D;&#x3D;-NVe+nmdPFcrzqRgwiwVhWa6win3EfrgPPzuNkCz&#x2F;Xp+GuXCAnSWJeh8ZbHmtWX0KXuSnjdu25VtuE2gHTJ+QTeBqaYMulip4VEx9F3a7+z6PixJCZcDJun&#x2F;je75LPjjQurfXwjjb2rMupsbU4yS0tzZVaP7K6eFCZ+PpE8Q9Kx0wjZrIkoECSGJEvO7MtIQI1Vydr6o&#x2F;VCEFDEAE3i7LR5EEEH8H85IJaG7+mqWXMReKRNzhORlS8qNEcN7QZLXHdchezmUvtKj5TsnNhw93Nh2M8RJxKzSIdRWePg8Q4Zin1FxnAq+3tRGW56&#x2F;rn9K8TUNK1x9eY8Zhh0lJjH1HdA&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="Rider-激活码-1"><a href="#Rider-激活码-1" class="headerlink" title="Rider 激活码"></a>Rider 激活码</h3><p>T8INIFJPD9-eyJsaWNlbnNlSWQiOiJUOElOSUZKUEQ5IiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJSRCIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNJIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjIwNzAxUFNBTjAwMDAwNSIsImhhc2giOiJUUklBTDotNzA4MTAyNDEyIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Vobc8KxwkYgUySyPNsF2BYOFIO2J7mfvNV9KPTogCsq++KOCjBAg59SddwesQ1rRBmgm067HluVYTE1eO5Cw+Y28DQetyqxZcxIPz8o46hxmF+99m2d1bR3zuctlSs5UM22TxmHU6IOfJmUtU1ITmPce8L1PRkzr2Az+KUR2N4MTe1NbrnRH&#x2F;prBbPqE+c1oS&#x2F;XK&#x2F;s6qrlZUU2&#x2F;PocT+Czn6CZzQrHy38GyWY79XArDrlmqKMvF+3NhiWfexmvSQRRf20WVibl0I0seE5y52ZYFxMVIHCcL0MRPai3G59rUR8KDPXwn3WHGlyhh+2Zbpqu&#x2F;bO&#x2F;XP+aZNPuuMnp01MA&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h3 id="CLion-激活码-1"><a href="#CLion-激活码-1" class="headerlink" title="CLion 激活码"></a>CLion 激活码</h3><p>HLLIQN9GJ8-eyJsaWNlbnNlSWQiOiJITExJUU45R0o4IiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkNMIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTVyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDcwMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6MTY2NTMxNDYzNCIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ&#x3D;&#x3D;-GOMmWoD11vf1Sa7ovZ+XCjjxy7howrbbKgLZ5ja7tKZqRAOFkS3cOcqbXotA+8eGAK6iMyaG1Eb9O7Yt+Ncz+HmZPkorbcAmbg3FK89tM1xlpJ&#x2F;R6MsSYmkx4+pRyrdYb+ZdPWo78f9L&#x2F;LmR9fwHk3AKYt9y8aNmCSzLMqEXy89yUYyPP1fydRSV++fXin8Y4N2jmg+hLZPSj90s4F6cc2lPvxgV7UwDpD5IEe8e5o7iWbW&#x2F;9UhcsEvGsY18uLN1uCr&#x2F;fDdJpNFpjGysSyokfqfyEd6uZxGp9PeC75GF2v6RcQ35HwXFt21wqVxP+fS8oiNnpHjXy+lUF2qK8F081A&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h1 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h1><p><a href="https://blog.junxu666.top/p/46415.html">原文地址</a></p>
<p><a href="https://blog.junxu666.top/p/46415.html">原文地址</a></p>
<p><a href="https://blog.junxu666.top/p/46415.html">原文地址</a></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>PhpStorm</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio 2022 激活，破解安装教程，内附Visual Studio激活码:密钥</title>
    <url>/p/22276.html</url>
    <content><![CDATA[<p>visual studio 2022（vs 2022）是由微软官方出品的最新版本的开发工具包系列产品。它是一个完整的开发工具集，囊括了整　<strong>visual studio 2022</strong>是一款由微软全新研发推出的编程开发软件，该软件能够为程序开发人员提供一个绝佳的IDE开发环境，可帮助用户高效率地杜绝错误代码，当用户输入错误代码的时候，系统即会自动将其标红，可完美支持C#、C++、Python、Visual Basic、Node.js、HTML、JavaScript等主流的编程语言，帮助程序员轻松地完成调试、探查和诊断程序，提高代码的准确率和工作效率，今天小编为大家带来了这款软件的专业版，附带了专业版激活密钥，激活后即可永久免费使用，喜欢的小伙伴千万不要错过哦。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-f4e7b782-1ffa-4e22-8912-63da1fd85a2b.jpg" alt="img"></p>
<h3 id="核心亮点"><a href="#核心亮点" class="headerlink" title="#核心亮点"></a><a href="https://tobebetterjavaer.com/nice-article/itmind/visualstudiopxbazjcnfvisualstudiojhmmyxbxt.html#%E6%A0%B8%E5%BF%83%E4%BA%AE%E7%82%B9">#</a>核心亮点</h3><p>1、核心调试器中的性能改进</p>
<p>2、UI 更新，旨在减少复杂性，这将增加与 Accessibility Insights 的集成。图标更新，并增加对 Cascadia Code 的支持，这是一种新的 fixed-width 字体，可提高可读性</p>
<p>3、对 .NET 6 的支持，Windows 和 Mac 开发人员都可以使用它来构建 Web、客户端和移动应用程序，并为开发 Azure 应用程序提供了更好的支持支持热更新预览，无需重启项目即可查看更改</p>
<p>4、更强大的代码预测能力</p>
<p>5、对 C++ 工作负载的强大支持，包括新的 productivity features、C++20 工具和 IntelliSense。还集成了对 CMake、Linux 和 WSL 的支持，使用户更容易创建、编辑、构建和调试跨6、平台应用程序</p>
<p>7、将文本聊天集成到 Live Share 协作功能中</p>
<p>8、支持 Git 和 GitHub</p>
<p>9、改进代码搜索功能。</p>
<p>10、Visual Studio for Mac 将迁移至原生 macOS UI，拥有更好的性能和可靠性。</p>
<h3 id="Visual-Studio-2022密钥"><a href="#Visual-Studio-2022密钥" class="headerlink" title="#Visual Studio 2022密钥"></a><a href="https://tobebetterjavaer.com/nice-article/itmind/visualstudiopxbazjcnfvisualstudiojhmmyxbxt.html#visual-studio-2022%E5%AF%86%E9%92%A5">#</a>Visual Studio 2022密钥</h3><p>PS: 密钥没有直接贴出来，是为了拒绝一部分白嫖党，因为有的人即便是你帮了他他还骂你，所以我把密钥放在了公众号里，这样我既可以帮助到那些信赖我的人，同时也可以给公众号涨涨粉，两全其美，不丢人。</p>
<p>需要的小伙伴，扫描下方公众号二维码，或者关注公众号： <strong>徐公</strong>，回复关键字：<strong>vs</strong> 即可免费无套路获取，持续更新中~</p>
<p><a href="https://docs.qq.com/doc/DUkNTakpjUVFYSFZq">visual studio 2022 最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效</a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/020220230219163502.png"></p>
<h3 id="Visual-Studio-2022官方免费社区版安装教程"><a href="#Visual-Studio-2022官方免费社区版安装教程" class="headerlink" title="#Visual Studio 2022官方免费社区版安装教程"></a><a href="https://tobebetterjavaer.com/nice-article/itmind/visualstudiopxbazjcnfvisualstudiojhmmyxbxt.html#visual-studio-2022%E5%AE%98%E6%96%B9%E5%85%8D%E8%B4%B9%E7%A4%BE%E5%8C%BA%E7%89%88%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B">#</a>Visual Studio 2022官方免费社区版安装教程</h3><p>1、运行下载包中的vs_community__xxx .exe</p>
<p>下载地址：<a href="https://visualstudio.microsoft.com/zh-hans/vs/community/">https://visualstudio.microsoft.com/zh-hans/vs/community/open in new window</a></p>
<p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-adb1f4c4-8caa-41fd-a864-ae0c39d62aa7.jpg" alt="img"></p>
<p>2、点击继续</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-4c7876b2-066d-4fef-9655-7a16fe113141.jpg" alt="img"></p>
<p>3、耐心等待提取文件</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-135907e2-168e-4b0d-b039-86210fd3b175.jpg" alt="img"></p>
<p>4、选择要加载的工作负荷，这里选择使用C++的桌面开发，有其他需要可以自己添加其他负荷，下方存储位置默认C盘，点击更改</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-5531b5ec-d342-4c4e-9837-4d970809cf9f.png" alt="img"></p>
<p>5、选择C盘以外，剩余容量30G以上的盘存放</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-f173d215-7967-46f9-8126-4025fe2f5d8b.jpg" alt="img"></p>
<p>7、语言包中默认选择简体中文</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-db03478c-942f-4424-ab0c-0a64884ce123.jpg" alt="img"></p>
<p>8、选择好工作负荷，安装位置和语言后，点击右下角安装</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-e53168ca-258d-414c-849d-c5ef9524bdfe.jpg" alt="img"></p>
<p>9、安装完成后重启电脑</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-01bf036f-5701-4d7c-957b-49ee9b13ca01.png" alt="img"></p>
<p>10、耐心等待一段时候后，安装完成，点击启动</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-648cd427-d8ff-44e0-8c20-96dc4cc0e5d7.jpg" alt="img"></p>
<p>11、登录微软账号，没有账号可以直接点击以后再说跳过此环节</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-a7cfbbf9-ed20-42e5-af06-26b3b5b65ca4-20230301225324867.jpg" alt="img"></p>
<p>12、创建新项目</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-d48ce418-9dac-4025-a90b-ffdfecdbd04c.jpg" alt="img"></p>
<p>11、选择控制台应用，点击下一步</p>
<p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-e5aaf240-de93-45de-9810-a9625d3206cc.jpg" alt="img"></p>
<p>12、配置新项目中，选择合适的应用保存文件夹</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-2b0c1eb3-55bf-4081-8413-0bf5865168e1-20230301223336359.jpg" alt="img"></p>
<p>13、点击创建后稍等片刻，即可进入编程界面</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/itmind-visualstudiopxbazjcnfvisualstudiojhmmyxbxt-046cd7c5-4638-4f7f-937f-85f72ce07653-20230301225443183.jpg" alt="img"></p>
<h3 id="Visual-Studio-2022密钥-1"><a href="#Visual-Studio-2022密钥-1" class="headerlink" title="#Visual Studio 2022密钥"></a><a href="https://tobebetterjavaer.com/nice-article/itmind/visualstudiopxbazjcnfvisualstudiojhmmyxbxt.html#visual-studio-2022%E5%AF%86%E9%92%A5-1">#</a>Visual Studio 2022密钥</h3><p>PS: 密钥没有直接贴出来，是为了拒绝一部分白嫖党，因为有的人即便是你帮了他他还骂你，所以我把密钥放在了公众号里，这样我既可以帮助到那些信赖我的人，同时也可以给公众号涨涨粉，两全其美，不丢人。</p>
<p>需要的小伙伴，扫描下方公众号二维码，或者关注公众号： <strong>徐公</strong>，回复关键字：<strong>vs</strong> 即可免费无套路获取，持续更新中~</p>
<p><a href="https://docs.qq.com/doc/DUkNTakpjUVFYSFZq">visual studio 2022 最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效</a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/020220230219163502.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Visual Studio激活, Visual Studio 破解</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 年 Sublime Text 激活破解教程，亲测有用</title>
    <url>/p/15193.html</url>
    <content><![CDATA[<p>Sublime Text 是一个轻量、简洁、高效、跨平台的编辑器。</p>
<p>Sublime Text具有漂亮的用户界面和强大的功能，例如代码缩略图，Python的插件，代码段等。还可自定义键绑定，菜单和工具栏。Sublime Text 的主要功能包括：拼写检查，书签，完整的 Python API ， Goto 功能，即时项目切换，多选择，多窗口等等。Sublime Text 是一个跨平台的编辑器，同时支持Windows、Linux、Mac OS X等操作系统。</p>
<h2 id="软件下载安装"><a href="#软件下载安装" class="headerlink" title="软件下载安装"></a>软件下载安装</h2><p>官网地址：<a href="https://www.sublimetext.com/download">https://www.sublimetext.com/downloadopen in new window</a></p>
<p>选好对应的版本平台下载安装即可</p>
<h2 id="软件激活"><a href="#软件激活" class="headerlink" title="软件激活"></a>软件激活</h2><p>安装完如果弹窗需要输入授权，直接复制下面注册码粘贴点击 Use License，</p>
<p>如果没有有弹窗，点击菜单栏的『Help -&gt; Enter License』弹出激活窗口，输入下面的注册码然后点击「Use License」。</p>
<p><strong>Sublime Text 4 注册码（全部需要复制粘贴）</strong></p>
<h3 id="注册码已测试可用，请低调使用，更新于2022年12月。"><a href="#注册码已测试可用，请低调使用，更新于2022年12月。" class="headerlink" title="注册码已测试可用，请低调使用，更新于2022年12月。"></a>注册码已测试可用，请低调使用，更新于2022年12月。</h3><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/1630993608-f8f561fa74ff4c7.webp" alt="img"></p>
<blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://img.chajianxw.com/chajian/164604365771068" alt="IDEA 2022.3.2破解补丁分享失败">IDEA 2022.3.2破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>sublime</strong>，会自动将激活码和破解补丁发送给你</p>
<p><a href="https://docs.qq.com/doc/DUmpVR1NrR0JualpK">Sublime 2023 最新破解安装教程，附激活码(2023 年 2 月 10 号，亲测有效）</a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230211154134.png"></p>
<h2 id="软件汉化"><a href="#软件汉化" class="headerlink" title="软件汉化"></a>软件汉化</h2><p>1）点击 Tools—Install Package Control，（安装包控件比较慢，并且没有反应，等待数分钟后会有弹窗）</p>
<p>2）点击确定按钮</p>
<p>3）菜单点击Preferences – Package Control，选择 Install Package</p>
<p>4）输入 ChineseLocalzations 可见中文包！选中即可安装！</p>
<h1 id="激活码地址"><a href="#激活码地址" class="headerlink" title="激活码地址"></a>激活码地址</h1><blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://img.chajianxw.com/chajian/164604365771068" alt="IDEA 2022.3.2破解补丁分享失败">IDEA 2022.3.2破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>sublime</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230211154134.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 毕业设计 - 基于 Vue 和 SpringBoot 前后端分离的人事管理系统</title>
    <url>/p/57841.html</url>
    <content><![CDATA[<p>微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发，项目加入常见的企业级应用所涉及到的技术点，例如 Redis、RabbitMQ 等。</p>
<h3 id="项目效果图"><a href="#项目效果图" class="headerlink" title="项目效果图"></a>项目效果图</h3><p>首先，不同的用户在登录成功之后，根据不同的角色，会看到不同的系统菜单，完整菜单如下：</p>
<p><a href="https://raw.githubusercontent.com/wiki/lenve/vhr/doc/p278.png"><img src="https://raw.githubusercontent.com/wiki/lenve/vhr/doc/p278.png" alt="p278"></a></p>
<p>不同用户登录上来之后，可能看到的会有差异，如下：</p>
<p><a href="https://raw.githubusercontent.com/wiki/lenve/vhr/doc/p279.png"><img src="https://raw.githubusercontent.com/wiki/lenve/vhr/doc/p279.png" alt="p279"></a></p>
<p>每个用户的角色是由系统管理员进行分配的，系统管理员给用户分配角色的页面如下：</p>
<p><a href="https://raw.githubusercontent.com/wiki/lenve/vhr/doc/p280.png"><img src="https://raw.githubusercontent.com/wiki/lenve/vhr/doc/p280.png" alt="p280"></a></p>
<p>系统管理员也可以管理不同角色可以操作的资源，页面如下：</p>
<p><a href="https://raw.githubusercontent.com/wiki/lenve/vhr/doc/p281.png"><img src="https://raw.githubusercontent.com/wiki/lenve/vhr/doc/p281.png" alt="p281"></a></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a>项目技术栈</h3><h4 id="后端技术栈"><a href="#后端技术栈" class="headerlink" title="后端技术栈"></a>后端技术栈</h4><ol>
<li>Spring Boot</li>
<li>Spring Security</li>
<li>MyBatis</li>
<li>MySQL</li>
<li>Redis</li>
<li>RabbitMQ</li>
<li>Spring Cache</li>
<li>WebSocket</li>
<li>…</li>
</ol>
<h4 id="前端技术栈"><a href="#前端技术栈" class="headerlink" title="前端技术栈"></a>前端技术栈</h4><ol>
<li>Vue</li>
<li>ElementUI</li>
<li>axios</li>
<li>vue-router</li>
<li>Vuex</li>
<li>WebSocket</li>
<li>vue-cli4</li>
<li>…</li>
</ol>
<h2 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h2><ol>
<li>clone 项目到本地</li>
<li>数据库脚本使用 Flyway 管理，<strong>不需要手动导入数据库脚本</strong>，只需要提前在本地 MySQL 中创建一个空的数据库 vhr，并修改项目中关于数据的配置（resources 目录下的 application.properties 文件中）即可</li>
<li>提前准备好 Redis，在 项目的 application.properties 文件中，将 Redis 配置改为自己的</li>
<li>提前准备好 RabbitMQ，在项目的 application.properties 文件中将 RabbitMQ 的配置改为自己的（<strong>注意，RabbitMQ 需要分别修改 mailserver 和 vhrserver 的配置文件</strong>）</li>
<li>在 IntelliJ IDEA 中打开 vhr 项目，启动 mailserver 模块</li>
<li>运行 vhrserver 中的 vhr-web 模块</li>
</ol>
<p><strong>OK，至此，服务端就启动成功了，此时我们直接在地址栏输入 <code>http://localhost:8081/index.html</code> 即可访问我们的项目，如果要做二次开发，请继续看第七、八步。</strong></p>
<ol>
<li>进入到vuehr目录中，在命令行依次输入如下命令：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># 在 localhost:8080 启动项目</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<p>由于我在 vuehr 项目中已经配置了端口转发，将数据转发到 Spring Boot 上，因此项目启动之后，在浏览器中输入 <code>http://localhost:8080</code> 就可以访问我们的前端项目了，所有的请求通过端口转发将数据传到 Spring Boot 中（注意此时不要关闭 Sprin gBoot 项目）。</p>
<ol>
<li>最后可以用 WebStorm 等工具打开 vuehr 项目，继续开发，开发完成后，当项目要上线时，依然进入到 vuehr 目录，然后执行如下命令：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>该命令执行成功之后，vuehr 目录下生成一个 dist 文件夹，将该文件夹中的两个文件 static 和 index.html 拷贝到 Spring Boot 项目中 resources&#x2F;static&#x2F; 目录下，然后就可以像第 6 步那样直接访问了（关于前后端分离部署，大家也可以参考这个<a href="https://mp.weixin.qq.com/s/C7PIck3SIPPTcA3NX3ELoQ">使用 Nginx 部署前后端分离项目，解决跨域问题</a>）。</p>
<p><strong>步骤 7 中需要大家对 NodeJS、NPM 等有一定的使用经验，不熟悉的小伙伴可以先自行搜索学习下，推荐 <a href="https://cn.vuejs.org/v2/guide/">Vue 官方教程</a>。</strong></p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2>]]></content>
  </entry>
  <entry>
    <title>2023 年 Pycharm 最新激活码、激活破解教程，亲测可用，永久激活</title>
    <url>/p/7624.html</url>
    <content><![CDATA[<blockquote>
<p><strong>申明：本教程 Pycharm 破解补丁、激活码均收集于网络，请勿商用，仅供个人学习使用，如有侵权，请联系作者删除。若条件允许，希望大家购买正版 ！</strong></p>
</blockquote>
<blockquote>
<p><strong>PS: 本教程最新更新时间: 2023年3月25日~</strong></p>
</blockquote>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-3c4f.png" alt="image-20230326180735237"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔者几乎试了网上几乎所有的 Pycharm 破解方案，废了好大气力，汇总了目前网上比较靠谱的三种破解方案（<strong>这三种都是笔者亲测成功的</strong>），小伙伴们任选其一即可：</p>
<ul>
<li><strong>第一种【推荐】：👉激活脚本 + 激活码（全自动模式）</strong>，<strong>即本文教程所写，这种方法适合最新的几个版本，具体步骤跟着本文教程一步一步来，运行一下激活脚本，一分钟即可搞定，超级简单</strong>。无图无真相，下面是我激活成功后的截图：</li>
</ul>
<blockquote>
<p><strong>PS: 此方法和下面的第二种方法的补丁原理都是暴力拦截了 Pycharm 的剩余使用期网络请求，实际上等于永久激活，至于激活到哪天，在之前的 <code>2021.3.3</code> <code>2021.3.2</code> 等老版本中是可以手动配置的，比如改成激活到 2099 年。可能是太高调了，最新的版本只能显示到 2025 年, 其实效果还是一样的, 都是永久激活，可放心食用。</strong></p>
</blockquote>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-315e.png" alt="image-20230326182109403"></p>
<ul>
<li><strong>第二种：👉<a href="https://www.exception.site/essay/pycharm-pojie-jihuoma">破解补丁 + 激活码（需手动引用补丁）</a>，相比较第一种直接执行一个脚本就行了，这种方式需要手动引用破解补丁，再输入激活码。此法同样仅适用于最新的几个版本。</strong></li>
<li><strong>第三种</strong>：👉 **<a href="https://www.exception.site/essay/how-to-free-use-idea-202022-by-resigter-code">无限重置 Pycharm 30 天试用期（适合比较老的版本）</a>**；</li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><strong>本教程适用于 JetBrains 全系列产品，包括 Pycharm、IDEA、WebStorm、Phpstorm、Datagrip、RubyMine、CLion、AppCode 等。</strong></li>
<li><strong>本教程适用 Windows&#x2F;Mac&#x2F;Linux 系统，文中以 Windows 系统为例做讲解，其他系统同样参考着本教程来就行。</strong></li>
</ul>
<h2 id="第一步：下载-Pycharm-安装包"><a href="#第一步：下载-Pycharm-安装包" class="headerlink" title="第一步：下载 Pycharm 安装包"></a>第一步：下载 Pycharm 安装包</h2><p>访问 Pycharm 官网，下载 Pycharm 2022.3 版本的安装包，下载链接如下 :</p>
<p><a href="https://www.jetbrains.com/pycharm/download/other.html">https://www.jetbrains.com/pycharm/download/other.html</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-46c5.png" alt="image-20230326180636779"></p>
<p>打开页面后，点击 <code>Download</code> 按钮, 等待 Pycharm 专业版下载完毕。</p>
<h2 id="第二步：安装-Pycharm-2022-3-版本"><a href="#第二步：安装-Pycharm-2022-3-版本" class="headerlink" title="第二步：安装 Pycharm 2022.3 版本"></a>第二步：安装 Pycharm 2022.3 版本</h2><p>如果电脑之前有安装老版本 Pycharm， 需要先卸载。卸载完成后，双击刚刚下载好的 Pycharm <code>2022.3</code> 版本安装包。弹框会提示选择安装路径，我这里直接选择的默认安装路径</p>
<p><code>C:\Program Files\JetBrains\IntelliJ Pycharm 2022.3</code> , 然后点击 <code>Next</code> 按钮：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261703-e9a1.jpeg" alt="安装 Pycharm 2022.3 版本"></p>
<p>然后，勾选 <code>Create Desktop Shortcut</code> 创建 Pycharm 桌面快捷启动方式，以方便后面快速打开 Pycharm，再点击 <code>Next</code> 按钮 :</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261703-86a9.jpeg" alt="开始安装 Pycharm 2022.3 版本：创建快捷启动图标"></p>
<p>点击 <code>Install</code> 按钮，开始安装：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261703-cbc4.jpeg" alt="开始安装 Pycharm 2022.3 版本：点击 Install 按钮"></p>
<p>等待安装完成后，勾选 <code>Run IntellJ Pycharm</code>, 点击 <code>Finish</code> 按钮即运行 Pycharm :</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-5d5e.jpeg" alt="安装 Pycharm 2022.3 版本成功"></p>
<p>Pycharm 运行成功后，会弹出如下对号框，强制用户需要先登录 JetBrains 账户才能使用：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261703-4891.jpeg" alt="Pycharm 2022.3 版本提示需要先登录 JetBrains 账户"></p>
<p>不用管登录的事，点击 <code>Exit</code> 按钮退出对话框，装备开始破解激活。</p>
<h2 id="第四步：破解补丁下载"><a href="#第四步：破解补丁下载" class="headerlink" title="第四步：破解补丁下载"></a>第四步：破解补丁下载</h2><p>破解补丁我放置在了网盘中，提供了多个备用链接，以防下载失效。</p>
<blockquote>
<p><strong>提示：破解补丁的网盘链接文末获取~</strong></p>
</blockquote>
<p>补丁下载成功后，记得<strong>先解压</strong> **, 解压后的目录如下, <strong>本文后面所需补丁都在下面标注的这个文件夹中</strong>：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-84c2.jpeg" alt="Pycharm 破解补丁下载"></p>
<p>点击【方式3】文件夹 , 进入到文件夹 <code>/jetbra</code>，目录如下：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261703-b89a.jpeg" alt="Pycharm 破解补丁文件夹最底层目录"></p>
<h2 id="第五步：开始破解"><a href="#第五步：开始破解" class="headerlink" title="第五步：开始破解"></a>第五步：开始破解</h2><h3 id="Windows-用户"><a href="#Windows-用户" class="headerlink" title="Windows 用户"></a>Windows 用户</h3><p>将上面图示的补丁的所属文件夹 <code>/jetbra</code> 复制电脑某个位置，笔者这里放置到了 <code>D:/</code> 盘根目录下:</p>
<blockquote>
<p>注意： <strong>补丁所属文件夹需单独存放</strong>，且<strong>放置的路径不要有中文与空格</strong>，以免 Pycharm 读取补丁错误。</p>
</blockquote>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261703-fdb2.jpeg" alt="将 Pycharm 破解补丁放置到 D 盘下"></p>
<p>点击进入 <code>/jetbra</code> 补丁目录，再点击进入 <code>/scripts</code> 文件夹，双击执行 <code>install-current-user.vbs</code> 破解脚本：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261703-8e2a.jpeg" alt="Pycharm 破解补丁执行脚本"></p>
<blockquote>
<p><strong>注意：如果执行脚本被安全软件提示有风险拦截，允许执行即可。</strong></p>
</blockquote>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-a79f.jpeg" alt="Pycharm 破解脚本执行后弹框提示信息"></p>
<p>会提示安装补丁需要等待数秒。点击【<strong>确定</strong>】按钮后，过程大概 10 - 30 秒，如看到弹框提示 <code>Done</code> 时，表示激活破解成功：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-5fac.jpeg" alt="补丁执行成功后，提示 Done"></p>
<h3 id="Mac-x2F-Linux-用户"><a href="#Mac-x2F-Linux-用户" class="headerlink" title="Mac &#x2F; Linux 用户"></a>Mac &#x2F; Linux 用户</h3><p>Mac &#x2F; Linux 系统与上面 Windows 系统一样，需将补丁所属文件 <code>/jetbra</code> 复制到某个路径，且<strong>路径不能包含空格与中文</strong>。</p>
<p>之后，打开终端，进入到 <code>/jetbra/scripts</code> 文件夹， 执行 <code>install.sh</code> 脚本, 命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo bash install.sh</span><br></pre></td></tr></table></figure>

<p>看到提示 <code>Done</code> , 表示激活成功。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-28ee.jpeg" alt="Mac/Linux 系统执行破解补丁成功后，提示 Done"></p>
<p>部分小伙伴 Mac 系统执行脚本遇到如下错误：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-71ca.jpeg" alt="Mac 执行破解脚本报错"></p>
<p><strong>解决方法：</strong></p>
<p>可先执行如下命令，再执行脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LC_COLLATE=&#x27;C&#x27;</span><br><span class="line">export LC_CTYPE=&#x27;C&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-7f27.jpeg" alt="img"></p>
<h3 id="执行脚本，都干了些啥？"><a href="#执行脚本，都干了些啥？" class="headerlink" title="执行脚本，都干了些啥？"></a>执行脚本，都干了些啥？</h3><ul>
<li><p>Windows 用户执行脚本后，脚本会自动在环境变量 -&gt; 用户变量下添加了 <code>Pycharm_VM_OPTIONS</code> 变量，变量值为 <code>/jetbra</code> 文件夹下的 <code>.vmoptions</code> 参数文件绝对路径，如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-b52d.jpeg" alt="img"></p>
<p>然后，脚本自动在 <code>pycharm.vmoptions</code> 文件中引用了破解补丁 ：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-17ec.jpeg" alt="img"></p>
<blockquote>
<p><strong>提示： 细心的小伙伴应该也发现了，本文的破解方式与文章开头《第二种 Pycharm 破解方法》的区别在于，这种方式提供了自动化脚本，脚本免去了手动引入补丁的繁琐步骤，一切都由脚本来完成了。</strong></p>
</blockquote>
</li>
<li><p>Mac &#x2F; Linux 用户执行脚本后，脚本会自动在当期用户环境变量文件中添加了相关参数文件，Mac &#x2F; Linux 需重启系统，以确保环境变量生效。</p>
</li>
</ul>
<p>小伙伴们也可自行检查一下，如果没有自动添加这些参数，说明脚本执行没有成功。</p>
<h2 id="第六步：重启-Pycharm"><a href="#第六步：重启-Pycharm" class="headerlink" title="第六步：重启 Pycharm"></a>第六步：重启 Pycharm</h2><p><strong>脚本执行成功后，一定要重启 Pycharm ~~</strong></p>
<p><strong>脚本执行成功后，一定要重启 Pycharm ~~</strong></p>
<h2 id="第七步：填入指定激活码完成激活"><a href="#第七步：填入指定激活码完成激活" class="headerlink" title="第七步：填入指定激活码完成激活"></a>第七步：填入指定激活码完成激活</h2><p>重新打开 Pycharm 后，复制下面的激活码：</p>
<p>EUWT4EE9X2-eyJsaWNlbnNlSWQiOiJFVVdUNEVFOVgyIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDkwMlBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6MzUzOTQ0NTE3IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-FT9l1nyyF9EyNmlelrLP9rGtugZ6sEs3CkYIKqGgSi608LIamge623nLLjI8f6O4EdbCfjJcPXLxklUe1O&#x2F;5ASO3JnbPFUBYUEebCWZPgPfIdjw7hfA1PsGUdw1SBvh4BEWCMVVJWVtc9ktE+gQ8ldugYjXs0s34xaWjjfolJn2V4f4lnnCv0pikF7Ig&#x2F;Bsyd&#x2F;8bsySBJ54Uy9dkEsBUFJzqYSfR7Z&#x2F;xsrACGFgq96ZsifnAnnOvfGbRX8Q8IIu0zDbNh7smxOwrz2odmL72UaU51A5YaOcPSXRM9uyqCnSp&#x2F;ENLzkQa&#x2F;B9RNO+VA7kCsj3MlJWJp5Sotn5spyV+gA&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<p>粘贴到输入框内，点击 <code>Activate</code> 按钮，就激活成功了。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-b626.jpeg" alt="输入 Pycharm 破解激活码"></p>
<blockquote>
<p>PS: 有部分小伙伴反应，重启 Pycharm 填入激活码依然无法激活，重启系统才行，如果有小伙伴遇到这种情况，不妨试试看~</p>
</blockquote>
<p>激活成功后，又可以开心的 coding 了 ~</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042104-396d.jpeg" alt="Pycharm 2022.3 版本激活破解成功"></p>
<h2 id="你可能会遇到的问题"><a href="#你可能会遇到的问题" class="headerlink" title="你可能会遇到的问题"></a>你可能会遇到的问题</h2><h3 id="一切按照教程来，输入激活码提示-Key-is-invalid？"><a href="#一切按照教程来，输入激活码提示-Key-is-invalid？" class="headerlink" title="一切按照教程来，输入激活码提示 Key is invalid？"></a>一切按照教程来，输入激活码提示 <code>Key is invalid</code>？</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-6abc.jpeg" alt="IDEA 输入激活码提示 key is invalid"></p>
<p>输入激活码提示 <code>key is invalid</code>, 常见原因汇总到下面这篇文章了，可参考对照一下：</p>
<p><a href="https://blog.junxu666.top/p/40017.html">《JetBrains 产品输入激活码 Key is invalid 解决方案》</a></p>
<h2 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h2><h3 id="激活成功后，不要升级-Pycharm-版本"><a href="#激活成功后，不要升级-Pycharm-版本" class="headerlink" title="激活成功后，不要升级 Pycharm 版本"></a>激活成功后，不要升级 Pycharm 版本</h3><p>官方反制手段越来越严厉，这个版本能激活，新版本大概率补丁就被限制了。所以，如果打开 Pycharm 后，右下角若出现提示升级新版本，请不要升级版本。能用就行，它不香嘛！</p>
<h3 id="激活成功后，补丁文件夹能不能删掉或者移动？"><a href="#激活成功后，补丁文件夹能不能删掉或者移动？" class="headerlink" title="激活成功后，补丁文件夹能不能删掉或者移动？"></a>激活成功后，补丁文件夹能不能删掉或者移动？</h3><p>上文中说到，执行脚本后会添加环境变量，变量值对应了你放置补丁位置的路径，删除掉或者移动，再打开 Pycharm 就找不到对应文件了，激活也就失效了。放着吃灰就行，别动它。</p>
<h2 id="激活补丁下载地址"><a href="#激活补丁下载地址" class="headerlink" title="激活补丁下载地址"></a>激活补丁下载地址</h2><blockquote>
<p>PS: 破解补丁页面提取人数过多，导致分享的百度网盘链接容易被封：<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042104-18ca.jpeg" alt="Pycharm 2022.3破解补丁分享失败">蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<blockquote>
<p><strong>需要的小伙伴，扫描下方公众号二维码，或者关注公众号： <code>徐公</code>，回复关键字：<code>Pycharm</code>, 即可免费无套路获取激活码、破解补丁，持续更新中~。</strong></p>
</blockquote>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-77ab.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 年 Pycharm 激活失效？ 提醒key is  invalid，解决方法都在这里了</title>
    <url>/p/13872.html</url>
    <content><![CDATA[<p>JetBrains 系列产品（IDEA、Pycharm 等）使用本站破解教程 (不论是执行激活脚本自动引入破解补丁，还是手动引入补丁)，在输入激活码时，部分小伙伴反应说提示 <code>Key is invalid</code> 无法激活, 如下图所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-6abc.jpeg" alt="IDEA 输入激活码提示 key is invalid"></p>
<h3 id="1-记得执行以下脚本，不要出现中文路径"><a href="#1-记得执行以下脚本，不要出现中文路径" class="headerlink" title="1. 记得执行以下脚本，不要出现中文路径"></a>1. 记得执行以下脚本，不要出现中文路径</h3><p><a href="https://blog.junxu666.top/p/7624.html">2023 年 Pycharm 最新激活码_破解教程，亲测有用，永久有效</a></p>
<p><a href="https://blog.junxu666.top/p/29666.html">2023 IDEA 2022.3.2 最新激活教程、亲测有效</a></p>
<p>如果你按照我的文章  <a href="https://blog.junxu666.top/p/29666.html">2023 IDEA 2022.3.2 最新激活教程、亲测有效</a>，一步步执行，还是无法激活，可以优先试一下这个方法</p>
<p>第一：除把补丁复制到地址改配置文件外，进入到scripts目录下执行对应系统的脚本,</p>
<ul>
<li>windows 是执行 install-current-user.vbs 脚本</li>
<li>mac 是 install.sh 脚本</li>
</ul>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042104-9f40.png" alt="image-20230404213610710"></p>
<p><strong>执行完脚本记得重启</strong>,一定要重启软件，一定要重启软件</p>
<p>脚本运行后<strong>重新打开软件</strong>，重新输入激活码，不再出现Key is invalid，成功破解, </p>
<p><strong>同时记得不要出现中文路径和空格，百分九十九的人就是不认真看教程，出现了中文路径。</strong></p>
<h3 id="2、检查复制激活码时，是否缺漏"><a href="#2、检查复制激活码时，是否缺漏" class="headerlink" title="2、检查复制激活码时，是否缺漏"></a><strong>2、检查复制激活码时，是否缺漏</strong></h3><p>详细检查复制激活码的时候，是否缺漏，激活码是固定的，少一个字母都不行。</p>
<p>有时候因为网页复制过来的原因，激活码会错误，，有时候显示多行</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042104-eb6b.png" alt="image-20230404214622521"></p>
<p>导致激活不了，正确的激活码复制到 sublime 显示，应该是只有一行</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304042104-650b.png" alt="image-20230404214814107"></p>
<p><strong>换一个新的激活码，新的激活码都在这里</strong></p>
<p><a href="https://blog.junxu666.top/p/46415.html"><strong>2023 年Jebrain 产品激活码（包括 idea，pycharm，datagrip 等）</strong></a></p>
<p><a href="https://blog.junxu666.top/p/46415.html"><strong>2023 年Jebrain 产品激活码（包括 idea，pycharm，datagrip 等）</strong></a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-10ed.png" alt="img"></p>
<h3 id="3、尝试降低一个小版本试试"><a href="#3、尝试降低一个小版本试试" class="headerlink" title="3、尝试降低一个小版本试试"></a><strong>3、尝试降低一个小版本试试</strong></h3><p>部分群里小伙伴反馈说，下载了小版本的 IDE, 再使用教程才 OK 了，比如 <code>2022.2.3</code> 版本降低到 <code>2022.2.2</code> 或者 <code>2022.2.1</code> 等小一点的版本，这种方法也可尝试一下~</p>
<p><strong>IDEA官方历史版本下载</strong></p>
<p><a href="https://www.jetbrains.com/idea/download/other.html">https://www.jetbrains.com/idea/download/other.html</a></p>
<h2 id="最新补丁和激活码"><a href="#最新补丁和激活码" class="headerlink" title="最新补丁和激活码"></a>最新补丁和激活码</h2><p>公众号 <strong>徐公</strong> 回复 <strong>idea2</strong>，即可获取</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303240003-596a.png" alt="img"></p>
<h2 id="导致-Key-is-invalid-可能的原因汇总"><a href="#导致-Key-is-invalid-可能的原因汇总" class="headerlink" title="导致 Key is invalid 可能的原因汇总"></a><strong>导致</strong> <code>Key is invalid</code> <strong>可能的原因汇总</strong></h2><hr>
<p>这边汇总了小伙伴们反馈给我的，可能导致 <code>Key is invalid</code> 的原因，总之，五花八门，可对照查看是否犯有同样的错误：</p>
<h3 id="必看"><a href="#必看" class="headerlink" title="必看"></a>必看</h3><p><a href="https://blog.junxu666.top/p/10778.html">2023 年 Pycharm 最新激活码_破解教程，亲测有用，永久有效</a></p>
<p><a href="https://blog.junxu666.top/p/29666.html">2023 IDEA 2022.3.2 最新激活教程、亲测有效</a></p>
<p>如果你按照我的文章  <a href="https://blog.junxu666.top/p/29666.html">2023 IDEA 2022.3.2 最新激活教程、亲测有效</a>，一步步执行，还是无法激活，可以优先试一下这个方法</p>
<p>除把补丁复制到地址改配置文件外，进入到scripts目录下执行对应系统的脚本</p>
<p>脚本运行后重新打开pycharm输入code，不再出现Key is invalid，成功破解</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/7UNQ4BAAK4.png" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/REOA4BAAYE.png" alt="img"></p>
<h3 id="1、请勿登录-JetBrains-账号"><a href="#1、请勿登录-JetBrains-账号" class="headerlink" title="1、请勿登录 JetBrains 账号"></a><strong>1、请勿登录 JetBrains 账号</strong></h3><p><strong>使用本站教程的破解补丁，切记无需登录 JetBrains 账号：</strong></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/X25A2BAAY4.jpeg" alt="img"></p>
<p>使用破解补丁，无需登录 JetBrains 账号</p>
<h3 id="2、安装过老版本-IDE，-但是未卸载干净"><a href="#2、安装过老版本-IDE，-但是未卸载干净" class="headerlink" title="2、安装过老版本 IDE， 但是未卸载干净"></a><strong>2、安装过老版本 IDE， 但是未卸载干净</strong></h3><p>安装过老版本 IDE，但是没有卸载干净，这其中包括一些<em><strong>缓存目录、注册表未删除干净</strong></em>，可能会导致出现 <code>key is invalid</code>, 这里拿 IDEA 举例，其他如 Pycharm 、Webstorm 等也会出现这样的情况。</p>
<p>此情况笔者在 Mac Intel 芯片电脑上安装 IDEA 就亲身踩坑了，因为 IDEA 没卸载干净，导致无法激活成功，彻底卸载 IDEA 后，再重新按教程来就激活成功了。</p>
<h3 id="3、确认激活脚本是否执行成功？"><a href="#3、确认激活脚本是否执行成功？" class="headerlink" title="3、确认激活脚本是否执行成功？"></a><strong>3、确认激活脚本是否执行成功？</strong></h3><p>部分小伙伴使用的 <a href="https://www.quanxiaoha.com/article/idea-pojie.html"><em><strong>激活脚本 + 激活码（全自动模式）</strong></em></a> 这种方式，执行脚本后，提示 <code>Done</code> 才表示成功：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/X25A2BAAUE.jpeg" alt="img"></p>
<p>补丁执行成功后，提示 Done</p>
<p>执行脚本后，会添加相关环境变量，比如 IDEA 会添加 <code>IDEA_VM_OPTIONS</code>, 如下图所示：</p>
<p>以及在 <code>/jetbra/vmoptions</code> 文件夹中对应的 <code>.vmoptions</code> 配置文件中引入破解补丁的绝对路径，比如，你要激活的是 IDEA，那么会在对应的 <code>idea.vmoptions</code> 文件中引入补丁，如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/X65A2BAA6A-20230228205009837.jpeg" alt="img"></p>
<p>所以，<strong>上面两点都需要确认是否正确添加，成功添加了，才表示脚本执行成功了，另外，补丁路径不能包含中文以及空格等特殊字符</strong>。</p>
<h3 id="4、只单独引用了破解补丁，其他相关破解文件丢失了"><a href="#4、只单独引用了破解补丁，其他相关破解文件丢失了" class="headerlink" title="4、只单独引用了破解补丁，其他相关破解文件丢失了"></a><strong>4、只单独引用了破解补丁，其他相关破解文件丢失了</strong></h3><p>部分小伙伴使用的 <a href="https://www.quanxiaoha.com/article/idea-jihuoma.html"><em><strong>破解补丁 + 激活码（手动引用补丁）</strong></em></a> 这种方式，结果不仔细看教程，激活过程中只单独复制了 <code>ja-netfilter.jar</code> 一个文件，结果输入激活码时报 <code>Key is invalid</code>, <strong>注意是所在的整个文件夹都需要复制，然后再引用补丁，而不是仅仅复制一个</strong> <code>ja-netfilter.jar</code> <strong>文件</strong>；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/AX4Q2BAARQ.jpeg" alt="img"></p>
<p>复制整个破解补丁文件夹</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/CT4Q2BAAK4.jpeg" alt="img"></p>
<p>引用破解补丁</p>
<h3 id="5、引用格式不正确、路径中包含空格和中文"><a href="#5、引用格式不正确、路径中包含空格和中文" class="headerlink" title="5、引用格式不正确、路径中包含空格和中文"></a><strong>5、引用格式不正确、路径中包含空格和中文</strong></h3><p>注意，使用手动引用破解补丁这种方式的，配置文件中，引用补丁必须以 <code>-javaagent:</code> 开头，后面跟着补丁的绝对路径，开头不能丢，否则无法引用破解补丁成功；</p>
<p>检查引用的补丁路径中<strong>不能包含空格和中文，需要全英文才行</strong>；</p>
<h3 id="6、重启大法好"><a href="#6、重启大法好" class="headerlink" title="6、重启大法好"></a><strong>6、重启大法好</strong></h3><p>部分小伙伴反馈说重启系统后，才激活成功的，这种法子也可以尝试一下；</p>
<h3 id="7、补丁位置被挪动"><a href="#7、补丁位置被挪动" class="headerlink" title="7、补丁位置被挪动"></a><strong>7、补丁位置被挪动</strong></h3><p>检查破解补丁的位置是否动了，切记不要乱动，不然重启 IDE 又找不到补丁位置了，自然就失败了；</p>
<h3 id="8、补丁未使用公众号最新的补丁"><a href="#8、补丁未使用公众号最新的补丁" class="headerlink" title="8、补丁未使用公众号最新的补丁"></a><strong>8、补丁未使用公众号最新的补丁</strong></h3><p>还有这种情况：有的小伙伴之前通过本站激活成功了，想破解最新版本的 IDE, 因为不知道补丁已经换了，虽然补丁名字一样，于是没换补丁，只重新输入了激活码，结果显示 <code>Key is invalid</code>, <strong>请使用公众号最新补丁，虽然补丁名字可能一样</strong>。公众号 <strong>徐公</strong>，回复 <strong>idea2</strong></p>
<h3 id="10、尝试降低一个小版本试试"><a href="#10、尝试降低一个小版本试试" class="headerlink" title="10、尝试降低一个小版本试试"></a><strong>10、尝试降低一个小版本试试</strong></h3><p>部分群里小伙伴反馈说，下载了小版本的 IDE, 再使用教程才 OK 了，比如 <code>2022.2.3</code> 版本降低到 <code>2022.2.2</code> 或者 <code>2022.2.1</code> 等小一点的版本，这种方法也可尝试一下~</p>
<p><strong>IDEA官方历史版本下载</strong></p>
<p><a href="https://www.jetbrains.com/idea/download/other.html">https://www.jetbrains.com/idea/download/other.html</a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/Z4AA4BAAME.png" alt="img"></p>
<h3 id="11、检查复制激活码时，是否缺漏"><a href="#11、检查复制激活码时，是否缺漏" class="headerlink" title="11、检查复制激活码时，是否缺漏"></a><strong>11、检查复制激活码时，是否缺漏</strong></h3><p>详细检查复制激活码的时候，是否缺漏，激活码是固定的，少一个字母都不行。如果还不行，换一个新的激活码</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/YUAA4BAAQ4-20230228205038595.png" alt="img"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/ZS5A2BAAY4-20230228205044118.png" alt="img"></p>
<h2 id="最新补丁和激活码-1"><a href="#最新补丁和激活码-1" class="headerlink" title="最新补丁和激活码"></a>最新补丁和激活码</h2><p>公众号 <strong>徐公</strong> 回复 <strong>pycharm2</strong>，即可获取</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/I5UQMBAAEM.png" alt="img"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 年 mac Beyond compare 激活，破解教程，亲测可用，永久更新</title>
    <url>/p/16598.html</url>
    <content><![CDATA[<p>大家好，本篇文章，主要  mac Beyond compare 的激活，破解教程，亲测可用，永久更新。</p>
<p><a href="https://blog.junxu666.top/p/16598.html">2023 年 mac Beyond compare 激活，破解教程，亲测可用，永久更新</a></p>
<p><a href="https://blog.junxu666.top/p/16599.html">2023 年 windows Beyond compare 激活，破解教程，亲测可用，永久更新</a></p>
<p>主要有两种方式</p>
<ol>
<li>激活码激活</li>
<li>无限期使用</li>
</ol>
<h2 id="第一种方式，激活码激活"><a href="#第一种方式，激活码激活" class="headerlink" title="第一种方式，激活码激活"></a>第一种方式，激活码激活</h2><h3 id="第一步，下载"><a href="#第一步，下载" class="headerlink" title="第一步，下载"></a>第一步，下载</h3><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030623-980721.png" alt="image-20230306230951689"></p>
<blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030621-38e9a6.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">IDEA 2022.3.2破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>bc4</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/I5UQMBAAEM.png" alt="img"></p>
<p><strong>下载完成之后，双击打开，进行安装</strong></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030623-4fc9ed.png" alt="image-20230306230251699"></p>
<h3 id="第二步：编辑-hosts-文件"><a href="#第二步：编辑-hosts-文件" class="headerlink" title="第二步：编辑 hosts 文件"></a>第二步：编辑 hosts 文件</h3><p>打开 &#x2F;etc&#x2F; 目录，编辑 hosts 文件</p>
<p>需要将以下数据写入到 Hosts 文件以屏蔽官方验证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Beyond Compare;</span><br><span class="line"></span><br><span class="line">127.0.0.1 www.scootersoftware.com</span><br><span class="line"></span><br><span class="line">127.0.0.1 scootersoftware.com</span><br></pre></td></tr></table></figure>



<h3 id="第三步：激活密钥激活步骤："><a href="#第三步：激活密钥激活步骤：" class="headerlink" title="第三步：激活密钥激活步骤："></a>第三步：<strong>激活密钥激活步骤：</strong></h3><ol>
<li>方法一：运行后在应用主界面底部有一块红色的区域，最后一个「注册」区点击「输入您的版本 4 的授权密钥」，点击「输入密钥」，复制下面全部灰色部分，粘贴进去。</li>
<li>方法二：如出现评估模式，点击「输入密钥」，然后复制下面全部灰色部分，粘贴进去。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">--- BEGIN LICENSE KEY ---</span><br><span class="line"></span><br><span class="line">8QP7zlhDPb+aoFyysKK68NwROgI0+mNV1pEhPK2CQF95zYrEF9gvL8TfR</span><br><span class="line"></span><br><span class="line">moO+BiBoJu1T4g-3i0lpQ1BytfO7QL4jnXU-G18UuzNCGL3JtqLxJghs2</span><br><span class="line"></span><br><span class="line">2gzB5VZnYKQfXfYZG2LL-Vjl43k4Pili1DCBCXsMm3xei6VKeiw4eWFwJ</span><br><span class="line"></span><br><span class="line">A91xx0gngBUWCpK4GvKSEW0VNqCwECuLUXMie2MMogTmySJ6Xn7Rf2rgy</span><br><span class="line"></span><br><span class="line">3wqgxExgQWVCVbdD7e3phco7vt2xTH2m0qJEoFN3HVf9l5PWQCO3JflvS</span><br><span class="line"></span><br><span class="line">CSmQYw+ZkpFcZtfH3EPZBAkfjMEbbTwOTNJT-PTixf2619csMbgIn+M5E</span><br><span class="line"></span><br><span class="line">++</span><br><span class="line"></span><br><span class="line">--- END LICENSE KEY -----</span><br></pre></td></tr></table></figure>







<h2 id="第二种方式无限期使用"><a href="#第二种方式无限期使用" class="headerlink" title="第二种方式无限期使用"></a>第二种方式无限期使用</h2><h3 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h3><p>Beyond Compare每次启动后会先检查注册信息，试用期到期后就不能继续使用。解决方法是在启动前，先删除注册信息，然后再启动，这样就可以永久免费试用了。</p>
<h3 id="二、下载"><a href="#二、下载" class="headerlink" title="二、下载"></a>二、下载</h3><p>首先下载Beyond Compare最新版本，链接如下：<a href="https://www.scootersoftware.com/download.php">https://www.scootersoftware.com/download.php</a><br><a href="https://img2020.cnblogs.com/blog/432759/202006/432759-20200601134122882-904426997.png"><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030721-1eb6ae.png" alt="beyond"></a></p>
<h3 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h3><p>下载完成后，直接安装。</p>
<p>四、创建BCompare文件<br>1.进入Mac应用程序目录下，找到刚刚安装好的Beyond Compare，路径如下&#x2F;Applications&#x2F;Beyond Compare.app&#x2F;Contents&#x2F;MacOS。<br>2.修改启动程序文件BCompare为BCompare.real。<br>3.在当前目录下新建一个文件BCompare，文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">rm &quot;/Users/$(whoami)/Library/Application Support/Beyond Compare/registry.dat&quot;</span><br><span class="line">&quot;`dirname &quot;$0&quot;`&quot;/BCompare.real $@</span><br></pre></td></tr></table></figure>

<p>4.保存BCompare文件。<br>5.修改文件的权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod a+x /Applications/Beyond\ Compare.app/Contents/MacOS/BCompare</span><br></pre></td></tr></table></figure>

<p>以上步骤完成后，再次打开Beyond Compare就可以正常使用了，enjoy it。</p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Beyond compare</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 年 windows Beyond compare 激活，破解教程，亲测可用，永久更新</title>
    <url>/p/16599.html</url>
    <content><![CDATA[<p><strong>大家好，本篇文章，主要  windows Beyond compare 的激活，破解教程，亲测可用，永久更新。</strong></p>
<p><a href="https://blog.junxu666.top/p/16598.html">2023 年 mac Beyond compare 激活，破解教程，亲测可用，永久更新</a></p>
<p><a href="https://blog.junxu666.top/p/16599.html">2023 年 windows Beyond compare 激活，破解教程，亲测可用，永久更新</a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030623-f708d4.jpeg" alt="img"></p>
<h2 id="Beyond-Compare-4-4-0-破解版主要特点："><a href="#Beyond-Compare-4-4-0-破解版主要特点：" class="headerlink" title="Beyond Compare 4.4.0 破解版主要特点："></a><strong>Beyond Compare 4.4.0 破解版主要特点：</strong></h2><ul>
<li>最好的 FTP 和格式同步工具</li>
<li>出色的文件夹管理器</li>
<li>三种文件合并方式</li>
<li>可以完美区分文件夹和文件</li>
<li>配备最新技术，可高效处理所有 FTP、SFTP、HTML 和其他格式的数据</li>
<li>最新更新的工具可以更有效地处理 Diff&#x2F;Fix 文件</li>
<li>全天候在线帮助团队</li>
</ul>
<h2 id="如何破解Beyond-Compare-4-4-0"><a href="#如何破解Beyond-Compare-4-4-0" class="headerlink" title="如何破解Beyond Compare 4.4.0 ?"></a><strong>如何破解Beyond Compare 4.4.0 ?</strong></h2><h3 id="下载Beyond-Compare破解安装包"><a href="#下载Beyond-Compare破解安装包" class="headerlink" title="下载Beyond Compare破解安装包"></a>下载Beyond Compare破解安装包</h3><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030623-b0954d.png" alt="image-20230306232233427"></p>
<blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030621-38e9a6.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">IDEA 2022.3.2破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>bc4</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/I5UQMBAAEM.png" alt="img"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>双击安装程序，选择默认的快速安装方法，点击“完成”，软件自带激活码，无需激活即可使用</p>
<h2 id="Beyond-Compare破解版新版本带来了诸多更新"><a href="#Beyond-Compare破解版新版本带来了诸多更新" class="headerlink" title="Beyond Compare破解版新版本带来了诸多更新;"></a><strong>Beyond Compare破解版新版本带来了诸多更新;</strong></h2><ul>
<li>它支持 TLS 1.3</li>
<li>包括对 SFTP 支持的各种增强</li>
<li>最新版本附带更新的 Dropbox 配置文件，以使用新的短期访问令牌。</li>
<li>L inux&#x2F;macOS ：修复了 Unicode 基本多语言平面之外的字符损坏(例如，表情符号)。</li>
<li>macOS ：修复了编辑菜单在比较树视图具有焦点时启动的模式对话框中不显示撤消&#x2F;重做&#x2F;剪切&#x2F;复制&#x2F;粘贴的问题。</li>
<li>Linux ：修复了在禁用“确认文件复制”的情况下启动文件复制时挂起的问题。</li>
<li>Windows ：修复了各种类型的 NTFS 重解析点的加载比较，包括本地 OneDrive 文件夹。</li>
<li>此外，解决了在 macOS 10.15 Catalina 上双击“比较结果”对话框启动文件比较的问题。</li>
<li>它已更新为 64 位并在 Cocoa 中重新实现了接口。</li>
<li>现在它支持 macOS 10.11 到 10.15。</li>
<li>它还支持 Microsoft OneDrive。</li>
<li>文本编辑器增强了 macOS 特定的行为和增强的性能。</li>
<li>它支持全屏模式。</li>
<li>最新版本支持每个显示器的高 DPI 图像。</li>
<li>各种其他改进和错误修复</li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030623-075504.jpg" alt="beyond compare中文破解版"></p>
<p>1. </p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Beyond compare</tag>
      </tags>
  </entry>
  <entry>
    <title>AutoCAD 2023 激活、破解教程，永久激活，亲测可用</title>
    <url>/p/11006.html</url>
    <content><![CDATA[<h2 id="AutoCAD-2023的软件介绍："><a href="#AutoCAD-2023的软件介绍：" class="headerlink" title="AutoCAD 2023的软件介绍："></a>AutoCAD 2023的软件介绍：</h2><p><strong>AutoCAD 2023</strong>目前已经正式发布，是世界领先的 2D 和 3D CAD 工具的设计和文档软件。它将允许您使用其强大而灵活的功能来设计和塑造您周围的世界。加快文档编制、无缝分享想法并在 3D 中更直观地探索想法。 AutoCAD 软件拥有数以千计的可用附加组件，可提供最大的灵活性，并可根据您的特定需求进行定制。是时候进一步设计了。</p>
<p>Autodesk AutoCAD 2023简称为cad2023，这是在建筑师、工程师、建筑专业人员等人群里知名度极其广的一款计算机辅助设计 (CAD) 软件，其主要就是用于二维绘图、详细绘制、设计文档和基本三维设计，也许有些人会说这些功能在市面上很多软件中都可以实现，但是吧，在这款cad软件不仅具有良好的用户界面可以轻轻松松的帮助用户完成，还拥有多文档设计环境，就算你是非计算机专业人员也能很快地学会上手使用，非常的不错，总之就是即对新人友好，又能凭借丰富全面的功能轻松满足专业人士的使用。</p>
<p><strong>PS：本此提供的是正式cad2023破解版，其中还附带了相对应的注册机及序列号和密钥，从而可以完美有效的帮助用户免费激活软件进行无限制的永久使用，欢迎需要的朋友前来下载。</strong></p>
<h3 id="系统要求："><a href="#系统要求：" class="headerlink" title="系统要求："></a>系统要求：</h3><p>操作系统：Microsoft Windows 10（仅限 64 位）（1803 或更高版本）</p>
<p>CPU：基本：2.5–2.9 GHz 处理器&#x2F;推荐：3+ GHz 处理器</p>
<p>多处理器：由应用程序支持</p>
<p>内存：8 GB &#x2F; 推荐：16 GB</p>
<p>显示屏分辨率</p>
<p>传统显示器：1920 x 1080 真彩色</p>
<p>高分辨率和 4K 显示器：在 Windows 10、64 位系统上支持高达 3840 x 2160 的分辨率（带有功能强大的显卡）</p>
<p>磁盘空间：6.0 GB</p>
<h3 id="AutoCAD-2023安装破解教程"><a href="#AutoCAD-2023安装破解教程" class="headerlink" title="AutoCAD 2023安装破解教程"></a>AutoCAD 2023安装破解教程</h3><p>下载地址：在微信公众号 【<strong>硬件工程师</strong>】，回复 <strong>autocard</strong> 即可获取下载地址</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-27f2.png" alt="image-20230307000909729"></p>
<p>1、挂载 ISO 文件后（右键解压缩也可以），运行 setup.exe</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-411e.png" alt="img"></p>
<p>2、建议安装过程中断网</p>
<p>3、勾选同意许可协议，并继续下一步</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-1d11.jpg" alt="img"></p>
<p>4、选择程序安装位置，点击isatall，程序将进行安装</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-c1f2.jpg" alt="img"></p>
<p>5、等待安装完成，安装好后不要运行</p>
<p><strong>英文版激活步骤</strong></p>
<p>6、用 Crack 目录下的 Acad.exe 替换安装好的程序文件即可。</p>
<p>7、打开文件就可以使用啦</p>
<p><strong>中文版激活步骤</strong></p>
<p>6、回到安装包，复制AutoCAD2023-2022-2021Patch.exe。（没有的同学关闭杀毒重新解压）</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-7b72.png" alt="img"></p>
<p>7、再选中“Autodesk 2023-简体中文”图标，然后点击右键选择“打开文件所在的位置”</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031000-0f2c1a.png" alt="img"></p>
<p>8、右键空白处—粘贴。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-40a6.png" alt="img"></p>
<p>9、右键AutoCAD2023-2022-2021Patch，以管理员身份运行粘贴过来的程序</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-b225.png" alt="img"></p>
<p>10、点击应用。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-8401.png" alt="img"></p>
<p>11、点击关闭。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-61b2.png" alt="img"></p>
<p>12、现在我们打开安装好的AutoCAD 2023 64位简体中文版软件</p>
<p><strong>注意：不要点击许可证或类似的东西。</strong></p>
<h3 id="AutoCAD-2023新功能"><a href="#AutoCAD-2023新功能" class="headerlink" title="AutoCAD 2023新功能"></a>AutoCAD 2023新功能</h3><p><strong>1、标记导入和标记辅助（2023年新增功能）</strong></p>
<p>Markup Import和Markup Assist使用机器学习来识别标记，并提供一种以较少人工操作来查看和插入图纸修订的方法。</p>
<p>标记可以作为PDF、PNG或JPG导入，并覆盖在Trace工作区中的绘图之上。导入文件中的标记会自动识别为多行文字、多引线和修订云。Markup Assist允许您将那些已识别的标记作为几何图形插入到绘图中。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-bfcd84.png" alt="img"></p>
<p><strong>2、我的见解：宏观顾问（2023年新增功能）</strong></p>
<p>宏洞察是建议的命令宏，旨在帮助您提高工作效率。</p>
<p>命令宏包含一系列命令和系统变量，有助于自动执行您在AutoCAD中工作时经常执行的任务。AutoCAD根据您独特的命令用法生成宏观见解。使用命令宏选项板查看、尝试和保存建议的命令宏。命令宏可以添加到“命令宏”面板的“已保存”选项卡以供使用，甚至可以添加到功能区。</p>
<p>注意：此功能目前仅在AutoCAD上受支持，不适用于基于AutoCAD的工具集。此外，您必须拥有商业许可证并在指定用户计划中才能获得见解。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-c5869a.png" alt="img"></p>
<p><strong>3、追踪（2023年新增功能）</strong></p>
<p>在Trace功能的初始版本的基础上，您现在可以在桌面中创建跟踪并为其他人创建的跟踪做出贡献。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-ae4c22.png" alt="img"></p>
<p><strong>4、计数（2023年新增功能）</strong></p>
<p>您现在可以计算指定区域内的对象或块的实例。</p>
<p>指定一个矩形或多边形选择区域、整个模型空间，或选择一个边界对象作为计数区域。有效的边界对象必须是由线段组成且不与自身相交的闭合多段线。</p>
<p>在上一次计数会话中定义的计数区域也可以在当前计数中使用。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-b63804.jpg" alt="img"></p>
<p><strong>5、浮动绘图窗口（2023年新增功能）</strong></p>
<p>此版本中包含对浮动绘图窗口的持续改进。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-6595f4.jpg" alt="img"></p>
<p>改进包括以下内容：</p>
<p>锚定的命令窗口现在与活动的绘图窗口保持一致。</p>
<p>浮动命令窗口保持其位置。</p>
<p>如果绘图窗口重叠，则活动绘图窗口显示在顶部。</p>
<p>您可以将绘图窗口固定到某个位置。固定的绘图窗口保留在AutoCAD应用程序主窗口的顶部。</p>
<p>右键单击浮动绘图窗口的标题栏以获取其他选项。</p>
<p><strong>6、3D图形（2023年新增功能）</strong></p>
<p>此版本包括新的跨平台3D图形系统，利用现代GPU和多核CPU的所有功能为更大的绘图提供流畅的导航体验。</p>
<p>此图形系统可用于“着色”和“带边缘着色”视觉样式，默认情况下处于启用状态。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-5e54ba.jpg" alt="img"></p>
<p><strong>7、2D图形显示（2023年新增功能）</strong></p>
<p>此版本的AutoCAD包含一个新的图形引擎，可以在某些高端GPU上提供更好的显示效果。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-2659df.jpg" alt="img"></p>
<p>新的图形引擎提供：</p>
<p>改进了具有许多TrueType文本、长多段线或2D线框视觉样式中的实体影线的绘图的缩放和平移性能</p>
<p>在DirectX 12模式下打开多个绘图时，GPU内存使用已得到优化</p>
<p>删除了对DirectX 9的支持</p>
<p><strong>8、Autodesk Docs图纸集管理器（2023版新增功能）</strong></p>
<p>使用新的Web图纸集管理器管理Autodesk Docs中的图纸集。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-4d1319.jpg" alt="img"></p>
<p>旧版图纸集管理器的精简版本，即Web版图纸集管理器，可显示和管理存储在Autodesk Docs中的命名图纸集。默认情况下，从Autodesk Docs打开DST文件会显示Web图纸集管理器。</p>
<p>Web图纸集管理器提供以下核心功能：</p>
<p>创建和删除工作表和子集</p>
<p>定义图纸集属性，包括图纸和子集</p>
<p>将图纸集发布为PDF</p>
<p>传输表集</p>
<p><strong>9、绘图和布局选项卡（2023年新增功能）</strong></p>
<p>对绘图和布局选项卡的更改可以更轻松地判断哪个绘图和布局处于活动状态。更改还可以更轻松地在绘图选项卡溢出菜单上查看哪个绘图处于活动状态。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-7ce395.jpg" alt="img"></p>
<p>改进包括以下内容：</p>
<p>绘图和布局选项卡的现代外观。</p>
<p>活动选项卡突出显示。</p>
<p>在绘图溢出菜单上检查活动绘图。</p>
<p><strong>10、CUTBASE（2023年新增功能）</strong></p>
<p>新的CUTBASE命令将选定的对象与指定的基点一起复制到剪贴板，并将它们从图形中删除。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-0278bd.png" alt="img"></p>
<p>单击主页选项卡&gt;剪贴板面板&gt;使用基点剪切。</p>
<p>在图纸上指定基点。</p>
<p>选择要剪切的对象，然后按Enter。</p>
<p>将对象粘贴到其他图形时，使用PASTECLIP指定插入点。</p>
<p><strong>11、折线延伸（2023年新增功能）</strong></p>
<p>新的夹点选项Extend Vertex将新顶点添加到从选定末端夹点延伸的多段线。您不再需要反转折线方向。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-fa8d84.png" alt="img"></p>
<p>现有的Add Vertex选项可以在末端和前一个顶点之间添加顶点。这取决于绘制折线的方向。</p>
<p>使用新的“延伸顶点”夹点选项，顶点始终从选定的末端夹点延伸，无论多段线的绘制方向如何。</p>
<p><strong>12、LEADER增强功能（2023年新增功能）</strong></p>
<p>MLEADER命令现在具有选择现有多行文字对象以用于新引线的选项。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-913a92.png" alt="img"></p>
<p>注意：如果您的多引线样式具有默认文本值，则多行文字选项不可用。</p>
<p><strong>13、其他增强功能</strong></p>
<p>插入块：当指定的块名称已存在于图形中时，“块重定义”对话框提供了一个重命名块的选项。</p>
<p>选项对话框：当您尝试关闭或取消“选项”对话框时，一个新的任务对话框会提示您保存或放弃所做的更改。</p>
<p>隔离模式：当您退出隔离模式时，对象选择现在保持不变。</p>
<p>新绘图：将鼠标悬停在“开始”选项卡上的“新建”下拉菜单上，会显示一个工具提示，其中包含将使用的绘图模板文件的名称。</p>
<p>客户错误报告(CER)：现在生成错误报告时会自动填写您的电子邮件地址。</p>
<p>多核后台发布：使用后台发布发布多页PDF文件时，现在支持发布选项“包含超链接”。</p>
<h3 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h3><p><strong>优化您的AutoCAD绘图空间</strong></p>
<p>最吸引人的AutoCAD功能之一是您对用户界面(UI)的控制量。这种灵活性是AutoCAD受欢迎的一个主要因素，它认识到我们客户社区中学科、工作流程、要求和偏好的多样性。</p>
<p>例如，以下是某人可能决定为2D绘图自定义AutoCAD UI以最大化其可用绘图区域的方式。</p>
<p>您可以通过隐藏或删除很少使用的控件来最大化您的工作空间并降低UI复杂性。如果您正在处理2D工程图，可以考虑以下一些选项。</p>
<p>如果您以前从未这样做过，请尝试以下实验：</p>
<p>按Ctrl+0（零）最大化绘图区域。第一次这样做时，这有点令人震惊，但它说明了为什么该操作被命名为“清洁屏幕”。</p>
<p>再次按Ctrl+0可恢复之前的状态。</p>
<p>在不采用这种快速但极端的措施的情况下，还可以尝试一些其他技术。</p>
<p><strong>1、控制功能区显示</strong></p>
<p>功能区占据了应用程序窗口中的一个重要区域。您可以循环切换几种显示模式，而不是完全关闭它。</p>
<p>重复单击向上箭头以循环显示多个功能区显示模式。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-00b934.png" alt="img"></p>
<p>然后，单击右侧的向下箭头并选择“最小化到选项卡”。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-7dbb42.png" alt="img"></p>
<p>单击功能区选项卡之一。请注意，在您启动命令之前，功能区会暂时恢复。</p>
<p>注意：要恢复整个功能区，请再次单击向上箭头。</p>
<p>右键单击任何功能区选项卡以选择要显示或隐藏的选项卡。在这种情况下，清除参数以隐藏该选项卡。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-734fd8.png" alt="img"></p>
<p>注意：如果要隐藏当前选项卡中的某些面板，可以选择“显示面板”选项。</p>
<p><strong>2、控制快速访问工具栏</strong></p>
<p>当功能区最小化时，访问“图层”面板上的工具就不那么方便了。但是，您可以改为将图层下拉列表添加到快速访问工具栏。</p>
<p>在快速访问工具栏上，单击自定义向下箭头并选择图层。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-136b0a.png" alt="img"></p>
<p>这是结果。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-99a707.png" alt="img"></p>
<p>使用相同的方法从快速访问工具栏中添加或删除其他预定义命令。</p>
<p><strong>3、控制开始选项卡</strong></p>
<p>不是每个人都使用“开始”选项卡，如果您愿意，可以将其关闭。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-0864db.png" alt="img"></p>
<p>要隐藏“开始”选项卡，请在命令提示下输入STARTMODE并将其值设置为0（关闭）。</p>
<p><strong>4、停靠常用调色板</strong></p>
<p>两个最常用的选项板是特性和图层特性管理器。将这两个调色板与“自动隐藏”选项停靠在一起是在丢失两个绘图区域切片以换取即时翻转访问之间的权衡。</p>
<p>显示“特性”选项板。</p>
<p>在其标题栏上，单击属性按钮，如图所示。</p>
<p><img src="https://img.jbzj.com/file_images/article/202203/2022033010375440.png" alt="img"></p>
<p>选择指示的选项：</p>
<p><img src="https://img.jbzj.com/file_images/article/202203/2022033010375441.png" alt="img"></p>
<p>翻滚或关闭此调色板可在需要时提供快速、临时的访问。</p>
<p>对“图层特性管理器”选项板重复此过程，将其停靠在应用程序窗口的右侧。</p>
<p>请注意，您可以在显示调色板时调整其宽度。</p>
<p><strong>5、隐藏UCS图标、ViewCube和导航栏</strong></p>
<p>用户坐标系在某些2D绘图中很有用，它对于3D建模至关重要。如果您不经常使用UCS，您可以轻松隐藏它。ViewCube控件和导航栏也是如此。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-66bc60.png" alt="img"></p>
<p>单击功能区上的查看选项卡。然后单击UCS图标、ViewCube和导航栏控件以切换其可见性。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-f5363f.png" alt="img"></p>
<p><strong>6、隐藏视口控件</strong></p>
<p>视口控件主要用于3D建模。如果您不使用它们，您可以隐藏这些控件以减少2D绘图中的视觉噪音。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-edeb18.png" alt="img"></p>
<p>在命令提示符下输入VPCONTROL并将其设置为Off。</p>
<p><strong>7、删除不需要的布局选项卡</strong></p>
<p>将用户界面减少到您通常使用的最低限度也适用于布局选项卡。第二个布局选项卡显示在左下角的唯一原因是为了证明您可以创建多个布局。</p>
<p>如果您不使用此附加布局，请右键单击Layout2选项卡并选择删除。</p>
<p>注意：您可以通过从图形模板文件中删除不必要的布局来减少需要删除它们的次数。</p>
<p><strong>8、控制状态栏</strong></p>
<p>状态栏包括常用设置和控件。关闭不需要的控件非常简单。</p>
<p>单击状态栏右端的自定义图标。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-c653ef.png" alt="img"></p>
<p>从列表中清除您很少使用的所有项目。</p>
<p>注意：有关详细信息，请参阅您尝试过吗：状态栏。</p>
<p>概括</p>
<p>遵循这些步骤可以提供一个干净、实用且视觉上安静的自定义用户界面。当然，您需要选择适合您的偏好和工作风格的设置。设置后，您的自定义UI设置将存储在Windows注册表中，或者对于特定于图形的设置，存储在单个图形文件(DWG)或图形模板文件(DWT)中。</p>
<p>希望您能够应用其中的一些想法和建议，让您的AutoCAD体验令人满意且高效。</p>
<h3 id="cad快捷键命令大全"><a href="#cad快捷键命令大全" class="headerlink" title="cad快捷键命令大全"></a>cad快捷键命令大全</h3><p>1、ALT+TK：快速选择</p>
<p>2、ALT+NL：线性标注</p>
<p>3、ALT+VV4：快速创建四个视口</p>
<p>4、ALT+MUP：提取轮廓</p>
<p>5、Ctrl+B:栅格捕捉模式控制(F9)</p>
<p>6、Ctrl+C:将选择的对象复制到剪切板上</p>
<p>7、Ctrl+F:控制是否实现对象自动捕捉(F3)</p>
<p>8、Ctrl+G:栅格显示模式控制(F7)</p>
<p>9、Ctrl+J:重复执行上一步命令</p>
<p>10、Ctrl+K:超级链接</p>
<p>11、Ctrl+N:新建图形文件</p>
<p>12、Ctrl+M:重复上一个命令</p>
<p>13、Ctrl+O：打开图象文件</p>
<p>14、Ctrl+P：打印当前图形</p>
<p>15、Ctrl+Q：打开关闭保存对话框</p>
<p>16、Ctrl+S：保存文件</p>
<p>17、Ctrl+U：极轴模式控制(F10)</p>
<p>18、Ctrl+v：粘贴剪贴板上的内容</p>
<p>19、Ctrl+W：对象追踪式控制(F11)</p>
<p>20、Ctrl+X：剪切所选择的内容</p>
<p>21、Ctrl+Y：重做</p>
<p>22、Ctrl+Z：取消前一步的操作</p>
<p>23、Ctrl+1：打开特性对话框</p>
<p>24、Ctrl+2：打开图象资源管理器</p>
<p>25、Ctrl+3：打开工具选项板</p>
<p>26、Ctrl+6：打开图象数据原子</p>
<p>27、Ctrl+8或QC：快速</p>
<h2 id="软件下载地址："><a href="#软件下载地址：" class="headerlink" title="软件下载地址："></a>软件下载地址：</h2><p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-afae.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
<p>在微信公众号 【<strong>硬件工程师</strong>】，回复 <strong>autocard</strong> 即可获取下载地址</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-7fd4.png" alt="image-20230307000909729"></p>
]]></content>
      <categories>
        <category>硬件常用软件</category>
      </categories>
  </entry>
  <entry>
    <title>Altium Designer 22 中文版最新激活码，激活、破解教程，永久激活，亲测可用</title>
    <url>/p/5233.html</url>
    <content><![CDATA[<p><strong>altium designer22</strong>是一款由Altium开发团队全新推出的简单易用，与时俱进，功能强大的PCB设计软件，可以方便用户快速完成各类原理图的设计操作。用户可以完全掌控设计过程，提高整个设计团队的生产力和工作效率，节省总体成本、缩短产品上市时间，助您一直处于新科技的最前沿。</p>
<p>相比于旧版，新版altium designer22添加了许多的功能以及进行了全面的优化，它包括了强大的功能，能够可帮助确保用户的PCB设计已准备好进行制造，即使是最复杂的电路板，也可以毫不费力地优化您的设计，其中新的PCB技术感知功能也能够使用户轻松地对影响设计制造的关键PCB特征进行建模，总而言之就是使用新版软件，用户现在可以将各种新的电路板特性建模到您的设计中，包括沉孔&#x2F;埋头孔、IPC-4561通孔类型等。在这里可以完美的支持自定义多边形、电路板开孔、实时规则检查、设计复用以及尺寸自动测量，甚至还为用户配备了直观高效的用户界面，帮助你更好的实现自己的设计工作。</p>
<p>ps：小编带来的是<strong>altium designer22中文版</strong>，内附有补丁文件，能够完美的激活软件，详细的教程请参考本文操作步骤，需要的朋友可下载试试！</p>
<h3 id="软件特色"><a href="#软件特色" class="headerlink" title="软件特色"></a>软件特色</h3><p>1、设计环境：通过设计过程的各个方面互连，显着提高生产力，包括原理图，PCB，文档和模拟。<br>2、制造设计：学习并应用设计制造(DFM)方法，确保您的PCB设计每次都能正常运行，可靠且可制造。<br>3、切换很容易：使用业内最强大的翻译工具轻松迁移您的遗留信息-如果没有这些翻译工具，我们的成长将无法实现。<br>4、刚柔结合设计：以全3D设计刚柔结合并确认3D组件，外壳组件和PCB间隙满足所有机械要求。<br>5、PCB设计：通过受控元件放置和原理图与PCB之间的完全同步，轻松地在电路板布局上操纵物体。<br>6、原理图设计：通过一个内聚，易于导航的用户界面中的分层原理图和设计重用，更快，更高效地设计顶级电子设备。<br>7、制造业产出：体验管理数据的优雅，并通过无缝，简化的文档功能为发布做好准备。<br>8、互联的多板装配：多板之间的连接关系管理和增强的3D引擎使您可以实时呈现设计模型和多板装配情况 – 显示更快速，更直观，更逼真。<br>9、时尚的用户界面体验：全新的，紧凑的用户界面提供了一个全新而直观的环境，并进行了优化，可以实现无与伦比的设计工作流可视化。<br>10、强大的PCB设计：利用64位CPU的架构优势和多线程任务优化使您能够比以前更快地设计和发布大型复杂的电路板。<br>11、快速、高质量的布线：视觉约束和用户指导的互动结合使您能够跨板层进行复杂的拓扑结构布线 – 以计算机的速度布线，以人的智慧保证质量。<br>12、实时的BOM管理：链接到BOM的最新供应商元件信息使您能够根据自己的时间表做出有根据的设计决策<br>13、简化的PCB文档处理流程：在一个单一的，紧密的设计环境中记录所有装配和制造视图，并通过链接的源数据进行一键更新。</p>
<h3 id="altium-designer22安装教程"><a href="#altium-designer22安装教程" class="headerlink" title="altium designer22安装教程"></a>altium designer22安装教程</h3><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p>公众号<strong>硬件工程师</strong>，回复 <strong>altium designer</strong>，即可获取。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-f02d6f.png" alt="image-20230307000909729"></p>
<p>提示：安装全过程必须断掉电脑网络，否则容易出现安装失败的问题！！！</p>
<p>1、在本站下载解压，得到补丁文件和原程序</p>
<p>2、双击运行”Installer.Exe”程序进入软件安装向导，点击next进行下一步。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031322-83331c.jpeg" alt="img"></p>
<p>3、在Select language栏下拉列表中选择“Chinese”语言，然后勾选安装许可协议，再点击Next。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-223aa0.jpeg" alt="img"></p>
<p>4、按默认目录进行安装，当然，用户也可自行选择软件安装路径，然后耐心等到软件安装，直到显示完成，记住这里取消勾选不要运行软件，直接退出向导即可；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-77d6f5.jpeg" alt="img"></p>
<p>5、接下来将补丁文件下的“shfolder.dll”复制到源程序安装目录下；<br>安装目录【C:\Program Files\Altium\AD22】</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-d07ba2.jpeg" alt="img"></p>
<p>6、因为没有在创建桌面快捷方式，所以可以在电脑左下角搜索并打开软件，点击界面中的【Add standalone license file】；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-78426c.jpeg" alt="img"></p>
<p>7、将会弹出一个窗口，然后打开软件初始安装包ad211 unis licewnses文件夹，找到AD20-Sandy.alf文件，单击选中它后再点击打开；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-83f1fe.jpeg" alt="img"></p>
<p>8、软件将会自动显示软件许可有效期至2030年，表示已经成功激活，可免费使用所有功能；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-403c86.jpeg" alt="img"></p>
<p>9、接下来进行汉化，点击右上角的齿轮图标，找到General页面，勾选“Use localized resources”，将会弹出一个界面，依次选择OK就可以了；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-5a9726.jpeg" alt="img"></p>
<p>10、至此，以上就是altium designer22中文破解版软件安装教程，希望能对用户有帮助。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-38d7eb.jpeg" alt="img"></p>
<h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><p>1、当我们在软件中找不到所需要的元件的时候,就的需要自己去画,我们以下面的器件为例；</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-fe53d4.jpeg" alt="img"></p>
<p>2、首先新建一个原理图库</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-c5891b.jpeg" alt="img"></p>
<p>3、找到画笔画出一个器件大小的矩形框</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-9c78a4.jpeg" alt="img"></p>
<p>4、添加引脚</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-525d32.jpeg" alt="img"></p>
<p>5、按Tab键修改参数</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-4e65be.jpeg" alt="img"></p>
<p>6、第一个引脚就画出来了</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-adc114.jpeg" alt="img"></p>
<p>7、重复以上继续画其他的引脚</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-daf475.jpeg" alt="img"></p>
<p>8、点击保存</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-39f0a6.jpeg" alt="img"></p>
<p>9、点击库</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-915149.jpeg" alt="img"></p>
<p>10、找到刚刚保存的原理图库</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-ba2093.jpeg" alt="img"></p>
<p>11、放到原理图，完成器件的绘制</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-3a8230.jpeg" alt="img"></p>
<h3 id="怎么删除元件？"><a href="#怎么删除元件？" class="headerlink" title="怎么删除元件？"></a>怎么删除元件？</h3><p>1、进入altium designer首页，点击File。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-6a0a64.jpeg" alt="img"></p>
<p>2、进入FILe菜单，点击open，打开你要修改的pcb文件。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-50f792.jpeg" alt="img"></p>
<p>3、进入pcb文件编辑界面，点击菜单tools。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-f59324.jpeg" alt="img"></p>
<p>4、进入tools工具栏点击UN-Route–all。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-af77d0.jpeg" alt="img"></p>
<p>5、系统提示是否重布线，包括以前锁定的规则，点击yes。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-e57d3d.jpeg" alt="img"></p>
<p>6、布线全部删除，元件保持原来的位置。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-326fb9.jpeg" alt="img"></p>
<ul>
<li><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031323-bd2c1f.jpeg" alt="img"></li>
</ul>
<h2 id="软件下载地址："><a href="#软件下载地址：" class="headerlink" title="软件下载地址："></a>软件下载地址：</h2><p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030621-38e9a6.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
<p>在微信公众号 【<strong>硬件工程师</strong>】，回复 <strong>altium designer</strong> 即可获取下载地址</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-f02d6f.png" alt="image-20230307000909729"></p>
]]></content>
      <categories>
        <category>硬件常用软件</category>
      </categories>
  </entry>
  <entry>
    <title>Cadence Allegro 2023 激活、破解下载教程，永久激活，亲测可用</title>
    <url>/p/47210.html</url>
    <content><![CDATA[<p><strong>Cadence Allegro and OrCAD 2022破解版</strong>是一款包括各种设计原理图、模拟和分析电子电路的程序。这是最好的、最专业的电子电路仿真分析和电子设计自动化软件。提供Cadence PCB原理图和PCB布局解决方案，可与Allegro PCB布局无缝双向集成，实现实时数据同步和高效的电路板设计环境。以及Cadence Allegro高级IC封装设计解决方案，约束驱动的先进单模和多模封装基板布局，强大的功能以及直观的操作界面得到了广大用户的喜爱，带来提高的生产力和经济效益，本次提供了Cadence Allegro and OrCAD 2022全新破解版本，欢迎需要此款工具的朋友前来下载使用。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030923-823246.jpg" alt="img"></p>
<h3 id="Cadence-Allegro-and-OrCAD概述"><a href="#Cadence-Allegro-and-OrCAD概述" class="headerlink" title="Cadence Allegro and OrCAD概述"></a>Cadence Allegro and OrCAD概述</h3><p>Cadence Allegro系统互连平台能够跨集成电路、封装和PCB协同设计高性能互连。应用平台的协同设计方法，工程师可以迅速优化I&#x2F;O缓冲器之间和跨集成电路、封装和PCB的系统互联。该方法能避免硬件返工并降低硬件成本和缩短设计周期。约束驱动的Allegro流程包括高级功能用于设计捕捉、信号完整性和物理实现。由于它还得到Cadence Encounter与Virtuoso平台的支持，Allegro协同设计方法使得高效的设计链协同成为现实。</p>
<p>Cadence OrCAD产品以其直观的操作界面以及强大的功能而深受广大电子工程师们的喜爱。作为世界上使用最广泛的EDA软件，早在上个世纪八十年代起，OrCAD就开始为上百万的电子工程师个体以及企业团队提供全套的设计工具，它通过所有工具之间的无缝集成，以其前所未有的生产力为个人和企业带来了巨大的经济效益。 而OrCAD最新版本17.0很好的沿袭了这些传统。</p>
<p>Cadence Allegro和OrCAD产品直接与Windows集成；产品支持Windows支持的硬件和外围设备。可以从微软的网页上获得Windows正式支持的硬件和外设的列表。</p>
<p>这些产品需要更新Windows目录中的特定微软库。你必须使用单机或客户端安装Cadence软件。你可能无法在不安装的情况下指向该软件。</p>
<h3 id="安装激活教程"><a href="#安装激活教程" class="headerlink" title="安装激活教程"></a>安装激活教程</h3><p>1、在本站下载并解压，如图所示</p>
<p>下载方式，在微信公众号<strong>硬件工程师</strong>，回复 <strong>Cadence</strong> 即可获取下载地址</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030923-4c40d0.jpg" alt="img"></p>
<p>2、安装程序， 勾选 接受</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030923-5c5c4a.jpg" alt="img"></p>
<p>3、安装设置</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030923-4dcf9e.jpg" alt="img"></p>
<p>4、安装完成，将crack中的CadenceLicensePatcherWin.exe复制到安装目录中，管理员身份运行，选择安装目录并点击patch进行修补破解</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030923-909092.jpg" alt="img"></p>
<h2 id="软件下载地址："><a href="#软件下载地址：" class="headerlink" title="软件下载地址："></a>软件下载地址：</h2><p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030621-38e9a6.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
<p>在微信公众号 【<strong>硬件工程师</strong>】，回复 <strong>Cadence</strong> 即可获取下载地址</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030923-4405f0.png" alt="image-20230307000909729"></p>
]]></content>
      <categories>
        <category>硬件常用软件</category>
      </categories>
  </entry>
  <entry>
    <title>Pads 9.5 下载安装教程，激活破解教程，亲测可用，永久激活</title>
    <url>/p/25684.html</url>
    <content><![CDATA[<h2 id="软件下载："><a href="#软件下载：" class="headerlink" title="软件下载："></a>软件下载：</h2><p><strong>安装前须知</strong>：</p>
<p>1.安装全程须断开电脑网络，否则安装不成功；</p>
<p>2.解压和安装前先关闭360、电脑管家等所有杀毒软件，防止误杀license文件，导致安装失败；</p>
<p>3.PADS9.5适用于WIN7&#x2F;10(64位)系统，亲测可用！</p>
<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030621-38e9a6.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
<p>在微信公众号 【<strong>硬件工程师</strong>】，回复 <strong>pads</strong> 即可获取下载地址</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-a3d2.png" alt="image-20230307000909729"></p>
<h3 id="PADS9-5-WIN10-64-位安装步骤："><a href="#PADS9-5-WIN10-64-位安装步骤：" class="headerlink" title="PADS9.5 WIN10 64****位安装步骤："></a><strong>PADS9.5 WIN10 64****位安装步骤</strong>：</h3><p>1.先使用“百度网盘客户端”下载PADS_9.5安装包到电脑磁盘英文路径文件夹下，并解压缩，然后找到PADS9.5_mib.exe，鼠标右击选择【以管理员身份运行】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-1.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-df2d.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>2.正在加载中，稍等片刻</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-2.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-7266.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>3.点击【NEXT】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-3.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-3dd2.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>4.点击【Skip】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-4.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-07a9.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>5.点击【Agree】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-5.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-b15e.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>6.点击【Modify】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-6.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-46d6.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>7.点击【Product Selection】，进行自定义安装</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-7.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-d0c2.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>8.选择需要安装的软件（或插件），如果只进行PCB设计推荐勾选安装下图中的几个软件，需要其他的软件也可以勾选，但注意：不要安装Server Services！</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-8.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-8c7e.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>9.先点击【Target Path】选项卡，选择软件安装路径，默认安装在C盘，点击【Browse】可更改软件安装路径，注意：安装路径文件夹名称不能含有中文字符！小编这里将软件安装在D盘MentorGraphics文件夹下（需提前在D盘根目录下新建名为MentorGraphics文件夹），然后点击【Done】</p>
<p><strong>温馨提示</strong>：请记住软件安装路径，后续操作需要用到。</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-9-1.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-8b50.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-9-2.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-fb40.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>10.点击【Install】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-10.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-70db.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>11.正在安装中，这个过程大概需要10分钟左右的时间，请耐心等待</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-11.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-8b89.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>12.安装完成，先勾选“ at a later time”，然后点击【Done】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-12.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-a9c2.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>13.返回软件初始安装包，双击打开LICENSE文件夹</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-13.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-10ad.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>14.然后找到MentorKG.exe，将其复制粘贴到软件安装目录文件夹下（见第9步），如小编安装路径D:\MentorGraphics</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-14.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-06c5.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>15.找到上一步粘贴到安装目录下的MentorKG.exe，鼠标右击选择【以管理员身份运行】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-15.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-8a4e.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>16.弹出如下界面，稍等片刻界面会自动跳转</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-16.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-27b5.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>17.自动进入LICENSE文件界面，点击【文件】→【另存为】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-17.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-6140.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>18.将LICENSE文件保存到软件的安装目录中（见第9步），如小编安装路径是D:\MentorGraphics</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-18.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-4f74.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>19.返回电脑桌面，鼠标右击“此电脑”图标（不同系统该图标名称不尽相同）选择【属性】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-19.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-ebd6.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>20.点击【高级属性设置】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-20.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-55ea.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>21.点击【环境变量】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-21.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-3482.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>22.点击【新建】，然后添加变量名：MGLS_LICENSE_FILE，变量值：D:\MentorGraphics\LICENSE.TXT（第14步保存LICENSE文件的路径），然后点击【确定】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-22.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032304-402d.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>23.返回电脑桌面，找到PADS Layout图标，鼠标右击选择【以管理员身份运行】</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-23.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-c6f1.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<p>24.打开PADS9.5，软件界面如下：</p>
<p><a href="http://www.zhanshaoyi.com/wp-content/uploads/2019/07/952-24.png"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-4297.png" alt="PADS 9.5安装教程和破解方法(附LICENSE文件)"></a></p>
<h2 id="软件下载地址："><a href="#软件下载地址：" class="headerlink" title="软件下载地址："></a>软件下载地址：</h2><p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030621-38e9a6.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
<p>在微信公众号 【<strong>硬件工程师</strong>】，回复 <strong>pads</strong> 即可获取下载地址</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032204-bbed.png" alt="image-20230307000909729"></p>
]]></content>
      <categories>
        <category>硬件常用软件</category>
      </categories>
  </entry>
  <entry>
    <title>termius macos 破解版，激活版下载，永久激活，亲测可用</title>
    <url>/p/58663.html</url>
    <content><![CDATA[<p>termius 是一款非常值得推荐的 SSH&#x2F;SFTP 跨平台终端工具，其十分亮眼的功能是可以上传文件夹，这是其他几款终端工具都不具备的，比如说 macOS 自带的终端、号称 21 世纪最强终端的 <a href="https://tobebetterjavaer.com/gongju/warp.html">wrapopen in new window</a>、完全开源的 <a href="https://tobebetterjavaer.com/gongju/tabby.html">tabbyopen in new window</a>、<a href="https://tobebetterjavaer.com/gongju/windterm.html">WindTermopen in new window</a>。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031210-7aaabe.png" alt="img"></p>
<p>不过，termius 分为基础版和 Pro版，基础版不收费，但功能少，Pro 版功能多但收费。</p>
<p>于是怎么破解它就很关键了，之前折腾了 1 个小时，终于搞定，这里记录一下，免得以后再需要的时候找不到方法。</p>
<p>首先，需要下载绿色版的 termius。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031210-ab3ae7.png" alt="img"></p>
<p>这里设置一个门槛，需要微信搜索 <strong>徐公</strong>关注我的公众号，在后台回复 <strong>termius</strong> 获取。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/020220230219163502.png"></p>
<p>下载后安装，如果打开的时候提示不安全，根据提示信息去谷歌一下就行了。执行命令如下。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo xattr -r -d com.apple.quarantine /Applications/Termius.app</span><br></pre></td></tr></table></figure>

<p>需要输入本机密码给权限。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031210-0d2893.png" alt="img"></p>
<p>完事后重新打开 termius，如果提示有付费的问题，直接关闭重新开一下就好了，不用管，不是必选项。</p>
<h2 id="激活码获取"><a href="#激活码获取" class="headerlink" title="激活码获取"></a>激活码获取</h2><p>PS: 密钥没有直接贴出来，是为了拒绝一部分白嫖党，因为有的人即便是你帮了他他还骂你，所以我把密钥放在了公众号里，这样我既可以帮助到那些信赖我的人，同时也可以给公众号涨涨粉，两全其美，不丢人。</p>
<p>需要的小伙伴，扫描下方公众号二维码，或者关注公众号： <strong>徐公</strong>，回复关键字：<strong>termius</strong> 即可免费无套路获取，持续更新中~</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/020220230219163502.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
  </entry>
  <entry>
    <title>2023 GoLand  最新下载、激活、破解教程、亲测有效，永久激活</title>
    <url>/p/40130.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="GoLand破解安装激活最新教程（附破解工具及激活码）"><a href="#GoLand破解安装激活最新教程（附破解工具及激活码）" class="headerlink" title="GoLand破解安装激活最新教程（附破解工具及激活码）"></a>GoLand破解安装激活最新教程（附破解工具及激活码）</h1><p>本文讲的是支持2022.3.2最新版本的GoLand破解、GoLand激活码、GoLand安装、GoLand永久激活码的最新永久激活教程，本文有mac和windows系统的GoLand安装教程。</p>
<h2 id="1-下载安装GoLand"><a href="#1-下载安装GoLand" class="headerlink" title="1.下载安装GoLand"></a>1.下载安装GoLand</h2><p>先去官网下载，我这里下载的是最新版本的2022.2.2，测试过2021以上的版本均可使用以下教程破解。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031421-a6099a.webp" alt="GoLand破解"></p>
<p>安装然后打开</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031421-e711df.webp" alt="GoLand破解"></p>
<p>我这里是全选<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031421-d2ef67.webp" alt="GoLand破解"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031421-b26848.webp" alt="GoLand破解"></p>
<h2 id="2-下载破解工具"><a href="#2-下载破解工具" class="headerlink" title="2.下载破解工具"></a>2.下载破解工具</h2><p>  为了防止爬虫，因此 **扫描关注微信公众号【徐公】获取，输入 **GoLand 获取。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230211154134.png"></p>
<ol>
<li>windows的样子</li>
</ol>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031421-942b7c.webp" alt="GoLand破解"><br>2. mac的样子</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031421-1d6b67.webp" alt="GoLand破解"></p>
<ul>
<li>打开scripts文件<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031421-12c117.webp" alt="GoLand破解"></li>
</ul>
<h2 id="3-windows的GoLand激活"><a href="#3-windows的GoLand激活" class="headerlink" title="3.windows的GoLand激活"></a>3.windows的GoLand激活</h2><ul>
<li><p>先执行unistall-current-user.vbs,直接双击打开，此步骤是为了防止之前有过激活信息，确保当前环境变量下没有激活工具的变量信息，可先执行卸载脚本在再进行后面的激活操作，避免激活失败。<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031421-79da4b.webp" alt="GoLand破解"></p>
</li>
<li><p>出现弹框done说明成功<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031421-7ded4d.webp" alt="GoLand破解"></p>
</li>
<li><p>然后再执行install-current-user.vbs,直接双击打开即可<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031422-2eee53.webp" alt="GoLand破解"></p>
</li>
<li><p>这里需要等待10秒左右才会出现第二个done弹框，才是成功<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031422-fcbefa.webp" alt="GoLand破解"></p>
</li>
<li><p>然后再输入对应的激活码即可，文章上面扫公众号二维码获取</p>
</li>
</ul>
<p>JZFLGE21ND-eyJsaWNlbnNlSWQiOiJKWkZMR0UyMU5EIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDkwMlBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6LTE1NTI3NDEyNzIiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0&#x3D;-cQoXljKE7uBjoI23ZBPd84P89vQAaprVvVhxj1&#x2F;nSOABUZKPZMCs6p2id5WKBP1n0EoPHykvzd0y7QcdcO2hxNwbaBRZxpPFuuMigGazrrt+zSd9+UlFXmtcseFTXlWn7Jw2qqp7WSVQlj+o3gf2Gic9&#x2F;Vp2pAmIajMGdFDsXcHbYUrLwTRVtFkNtggtsqh0AVS8xhzLuXMzGXJsqEEWPZCKMEjy0bURm&#x2F;FQvrRC&#x2F;gIptJzuybSb&#x2F;neqKmvxZefX1lhe98igS3tZsL&#x2F;E+hsQK7ueXVSP2AuuVEz&#x2F;6qHYknPS7K4UluWpd+ktIxTcHjIykK1tlWlwTsupZTxnvXFWQA&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAV8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h2 id="4-mac的GoLand激活"><a href="#4-mac的GoLand激活" class="headerlink" title="4.mac的GoLand激活"></a>4.mac的GoLand激活</h2><ul>
<li><p>先打开终端</p>
</li>
<li><p>先运行uninstall.sh</p>
</li>
<li><p>此步骤是一键帮你去掉以前所激活过留下的东西，解决key is invalid的问题。防止激活失败</p>
</li>
<li><p>然后终端输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh /Users/chen23/Downloads/jihuo-tool/scripts/uninstall.sh </span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031422-316831.webp" alt="GoLand破解"></p>
<ul>
<li>这里直接把uninstall.sh拖动到终端即可。记得mac运行是</li>
</ul>
<p>sh xxxxx去运行.sh文件（记得sh后面加空格加路径）</p>
<ul>
<li><p>出现done说明成功。<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031422-58946a.webp" alt="GoLand破解"></p>
</li>
<li><p>再执行install.sh，与上面同理，出现done，the kill xxxxx 说明成功。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031422-77ae8c.webp" alt="GoLand破解"></p>
<ul>
<li>然后关闭GoLand，重新打开GoLand，输入破解码激活即可</li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031422-7ef494.webp" alt="GoLand破解"></p>
<ul>
<li>然后就成了，时间是假的，已经永久激活了，而且是官网最新版本哦，如果你重新更新了，再执行上面的操作即可。</li>
</ul>
<p><img src="https://chenjunan.top/img/goland/20220826144711.webp" alt="GoLand破解"></p>
<h2 id="软件下载地址："><a href="#软件下载地址：" class="headerlink" title="软件下载地址："></a>软件下载地址：</h2><p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030621-38e9a6.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
<p>在微信公众号 【<strong>徐公</strong>】，回复 <strong>goland</strong> 即可获取下载地址</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/020220230219163502.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>GoLand</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 毕业设计，基于 SpringBoot 的大学生体质测试管理系统，附源码和论文</title>
    <url>/p/6619.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本次设计任务是要设计一个大学生体质测试管理系统，通过这个系统能够满足大学生体质测试管理系统功能。系统的主要功能包括首页、个人中心、用户管理、教师管理、体质测试管理、测试报告管理、测试成绩管理、留言板、系统管理等功能。</p>
<p>管理员可以根据系统给定的账号进行登录，登录后可以进入大学生体质测试管理系统对大学生体质测试所有模块进行管理。包括查看和修改自己的个人信息以及登录密码，用户信息等。</p>
<p>该系统为每一个用户都分配了一个用户账号，用户通过账号的登录可以在系统中查看大学生体质测试信息及对个人信息进行修改等功能</p>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><h2 id="系统首页模块"><a href="#系统首页模块" class="headerlink" title="系统首页模块"></a>系统首页模块</h2><p>大学生体质测试管理系统，在系统首页可以查看首页、体质测试、公告资讯、留言板、个人中心、后台管理等内容进行详细操作，如图5-1所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-913c263.jpg" alt="img"></p>
<p>体质测试，在体质测试页面可以查看测试名称、测试编号、测试说明、测试文件、发布日期、教师工号等内容进行测试等操作，如图5-2所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-a59780a.jpg" alt="img"></p>
<p>用户注册，通过填写用户账号、密码、确认密码、用户姓名、班级、联系方式等内容进行注册等操作，如图5-3所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-2724673.png" alt="image-20230317205150346"></p>
<p>个人中心，在个人中心页面通过填写用户账号、密码、用户姓名、性别、班级、联系方式、图片等内容进行更新信息等操作；如图5-4所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-6a776c2.jpg" alt="img"></p>
<h2 id="管理员功能模块"><a href="#管理员功能模块" class="headerlink" title="管理员功能模块"></a>管理员功能模块</h2><p>管理员登录，管理员通过输入用户，密码，选择角色等信息进行系统登录，如图5-5所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-92be09f.png" alt="image-20230317205208469"></p>
<p>管理员登录进入大学生体质测试管理系统可以查看首页、个人中心、用户管理、教师管理、体质测试管理、测试报告管理、测试成绩管理、留言板、系统管理等内容进行详细操作，如图5-6所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-200827b.png" alt="image-20230317205224419"></p>
<p>用户管理，在用户管理页面可以对索引、用户账号、用户姓名、性别、班级、联系方式、头像等内容详情、修改或删除等操作，如图5-7所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-cd7e4fa.png" alt="image-20230317205236107"></p>
<p>体质测试管理，在体质测试管理页面可以对索引、测试编号、测试名称、测试文件、图片、发布日期、教师工号、教师姓名等内容进行详情、修改或删除等操作，如图5-8所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-02f0cb6.png" alt="image-20230317205250642"></p>
<p>教师管理，在教师管理页面可以对教师工号、教师姓名、性别、职称、联系电话、头像等内容进行详情、修改或删除等操作，如图5-9所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-90afac1.jpg" alt="img"></p>
<p>测试报告管理，在测试报告管理页面可以对索引、测试编号、测试名称、教师工号、教师姓名、报告文件、提交日期、用户账号、用户姓名、班级等内容进行详情、修改或删除等详细的操作，如图5-10所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-216bb91.jpg" alt="img"></p>
<p>测试成绩管理，在测试成绩管理页面可以对索引、测试编号、、测试名称、教师工号、教师姓名、测试评分、测试评级、评分时间、用户账号、用户姓名、班级等内容进行详情、修改或删除等详细的操作，如图5-11所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-062394c.png" alt="image-20230317205311842"></p>
<p>留言板，在留言板页面可以对索引、用户名、留言内容、留言图片、回复内容、回复图片等内容进行详情、修改、回复或删除等操作，如图5-12所示。</p>
<p>![image-20230317205320908](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230317205320908.png)</p>
<p>系统管理，在公告资讯页面中可以对索引、标题、图片等内容进行详情、修改或删除等操作，也可以对轮播图管理进行相应的操作，如图5-13所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-04bbf5e.jpg" alt="img"></p>
<h2 id="用户功能模块"><a href="#用户功能模块" class="headerlink" title="用户功能模块"></a>用户功能模块</h2><p>用户进入大学生体质测试管理系统可以查看首页、个人中心、测试报告管理、测试成绩管理等内容进行详细操作，如图5-14所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-664ea83.jpg" alt="img"></p>
<p>测试报告管理，在测试报告管理页面中可以对索引、测试编号、测试名称、教师工号、教师姓名、报告文件、提交日期、用户账号、用户姓名、班级等内容进行详情或删除等详细的操作，如图5-15所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-22f9d30.png" alt="image-20230317205336485"></p>
<h2 id="教师功能模块"><a href="#教师功能模块" class="headerlink" title="教师功能模块"></a>教师功能模块</h2><p>教师注册，通过填写教师工号、密码、确认密码、教师姓名、职称、联系电话等内容进行注册，如图5-16所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-f378ae9.png" alt="image-20230317205348250"></p>
<p>进入教师页面中可以查看首页、个人中心、体质测试管理、测试报告管理、测试成绩管理等内容进行相应的操作，如图5-17所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-927cf46.jpg" alt="img"></p>
<p>体质测试管理，在体质测试管理页面中可以对索引、测试编号、测试名称、测试文件、图片、发布日期、教师工号、教师姓名等内容进行详细等操作，如图5-18所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-f64885b.png" alt="image-20230317205408348"></p>
<p>测试报告管理，在测试报告管理页面中可以对索引、测试编号、测试名称、教师工号、教师姓名、报告文件、提交日期、用户账号、用户姓名、班级等内容进行详细等操作，如图5-19所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031720-69a7548.jpg" alt="img"></p>
<h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><p>本系统使用MYSQL 作为系统的数据库，设计用户注册表、文件上传的表等等。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-ee331fb.png" alt="image-20230317222012165"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-bb83d18.png" alt="image-20230317222027521"></p>
<h1 id="部分源码"><a href="#部分源码" class="headerlink" title="部分源码"></a>部分源码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试报告</span><br><span class="line"> * </span><br><span class="line"> * @author </span><br><span class="line"> * @email </span><br><span class="line"> * @date 2022-03-11 14:04:32</span><br><span class="line"> */</span><br><span class="line">public interface CeshibaogaoDao extends BaseMapper&lt;CeshibaogaoEntity&gt; &#123;</span><br><span class="line">	</span><br><span class="line">	List&lt;CeshibaogaoVO&gt; selectListVO(@Param(&quot;ew&quot;) Wrapper&lt;CeshibaogaoEntity&gt; wrapper);</span><br><span class="line">	</span><br><span class="line">	CeshibaogaoVO selectVO(@Param(&quot;ew&quot;) Wrapper&lt;CeshibaogaoEntity&gt; wrapper);</span><br><span class="line">	</span><br><span class="line">	List&lt;CeshibaogaoView&gt; selectListView(@Param(&quot;ew&quot;) Wrapper&lt;CeshibaogaoEntity&gt; wrapper);</span><br><span class="line"></span><br><span class="line">	List&lt;CeshibaogaoView&gt; selectListView(Pagination page,@Param(&quot;ew&quot;) Wrapper&lt;CeshibaogaoEntity&gt; wrapper);</span><br><span class="line">	</span><br><span class="line">	CeshibaogaoView selectView(@Param(&quot;ew&quot;) Wrapper&lt;CeshibaogaoEntity&gt; wrapper);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h1><p>大学生体质测试管理系统包括前后端的所有代码，还有论文，如果有需要的话，可以点击这里咨询</p>
<p><a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
<p><a href="https://note.youdao.com/s/H1qh4lhu">计算机毕业设计</a></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Multisim 14 激活、破解、下载教程，亲测可用</title>
    <url>/p/16317.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>Multisim是一款功能强大、操作流畅的专业仿真工具，适用于板级模拟&#x2F;数字电路板设计工作，提供电路原理图图形输入、电路硬件描述语言输入，具有丰富的仿真分析能力。拥有专业版和教学版，深受国内外教师、科研人员和工程师的认可，可以说是行业一流和非常先进的SPICE模拟标准环境。它具有所见即所得设计环境、动态显示元素、交互式仿真界面、三维效果仿真电路等特点，可以帮助教师、研究人员和设计人员分析模拟、数字和电力电子电力。此外，它还具有主动分析模式，让用户更快速地得到仿真和运行分析的结果，单片机教学，采用数字逻辑结构，完成模拟电路系统和单片机，探头，电压，电流和功率通过新的电压，电路，电源与数字探头视觉交互仿真结果。</p>
<p><strong>PS：本站为大家带来的是Multisim 14【附安装教程】免费破解版免费下载，欢迎大家前来下载安装~</strong></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031600-a3711f.png" alt="仿真软件multisim13"></p>
<h2 id="Multisim-14新特性："><a href="#Multisim-14新特性：" class="headerlink" title="Multisim 14新特性："></a><strong>Multisim 14新特性：</strong></h2><hr>
<p>1、采用快速原料图搭建功能，缩短设计时间。</p>
<p>使用55,000个经制造商验证的组件和30个模拟台式仪器，快速构建、分析和迭代电路设计。</p>
<ol start="2">
<li>使用先进的分析功能，更早地定义电路。</li>
</ol>
<p>使用20个易于配置的高级分析功能，减少了昂贵的原型迭代，并促进了设计缺陷和低效率的早期检测。</p>
<p>3.轻松地将原理图移植到PCB原型</p>
<p>设计和电路模拟之间的切换和快速的PCB原型验证-无缝集成到Ultiboard只需点击几下鼠标。</p>
<h2 id="Multisim-14基本功能："><a href="#Multisim-14基本功能：" class="headerlink" title="Multisim 14基本功能："></a><strong>Multisim 14基本功能：</strong></h2><hr>
<p>1、原理图搭建功能</p>
<p>2、仿真功能</p>
<p>3、分析</p>
<p><img src="https://img.yutu.cn/ueditor/image/2022/20220115/1642237019155070.png" alt="multisim软件实验报告"></p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>软件和破解补丁下载地址：微信公众号 【<strong>硬件工程师</strong>】，回复 <strong>Multisim</strong>，即可获取，亲测可用</p>
<p>1 右键以管理员身份运行程序</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/e04942193a4ffc1fce941b215b8ae569.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>2 点击确定</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/4bc3ec6facff2bd31ff0d930d8ce2006.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>3 点击Unzip</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/16b8d652dab070d1535965dcf35ef72b.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>4 点击确定</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/126f7eaae492e630d9e3269da0894db8.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>5 点击Install NI</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/8ebfa498a06e5c6574b7c78204492dab.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>6  full name与organization信息任意填写，点击Next</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/c3821aec336fdf44e6a4c1cb0e8a8800.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>  full name与organization信息任意填写，点击Next</p>
<p>7 点击否</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/f4d600c7819083cc1d72e9d44f6310c6.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>8 选择安装目录，点击Next</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/843127b07ea9a4b640cf3fb4b9197f8c.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>9 点击Next</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/7c16ba1ae4b9e5fdfe2f9b224f1608ba.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>10 点击Next</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/5435c035a2bb3b6f6f26ced3091d7931.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>11 选择“I accept……”点击Next</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/748612ef802d7a66789ae91a3eb48ddb.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>12 点击Next</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/108440d2f96a0b29ecb251f307207070.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>13 等待安装即可</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/5de19b9c18d3f091ceddf9da731c5118.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>14 点击Next</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/0468b5ff8929b99d64a7f0247b804c86.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>15 点击Restart Later</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/592085d19dc35e142feefab7a009e020.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>16 右键以管理员身份运行</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/aaa3da25c3894be82f77a35dcfe29b0b.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>  回到安装包文件夹，右键以管理员身份运行</p>
<p>17 找到Base该项，右击找到Activate点击确定</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/24963a0aacc517ae63f427169cb26d22.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>18 找到Full Edition该项，右击找到Activate点击确定</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/94e3c92d6b90d7316477b22e8646ef43.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>19 找到Power Pro Edition该项，右击找到Activate点击确定</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/b9419020258973696f6e89edcc983dde.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>  找到Power Pro Edition该项，右击找到Activate点击确定</p>
<p>20 找到Full Edition该项，右击找到Activate点击确定</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/5dcfeda3195b94bf97c83b06b8092687.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>21 找到Power Pro Edition该项，右击找到Activate点击确定</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/a64c15a239d802a2a6e81ea999cef58f.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>22 复制安装包中chinese汉化包到软件安装目录</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/ad5dae8787e32c7438036fc10b8d4968.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>  复制安装包中chinese汉化包到软件安装目录（默认是C:\Program Files (x86)\National Insteuments\Circuit Design 12.0\stringfiles）</p>
<p>23 点击开始菜单栏，找到NI Ultiboard 14.0打开</p>
<p><img src="https://img.yutu.cn/soft/2021/20210708/00499c48a69e34e0569d1388a27716cc.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<p>24 破解和汉化完成，打开软件开始使用<img src="https://img.yutu.cn/soft/2021/20210708/1325a720262bd7726132ad7aac89e951.png" alt="Multisim 14【附安装教程】免费破解版安装图文教程、破解注册方法"></p>
<h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030621-38e9a6.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
<p>软件和破解补丁下载地址：微信公众号 【<strong>硬件工程师</strong>】，回复 <strong>Multisim</strong>，即可获取，亲测可用</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030700-f02d6f.png" alt="image-20230307000909729"></p>
]]></content>
  </entry>
  <entry>
    <title>徐师兄精品项目分享</title>
    <url>/p/48703.html</url>
    <content><![CDATA[<p>嗨喽，大家好，我是程序员徐师兄，大厂 7 年经验，专注于编程，提供毕业设计指导，源码交流，远程部署</p>
<blockquote>
<p>1、源码获取：叫 v <strong>Albert_HW07</strong> 了解</p>
<p><strong>2、精彩专栏推荐订阅：在下方专栏👇🏻</strong></p>
<p>😁<br>1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br>2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h2 id="SpringBoot-Vue-毕业设计题目推荐"><a href="#SpringBoot-Vue-毕业设计题目推荐" class="headerlink" title="SpringBoot+ Vue 毕业设计题目推荐"></a>SpringBoot+ Vue 毕业设计题目推荐</h2><p><a href="https://www.mdnice.com/writing/29abe11ca4de4536a7dfdaa339a227e0">100 套基于 SpringBoot+Vue 毕业设计项目（含源码+毕业设计论文）</a></p>
<table>
<thead>
<tr>
<th>题目</th>
<th>技术栈</th>
</tr>
</thead>
<tbody><tr>
<td>基于 SpringBoot+Vue 的医院急诊系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的社区维修平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园新闻网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的职称评审管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的在线动漫信息平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的心灵治愈交流平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的论坛管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的闲一品</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的线上教学平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的实验室管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的教师人事档案管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的租房网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的大学生社团活动平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的垃圾分类网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园闲置物品租售系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的在线BLOG网</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的家具销售电商平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的简历系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的汉服推广网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的准妈妈孕期交流平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的点餐平台网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的医疗服务系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园博客系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的商务安全邮箱邮件收发</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的springcloud房产销售平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的人职匹配推荐系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的Springboot的小区物业管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的旅游管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的口腔管家平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的汽车租赁系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的民宿管理平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的滴答拍摄影项目</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的酒店管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的汽车租赁系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的体质测试数据分析及可视化设计</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的家具网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的交流互动系统(1)</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的某银行OA系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的自习室预订系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的疫情网课管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的考研资讯平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的旅游管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的音乐翻唱与分享平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的旧物置换网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的影城管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的外卖点餐系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的餐厅点餐系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的新生宿舍管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园疫情防控系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的幼儿园管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的火车订票管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的毕业生信息招聘平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的二手交易平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园闲置物品交易网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的网上商城购物系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的学生毕业离校系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的在线答疑系统文件</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
</tbody></table>
<h2 id="毕业设计咨询"><a href="#毕业设计咨询" class="headerlink" title="毕业设计咨询"></a>毕业设计咨询</h2><p><strong>代码都是我和朋友开发的，测试过的，还有视频演示和文档的。</strong>可以保证正常运行。</p>
<p><a href="https://www.mdnice.com/writing/29abe11ca4de4536a7dfdaa339a227e0">100 套基于 SpringBoot+Vue 毕业设计项目（含源码+毕业设计论文）</a></p>
<p><strong>微信Albert_HW07</strong></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303280003-7041.png"></p>
<h2 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h2><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304202204-ebc6.png" alt="俊丰毕业设计 (3)"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA 中文乱码</title>
    <url>/p/13006.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> Android Studio 如果不进行配置的话，运行程序时控制台中文乱码问题会非常严重，甚至影响我们对信息的获取和程序的跟踪。通过历年的开发经验，在本文中我总结出四点用于解决控制台中文乱码问题的方法，希望有助于大家。  </p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-6152456/ebe13e7bde99e6d75fe2da95492aab49.png?imageView2/2/w/2560/h/7000" alt="img"></p>
<hr>
<p><strong>注意</strong>：下面根据我日常工作的经验总结，排序的先后即为我们需要注意修改的先后。在每次进行修改之后<strong>一定要重启 Android Studio 使配置生效</strong>。</p>
<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>1、在help中找到Edit Custom VM Options… 并打开文件，在文件中添加-Dfile.encoding&#x3D;UTF-8 ，如下图：</p>
<p><img src="https://img2022.cnblogs.com/blog/831566/202203/831566-20220304173324259-534789414.png" alt="img"></p>
<p><img src="https://img2022.cnblogs.com/blog/831566/202203/831566-20220304173534744-635418646.png" alt="img"></p>
<p> 2、在设置中找到File Encoding，里面都设置UTF-8，如下图</p>
<p><img src="https://img2022.cnblogs.com/blog/831566/202203/831566-20220304173609540-2113912767.png" alt="img"></p>
<p> 3、打开设置，搜索font，修改设置字体（有的字体不支持中文，按需求选择）</p>
<p><img src="https://img2022.cnblogs.com/blog/831566/202203/831566-20220304173723463-1234935931.png" alt="img"></p>
<h2 id="修改成功乱码问题解决"><a href="#修改成功乱码问题解决" class="headerlink" title="修改成功乱码问题解决"></a>修改成功乱码问题解决</h2><p>通过以上四种方式完全可以修改我们在 Android Studio 遇到的控制台中文乱码问题，希望大家能够在看了本帖之后，请将你使用哪种方法进行修改成功留言在本帖下方，给予更多人帮助。</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-6152456/862c297467fec55c0ddefac9aa0d2da0.png?imageView2/2/w/2560/h/7000" alt="img"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  在本文中我总结了四种方法完美解决 Android Studio 控制台中文乱码问题，这里我再次强调一下：在每次进行修改之后一定要重启 Android Studio 使配置生效。另外，大家可以在评论区说一下到底哪种方式对你来说有用，也就是说哪种乱码问题最常见。关于 IDEA 的问题和一些技巧之类的博客，我之后会更加频繁的更新！好工具用起来！  </p>
]]></content>
  </entry>
  <entry>
    <title>Java 毕业设计，基于 SpringBoot 开发的学生成绩管理系统</title>
    <url>/p/36460.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182203-e1e3.png" alt="image-20230318225935236"></p>
<p>学生成绩管理系统，基于 SpringBoot 开发的，功能完整，包括源码和部署教程。</p>
<p>为用户随时随地查看学生成绩信息提供了便捷的方法，更重要的是大大的简化了管理员管理学生成绩信息的方式方法，更提供了其他想要了解学生成绩信息及运作情况以及挑选方便快捷的可靠渠道。相比于传统学生成绩管理方法，这样的电子信息管理更为简洁方便，在学生成绩管理维护信息反馈和处理学生成绩管理意见方面也有得天独厚的</p>
<h1 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2. 技术栈"></a>2. 技术栈</h1><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7（一定要5.7版本）</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;myeclipse&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<p>浏览器：谷歌浏览器</p>
<h1 id="3-系统流程分析"><a href="#3-系统流程分析" class="headerlink" title="3. 系统流程分析"></a>3. 系统流程分析</h1><p>系统登录流程图，如图所示：</p>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-0621.png" alt="image-20230318230347954"></h3><p>添加信息流程图，如图所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-424f.png" alt="image-20230318230357794"> </p>
<h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>删除信息流程图，如图所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-ea85.png" alt="image-20230318230412281"></p>
<h1 id="4-系统设计"><a href="#4-系统设计" class="headerlink" title="4 系统设计"></a>4 系统设计</h1><h2 id="4-1-系统设计主要功能"><a href="#4-1-系统设计主要功能" class="headerlink" title="4.1 系统设计主要功能"></a>4.1 系统设计主要功能</h2><p>通过市场调研及咨询研究，了解了使用者及管理者的使用需求，于是制定了管理员、学生和教师等模块。其功能结构图如下图4-1所示：</p>
<p>​                                                                                             <img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031822-53c4503.png" alt="image-20230318225715442"></p>
<h2 id="4-2-数据库设计"><a href="#4-2-数据库设计" class="headerlink" title="4.2 数据库设计"></a>4.2 数据库设计</h2><h3 id="4-2-1-数据库设计规范"><a href="#4-2-1-数据库设计规范" class="headerlink" title="4.2.1 数据库设计规范"></a>4.2.1 数据库设计规范</h3><p>数据可设计要遵循职责分离原则，即在设计时应该要考虑系统独立性，即每个系统之间互不干预不能混乱数据表和系统关系。</p>
<p>数据库命名也要遵循一定规范，否则容易混淆，数据库字段名要尽量做到与表名类似，多使用小写英文字母和下划线来命名并尽量使用简单单词。</p>
<h3 id="4-2-2-E-R图"><a href="#4-2-2-E-R图" class="headerlink" title="4.2.2 E-R图"></a>4.2.2 E-R图</h3><p>综合成绩管理E-R图，如图4-2所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031822-e026c38.png" alt="image-20230318225734542"></p>
<p>学生信息E-R图，如图4-3所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031822-285d0c0.png" alt="image-20230318225754593"></p>
<p>教师信息E-R图如图4-4所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031822-5db88cb.png" alt="image-20230318225815822"></p>
<h3 id="4-2-3-数据表"><a href="#4-2-3-数据表" class="headerlink" title="4.2.3 数据表"></a>4.2.3 数据表</h3><p>本系统采用的是MySQL数据库存储数据，系统中使用到的主要数据表的具体展示部分如下所示。</p>
<p>表4-1：综合成绩</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>xuehao</td>
<td>varchar</td>
<td>200</td>
<td>学号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xueshengxingming</td>
<td>varchar</td>
<td>200</td>
<td>学生姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>banji</td>
<td>varchar</td>
<td>200</td>
<td>班级</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xueyechengji</td>
<td>float</td>
<td></td>
<td>学业成绩</td>
<td></td>
<td></td>
</tr>
<tr>
<td>deyuchengji</td>
<td>float</td>
<td></td>
<td>德育成绩</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tiyusuzhi</td>
<td>float</td>
<td></td>
<td>体育素质</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zhiyusuzhi</td>
<td>float</td>
<td></td>
<td>智育素质</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zongfen</td>
<td>float</td>
<td></td>
<td>总分</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xuenian</td>
<td>varchar</td>
<td>200</td>
<td>学年</td>
<td></td>
<td></td>
</tr>
<tr>
<td>dengjishijian</td>
<td>datetime</td>
<td></td>
<td>登记时间</td>
<td></td>
<td></td>
</tr>
<tr>
<td>jiaoshigonghao</td>
<td>varchar</td>
<td>200</td>
<td>教师工号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>jiaoshixingming</td>
<td>varchar</td>
<td>200</td>
<td>教师姓名</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-2：学生</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>xuehao</td>
<td>varchar</td>
<td>200</td>
<td>学号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>mima</td>
<td>varchar</td>
<td>200</td>
<td>密码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>touxiang</td>
<td>varchar</td>
<td>200</td>
<td>头像</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xueshengxingming</td>
<td>varchar</td>
<td>200</td>
<td>学生姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingbie</td>
<td>varchar</td>
<td>200</td>
<td>性别</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shoujihaoma</td>
<td>varchar</td>
<td>200</td>
<td>手机号码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>youxiang</td>
<td>varchar</td>
<td>200</td>
<td>邮箱</td>
<td></td>
<td></td>
</tr>
<tr>
<td>banji</td>
<td>varchar</td>
<td>200</td>
<td>班级</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-3：用户表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>username</td>
<td>varchar</td>
<td>100</td>
<td>用户名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>password</td>
<td>varchar</td>
<td>100</td>
<td>密码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>role</td>
<td>varchar</td>
<td>100</td>
<td>角色</td>
<td></td>
<td>管理员</td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>新增时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
</tbody></table>
<p>表4-4：token表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>userid</td>
<td>bigint</td>
<td></td>
<td>用户id</td>
<td></td>
<td></td>
</tr>
<tr>
<td>username</td>
<td>varchar</td>
<td>100</td>
<td>用户名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tablename</td>
<td>varchar</td>
<td>100</td>
<td>表名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>role</td>
<td>varchar</td>
<td>100</td>
<td>角色</td>
<td></td>
<td></td>
</tr>
<tr>
<td>token</td>
<td>varchar</td>
<td>200</td>
<td>密码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>新增时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>expiratedtime</td>
<td>timestamp</td>
<td></td>
<td>过期时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
</tbody></table>
<p>表4-5：教师</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>jiaoshigonghao</td>
<td>varchar</td>
<td>200</td>
<td>教师工号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>mima</td>
<td>varchar</td>
<td>200</td>
<td>密码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>touxiang</td>
<td>varchar</td>
<td>200</td>
<td>头像</td>
<td></td>
<td></td>
</tr>
<tr>
<td>jiaoshixingming</td>
<td>varchar</td>
<td>200</td>
<td>教师姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingbie</td>
<td>varchar</td>
<td>200</td>
<td>性别</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shoujihaoma</td>
<td>varchar</td>
<td>200</td>
<td>手机号码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>youxiang</td>
<td>varchar</td>
<td>200</td>
<td>邮箱</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zhiwu</td>
<td>varchar</td>
<td>200</td>
<td>职务</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="5-系统实现"><a href="#5-系统实现" class="headerlink" title="5 系统实现"></a>5 系统实现</h1><p>登录，管理员、学生和教师通过输入用户名，密码，选择角色信息，点击登录进入系统操作进行操作，如图5-1所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182203-e1e3.png" alt="image-20230318225935236"></p>
<h2 id="5-1管理员功能模块"><a href="#5-1管理员功能模块" class="headerlink" title="5.1管理员功能模块"></a>5.1管理员功能模块</h2><p>管理员登录进入学生成绩管理系统可以查看首页、个人中心、学生管理、教师管理、班级管理、综合成绩管理等内容进行详细操作，如图5-6所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182203-87b9.png" alt="image-20230318225951226"></p>
<p>学生管理，在学生管理页面可以对索引、学号、头像、学生姓名、性别、手机号码、邮箱、班级等内容进行详情，修改或删除等操作，如图5-2所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-4a39.png" alt="image-20230318230015169"></p>
<p>教师管理，在教师管理页面可以对索引、教师工号、头像、教师姓名、性别、手机号码、邮箱、职务等内容进行详情，修改或删除等操作，如图5-3所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-7342.png" alt="image-20230318230038503"></p>
<p>综合成绩管理，在综合成绩管理页面可以对索引、学号、学生姓名、班级、学业成绩、德育成绩、体育素质、智育素质、总分、学年、登记时间、教师工号、教师姓名等内容进行详情，修改或删除等操作，如图5-4所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-ca1b.png" alt="image-20230318230054743"></p>
<h2 id="5-2学生功能模块"><a href="#5-2学生功能模块" class="headerlink" title="5.2学生功能模块"></a>5.2学生功能模块</h2><p>学生登录进入学生成绩管理系统可以查看首页、个人中心、综合成绩管理等内容进行详细操作，如图5-5所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-910a.png" alt="image-20230318230119277"></p>
<p>个人中心，在个人信息页面通过填写学号、头像、学生姓名、性别、手机号码、邮箱、班级等内容进行个人信息修改操作，如图5-6所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-6642.png" alt="image-20230318230133157"></p>
<h2 id="5-3教师功能模块"><a href="#5-3教师功能模块" class="headerlink" title="5.3教师功能模块"></a>5.3教师功能模块</h2><p>教师登录进入学生成绩管理系统可以查看首页、个人中心、综合成绩管理等内容进行详细操作，如图5-7所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-beac.png" alt="image-20230318230151602"></p>
<p>个人中心，在个人信息页面通过填写教师工号、头像、教师姓名、性别、手机号码、邮箱、职务等内容进行个人信息修改操作，如图5-8所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-68ae.png" alt="image-20230318230203862"></p>
<p>综合成绩管理，在综合成绩管理页面可以对索引、学号、学生姓名、班级、学业成绩、德育成绩、体育素质、智育素质、总分、学年、登记时间、教师工号、教师姓名等内容进行详情，修改或删除等操作，如图5-9所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-779e.png" alt="image-20230318230216724"></p>
<h1 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h1><p>大学生体质测试管理系统包括前后端的所有代码，还有论文，如果有需要的话，可以点击查看<a href="https://note.youdao.com/s/H1qh4lhu">源码地址</a></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/90bda718d3bc9e51222a8eeda424c435.png" alt="image-20230318230216724"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java 毕业设计，基于 SpringBoot 开发的家乡特色菜系统的研究与实现</title>
    <url>/p/64078.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-5e82.png" alt="image-20230318232308154"></p>
<p>家乡特色推荐系统，基于 SpringBoot 开发的，功能完整，包括源码和部署教程。可用于毕业设计和课程设计</p>
<p>本次设计任务是要设计一个家乡特色推荐系统，通过这个系统能够满足家乡特色文章的管理功能。系统的主要功能包括首页，个人中心，用户管理，文章分类管理，文章分享管理，系统管理等。</p>
<p>管理员可以根据系统给定的账号进行登录，登录后可以进入家乡特色推荐系统，对所有模块进行管理。包括查看和修改自己的个人信息以及登录密码。</p>
<p>该系统为每一个用户都分配了一个用户账号，用户通过账号的登录可以在系统中查看家乡特色文章信息及对个人信息进行修改等功能</p>
<h1 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2. 技术栈"></a>2. 技术栈</h1><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7（一定要5.7版本）</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;myeclipse&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<p>浏览器：谷歌浏览器</p>
<h1 id="3-系统流程分析"><a href="#3-系统流程分析" class="headerlink" title="3. 系统流程分析"></a>3. 系统流程分析</h1><p>家乡特色推荐系统是两种身份的用户，主要涉及管理员和用户。每个身份都是操作起来都是清楚方便的。对于一些家乡特色文章信息，这是任何人都可以查看的，但是如果用户想进入后台进行操作，则必须是已经进行登录的用户，或者想修改家乡特色文章信息的话，也是需要用户为登录状态。这些用户的基本信息都由管理员对其统一管理。</p>
<p>根据家乡特色文章实际过程的分析，网站有以下几个部分，其中用户注册，发布个人信息，修改个人信息；用户注册登录，发布家乡特色文章信息；管理员管理用户信息。以上业务过程从用户角度可以分为两类使用本系统的用户角色，包括管理员和用户。以下针对各类用户说明相应的业务过程。</p>
<p>系统用例图如下图3-2所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-8e36.jpg" alt="img"></p>
<h1 id="4系统设计"><a href="#4系统设计" class="headerlink" title="4系统设计"></a>4系统设计</h1><p>家乡特色菜管理系统包括前后端的所有代码，还有论文，如果有需要的话，可以点击查看<a href="https://note.youdao.com/s/H1qh4lhu">源码地址</a></p>
<h2 id="4-1数据库设计"><a href="#4-1数据库设计" class="headerlink" title="4.1数据库设计"></a>4.1数据库设计</h2><p>信息管理系统的效率和实现的效果完全取决于数据库结构设计的好坏。为了保证数据的完整性，提高数据库存储的效率，那么统一合理地设计数据库结构是必要的。数据库设计一般包括如下几个步骤：</p>
<p>（1）根据用户需求，确定数据库信息进行保存</p>
<p>对用户的需求分析是数据库设计的第一阶段，用户的需求调研，熟悉小区运作流程，系统要求，这些都是以概念模型为基础的。</p>
<p>（2）设计数据的概念模型</p>
<p>概念模型与数据建模用户的观点一致，用于信息世界的建模工具。通过E-R图可以清楚地描述系统涉及到的实体之间的相互关系。</p>
<p>用户注册实体图如图4-1所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-3c05.jpg" alt="img"></p>
<p>图4-1用户注册实体图</p>
<p>文章分享实体图如图4-2所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-e473.jpg" alt="img"></p>
<p>图4-2文章分享实体图</p>
<p>（3）数据库逻辑结构分析</p>
<p>数据库概念结构设计后，可以数据库概念转化实际的数据模型，这是一种数据库的逻辑结构，就是将概念结构与支持数据库管理系统的模型相符合。具体的表设计如下所示：</p>
<p>表4-1：用户表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>username</td>
<td>varchar</td>
<td>100</td>
<td>用户名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>password</td>
<td>varchar</td>
<td>100</td>
<td>密码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>role</td>
<td>varchar</td>
<td>100</td>
<td>角色</td>
<td></td>
<td>管理员</td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>新增时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
</tbody></table>
<p>表4-2：token表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>userid</td>
<td>bigint</td>
<td></td>
<td>用户id</td>
<td></td>
<td></td>
</tr>
<tr>
<td>username</td>
<td>varchar</td>
<td>100</td>
<td>用户名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tablename</td>
<td>varchar</td>
<td>100</td>
<td>表名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>role</td>
<td>varchar</td>
<td>100</td>
<td>角色</td>
<td></td>
<td></td>
</tr>
<tr>
<td>token</td>
<td>varchar</td>
<td>200</td>
<td>密码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>新增时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>expiratedtime</td>
<td>timestamp</td>
<td></td>
<td>过期时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
</tbody></table>
<p>表4-3：收藏表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>userid</td>
<td>bigint</td>
<td></td>
<td>用户id</td>
<td></td>
<td></td>
</tr>
<tr>
<td>refid</td>
<td>bigint</td>
<td></td>
<td>收藏id</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tablename</td>
<td>varchar</td>
<td>200</td>
<td>表名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>name</td>
<td>varchar</td>
<td>200</td>
<td>收藏名称</td>
<td></td>
<td></td>
</tr>
<tr>
<td>picture</td>
<td>varchar</td>
<td>200</td>
<td>收藏图片</td>
<td></td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>varchar</td>
<td>200</td>
<td>类型(1:收藏,21:赞,22:踩)</td>
<td></td>
<td>1</td>
</tr>
<tr>
<td>inteltype</td>
<td>varchar</td>
<td>200</td>
<td>推荐类型</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-4：资讯信息</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>title</td>
<td>varchar</td>
<td>200</td>
<td>标题</td>
<td></td>
<td></td>
</tr>
<tr>
<td>introduction</td>
<td>longtext</td>
<td>4294967295</td>
<td>简介</td>
<td></td>
<td></td>
</tr>
<tr>
<td>picture</td>
<td>varchar</td>
<td>200</td>
<td>图片</td>
<td></td>
<td></td>
</tr>
<tr>
<td>content</td>
<td>longtext</td>
<td>4294967295</td>
<td>内容</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-5：文章分享评论表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>refid</td>
<td>bigint</td>
<td></td>
<td>关联表id</td>
<td></td>
<td></td>
</tr>
<tr>
<td>userid</td>
<td>bigint</td>
<td></td>
<td>用户id</td>
<td></td>
<td></td>
</tr>
<tr>
<td>nickname</td>
<td>varchar</td>
<td>200</td>
<td>用户名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>content</td>
<td>longtext</td>
<td>4294967295</td>
<td>评论内容</td>
<td></td>
<td></td>
</tr>
<tr>
<td>reply</td>
<td>longtext</td>
<td>4294967295</td>
<td>回复内容</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-6：配置文件</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td>varchar</td>
<td>100</td>
<td>配置参数名称</td>
<td></td>
<td></td>
</tr>
<tr>
<td>value</td>
<td>varchar</td>
<td>100</td>
<td>配置参数值</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-7：用户</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>yonghuming</td>
<td>varchar</td>
<td>200</td>
<td>用户名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingming</td>
<td>varchar</td>
<td>200</td>
<td>姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>touxiang</td>
<td>varchar</td>
<td>200</td>
<td>头像</td>
<td></td>
<td></td>
</tr>
<tr>
<td>mima</td>
<td>varchar</td>
<td>200</td>
<td>密码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingbie</td>
<td>varchar</td>
<td>200</td>
<td>性别</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shouji</td>
<td>varchar</td>
<td>200</td>
<td>手机</td>
<td></td>
<td></td>
</tr>
<tr>
<td>sfsh</td>
<td>varchar</td>
<td>200</td>
<td>是否审核</td>
<td></td>
<td>否</td>
</tr>
<tr>
<td>shhf</td>
<td>longtext</td>
<td>4294967295</td>
<td>审核回复</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-8：文章分享</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>biaoti</td>
<td>varchar</td>
<td>200</td>
<td>标题</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tupian</td>
<td>varchar</td>
<td>200</td>
<td>图片</td>
<td></td>
<td></td>
</tr>
<tr>
<td>wenzhangfenlei</td>
<td>varchar</td>
<td>200</td>
<td>文章分类</td>
<td></td>
<td></td>
</tr>
<tr>
<td>jianshu</td>
<td>varchar</td>
<td>200</td>
<td>简述</td>
<td></td>
<td></td>
</tr>
<tr>
<td>wenzhangxiangqing</td>
<td>longtext</td>
<td>4294967295</td>
<td>文章详情</td>
<td></td>
<td></td>
</tr>
<tr>
<td>fabushijian</td>
<td>datetime</td>
<td></td>
<td>发布时间</td>
<td></td>
<td></td>
</tr>
<tr>
<td>yonghuming</td>
<td>varchar</td>
<td>200</td>
<td>用户名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingming</td>
<td>varchar</td>
<td>200</td>
<td>姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>sfsh</td>
<td>varchar</td>
<td>200</td>
<td>是否审核</td>
<td></td>
<td>否</td>
</tr>
<tr>
<td>shhf</td>
<td>longtext</td>
<td>4294967295</td>
<td>审核回复</td>
<td></td>
<td></td>
</tr>
<tr>
<td>clicktime</td>
<td>datetime</td>
<td></td>
<td>最近点击时间</td>
<td></td>
<td></td>
</tr>
<tr>
<td>clicknum</td>
<td>int</td>
<td></td>
<td>点击次数</td>
<td></td>
<td>0</td>
</tr>
</tbody></table>
<p>表4-9：文章分类</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>wenzhangfenlei</td>
<td>varchar</td>
<td>200</td>
<td>文章分类</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="4-2系统整体设计"><a href="#4-2系统整体设计" class="headerlink" title="4.2系统整体设计"></a>4.2系统整体设计</h2><h3 id="4-2-1系统设计思想"><a href="#4-2-1系统设计思想" class="headerlink" title="4.2.1系统设计思想"></a>4.2.1系统设计思想</h3><p>系统确定了各项需求，完成了系统的分析和数据库的设计，它就可以根据网站的特点决定网站的发展模式，才能实现代码。通过对网站的分析，这个网站是属于一个小项目，所完成的功能相对简单，就是对数据的基本操作。从而决定采用B&#x2F;S开发模式。该模型的基本过程是：当用户访问网站的浏览器，或从用户向服务器发送请求时，通过接收请求，然后调用数据访问逻辑运算如比，将结果返回给将结果返回到用户通过浏览器。</p>
<p>使用开发的模型时，我们要把一些常用的，可以重复使用了java技术。当用户浏览网页，很多网页上的信息是从数据库动态删除，这就要求网页必须有数据库操作的能力，如连接数据库和数据表，更新。一个网站包含多个相同的网页，实现数据库操作功能的、代码就需要在不一样的网页中重复的被使用，这样不仅降低了工作的效率，一般也会给维护带来较大的麻烦。为了弥补这一缺陷，功能代码应该在java中完整的数据库操作，可以使用在每一个页面上。</p>
<h3 id="4-2-2系统流程图"><a href="#4-2-2系统流程图" class="headerlink" title="4.2.2系统流程图"></a>4.2.2系统流程图</h3><p>下图是用户进入这个家乡特色推荐系统后，基本的操作流程。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-c873.jpg" alt="img"></p>
<h1 id="5系统详细设计"><a href="#5系统详细设计" class="headerlink" title="5系统详细设计"></a>5系统详细设计</h1><h2 id="5-1系统功能模块"><a href="#5-1系统功能模块" class="headerlink" title="5.1系统功能模块"></a>5.1系统功能模块</h2><p>家乡特色推荐系统，在系统首页可以查看首页，文章分享，资讯信息，个人中心，后台管理等内容进行详细操作，如图5-1所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-9e97.png" alt="image-20230318232239205"></p>
<p>用户注册，在用户注册页面通过填写用户名，密码，确认密码，姓名，手机等信息完成用户注册，如图5-2所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-c91a.png" alt="image-20230318232323236"></p>
<p>文章分享，在文章分享页面可以查看文章分类，简述，发布时间，用户名，姓名，点击次数等详细内容，并进行评论和收藏操作，如图5-3所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-5e82.png" alt="image-20230318232308154"></p>
<p>个人中心，在个人中心页面通过填写用户名，姓名，图片，密码，性别，手机等信息进行更新信息，根据需要对我的收藏进行详细操作，如图5-4所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-ac07.jpg" alt="img"></p>
<p>图5-4个人中心界面图</p>
<h2 id="5-2管理员功能模块"><a href="#5-2管理员功能模块" class="headerlink" title="5.2管理员功能模块"></a>5.2管理员功能模块</h2><p>管理员登录，进入系统前在登录页面根据要求填写用户名和密码，选择角色等信息，点击登录进行登录操作，如图5-5所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-8484.jpg" alt="img"></p>
<p>图5-5管理员登录界面图</p>
<p>管理员登录系统后，可以对首页，个人中心，用户管理，文章分类管理，文章分享管理，系统管理等功能模块进行相应操作，如图5-6所示。</p>
<p>![img](Users&#x2F;junxu&#x2F;Library&#x2F;Group Containers&#x2F;UBF8T346G9.Office&#x2F;TemporaryItems&#x2F;msohtmlclip&#x2F;clip_image012.jpg)</p>
<p>图5-6管理员功能界面图</p>
<p>用户管理，在用户管理页面可以对索引，用户名，姓名，头像，性别，手机，审核回复，审核状态，审核等信息进行详情，修改和删除等操作，如图5-7所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-530e.jpg" alt="img"></p>
<p>图5-7用户管理界面图</p>
<p>文章分类管理，在文章分类管理页面可以对索引，文章分类等内容进行详情，修改和删除等操作，如图5-8所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-aabc.jpg" alt="img"></p>
<p>图5-8文章分类管理界面图</p>
<p>文章分享管理，在文章分享管理页面可以对索引，标题，图片，文章分类，简述，发布时间，用户名，姓名，审核回复，审核状态等内容进行详情，修改，查看评论和删除操作，如图5-9所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303182303-ce97.jpg" alt="img"></p>
<h1 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h1><p>家乡特色菜管理系统包括前后端的所有代码，还有论文，如果有需要的话，可以点击查看<a href="https://note.youdao.com/s/H1qh4lhu">源码地址</a></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/90bda718d3bc9e51222a8eeda424c435.png" alt="image-20230318230216724"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java 毕业设计，基于 SpringBoot 开发的班级综合测评系统研究与实现</title>
    <url>/p/2807.html</url>
    <content><![CDATA[<p><strong>您好，我是<a href="https://blog.junxu666.top/p/57317.html">程序员徐师兄</a>，感谢您阅读本文，欢迎一键三连哦</strong>。<br>😁 </p>
<blockquote>
<p> 1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br> 2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>传统的班级综合测评管理系统，一开始都是手工记录，然后将手工记录的文档进行存档；随着电脑的普及，班级综合测评管理演变成了手工记录后，输入电脑进行存档。这两种管理方式，对教师来说工作量大，不单要教授课程，后期的班级综合测评管理还需要花费大量时间。而且这种班级综合测评管理的方式，容易出现遗失或因为失误输入错误的信息等等。在这些基础上，我把用Springboot为框架的班级综合测评管理系统作为我的毕业设计，希望可以解决传统班级综合测评管理系统中出现的问题，简化教师的工作，也可以方便管理员进行系统化、电子化的管理。</p>
<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7（一定要5.7版本）</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;myeclipse&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<p>浏览器：谷歌浏览器</p>
<h1 id="3-需求分析"><a href="#3-需求分析" class="headerlink" title="3. 需求分析"></a>3. 需求分析</h1><h3 id="用户需求分析"><a href="#用户需求分析" class="headerlink" title="用户需求分析"></a>用户需求分析</h3><p>根据账号登陆进入班级综合测评管理系统，系统根据角色展示相应的功能权限。教师可以修改个人信息和密码，还可以对学生信息，综合评价等进行详情、修改、删除、测评等。超级管理员拥有系统所有功能权限，可以管理系统，管理教师和学生的信息。</p>
<h3 id="功能需求分析"><a href="#功能需求分析" class="headerlink" title="功能需求分析"></a>功能需求分析</h3><p>根据一般班级综合测评管理系统的功能需求分析，本系统的功能模块如下：</p>
<p>（1）在个人中心，管理员可以修改自己的用户名和登录密码。</p>
<p>（2）在教师管理模块中，可以查看教师的信息，和进行修改、删除。</p>
<p>（3）在学生管理模块中，可以查看学生的信息，和进行修改、删除。</p>
<p>（4）在综合测评管理页面，管理员只有查看详情、修改、删除和查看统计图的权限，新增的权限是在教师的手上。</p>
<h3 id="系统性能需求分析"><a href="#系统性能需求分析" class="headerlink" title="系统性能需求分析"></a>系统性能需求分析</h3><p>对系统性能进行分析，可对系统反应度、界面简洁清晰度、储存能性、易学性和稳定性进行分析；</p>
<p>系统反应度：同时上万人在线时反应时间应该在两三秒以内，。</p>
<p>界面简洁清晰：系统界面要求简单明了，操作简单，用户操作容易上手。</p>
<p>储存性能高：高考志愿智能推荐系统中需要存储的信息有很多，所以对系统的存储量要求很高，因此数据库就应该很强大，才能保证信息能安全稳定的进行存储；</p>
<p>易学性：该系统在操作上必须简单好上手，没有很多复杂的操作，只需要简单的进行学习就能操作该系统。</p>
<p>稳定性：要求高考志愿智能推荐系统运行要稳定，界面清楚、字体清晰等。</p>
<h1 id="4系统总体设计与实现"><a href="#4系统总体设计与实现" class="headerlink" title="4系统总体设计与实现"></a>4系统总体设计与实现</h1><h2 id="4-1总体设计"><a href="#4-1总体设计" class="headerlink" title="4.1总体设计"></a>4.1总体设计</h2><p>班级综合测评管理系统采用了结构化开发的方法。这种开发方法的优点是控制性比较强，开发过程中采用了结构化和模块化的设计思想，自顶向下，从总体到部分，合理划分系统的结构和模块。结构化开发时使用模块式开发，各模块之间互不影响，方便系统的开发与管理。 </p>
<p>本系统的设计是基于 B&#x2F;S架构的三层体系结构，也就是浏览器和服务器结构。计算机技术发展的速度非常快，以前的设计结构都以C&#x2F;S的模式为主，也就是客户端和服务端模式。但随着网页技术的发展，越来越多的用户习惯于使用浏览器。现在的网页技术可以在浏览器中实现非常漂亮的效果，以前的单一低调的客户端页面已经无法满足用户的需求。在B&#x2F;S这种结构下，技术人员可以很轻松的设计出用户所需要的工作界面，页面代码通过浏览器进行解析展示，在浏览器中不做过多的事务逻辑的处理。主要的事务逻辑放在服务端进行处理。这样用户的电脑就不会承载过多的东西，只需要浏览器展示即可。对于开发人员也很方便进行系统的维护和升级。开发人员只需要在服务端进行系统的维护就可以了。使用Java这样的跨平台性非常好的语言，这样的开发模式更加的方便，高效。本系统合理的进行了模块划分和组合，因此由于各个模块之间基本上是相互独立的，所以每个模块都可以独立的被解释、执行、调试和修改，让繁琐的系统设计工作简单化。系统总体设计图如下图4-1所示：</p>
<p>​                                                            <img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-72be764.png" alt="image-20230317220615789"></p>
<p>​                                                                                             </p>
<h1 id="5-系统功能的详细设计与实现"><a href="#5-系统功能的详细设计与实现" class="headerlink" title="5 系统功能的详细设计与实现"></a>5 系统功能的详细设计与实现</h1><h2 id="5-1-管理员功能模块"><a href="#5-1-管理员功能模块" class="headerlink" title="5.1 管理员功能模块"></a>5.1 管理员功能模块</h2><p>管理员输入账号和密码，选择登录角色进行登录，管理员登录界面如图5-1所示：</p>
<p>​                                </p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-7409.png" alt="image-20230317220107033"> </p>
<p>管理员功能：管理员登录系统后，能对首页、个人中心、学生管理、教师管理、班级管理、综合测评管理进行操作。管理员功能如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-7c5a607.png" alt="image-20230317220208913"> </p>
<p>学生管理：在学生管理页面，可以对索引、学号、学生姓名、性别、班级、学生手机、班级、教师工号等内容进行详情、修改和删除等操作，如图5-3所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-53f97ee.png" alt="image-20230317220220548"></p>
<p>教师管理：在教师管理页面，可以对索引、教师工号、教师姓名、性别、照片、教师电话等内容进行详情、修改和删除等操作，如图5-4所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-837f00a.png" alt="image-20230317220228906"></p>
<p>班级管理：在班级管理页面，可以对索引、班级等内容进行修改和删除等操作，如图5-5所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-6617417.png" alt="image-20230317220244334"></p>
<p>综合测评管理：在综合测评管理页面，可以对索引、学号、学生姓名、教师工号、教师姓名、班级、德育、智育、体育、综合成绩、录入时间等内容进行详情，修改和删除等操作，如图5-6所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-5738607.png" alt="image-20230317220254023"></p>
<h2 id="5-2学生功能模块"><a href="#5-2学生功能模块" class="headerlink" title="5.2学生功能模块"></a>5.2学生功能模块</h2><p>学生功能：学生登录到班级综合测评管理系统后，可以对首页、个人中心、综合测评管理等进行操作，如图5-7所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-771b62d.png" alt="image-20230317220303181"></p>
<p>个人中心：学生可以将学号、学生姓名、性别、头像、学生手机、班级、教师工号等个人信息进行修改，还能修改密码，如图5-8所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-c26ccd3.png" alt="image-20230317220312921"></p>
<p>综合测评管理：在综合测评管理页面，可以对索引、学号、学生姓名、教师工号、教师姓名、班级、德育、智育、体育、综合成绩、录入时间等内容进行详情操作，如图5-9所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-97dac0b.png" alt="image-20230317220329628"></p>
<h2 id="5-3教师功能模块"><a href="#5-3教师功能模块" class="headerlink" title="5.3教师功能模块"></a>5.3教师功能模块</h2><p>教师功能：教师登录到班级综合测评管理系统后，可以对首页、个人中心、学生管理、综合测评管理等进行操作，如图5-10所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-ee5abc6.png" alt="image-20230317220340892"></p>
<p>个人中心：教师可以将教师工号、教师姓名、性别、照片、教师电话等个人信息进行修改，还能修改密码，如图5-11所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-366507a.png" alt="image-20230317220348873"></p>
<p>学生管理：在学生管理页面，可以查看对索引、学号、学生姓名、性别、头像、学生手机、班级、教师工号等内容进行详细和综合测评等操作，如图5-12所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-a06a5f2.png" alt="image-20230317220358218"></p>
<p>综合测评管理：在综合测评管理页面，可以对索引、学号、学生姓名、教师工号、教师姓名、班级、德育、智育、体育、综合成绩、录入时间等内容进行详情、修改和删除等操作，如图5-13所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031722-a5d6f24.png" alt="image-20230317220405718"></p>
<h1 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h1><p><a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031721-19ccfc0.png"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Android、SprintBoot、SSM 部署教程</title>
    <url>/p/49037.html</url>
    <content><![CDATA[<p>[toc]</p>
<p>嗨喽，大家好，我是程序员徐师兄，大厂 7 年经验，专注于编程，提供毕业设计指导，源码交流，远程部署。</p>
<p><a href="https://www.mdnice.com/writing/29abe11ca4de4536a7dfdaa339a227e0">100 套基于 SpringBoot+Vue 毕业设计项目（含源码+毕业设计论文）</a></p>
<blockquote>
<p><strong>1、源码获取： 查看<a href="https://note.youdao.com/s/H1qh4lhu">源码地址</a></strong> ，或者加 v <strong>xiaoxu_9411</strong> 了解</p>
<p><strong>2、精彩专栏推荐订阅：在下方专栏👇🏻</strong></p>
<p>😁<br>1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br>2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h1 id="Java-SPringBoot，SSM-部署教程"><a href="#Java-SPringBoot，SSM-部署教程" class="headerlink" title="Java SPringBoot，SSM 部署教程"></a>Java SPringBoot，SSM 部署教程</h1><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7（一定要5.7版本）</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;myeclipse&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<p>浏览器：谷歌浏览器</p>
<h2 id="部署教程"><a href="#部署教程" class="headerlink" title="部署教程"></a>部署教程</h2><p>如果你不会部署的话，可以联系我远程部署，注意是<strong>有偿的</strong></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-0f02.png" alt="img"></p>
<h3 id="Java-配置教程"><a href="#Java-配置教程" class="headerlink" title="Java 配置教程"></a>Java 配置教程</h3><p>Java配置环境链接： <a href="https://pan.baidu.com/s/1PMNIxHDu1SfYlng3BP58zg?pwd=qpke">https://pan.baidu.com/s/1PMNIxHDu1SfYlng3BP58zg?pwd=qpke</a> </p>
<p>提取码: qpke </p>
<h3 id="部署教程-1"><a href="#部署教程-1" class="headerlink" title="部署教程"></a>部署教程</h3><p><strong>如果您要学会调试运行，一定要去看运行教学</strong></p>
<p>springboot程序运行教学地址：</p>
<p>链接: <a href="https://pan.baidu.com/s/1MjF9VkFhFLliiSkYTk8SaQ?pwd=v2u4">https://pan.baidu.com/s/1MjF9VkFhFLliiSkYTk8SaQ?pwd=v2u4</a> </p>
<p>提取码: v2u4 </p>
<p><strong>部署教程：</strong></p>
<p><strong>链接: <a href="https://pan.baidu.com/s/10tI5APDy4as14lDRskt4Yw?pwd=xsf5">https://pan.baidu.com/s/10tI5APDy4as14lDRskt4Yw?pwd=xsf5</a></strong></p>
<p><strong>提取码: xsf5</strong>  </p>
<h3 id="运行地址："><a href="#运行地址：" class="headerlink" title="运行地址："></a>运行地址：</h3><p>后台路径地址：localhost:8080&#x2F;项目名称&#x2F;admin&#x2F;dist&#x2F;index.html</p>
<p>前台路径地址：localhost:8080&#x2F;项目名称&#x2F;front&#x2F;index.html （无前台不需要输入）</p>
<p>管理员账号：abo   </p>
<p>管理员密码：abo</p>
<h1 id="Android-部署教程"><a href="#Android-部署教程" class="headerlink" title="Android 部署教程"></a>Android 部署教程</h1><h2 id="技术栈-1"><a href="#技术栈-1" class="headerlink" title="技术栈"></a>技术栈</h2><p>开发语言：Java，Kotlin</p>
<p>JDK版本：JDK1.8，11</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7（一定要5.7版本）</p>
<p>数据库工具：Navicat 11以上版本即可</p>
<p>开发软件：AndroidStudio&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<p>浏览器：谷歌浏览器</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java 毕业设计，基于 SpringBoot 开发的留守儿童系统的研究与实现，附源码和教程</title>
    <url>/p/10525.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><blockquote>
<p>大家伙，我是程序员徐师兄，6 年大厂经验<br>最近跟朋友合作，捣鼓了这个毕业设计项目，源码都是可以运行起来的，里面包括源码和教程，大家感兴趣的话可以私聊我了解。<br><br/><br><a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br><a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h1 id="1-研究背景"><a href="#1-研究背景" class="headerlink" title="1.研究背景"></a>1.研究背景</h1><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202303-4c82.png" alt="image-20230320232434235"></p>
<p>以往的留守儿童爱心的管理，一般都是纸质文件来管理留守儿童爱心信息，传统的管理方式已经无法满足现代人们的需求；使用留守儿童爱心网站, 首先可以大幅提高留守儿童爱心信息检索，只需输入留守儿童爱心相关信息就能在数秒内反馈想要的结果；其次可存储大量的留守儿童爱心信息，同时留守儿童爱心信息安全性有更高的保障；这些优点大大提高运营效率并节省运营成本。因此，开发留守儿童爱心网站对留守儿童爱心信息进行有效的管理是很必要的，不仅提高了留守儿童爱心管理效率，增加了用户信息安全性，方便及时反馈信息给管理员，增加了与管理员之间的互动交流，更能提高用户的体验强度。</p>
<p>本系统为了数据库结构的灵活性所以打算采用MySQL来设计数据库，而java技术，B&#x2F;S架构则保证了较高的平台适应性。本文主要介绍了本系统的开发背景，所要完成的功能和开发的过程，主要说明了系统设计的重点、设计思想。</p>
<h1 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2. 技术栈"></a>2. 技术栈</h1><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7（一定要5.7版本）</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;myeclipse&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<p>浏览器：谷歌浏览器</p>
<h1 id="3-系统分析"><a href="#3-系统分析" class="headerlink" title="3.系统分析"></a>3.系统分析</h1><p>经过大学四年的学习，已经掌握了JAVA、Mysql数据库等方面的编程技巧和方法，对于这些技术该有的软硬件配置也是齐全的，能够满足开发的需要。</p>
<p>本留守儿童爱心网站采用的是Mysql作为数据库，可以绝对地保证用户数据的安全；可以与Mysql数据库进行无缝连接。</p>
<p>所以，留守儿童爱心网站在技术上是可以实施的。</p>
<h1 id="4系统设计"><a href="#4系统设计" class="headerlink" title="4系统设计"></a>4系统设计</h1><p>留守儿童爱心网站的主要功能的结构如图4-1所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202303-8266.jpg" alt="img"></p>
<h1 id="5系统的详细设计与实现"><a href="#5系统的详细设计与实现" class="headerlink" title="5系统的详细设计与实现"></a>5系统的详细设计与实现</h1><h2 id="5-1系统功能模块"><a href="#5-1系统功能模块" class="headerlink" title="5.1系统功能模块"></a>5.1系统功能模块</h2><p>系统首页的主要功能展示了首页、宣传新闻、志愿活动、爱心捐赠、个人中心、后台管理等信息，进行相应操作。运行结果如图5-1所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202303-958a.jpg" alt="img"></p>
<p>宣传新闻，在宣传新闻页面中可以查看新闻标题、发布时间、发布人等内容进行评论或提交等操作，如图5-2所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202303-b9ed.png" alt="image-20230320232046837"></p>
<p>志愿活动，在志愿活动页面可以查看活动名称、活动编号、活动地点、开始时间、结束时间、联系方式等内容进行活动报名等操作；如图5-3所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202303-88f6.png" alt="image-20230320232102450"></p>
<p>爱心捐赠，在爱心捐赠页面中可以查看捐赠标题、发布时间、机构名称、 捐赠地点、微信账号、微信用户名等内容进行捐赠内容等操作，如图5-4所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202303-fb3b.png" alt="image-20230320232112264"></p>
<p>用户注册，在用户注册页面中通过填写用户账号、密码、确认密码、用户姓名、年龄、用户手机等内容进行注册等操作如图5-6所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202303-a1b4.png" alt="image-20230320232145736"></p>
<h2 id="5-2管理员功能模块"><a href="#5-2管理员功能模块" class="headerlink" title="5.2管理员功能模块"></a>5.2管理员功能模块</h2><p>管理员进入系统前在登录页面根据要求填写用户名和密码，选择角色等信息，点击登录进行登录操作，如图5-7所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202303-1d94.png" alt="image-20230320232156403"></p>
<p>管理员登录系统后，可以对首页、个人中心、用户管理、宣传新闻管理、志愿活动管理、爱心捐赠管理、旧物捐赠管理、活动报名管理、系统管理等功能进行相应的操作管理，如图5-8所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202303-f3a9.png" alt="image-20230320232205112"></p>
<p>用户管理，在用户管理页面可以对索引、用户账号、用户姓名、性别、年龄、头像、用户手机等内容进行详情、修改或删除等操作，如图5-9所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202303-af8a.png" alt="image-20230320232219156"></p>
<p>宣传新闻管理，在宣传新闻管理页面可以对索引、新闻标题、封面图片、发布时间、发布人等内容进行详情、查看评论、修改或删除等操作，如图5-10所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202303-e71d.png" alt="image-20230320232232144"></p>
<h1 id="6、源码获取"><a href="#6、源码获取" class="headerlink" title="6、源码获取"></a>6、源码获取</h1><blockquote>
<p><strong>1、源码获取： 查看<a href="https://note.youdao.com/s/H1qh4lhu">源码地址</a></strong> </p>
<p><strong>2、精彩专栏推荐订阅：在下方专栏👇🏻</strong></p>
<p>😁<br>1.<a href="https://blog.csdn.net/u014534808/category_12245313.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br>2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java 毕业设计，基于 SpringBoot 的智慧养老系统的研究与实现，附源码和教程</title>
    <url>/p/59068.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><blockquote>
<p>大家伙，我是程序员徐师兄，6 年大厂经验<br>最近跟朋友合作，捣鼓了这个毕业设计项目，源码都是可以运行起来的，里面包括源码和教程，大家感兴趣的话可以私聊我了解。<br><br/><br><a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br><a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="1-研究背景"><a href="#1-研究背景" class="headerlink" title="1.研究背景"></a>1.研究背景</h1><p>困扰管理层的许多问题当中,智慧养老平台一定是养老平台不敢忽视的一块。但是管理好智慧养老又面临很多麻烦需要解决,例如有几个方面:第一,往往人数都比较多,如何保证能够管理到每一老人;第二,如何在工作琐碎,记录繁多的情况下将智慧养老的当前情况反应给智慧养老领导相关部门决策等。在此情况下开发一款智慧养老平台，于是乎变得非常合乎时宜。</p>
<p>经过网上调查和搜集数据,我们可以发现智慧养老方面的系统并不是相当普及,智慧养老方面的可以有许多改进。实际上如今信息化成为一个未来的趋势或者可以说在当前现代化的城市典范中,信息化已经成为主流,开发一个智慧养老平台一方面的可能会更合乎时宜,另一方面来说也可以提高智慧养老方面的效率给相关部门人的工作带来一定的便利。</p>
<h1 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2. 技术栈"></a>2. 技术栈</h1><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7（一定要5.7版本）</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;myeclipse&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<p>浏览器：谷歌浏览器</p>
<h1 id="3-系统分析"><a href="#3-系统分析" class="headerlink" title="3.系统分析"></a>3.系统分析</h1><p>考虑到实际生活中智慧养老平台方面的需要以及对该平台认真的分析,将系统权限按管理员和老人这两类涉及用户划分。</p>
<p>(a) 管理员；管理员使用本系统涉到的功能主要有：首页、个人中心、老人管理、亲属管理、每日健康管理、既往病史管理、活动分类管理、活动信息管理、商品类型管理、便利店管理、商品购买管理、劳工管理、服务类型管理、服务项目管理、服务购买管理、紧急求助管理、礼品发放管理、积分增加管理、系统管理等功能。管理员用例图如图3-1所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-4d05.jpg" alt="img"></p>
<p> (b)老人；进入系统可以实现首页、养老平台、电影信息、个人中心、后台管理等功能。老人用例图如图3-2所示。</p>
<p><strong><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-4983.jpg" alt="img"></strong></p>
<h1 id="4系统设计"><a href="#4系统设计" class="headerlink" title="4系统设计"></a>4系统设计</h1><h2 id="4-1-软件功能模块设计"><a href="#4-1-软件功能模块设计" class="headerlink" title="4.1 软件功能模块设计"></a>4.1 软件功能模块设计</h2><p>网站整体功能如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-3c18.jpg" alt="img"></p>
<p>图 4-1 系统功能模块图</p>
<h2 id="4-2数据库设计与实现"><a href="#4-2数据库设计与实现" class="headerlink" title="4.2数据库设计与实现"></a>4.2数据库设计与实现</h2><p>在每一个系统中数据库有着非常重要的作用，数据库的设计得好将会增加系统的效率以及系统各逻辑功能的实现。所以数据库的设计我们要从系统的实际需要出发，才能使其更为完美的符合系统功能的实现。</p>
<h1 id="5系统详细设计"><a href="#5系统详细设计" class="headerlink" title="5系统详细设计"></a>5系统详细设计</h1><h2 id="5-1系统功能模块"><a href="#5-1系统功能模块" class="headerlink" title="5.1系统功能模块"></a>5.1系统功能模块</h2><p>智慧养老平台，在系统首页可以查看首页、活动信息、便利店、劳工、服务项目、个人中心、后台管理等内容，并进行详细操作；如图5-1所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-f50f.png" alt="image-20230320212319187"></p>
<p>活动信息，在活动信息页面中可以查看活动标题、活动分类、开始时间、结束时间、活动地点等内容进行收藏等操作，如图5-2所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-f544.png" alt="image-20230320212542564"></p>
<p>便利店，在便利店页面可以查看商品名称、生产地、数量、单价、商品分类等内容进行详情或收藏等操作，如图5-3所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-6118.png" alt="image-20230320212606306"></p>
<p>服务项目，在服务项目页面可以查看项目名称、项目类型、项目价格、劳工姓名等内容进行详情或收藏等操作，如图5-4所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-0e55.png" alt="image-20230320212924499"></p>
<p>  个人中心，在个人中心页面通过填写老人账号、密码、老人姓名、性别、年龄、图片、老人手机、积分、老人地址等内容进行更新信息等操作，并可以根据我的收藏进行相应的操作，如图5-5所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-22bc.png" alt="image-20230320212628744"></p>
<p>图5-5个人中心界面图</p>
<h2 id="5-2后台登录功能"><a href="#5-2后台登录功能" class="headerlink" title="5.2后台登录功能"></a>5.2后台登录功能</h2><p>管理员和老人进入系统前在登录页面根据要求填写用户名和密码，选择角色等信息，点击登录进行登录操作，如图5-6所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-0370.png" alt="image-20230320212938061"></p>
<h3 id="5-2-1管理员功能"><a href="#5-2-1管理员功能" class="headerlink" title="5.2.1管理员功能"></a>5.2.1管理员功能</h3><p>管理员登录系统后，可以对首页、个人中心、老人管理、亲属管理、每日健康管理、既往病史管理、活动分类管理、活动信息管理、商品类型管理、便利店管理、商品购买管理、劳工管理、服务类型管理、服务项目管理、服务购买管理、紧急求助管理、礼品发放管理、积分增加管理、系统管理等功能进行相应的操作管理，如图5-7所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-3a77.png" alt="image-20230320212953466"></p>
<p>老人管理，在老人管理页面可以对索引、老人账号、老人姓名、性别、年龄、照片、老人手机、积分、老人地址等内容进行详情、礼品发放、积分增加、修改或删除等操作，如图5-8所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-5acc.png" alt="image-20230320213014834"></p>
<p>亲属管理，在亲属管理页面可以对索引、老人账号、亲属姓名、性别、联系方式、与老人关系等内容进行详情、修改或删除等操作，如图5-9所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-19bd.png" alt="image-20230320213031763"></p>
<p>每日健康管理，在每日健康管理页面可以对索引、老人账号、老人姓名、性别、年龄、体温、血压、心跳、健康报告、添加时间等内容进行详情、修改或删除等操作，如图5-10所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-cff8.png" alt="image-20230320213050169"></p>
<p>既往病史管理，在既往病史管理页面可以对索引、老人账号、老人姓名、性别、年龄、登记时间等内容进行详情、修改或删除等操作，如图5-11所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-29fb.png" alt="image-20230320213135047"></p>
<p>活动信息管理，在活动信息管理页面中可以对索引、活动标题、封面、活动分类、开始时间、结束时间、活动地点等内容进行详情、修改或删除等操作，如图5-12所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-6e7a.png" alt="image-20230320213145806"></p>
<p>便利店管理，在便利店管理页面中可以对索引、商品编号、商品名称、出生地、数量、单价、商品分类、商品图片等内容进行详情、进货、修改或删除等操作，如图5-13所示。</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303202103-7b45.png" alt="image-20230320213159740"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Python pip 设置国内源，阿里源，清华大学源</title>
    <url>/p/2392.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h1><p>由于 python 自带的源下载速度非常慢，特别是安装一些库的时候，甚至有时会失败。</p>
<p>因此，建议将下载源替换成国内的，下载速度会快很多。总共有两种方法</p>
<ul>
<li>代码替换 （推荐使用这一种）</li>
<li>手动替换</li>
</ul>
<h1 id="代码替换"><a href="#代码替换" class="headerlink" title="代码替换"></a>代码替换</h1><h3 id="设置阿里源-推荐这个"><a href="#设置阿里源-推荐这个" class="headerlink" title="设置阿里源(推荐这个)"></a>设置阿里源(推荐这个)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url https://mirrors.aliyun.com/pypi/simple </span><br><span class="line"></span><br><span class="line">pip config set install.trusted-host mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<h3 id="设置清华大学的"><a href="#设置清华大学的" class="headerlink" title="设置清华大学的"></a>设置清华大学的</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">pip config set install.trusted-host pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>



<h1 id="手动替换"><a href="#手动替换" class="headerlink" title="手动替换"></a>手动替换</h1><h2 id="windows-替换"><a href="#windows-替换" class="headerlink" title="windows 替换"></a>windows 替换</h2><p>首先在 windows 当前用户家的目录下，创建一个 pip 文件夹，然后创建一个pip.ini文件，修改文件内容为如下；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[global] </span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/ </span><br><span class="line">[install] </span><br><span class="line">trusted-host=mirrors.aliyun.com </span><br></pre></td></tr></table></figure>

<ol>
<li>记得一定是pip.ini，如果没有开后缀的同学，记得把文件后缀打开，再修改文件的后缀为ini即可。</li>
<li>用户家目录为</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:Users****   # **** 就是当前登录用户名， 比如登录用户名是Luke， 那么就是C:/Users/junxu  </span><br></pre></td></tr></table></figure>

<h2 id="Mac-替换"><a href="#Mac-替换" class="headerlink" title="Mac 替换"></a>Mac 替换</h2><p>会在目录下自动生成，不同系统，目录可能不同，所以使用命令行最靠谱<br>~&#x2F;.config&#x2F;pip&#x2F;pip.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="国内源列表（推荐用阿里云的）"><a href="#国内源列表（推荐用阿里云的）" class="headerlink" title="国内源列表（推荐用阿里云的）"></a>国内源列表（推荐用阿里云的）</h1><p>阿里云： <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>中国科技大学： <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>豆瓣： <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>清华大学： <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>中国科学技术大学： <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></p>
]]></content>
  </entry>
  <entry>
    <title>2023 RubyMine 最新激活教程、亲测有效，永久激活</title>
    <url>/p/59935.html</url>
    <content><![CDATA[<p>本文讲的是支持2022.2.3最新版本的RubyMine破解、RubyMine激活码、RubyMine安装、RubyMine永久激活码的最新永久激活教程，本文有mac和windows系统的RubyMine安装教程。</p>
<h2 id="1-下载安装RubyMine"><a href="#1-下载安装RubyMine" class="headerlink" title="1.下载安装RubyMine"></a>1.下载安装RubyMine</h2><ul>
<li>先去官网下载，我这里下载的是最新版本的2022.2.1，测试过2021、2022.2.1、2022.2.2、2022.2.3的版本均可使用以下教程破解。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-f933.webp" alt="RubyMine破解"></p>
<ul>
<li>安装然后打开</li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-76ac.webp" alt="RubyMine破解"></p>
<ul>
<li>我这里是全选<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-3115.webp" alt="RubyMine破解"></li>
</ul>
<p><img src="https://chenjunan.top/img/rubymine/20220826144800.webp" alt="RubyMine破解"></p>
<h2 id="2-下载破解工具"><a href="#2-下载破解工具" class="headerlink" title="2.下载破解工具"></a>2.下载破解工具</h2><blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030621-38e9a6.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>RubyMine</strong>，会自动将激活码和破解补丁发送给你</p>
<ul>
<li>先把RubyMine关闭退出。</li>
<li>打开下载好的激活包（下载后记得不要删掉，然后安装的路径尽量不要带中文路径、删掉就会失效的）</li>
</ul>
<h3 id="windows的样子"><a href="#windows的样子" class="headerlink" title="windows的样子"></a>windows的样子</h3><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-5c7d.webp" alt="RubyMine破解"></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="mac的样子"><a href="#mac的样子" class="headerlink" title="mac的样子"></a>mac的样子</h3><p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-0d4f.webp" alt="RubyMine破解"></p>
<ul>
<li>打开scripts文件<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-2317.webp" alt="RubyMine破解"></li>
</ul>
<h2 id="3-windows的RubyMine激活"><a href="#3-windows的RubyMine激活" class="headerlink" title="3.windows的RubyMine激活"></a>3.windows的RubyMine激活</h2><ul>
<li>先执行unistall-current-user.vbs,直接双击打开，此步骤是为了防止之前有过激活信息，确保当前环境变量下没有激活工具的变量信息，可先执行卸载脚本在再进行后面的激活操作，避免激活失败。<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-ba02.webp" alt="RubyMine破解"></li>
<li>出现弹框done说明成功<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-6f3b.webp" alt="RubyMine破解"></li>
<li>然后再执行install-current-user.vbs,直接双击打开即可<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-1e93.webp" alt="RubyMine破解"></li>
<li>这里需要等待10秒左右才会出现第二个done弹框，才是成功<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-b6f6.webp" alt="RubyMine破解"></li>
<li>然后再输入对应的激活码即可，文章上面扫公众号二维码获取</li>
</ul>
<h2 id="4-mac的RubyMine激活"><a href="#4-mac的RubyMine激活" class="headerlink" title="4.mac的RubyMine激活"></a>4.mac的RubyMine激活</h2><ul>
<li>先打开终端</li>
<li>先运行uninstall.sh</li>
<li>此步骤是一键帮你去掉以前所激活过留下的东西，解决key is invalid的问题。防止激活失败</li>
<li>然后终端输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sh /Users/chen23/Downloads/jihuo-tool/scripts/uninstall.sh </span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-4ada.webp" alt="RubyMine破解"></p>
<ul>
<li>这里直接把uninstall.sh拖动到终端即可。记得mac运行是</li>
</ul>
<p>sh xxxxx去运行.sh文件（记得sh后面加空格加路径）</p>
<ul>
<li>出现done说明成功。<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-a59a.webp" alt="RubyMine破解"></li>
<li>再执行install.sh，与上面同理，出现done，the kill xxxxx 说明成功。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-84da.webp" alt="RubyMine破解"></p>
<ul>
<li>然后关闭RubyMine，重新打开RubyMine，输入破解码激活即可</li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212203-6958.webp" alt="RubyMine破解"></p>
<ul>
<li>然后就成了，时间是假的，已经永久激活了，而且是官网最新版本哦，如果你重新更新了，再执行上面的操作即可。</li>
</ul>
<p><img src="https://chenjunan.top/img/rubymine/20220826144806.webp" alt="RubyMine破解"></p>
<h2 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h2><p>Q2AJCW53PE-eyJsaWNlbnNlSWQiOiJRMkFKQ1c1M1BFIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJNIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUkIiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDkwMlBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6NDA1MTEyNjE5IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-aPzOhosQS2wKjDd+az9MTUKLm3XarDs+2uAYs6LysK1DzwzKCMsXpd5Ci3dPc6hJmlL0+pW+P0h7+4ytG3ZFk38oYv4qm1NpOjeXVMyW9I2&#x2F;JM508J3RqzG+NQvuxkojBuzOLBP8uDLMUcGSVbANMgNWbzu4u9cQdwaKqxZd6lweU2PnCe8gfJpHxrJxDRJ24+S1o14aYhFLo8LhZCfj91KNDA3gyu82OyPU2jwfDgxEj5DHyBTaQsspJA4RfSie&#x2F;6vO7RRPLaDT91eGTzIlpPSsiBA4OtypIjqJSXrMaBFhVbAE9x3eWeV6EziCaVua69BKn0zkXYqCzgLWJbpVmw&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<h2 id="激活补丁下载地址"><a href="#激活补丁下载地址" class="headerlink" title="激活补丁下载地址"></a>激活补丁下载地址</h2><blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030621-38e9a6.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">IDEA 2022.3.2破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>RubyMine</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230211154134.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>RubyMine</tag>
      </tags>
  </entry>
  <entry>
    <title>AppCode 最新激活码，激活教程，亲测有效，永久激活（2023 年亲测可用）</title>
    <url>/p/44561.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>本文讲的是支持mac的2022.3.2最新版本的AppCode破解、AppCode激活码、AppCode安装、AppCode永久激活码的最新永久激活教程，本文讲的是mac系统的AppCode安装教程。</p>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="1-下载安装AppCode"><a href="#1-下载安装AppCode" class="headerlink" title="1.下载安装AppCode"></a>1.下载安装AppCode</h2><ul>
<li>先去官网下载，我这里下载的是2022.2.1，目前测试过2021以上版本均可使用以下去破解。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212303-e722.webp" alt="AppCode破解"></p>
<ul>
<li>安装然后打开</li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212303-7ee4.webp" alt="AppCode破解"></p>
<h2 id="2-下载破解工具"><a href="#2-下载破解工具" class="headerlink" title="2.下载破解工具"></a>2.下载破解工具</h2><blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030621-38e9a6.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>AppCode</strong>，会自动将激活码和破解补丁发送给你</p>
<ul>
<li>先把AppCode关闭退出。</li>
<li>打开下载好的激活包（下载后记得不要删掉，然后安装的路径尽量不要带中文路径、删掉就会失效的）</li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212303-f24f.webp" alt="AppCode破解"></p>
<ul>
<li>打开scripts文件<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212303-84b2.webp" alt="AppCode破解"></li>
</ul>
<h2 id="3-mac的AppCode激活"><a href="#3-mac的AppCode激活" class="headerlink" title="3.mac的AppCode激活"></a>3.mac的AppCode激活</h2><ul>
<li>先打开终端</li>
<li>先运行uninstall.sh</li>
<li>此步骤是一键帮你去掉以前所激活过留下的东西，解决key is invalid的问题。防止激活失败</li>
<li>然后终端输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复制</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">sh /Users/chen23/Downloads/jihuo-tool/scripts/uninstall.sh </span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212303-5fa3.webp" alt="AppCode破解"></p>
<ul>
<li>这里直接把uninstall.sh拖动到终端即可。记得mac运行是</li>
</ul>
<p>sh xxxxx去运行.sh文件（记得sh后面加空格加路径）</p>
<ul>
<li>出现done说明成功。<br><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212303-87d6.webp" alt="AppCode破解"></li>
<li>再执行install.sh，与上面同理，出现done，the kill xxxxx 说明成功。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212303-0094.webp" alt="AppCode破解"></p>
<ul>
<li>然后关闭AppCode，重新打开AppCode，输入破解码激活即可</li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212303-ea82.webp" alt="AppCode破解"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212303-8948.webp" alt="AppCode破解"></p>
<ul>
<li>然后就成了，时间是假的，已经永久激活了，而且是官网最新版本哦，如果你重新更新了，再执行上面的操作即可。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/202303212303-5b04.webp" alt="AppCode破解"></p>
<h2 id="激活补丁下载地址"><a href="#激活补丁下载地址" class="headerlink" title="激活补丁下载地址"></a>激活补丁下载地址</h2><blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023030621-38e9a6.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">IDEA 2022.3.2破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>AppCode</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic/master/23/0220230211154134.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>AppCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Rider 最新激活码，激活、破解教程，亲测有效，永久激活（2023 年亲测可用）</title>
    <url>/p/25948.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>本文讲的是支持2022.3.3最新版本的Rider破解、Rider激活码、Rider安装、Rider永久激活码的最新永久激活教程，本文有mac和windows系统的Rider安装教程。</p>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="1-下载安装Rider"><a href="#1-下载安装Rider" class="headerlink" title="1.下载安装Rider"></a>1.下载安装Rider</h2><ul>
<li>先去官网下载，我这里下载的是最新版本的2022.2.2。测试过2021以上的版本都没有问题。</li>
</ul>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-bd21.webp" alt="Rider破解"></p>
<ul>
<li>安装然后打开</li>
</ul>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-35ca.webp" alt="Rider破解"></p>
<ul>
<li>我这里是全选<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-ef55.webp" alt="Rider破解"></li>
</ul>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-008a.webp" alt="Rider破解"></p>
<h2 id="2-下载破解工具"><a href="#2-下载破解工具" class="headerlink" title="2.下载破解工具"></a>2.下载破解工具</h2><blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-87f4.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>Rider</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-1809.png"></p>
<ul>
<li>先把Rider关闭退出。</li>
<li>打开下载好的激活包（下载后记得不要删掉，然后安装的路径尽量不要带中文路径、删掉就会失效的）</li>
</ul>
<ol>
<li>windows的样子</li>
</ol>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-79c8.webp" alt="Rider破解"><br>2. mac的样子</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-6237.webp" alt="Rider破解"></p>
<ul>
<li>打开scripts文件<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-2a44.webp" alt="Rider破解"></li>
</ul>
<h2 id="3-windows的Rider激活"><a href="#3-windows的Rider激活" class="headerlink" title="3.windows的Rider激活"></a>3.windows的Rider激活</h2><ul>
<li>先执行unistall-current-user.vbs,直接双击打开，此步骤是为了防止之前有过激活信息，确保当前环境变量下没有激活工具的变量信息，可先执行卸载脚本在再进行后面的激活操作，避免激活失败。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-6114.webp" alt="Rider破解"></li>
<li>出现弹框done说明成功<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-c930.webp" alt="Rider破解"></li>
<li>然后再执行install-current-user.vbs,直接双击打开即可<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-d4c5.webp" alt="Rider破解"></li>
<li>这里需要等待10秒左右才会出现第二个done弹框，才是成功<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-045f.webp" alt="Rider破解"></li>
<li>然后再输入对应的激活码即可，文章上面扫公众号二维码获取</li>
</ul>
<h2 id="4-mac的Rider激活"><a href="#4-mac的Rider激活" class="headerlink" title="4.mac的Rider激活"></a>4.mac的Rider激活</h2><ul>
<li>先打开终端</li>
<li>先运行uninstall.sh</li>
<li>此步骤是一键帮你去掉以前所激活过留下的东西，解决key is invalid的问题。防止激活失败</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">sh /Users/junxu/Downloads/jihuo-tool/scripts/uninstall.sh </span><br></pre></td></tr></table></figure>

<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-619f.webp" alt="Rider破解"></p>
<ul>
<li>这里直接把uninstall.sh拖动到终端即可。记得mac运行是</li>
</ul>
<p>sh xxxxx去运行.sh文件（记得sh后面加空格加路径）</p>
<ul>
<li>出现done说明成功。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-50f6.webp" alt="Rider破解"></li>
<li>再执行install.sh，与上面同理，出现done，the kill xxxxx 说明成功。</li>
</ul>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-9d12.webp" alt="Rider破解"></p>
<ul>
<li>然后关闭Rider，重新打开Rider，输入破解码激活即可</li>
</ul>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-b821.webp" alt="Rider破解"></p>
<ul>
<li>然后就成了，时间是假的，已经永久激活了，而且是官网最新版本哦，如果你重新更新了，再执行上面的操作即可。</li>
</ul>
<h2 id="激活补丁下载地址"><a href="#激活补丁下载地址" class="headerlink" title="激活补丁下载地址"></a>激活补丁下载地址</h2><blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-87f4.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>Rider</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-1809.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Rider</tag>
      </tags>
  </entry>
  <entry>
    <title>CLion最新激活码，激活、破解教程，亲测有效，永久激活（2023 年亲测可用）</title>
    <url>/p/24610.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>本文讲的是支持2022.3.3最新版本的CLion破解、CLion激活码、CLion安装、CLion永久激活码的最新永久激活教程，本文有mac和windows系统的CLion安装教程。</p>
<h2 id="1-下载安装CLion"><a href="#1-下载安装CLion" class="headerlink" title="1.下载安装CLion"></a>1.下载安装CLion</h2><ul>
<li>先去官网下载，我这里下载的是最新版本的2022.2.1，目前测试过2021以上的版本使用以下方式安装破解没问题。</li>
</ul>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-6b61.webp" alt="CLion破解"></p>
<ul>
<li>安装然后打开</li>
</ul>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-b9ed.webp" alt="CLion破解"></p>
<ul>
<li>我这里是全选<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-a434.webp" alt="CLion破解"></li>
</ul>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-a393.webp" alt="CLion破解"></p>
<h2 id="2-下载破解工具"><a href="#2-下载破解工具" class="headerlink" title="2.下载破解工具"></a>2.下载破解工具</h2><blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-87f4.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>CLion</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-1809.png"></p>
<ul>
<li>先把CLion关闭退出。</li>
<li>打开下载好的激活包（下载后记得不要删掉，然后安装的路径尽量不要带中文路径、删掉就会失效的）</li>
</ul>
<ol>
<li>windows的样子</li>
</ol>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-201a.webp" alt="CLion破解"><br>2. mac的样子</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-f784.webp" alt="CLion破解"></p>
<ul>
<li>打开scripts文件<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-6ca0.webp" alt="CLion破解"></li>
</ul>
<h2 id="3-windows的CLion激活"><a href="#3-windows的CLion激活" class="headerlink" title="3.windows的CLion激活"></a>3.windows的CLion激活</h2><ul>
<li>先执行unistall-current-user.vbs,直接双击打开，此步骤是为了防止之前有过激活信息，确保当前环境变量下没有激活工具的变量信息，可先执行卸载脚本在再进行后面的激活操作，避免激活失败。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-8e63.webp" alt="CLion破解"></li>
<li>出现弹框done说明成功<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-daee.webp" alt="CLion破解"></li>
<li>然后再执行install-current-user.vbs,直接双击打开即可<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-552b.webp" alt="CLion破解"></li>
<li>这里需要等待10秒左右才会出现第二个done弹框，才是成功<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-5a23.webp" alt="CLion破解"></li>
<li>然后再输入对应的激活码即可，文章上面扫公众号二维码获取</li>
</ul>
<h2 id="4-mac的CLion激活"><a href="#4-mac的CLion激活" class="headerlink" title="4.mac的CLion激活"></a>4.mac的CLion激活</h2><ul>
<li>先打开终端</li>
<li>先运行uninstall.sh</li>
<li>此步骤是一键帮你去掉以前所激活过留下的东西，解决key is invalid的问题。防止激活失败</li>
<li>然后终端输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sh /Users/junxu/Downloads/jihuo-tool/scripts/uninstall.sh </span><br></pre></td></tr></table></figure>

<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-8e4a.webp" alt="CLion破解"></p>
<ul>
<li>这里直接把uninstall.sh拖动到终端即可。记得mac运行是</li>
</ul>
<p>sh xxxxx去运行.sh文件（记得sh后面加空格加路径）</p>
<ul>
<li>出现done说明成功。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-f841.webp" alt="CLion破解"></li>
<li>再执行install.sh，与上面同理，出现done，the kill xxxxx 说明成功。</li>
</ul>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-876b.webp" alt="CLion破解"></p>
<ul>
<li>然后关闭CLion，重新打开CLion，输入破解码激活即可</li>
</ul>
<p><img src="https://chenjunan.top/img/clion/20220826144727.webp" alt="CLion破解"></p>
<ul>
<li>然后就成了，时间是假的，已经永久激活了，而且是官网最新版本哦，如果你重新更新了，再执行上面的操作即可。</li>
</ul>
<p><img src="https://chenjunan.top/img/clion/20220826144729.webp" alt="CLion破解"></p>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-87f4.jpeg" alt="IDEA 2022.3.2破解补丁分享失败">破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>徐公</strong>，回复 <strong>CLion</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303222303-1809.png"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
  </entry>
  <entry>
    <title>Java 毕业设计，基于 SpringBoot 的大学生体质测试管理系统，附源码和论文</title>
    <url>/p/6619.html</url>
    <content><![CDATA[<blockquote>
<p> <strong>您好，我是<a href="https://blog.junxu666.top/p/57317.html">程序员徐师兄</a>，感谢您阅读本文，欢迎一键三连哦</strong>。<br> 😁 </p>
<p> 1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br> 2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h2 id="一、效果演示"><a href="#一、效果演示" class="headerlink" title="一、效果演示"></a>一、效果演示</h2><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-74a1.png" alt="图5-4用户注册界面图"></p>
<h2 id="二、-前言介绍"><a href="#二、-前言介绍" class="headerlink" title="二、 前言介绍"></a>二、 前言介绍</h2><p>本系统尝试使用springboot在网上架构一个动态的“智慧食堂”系统，以使每一用户在家就能通过系统来进行“智慧食堂”系统管理。<br>关键词：“智慧食堂”系统； springboot；mysql数据库</p>
<p>本论文是以构建“智慧食堂”系统为目标，使用java技术制作，由管理员和用户两大部分组成。着重论述了系统设计分析，系统主要包括首页，个人中心，用户管理，菜品分类管理，菜品信息管理，留言板管理，系统管理，订单管理等功能，以及后台数据库管理。从设计到详细实现都根据了系统的建设思想和mysql数据库的设计方法。  </p>
<h2 id="二、主要技术"><a href="#二、主要技术" class="headerlink" title="二、主要技术"></a>二、主要技术</h2><table>
<thead>
<tr>
<th>技术名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>SpringBoot</td>
<td>后端框架</td>
</tr>
<tr>
<td>Vue</td>
<td>前端框架</td>
</tr>
<tr>
<td>MySQL</td>
<td>数据库</td>
</tr>
</tbody></table>
<h2 id="三、系统设计-部分"><a href="#三、系统设计-部分" class="headerlink" title="三、系统设计(部分)"></a>三、系统设计(部分)</h2><h3 id="3-1-系统总体设计"><a href="#3-1-系统总体设计" class="headerlink" title="3.1. 系统总体设计"></a>3.1. 系统总体设计</h3><p>系统总体设计即对有关系统全局问题的设计，也就是设计系统总的处理方案，又称系统概要设计。它包括系统规划与系统功能设计等内容。<br>“智慧食堂”系统主要有两类用户。分别是用户模块和管理员模块，详细规划如图4-1所示。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-4a0d.png" alt="在这里插入图片描述"><br>其中各子模块的主要功能如下：<br>1、用户登录：用户进入网页先输入用户名与密码，选择权限登录，验证密码是否正确。如果密码正确，要记录登录的用户名和登录类型。<br>2、新用户注册：新用户填写用户账号，用户姓名，密码，确认密码，联系方式等信息，完成注册。<br>3、查看“智慧食堂”系统信息：用户登录成功后，能够按分类或者查找“智慧食堂”信息进行管理。<br>4、主页内容管理：管理员登录以后，可以对首页，个人中心，用户管理，菜品分类管理，菜品信息管理，留言板管理，系统管理，订单管理进行详细操作。</p>
<h2 id="四、数据库设计-部分"><a href="#四、数据库设计-部分" class="headerlink" title="四、数据库设计(部分)"></a>四、数据库设计(部分)</h2><p>数据库是一个软件项目的根基，它决定了整个项目代码的走势，同时也决定了整个项目在后期的维护以及升级的难易程度。</p>
<h3 id="4-1数据库概念设计"><a href="#4-1数据库概念设计" class="headerlink" title="4.1数据库概念设计"></a>4.1数据库概念设计</h3><p>根据“智慧食堂”系统的功能需求，对数据库进行分析，得到相应的数据，设计用户需要的各种实体，以及相互之间的关联，为逻辑结构设计铺好路。根据所实体内的各种具体信息得于实现。<br>1.用户注册信息实体<br>用户注册信息实体包括用户账号，用户姓名，密码，确认密码，联系方式等属性。用户注册信息实体图如图4-2所示：<br><img src="https://img-blog.csdnimg.cn/d1c4774ba5af471d8ac0a87d02ac3b4f.png" alt="图4-2 用户注册信息实体图"><br>2.已支付订单实体<br>已支付订单实体包括订单编号，商品名称，商品图片，购买数量，价格&#x2F;积分，折扣价格，总价格&#x2F;总积分，折扣总价格，支付类型，状态，地址，电话，收货人，下单时间等属性；已支付订单实体图如图4-3所示：<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-41cc.png" alt="图4-3已支付订单实体图"></p>
<h2 id="五、运行截图-部分"><a href="#五、运行截图-部分" class="headerlink" title="五、运行截图(部分)"></a>五、运行截图(部分)</h2><p>系统实现是新系统开发工作的最后一个阶段。它是将结构化系统设计的成果变成可实际运行的系统的过程。这一部分主要对系统的主要功能模块的实现细节进行了详细的阐述。</p>
<h3 id="5-1功能页面实现"><a href="#5-1功能页面实现" class="headerlink" title="5.1功能页面实现"></a>5.1功能页面实现</h3><p>按照不同功能模块，在此对系统所涉及的关键页面的实现细节进行阐述，包括页面功能描述，页面涉及功能分析，介绍以及界面展示。</p>
<p>系统登录：<br>运行系统，首先进入登录界面，按照登录界面的要求填写相应的“用户名”和“密码”以及用户类型，点击“登录”然后系统判断填写是否正确，若正确进入相应的界面，否则给出要求先注册信息。具体流程如图5-1所示。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-85b1.png" alt="图5-1 登录流程图"></p>
<p>系统登录，通过输入用户名，密码，选择角色并点击登录进行系统登录操作，如图5-2所示。<br>图5-2系统登录界面图</p>
<h3 id="5-2系统功能模块"><a href="#5-2系统功能模块" class="headerlink" title="5.2系统功能模块"></a>5.2系统功能模块</h3><p>“智慧食堂”系统，在系统首页可以查看首页，菜品信息，留言板，个人中心，购物车等内容进行详细操作，如图5-3所示。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-c5e7.png" alt="图5-3系统首页界面图"></p>
<p>用户注册，在用户注册页面通过填写用户账号，用户姓名，密码，确认密码，联系方式等信息完成用户注册操作，如图5-4所示。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-74a1.png" alt="图5-4用户注册界面图"></p>
<p>菜品信息，在菜品信息页面可以查看菜品名称，价格，菜品分类，材料，分量等详细内容，并进行添加到购物车，立即购买，评论和收藏操作，如图5-5所示。<br><img src="https://img-blog.csdnimg.cn/f8a0ef62f50e411daa1acc000f634785.png" alt="图5-5菜品信息界面图"></p>
<p>个人中心，在个人中心页面通过填写用户账号，用户姓名，密码，性别，上传图片，联系方式，余额等信息进行更新操作，还可以对我的订单，我的地址，我的收藏进行详细操作；如图5-6所示。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-c54f.png" alt="图5-6个人中心界面图"></p>
<h3 id="5-3管理员功能模块"><a href="#5-3管理员功能模块" class="headerlink" title="5.3管理员功能模块"></a>5.3管理员功能模块</h3><p>管理员登录系统后，可以对首页，个人中心，用户管理，菜品分类管理，菜品信息管理，留言板管理，系统管理，订单管理等功能进行相应操作，如图5-7所示。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-ea6e.png" alt="图5-7管理员功能界面图"></p>
<p>菜品分类管理，在菜品分类管理页面可以对索引和菜品分类进行详情，修改或删除等操作，如图5-8所示。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-5262.png" alt="图5-8菜品分类管理界面图"></p>
<p>菜品信息管理，在菜品信息管理页面可以对索引菜品名称，菜品分类，图片，材料，分量，价格等内容进行详情，修改，查看评论或删除等操作，如图5-9所示。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-be41.png" alt="图5-9菜品信息管理界面图"></p>
<p>订单管理，在已支付订单页面可以对订单编号，商品名称，商品图片，购买数量，价格&#x2F;积分，折扣价格，总价格&#x2F;总积分，折扣总价格，支付类型，状态，地址，电话，收货人，下单时间等内容进行详情和发货操作，还可以对已取消订单，已退款订单，已发货订单，已发货订单，未支付订单进行相应的操作管理如图5-10所示。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-b52d.png" alt="图5-10订单管理界面图"></p>
<h1 id="6、源码获取"><a href="#6、源码获取" class="headerlink" title="6、源码获取"></a>6、源码获取</h1><blockquote>
<p><strong>1、源码获取： 查看<a href="https://note.youdao.com/s/H1qh4lhu">源码地址</a></strong> </p>
<p><strong>2、精彩专栏推荐订阅：在下方专栏👇🏻</strong></p>
<p>😁<br>1.<a href="https://blog.csdn.net/u014534808/category_12245313.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br>2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-b52d.png" alt="图5-10订单管理界面图"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>【毕业设计】基于SpringBoot+Vue高校校园点餐系统【源码(完整源码请私聊)+论文+包运行成功】</title>
    <url>/p/3615.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><blockquote>
<p><strong>您好，我是<a href="https://blog.junxu666.top/p/57317.html">程序员徐师兄</a>，感谢您阅读本文，欢迎一键三连哦</strong>。<br>😁<br>1.<a href="https://blog.csdn.net/u014534808/category_12245313.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br>2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<p>[toc]</p>
<h1 id="1、效果演示"><a href="#1、效果演示" class="headerlink" title="1、效果演示"></a>1、效果演示</h1><h1 id="2、-前言介绍"><a href="#2、-前言介绍" class="headerlink" title="2、 前言介绍"></a>2、 前言介绍</h1><p>网络的快速发展从根本上更改了世界各组织的管理方式，自二十世纪九十年代开始，我国的学校等单位就设想可以通过互联网系统来进行管理信息。由于以前存在各方面的原因，比如网络普及度低、用户不接受、互联网的相关法律法规也不够完善、开发技术也不够成熟等，阻碍了互联网在各大机构中的发展速度。进入二十一世纪以后，我国经济有了快速的发展，限制机构管理的各个难题逐一被解决，国内各大机构都加入到了电子信息化的管理模式中来。</p>
<p>以往的高校校园点餐系统相关信息管理，都是工作人员手工统计。这种方式不但时效性低，而且需要查找和变更的时候很不方便。随着科学的进步，技术的成熟，计算机信息化也日新月异的发展，社会也已经深刻的认识，计算机功能非常的强大，计算机已经进入了人类社会发展的各个领域，并且发挥着十分重要的作用。本系统利用网络沟通、计算机信息存储管理，有着与传统的方式所无法替代的优点。比如计算检索速度特别快、可靠性特别高、存储容量特别大、保密性特别好、可保存时间特别长、成本特别低等。在工作效率上，能够得到极大地提高，延伸至服务水平也会有好的收获，有了网络，在线高校校园点餐系统的各方面的管理更加科学和系统，更加规范和简便。</p>
<h1 id="3、主要技术"><a href="#3、主要技术" class="headerlink" title="3、主要技术"></a>3、主要技术</h1><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7（一定要5.7版本）</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;myeclipse&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<p>浏览器：谷歌浏览器</p>
<h1 id="4-系统设计"><a href="#4-系统设计" class="headerlink" title="4 系统设计"></a><strong>4 系统设计</strong></h1><h2 id="4-1-系统概述"><a href="#4-1-系统概述" class="headerlink" title="4.1 系统概述"></a><strong>4.1 系统概述</strong></h2><p>进过系统的分析后，就开始记性系统的设计，系统设计包含总体设计和详细设计。总体设计只是一个大体的设计，经过了总体设计，我们能够划分出系统的一些东西，例如文件、文档、数据等。而且我们通过总体设计，大致可以划分出了程序的模块，以及功能。但是只是一个初步的分类，并没有真正的实现。</p>
<p>整体设计，只是一个初步设计，而且，对于一个项目，我们可以进行多个整体设计，通过对比，包括性能的对比、成本的对比、效益的对比，来最终确定一个最优的设计方案，选择优秀的整体设计可以降低开发成本，增加公司效益，从这一点来讲，整体设计还是非常重要的。</p>
<p>高校校园点餐系统工作原理图如图4-1所示：</p>
<p>图4-1 系统工作原理图</p>
<h2 id="4-2-系统结构设计"><a href="#4-2-系统结构设计" class="headerlink" title="4.2 系统结构设计"></a><strong>4.2 系统结构设计</strong></h2><p>系统架构图属于系统设计阶段，系统架构图只是这个阶段一个产物，系统的总体架构决定了整个系统的模式，是系统的基础。高校校园点餐系统的整体结构设计如图4-2所示。</p>
<p>图4-2 系统结构图</p>
<h2 id="4-3数据库设计"><a href="#4-3数据库设计" class="headerlink" title="4.3数据库设计"></a><strong>4.3数据库设计</strong></h2><p>数据库是计算机信息系统的基础。目前，电脑系统的关键与核心部分就是数据库。数据库开发的优劣对整个系统的质量和速度有着直接影响。</p>
<h3 id="4-3-1-数据库设计原则"><a href="#4-3-1-数据库设计原则" class="headerlink" title="4.3.1 数据库设计原则"></a><strong>4.3.1 数据库设计原则</strong></h3><p>数据库的概念结构设计采用实体—联系（E-R）模型设计方法。E-R模型法的组成元素有：实体、属性、联系，E-R模型用E-R图表示，是提示用户工作环境中所涉及的事物，属性则是对实体特性的描述。在系统设计当中数据库起着决定性的因素。下面设计出这几个关键实体的实体—关系图。</p>
<h3 id="4-3-2-数据库实体"><a href="#4-3-2-数据库实体" class="headerlink" title="4.3.2 数据库实体"></a><strong>4.3.2 数据库实体</strong></h3><p>数据模型中的实体（Entity），也称为实例，对应现实世界中可区别于其他对象的“事件”或“事物”。例如，学校中的每个学生，家里中的每个家具。</p>
<p>本系统的E-R图如下图所示：</p>
<p>1、用户信息实体图如图4-3所示：</p>
<p>图4-3用户信息实体图</p>
<p>2、食堂信息实体图如图4-4所示：</p>
<p>图4-4食堂信息实体图</p>
<p>3、留言板信息实体图如图4-5所示：</p>
<p>图4-5留言板信息实体图</p>
<h3 id="4-3-3-数据库表设计"><a href="#4-3-3-数据库表设计" class="headerlink" title="4.3.3 数据库表设计"></a><strong>4.3.3 数据库表设计</strong></h3><p>数据库的表信息属于设计的一部分，下面介绍数据库中的各个表的详细信息。</p>
<p>表名：shitang</p>
<p>功能：食堂表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>新增时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>shitanghao</td>
<td>varchar</td>
<td>100</td>
<td>食堂号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>mima</td>
<td>varchar</td>
<td>100</td>
<td>密码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shitangming</td>
<td>varchar</td>
<td>100</td>
<td>食堂名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>guanliyuan</td>
<td>varchar</td>
<td>200</td>
<td>管理员</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shitangzhaopian</td>
<td>varchar</td>
<td>100</td>
<td>食堂照片</td>
<td></td>
<td></td>
</tr>
<tr>
<td>weishengdengji</td>
<td>varchar</td>
<td>200</td>
<td>卫生等级</td>
<td></td>
<td></td>
</tr>
<tr>
<td>lianxidianhua</td>
<td>varchar</td>
<td>200</td>
<td>联系电话</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shitangdizhi</td>
<td>varchar</td>
<td>200</td>
<td>食堂地址</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表名：shitangcaidan</p>
<p>功能：食堂菜单表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>shitanghao</td>
<td>varchar</td>
<td>200</td>
<td>食堂号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shitangming</td>
<td>varchar</td>
<td>200</td>
<td>食堂名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>caipin</td>
<td>varchar</td>
<td>200</td>
<td>菜品</td>
<td></td>
<td></td>
</tr>
<tr>
<td>caixi</td>
<td>varchar</td>
<td>200</td>
<td>菜系</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tupian</td>
<td>varchar</td>
<td>200</td>
<td>图片</td>
<td></td>
<td></td>
</tr>
<tr>
<td>fenliang</td>
<td>varchar</td>
<td>200</td>
<td>分量</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shicai</td>
<td>varchar</td>
<td>200</td>
<td>食材</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shitangdizhi</td>
<td>varchar</td>
<td>200</td>
<td>食堂订单</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xiangqing</td>
<td>varchar</td>
<td>200</td>
<td>详情</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表名：xiaoxiliuyan</p>
<p>功能：消息留言表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>zhanghao</td>
<td>varchar</td>
<td>200</td>
<td>账号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingming</td>
<td>varchar</td>
<td>200</td>
<td>姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>jiaose</td>
<td>longtext</td>
<td>4294967295</td>
<td>角色</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shitanghao</td>
<td>varchar</td>
<td>200</td>
<td>食堂号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shitangming</td>
<td>varchar</td>
<td>200</td>
<td>食堂名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>dingdanhao</td>
<td>varchar</td>
<td>200</td>
<td>订单号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>peisongfen</td>
<td>varchar</td>
<td>200</td>
<td>配送分</td>
<td></td>
<td></td>
</tr>
<tr>
<td>baozhuangfen</td>
<td>varchar</td>
<td>200</td>
<td>包装分</td>
<td></td>
<td></td>
</tr>
<tr>
<td>caipinfen</td>
<td>varchar</td>
<td>200</td>
<td>菜品分</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shijian</td>
<td>varchar</td>
<td>200</td>
<td>时间</td>
<td></td>
<td></td>
</tr>
<tr>
<td>jianyi</td>
<td>varchar</td>
<td>200</td>
<td>建议</td>
<td></td>
<td></td>
</tr>
<tr>
<td>sfsh</td>
<td>varchar</td>
<td>200</td>
<td>是否审核</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shhf</td>
<td>varchar</td>
<td>200</td>
<td>审核回复</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表名：caixifenlei</p>
<p>功能：菜系分类表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>caixi</td>
<td>varchar</td>
<td>200</td>
<td>菜系</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表名：yonghu</p>
<p>功能：用户表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>新增时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>zhanghao</td>
<td>varchar</td>
<td>100</td>
<td>账号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>mima</td>
<td>varchar</td>
<td>100</td>
<td>密码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingming</td>
<td>varchar</td>
<td>100</td>
<td>姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>jiaose</td>
<td>varchar</td>
<td>100</td>
<td>角色</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingbie</td>
<td>varchar</td>
<td>100</td>
<td>性别</td>
<td></td>
<td></td>
</tr>
<tr>
<td>nianling</td>
<td>varchar</td>
<td>100</td>
<td>年龄</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shouji</td>
<td>varchar</td>
<td>100</td>
<td>手机</td>
<td></td>
<td></td>
</tr>
<tr>
<td>youxiang</td>
<td>varchar</td>
<td>100</td>
<td>邮箱</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zhaopian</td>
<td>varchar</td>
<td>100</td>
<td>照片</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="5统详细设计"><a href="#5统详细设计" class="headerlink" title="5统详细设计"></a><strong>5统详细设计</strong></h1><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="5-1前台首页功能模块"><a href="#5-1前台首页功能模块" class="headerlink" title="5.1前台首页功能模块"></a>5.1前台首页功能模块</h2><p>高校校园点餐系统，在系统首页可以查看首页、食堂菜单、新闻资讯、留言反馈、我的、跳转到后台、购物车等内容，如图5-1所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/eed94c3bfe59aaa674fa55adf4b0f127.png"></p>
<p>图5-1前台首页功能界面图</p>
<p>用户注册、用户登录，在用户注册页面可以填写账号、密码、姓名、角色、性别、年龄、手机、邮箱等信息进行用户注册、登录，如图5-2所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5359e68816eca2fa1f4bfbeb1638a361.png"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b85c046c466361bb8fba182e239c23c2.png"></p>
<p>图5-2用户注册、登录界面图</p>
<p>食堂菜单，在食堂菜单页面通过填写食堂号、食堂名、菜品、菜系、图片、分量、食材、食堂地址、详情、价格、座位总数等信息进行添加到购物车、立即预定、点我收藏等操作，如图5-3所示。在我的地址页面通过填写联系人、手机号码、默认地址、选择地址等信息进行添加或重置操作，如图5-4所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5bf28f985679b72ac601ed65be8d07da.png"></p>
<p>图5-3食堂菜单界面图</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/afe0acd73ef62d2d8eba187bd88d0561.png"></p>
<p>图5-4我的地址界面图</p>
<h2 id="5-2管理员功能模块"><a href="#5-2管理员功能模块" class="headerlink" title="5.2管理员功能模块"></a>5.2管理员功能模块</h2><p>管理员登录，通过填写输入用户名、密码进行登录，如图5-5所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5a4ea6ee773f665b9f341bc7378e5c05.png"></p>
<p>图5-5管理员登录界面图</p>
<p>管理员登录进入高校校园点餐系统可以查看个人中心、用户管理、食堂管理、食堂菜单管理、菜系分类管理、消息留言管理、留言板管理、系统管理、订单管理等信息。</p>
<p>用户管理，在用户管理页面中可以通过填写账号、密码、姓名、角色、性别、年龄、手机、邮箱、照片、余额等内容进行查看、修改、删除等操作，如图5-6所示。</p>
<p>食堂管理，在食堂管理页面中可以查看食食堂号、密码、食堂名、管理员、食堂照片、卫生等级、联系电话、食堂地址、余额等信息，并可根据需要对已有食堂管理进行查看、修改、删除等操作，如图5-7所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6d58231fa7576ba5e7636c99dd0c3c81.png"></p>
<p>图5-6用户管理界面图</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6d547740a43ebf752a5f2e725c1dff54.png"></p>
<p>图5-7食堂管理界面图</p>
<p>菜系分类管理，在菜系分类管理页面中可以查看菜系等信息，并可根据需要对已有菜系分类管理进行修改或删除等操作，如图5-8所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/72e441d33996379586aca514e82a590a.png"></p>
<p>图5-8菜系分类管理界面图</p>
<p>消息留言管理，在消息留言管理页面中可以查看账号、姓名、角色、食堂号、食堂名、订单号、配送分、包装分、菜品分、时间、建议、是否审核、审核回复等信息，并可根据需要对已有消息留言管理进行审核、查看、修改或删除等详细操作，如图5-9所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/427f94d4ff5108f365cc1df04fe49308.png"></p>
<p>图5-9消息留言管理界面图</p>
<p>留言板管理，在留言板管理页面中可以查看留言人id<br>、用户名、留言内容、回复内容等内容，并且根据需要对已有留言板管理进行查看、回复、修改或删除等详细操作，如图5-10所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/aad35b2680053711c1c57d64ed2c0f7e.png"></p>
<p>图5-10留言板管理界面图</p>
<p>美食资讯管理，在美食资讯管理页面中可以查看标题、简介、图片、内容等内容，并且根据需要对已有美食资讯管理进行查看、修改或删除等详细操作，如图5-11所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/39e0920863a4257bc545218de7b93181.png"></p>
<p>图5-11美食资讯管理界面图</p>
<p>订单管理，在订单管理页面中可以查看订单编号、商品表名、用户ID、商品ID、商品名称、商品图片、购买数量、价格&#x2F;积分、折扣价格、总价格&#x2F;总积分、折扣总价格、</p>
<p>支付类型、状态、地址等内容，并且根据需要对已有订单管理进行查看，修改或删除等详细操作，如图5-12所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6ff2886dd0b7bcf96fc29eb195206a8a.png"></p>
<p>图5-12订单管理界面图</p>
<h2 id="5-3食堂功能模块"><a href="#5-3食堂功能模块" class="headerlink" title="5.3食堂功能模块"></a>5.3食堂功能模块</h2><p>食堂登录进入高校校园点餐系统可以查看个人中心、食堂菜单管理、菜系分类管理、消息留言管理、订单管理等内容。</p>
<p>食堂菜单管理，在食堂菜单管理页面中通过填写食堂号、食堂名、菜品、菜系、图片、分量、食材、食堂地址、详情、价格、座位总数、已选座位[用号隔开]等信息，还可以根据需要对食堂菜单管理进行查看、修改、删除等操作，如图5-13所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6f1db5b8f651013af52636448e3ecaa8.png"></p>
<p>图5-13食堂菜单管理界面图</p>
<p>菜系分类管理，在菜系分类管理页面中可以填写菜系等信息，并且根据需要对已有菜系分类管理进行修改、删除等其他详细操作，如图5-14所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/c8113bf35238cd67324a1a7c268a7fe0.png"></p>
<p>图5-14菜系分类管理界面图</p>
<p>订单管理，在订单管理页面中通过填写订单编号、商品表名、用户ID、商品ID、商品名称、商品图片、购买数量、价格&#x2F;积分、折扣价格、总价格&#x2F;总积分、折扣总价格、</p>
<p>支付类型、状态、地址等内容进行查看、发货等操作，如图5-15所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ee77b9e2ca771a03c8d8eaff4e35b0de.png"></p>
<p>图5-15订单管理界面图</p>
<h2 id="5-4用户功能模块"><a href="#5-4用户功能模块" class="headerlink" title="5.4用户功能模块"></a>5.4用户功能模块</h2><p>用户登录进入高校校园点餐系统可以查看个人中心、消息留言管理、我的收藏管理、订单管理等内容。</p>
<p>消息留言管理，在消息留言管理页面中通过填写账号、姓名、角色、食堂号、食堂名、订单号、配送分、包装分、菜品分、时间、建议、是否审核、审核回复等信息，还可以根据需要对消息留言管理进行查看、修改、删除等操作，如图5-16所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/60843b01e0d8dc79c3087809e0d23417.png"></p>
<p>图5-16消息留言管理界面图</p>
<p>订单管理，在订单管理页面中可以查看订单编号、商品表名、用户ID、商品ID、商品名称、商品图片、购买数量、价格&#x2F;积分、折扣价格、总价格&#x2F;总积分、折扣总价格、</p>
<p>支付类型、状态、地址等信息，并且根据需要对已有订单管理进行查看等其他详细操作，如图5-17所示。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/8eee3fcadb4ca540a7d022593cad0817.png"></p>
<p>图5-17订单管理界面图</p>
<h1 id="6、源码获取"><a href="#6、源码获取" class="headerlink" title="6、源码获取"></a>6、源码获取</h1><blockquote>
<p><strong>1、源码获取： 查看<a href="https://note.youdao.com/s/H1qh4lhu">源码地址</a></strong> </p>
<p><strong>2、精彩专栏推荐订阅：在下方专栏👇🏻</strong></p>
<p>😁<br>1.<a href="https://blog.csdn.net/u014534808/category_12245313.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br>2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<p>注意，源码是收费的，如果有需要，可以通过下方二维码加我，非诚勿扰。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-0f02.png"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>【毕业设计】基于SpringBoot+Vue毕业生信息招聘平台系统【源码+论文+演示视频+包运行成功】</title>
    <url>/p/26254.html</url>
    <content><![CDATA[<blockquote>
<p> <strong>您好，我是<a href="https://blog.junxu666.top/p/57317.html">程序员徐师兄</a>，感谢您阅读本文，欢迎一键三连哦</strong>。<br> 😁 </p>
<p> 1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br> 2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h1 id="1、效果演示"><a href="#1、效果演示" class="headerlink" title="1、效果演示"></a>1、效果演示</h1><h1 id="2、-前言介绍"><a href="#2、-前言介绍" class="headerlink" title="2、 前言介绍"></a>2、 前言介绍</h1><p>随着社会的发展，社会的各行各业都在利用信息化时代的优势。计算机的优势和普及使得各种信息系统的开发成为必需。</p>
<p>毕业生信息招聘平台，主要的模块包括查看管理员；首页、个人中心、企业管理、空中宣讲会管理、招聘岗位管理、毕业生管理、个人简历管理、求职信息管理、信息咨询管理、岗位应聘管理、线上面试管理、面试回复管理、试卷管理、试题管理、管理员管理、论坛管理、系统管理、考试管理等功能。系统中管理员主要是为了安全有效地存储和管理各类信息，还可以对系统进行管理与更新维护等操作，并且对后台有相应的操作权限。</p>
<p>要想实现毕业生信息招聘平台的各项功能，需要后台数据库的大力支持。管理员验证注册信息，收集的毕业生信息，并由此分析得出的关联信息等大量的数据都由数据库管理。本文中数据库服务器端采用了Mysql作为后台数据库，使Web与数据库紧密联系起来。在设计过程中，充分保证了系统代码的良好可读性、实用性、易扩展性、通用性、便于后期维护、操作方便以及页面简洁等特点。</p>
<p>本系统的开发使获取毕业生信息招聘平台信息能够更加方便快捷，同时也使毕业生信息招聘平台信息变的更加系统化、有序化。系统界面较友好，易于操作。</p>
<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><h2 id="3-1技术可行性：技术背景"><a href="#3-1技术可行性：技术背景" class="headerlink" title="3.1技术可行性：技术背景"></a>3.1技术可行性：技术背景</h2><p>毕业生信息招聘平台是在Windows操作系统中进行开发运用的，而且目前PC机的各项性能已经可以胜任普通网站的web服务器。系统开发所使用的技术也都是自身所具有的，也是当下广泛应用的技术之一。</p>
<p>系统的开发环境和配置都是可以自行安装的，系统使用Java开发工具，使用比较成熟的Mysql数据库进行对系统前台及后台的数据交互，根据技术语言对数据库，结合需求进行修改维护，可以使得网站运行更具有稳定性和安全性，从而完成实现网站的开发。</p>
<p>（1）硬件可行性分析</p>
<p>系统管理及信息分析的设计对于所使用的计算机没有什么硬性的要求，计算机只要可以正常的使用进行代码的编写及页面设计就可行，主要是对于服务器有些要求，对于平台搭建完成要上传的服务器是有一定的要求的，服务器必须选择安全性比较高的，然后就是在打开网站必须顺畅，不能停顿太长时间；性价比高；安全性高。</p>
<p>（2）软件可行性分析</p>
<p>开发整个系统使用的是云计算，流量的可扩展性和基于流量的智能调整云计算的优点就是流量的可扩展性和基于流量的智能调整，保障了数据信息能够得到及时的备份，整个系统可以安全有效的运行。</p>
<p>因此，我们从两个方面进行了可行性研究，可以看出系统的开发没有问题。</p>
<h2 id="3-2经济可行性"><a href="#3-2经济可行性" class="headerlink" title="3.2经济可行性"></a>3.2经济可行性</h2><p>在毕业生信息招聘平台开发之前所做的市场调研及与其相关的其他管理系统，都是没有任何费用的。所有的调查研究都是通过开发者自己的努力，所有的工作也都是自己亲力亲为的。在碰到自己比较难以解决的问题时，大多数是通过指导老师和同学的帮助进行相关问题的解决。所以对于毕业生信息招聘平台的开发在经济上是完全可行的，没有任何费用支出的。</p>
<p>使用比较成熟的技术，系统是基于Java的开发，采用Mysql数据库。所以系统在开发人力、财力方面的要求不高，具有经济可行性。</p>
<h2 id="3-3操作可行性："><a href="#3-3操作可行性：" class="headerlink" title="3.3操作可行性："></a>3.3操作可行性：</h2><p>可操作性主要是对在毕业生信息招聘平台设计完成后，毕业生的使用体验度，以及管理员可以通过系统随时管理相关的数据信息，并且对于管理员、企业、毕业生三个角色，都可以简单明了的进入到自己的系统界面，通过界面可以简单明了地操作功能模块，方便毕业生信息的操作需求和管理员管理数据信息。对于系统的操作，不需要专业人员都可以直接进行功能模块的操作管理，所以毕业生信息招聘平台的可操作性是完全可以的。本系统的操作使用的也是界面窗口进行登录，所以操作人员只要会简单的电脑操作就完全可以的。</p>
<h2 id="3-4系统设计规则"><a href="#3-4系统设计规则" class="headerlink" title="3.4系统设计规则"></a>3.4系统设计规则</h2><p>本毕业生信息招聘平台采用Java技术，Mysql数据库开发，充分保证了系统稳定性、完整性。</p>
<p>毕业生信息招聘平台的设计与实现的设计思想如下：</p>
<p>1、操作简单方便、系统界面安全良好：简单明了的页面布局，方便查询管理的相关信息。</p>
<p>2、即时可见：对毕业生信息招聘平台信息的处理将立马在对应地点可以查询到，从而实现“即时发布、即时见效”的系统功能。</p>
<p>3、功能的完善性：可以管理管理员；首页、个人中心、企业管理、空中宣讲会管理、招聘岗位管理、毕业生管理、个人简历管理、求职信息管理、信息咨询管理、岗位应聘管理、线上面试管理、面试回复管理、试卷管理、试题管理、管理员管理、论坛管理、系统管理、考试管理，</p>
<p>企业；首页、个人中心、空中宣讲会管理、招聘岗位管理、信息咨询管理、岗位应聘管理、线上面试管理、面试回复管理、试卷管理、试题管理、考试管理，</p>
<p>毕业生；首页、个人中心、个人简历管理、求职信息管理、信息咨询管理、岗位应聘管理、线上面试管理、面试回复管理、我的收藏管理、考试管理，</p>
<p>前台首页；首页、空中宣讲会、招聘岗位、求职信息、论坛信息、试卷列表、招聘资讯、个人中心、后台管理模块的修改和维护操作。</p>
<h1 id="4系统概要设计"><a href="#4系统概要设计" class="headerlink" title="4系统概要设计"></a>4系统概要设计</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>毕业生信息招聘平台基于Web服务模式，是一个适用于Internet环境下的模型结构。只要毕业生能连上Internet,便可以在不受时间、地点的限制来使用这个系统。毕业生信息招聘平台工作原理图，如图4-1所示：</p>
<h2 id="4-2-系统结构"><a href="#4-2-系统结构" class="headerlink" title="4.2 系统结构"></a>4.2 系统结构</h2><p>本系统架构网站系统，本系统的具体功能如下：</p>
<p>管理员功能结构图，如图4-3所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-d5ba.gif" alt="img"></p>
<p>毕业生功能结构图，如图4-4所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-6aa2.gif" alt="img"></p>
<h2 id="4-3-数据库设计"><a href="#4-3-数据库设计" class="headerlink" title="4.3. 数据库设计"></a>4.3. 数据库设计</h2><h3 id="4-3-1-数据库实体"><a href="#4-3-1-数据库实体" class="headerlink" title="4.3.1 数据库实体"></a>4.3.1 数据库实体</h3><p>管理员信息图，如图4-6所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-3485.gif" alt="img"></p>
<p>个人简历实体属性图，如图4-7所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-0150.gif" alt="img"></p>
<p>企业管理实体属性图如图4-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-5741.gif" alt="img"></p>
<p>招聘岗位信息实体属性图如图4-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-1b09.gif" alt="img"></p>
<h3 id="4-3-2-数据库设计表"><a href="#4-3-2-数据库设计表" class="headerlink" title="4.3.2 数据库设计表"></a>4.3.2 数据库设计表</h3><h2 id="4-4-数据表"><a href="#4-4-数据表" class="headerlink" title="4.4 数据表"></a>4.4 数据表</h2><p>将数据库概念设计的E-R图转换为关系数据库。在关系数据库中，数据关系由数据表组成，但是表的结构表现在表的字段上。</p>
<p>表4-1 allusers表</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>数据类型</th>
<th>长度</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>int</td>
<td>11</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>username</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>pwd</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>cx</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
</tbody></table>
<p>表4-2：biyesheng表</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>数据类型</th>
<th>长度</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>int</td>
<td>11</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>addtime</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>yonghuming</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>mima</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>xingming</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>xingbie</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>touxiang</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>zhuanye</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>shouji</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>youxiang</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
</tbody></table>
<p>表4-3：gangweiyingpin表</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>数据类型</th>
<th>长度</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>int</td>
<td>11</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>addtime</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>gangweimingcheng</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>xingye</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>qiyebianhao</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>qiyemingcheng</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>chengshi</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>yingpinneirong</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>qiuzhijianli</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>beizhu</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>yonghuming</td>
<td>varchar</td>
<td>500</td>
<td>default NULL</td>
</tr>
<tr>
<td>xingming</td>
<td>varchar</td>
<td>500</td>
<td>default NULL</td>
</tr>
<tr>
<td>zhuanye</td>
<td>varchar</td>
<td>500</td>
<td>default NULL</td>
</tr>
<tr>
<td>shouji</td>
<td>varchar</td>
<td>500</td>
<td>default NULL</td>
</tr>
<tr>
<td>sfsh</td>
<td>varchar</td>
<td>500</td>
<td>default NULL</td>
</tr>
<tr>
<td>shhf</td>
<td>varchar</td>
<td>500</td>
<td>default NULL</td>
</tr>
</tbody></table>
<p>表4-4：gerenjianli表</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>数据类型</th>
<th>长度</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>int</td>
<td>11</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>addtime</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>yonghuming</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>xingming</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>xingbie</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>touxiang</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>juzhushengfen</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>juzhuchengshi</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>chushengnianyue</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>gongzuoshijian</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>dangqianzhuangtai</td>
<td>varchar</td>
<td>10</td>
<td>default ‘否’</td>
</tr>
<tr>
<td>shouji</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>zhuanye</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>zuigaoxueli</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>jianlifujian</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
</tbody></table>
<p>表4-5：kongzhongxuanjianghui表</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>数据类型</th>
<th>长度</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>ID</td>
<td>int</td>
<td>11</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>addtime</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>qiyebianhao</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>qiyemingcheng</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>guimo</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>xingzhi</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>tupian</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>lianxiren</td>
<td>varchar</td>
<td>500</td>
<td>default NULL</td>
</tr>
<tr>
<td>lianxidianhua</td>
<td>varchar</td>
<td>500</td>
<td>default NULL</td>
</tr>
<tr>
<td>xuanchuanshipin</td>
<td>varchar</td>
<td>500</td>
<td>default NULL</td>
</tr>
<tr>
<td>bangongdizhi</td>
<td>varchar</td>
<td>500</td>
<td>default NULL</td>
</tr>
<tr>
<td>xuanjiangneirong</td>
<td>varchar</td>
<td>500</td>
<td>default NULL</td>
</tr>
</tbody></table>
<p>表4-6：mianshihuifu表</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>数据类型</th>
<th>长度</th>
<th>约束</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>int</td>
<td>11</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>addtime</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>mianshibiaoti</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>mianshihuifu</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>huifufujian</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>huifushijian</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>beizhu</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>qiyebianhao</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>qiyemingcheng</td>
<td>varchar</td>
<td>50</td>
<td>default NULL</td>
</tr>
<tr>
<td>yonghuming</td>
<td>varchar</td>
<td>500</td>
<td>default NULL</td>
</tr>
<tr>
<td>xingming</td>
<td>varchar</td>
<td>10</td>
<td>default ‘否’</td>
</tr>
<tr>
<td>shouji</td>
<td>varchar</td>
<td>500</td>
<td>default NULL</td>
</tr>
<tr>
<td>sfsh</td>
<td>varchar</td>
<td>500</td>
<td>default ‘否’</td>
</tr>
<tr>
<td>shhf</td>
<td>varchar</td>
<td>500</td>
<td>default ‘是’</td>
</tr>
</tbody></table>
<h1 id="第5章系统详细设计"><a href="#第5章系统详细设计" class="headerlink" title="第5章系统详细设计"></a>第5章系统详细设计</h1><h2 id="5-1-管理员功能模块"><a href="#5-1-管理员功能模块" class="headerlink" title="5.1****管理员功能模块"></a><strong>5.1****管理员功能模块</strong></h2><p>管理员登录，管理员通过输入用户名、密码、角色等信息进行系统登录，如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-679c.jpeg" alt="img"></p>
<p>管理员登录进入毕业生信息招聘平台可以查看首页、个人中心、企业管理、空中宣讲会管理、招聘岗位管理、毕业生管理、个人简历管理、求职信息管理、信息咨询管理、岗位应聘管理、线上面试管理、面试回复管理、试卷管理、试题管理、管理员管理、论坛管理、系统管理、考试管理等内容，如图5-2所示。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-9813.jpeg" alt="img"></p>
<p>空中宣讲会管理，在空中宣讲会管理页面可以填写企业编号、企业名称、规模、性质、图片、联系人、联系电话、宣传视频、办公地址等内容，并可根据需要对空中宣讲会管理进行添加，修改或删除等操作，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-5d1c.jpeg" alt="img">  </p>
<p>招聘岗位管理，在招聘岗位管理页面可以填写岗位名称、行业、岗位要求、专业要求、岗位性质、图片、薪资待遇、工作时间、城市、企业编号、企业名称、联系人、联系电话等内容，并可根据需要对招聘岗位管理进行添加，修改或删除等操作，如图5-4所示。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-eab6.jpeg" alt="img"></p>
<p>毕业生管理，在毕业生管理页面可以填写用户名、密码、姓名、性别、头像、专业、手机、邮箱等进行添加，修改，删除或查看详细内容等操作，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-0151.jpeg" alt="img"></p>
<p>个人简历管理，在个人简历管理页面可以查看用户名、密码、姓名、性别、头像、居住省份、居住城市、出生年月、工作时间、当前状态、手机、专业、最高学历、简历附件等内容，并可根据需要对个人简历管理信息进行添加，修改，删除或详细内容等操作，如图5-6所示。<br><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-1856.jpeg" alt="img"></p>
<p>信息咨询管理<br>，在信息咨询管理页面可以查看咨询标题、企业编号、企业名称、咨询日期、备注、用户名、姓名、手机、审核回复等内容，并可根据需要对信息咨询管理进行添加，修改，删除或详细内容等操作，如图5-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-4afe.jpeg" alt="img"></p>
<p>线上面试管理<br>，在线上面试管理页面可以查看面试标题、面试附件、企业编号、企业名称、联系电话、日期、用户名、姓名、手机、专业等内容，并可根据需要对线上面试管理进行添加，修改，删除或详细内容等操作，如图5-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-7c99.jpeg" alt="img"></p>
<p>面试回复管理<br>，在面试回复管理页面可以查看面试标题、回复附件、回复时间、备注、企业名称、用户名、姓名、手机、审核回复等内容，并可根据需要对面试回复管理进行添加，修改，删除或详细内容等操作，如图5-9所示。</p>
<h2 id="5-2企业功能模块"><a href="#5-2企业功能模块" class="headerlink" title="5.2企业功能模块"></a>5.2企业功能模块</h2><p>企业登录进入毕业生信息招聘平台可以查看首页、个人中心、空中宣讲会管理、招聘岗位管理、信息咨询管理、岗位应聘管理、线上面试管理、面试回复管理、试卷管理、试题管理、考试管理等内容，如图5-11所示。</p>
<p>个人信息，在个人信息页面通过填写企业编号、密码、企业名称、图片、规模、性质、联系人、联系电话等内容并可根据需要对个人信息进行查看、修改，如图5-12所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-f428.jpeg" alt="img"></p>
<p>空中宣讲会管理，在空中宣讲会管理页面可以填写企业编号、企业名称、规模、性质、图片、联系人、联系电话、宣传视频、办公地址等内容，并可根据需要对空中宣讲会管理详细内容进行详情、修改、删除操作，如图5-13所示。</p>
<p>招聘岗位管理，在招聘岗位管理页面可以查看岗位名称、行业、岗位要求、专业要求、岗位性质、图片、薪资待遇、工作时间、城市、企业编号、企业名称、联系人、联系电话等内容，并可根据需要对招聘岗位管理进行详情、修改、删除等操作，如图5-14所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-e335.jpeg" alt="img"></p>
<p>信息咨询管理，在信息咨询管理页面可以查看咨询标题、企业编号、企业名称、咨询日期、备注、用户名、姓名、手机、审核回复等内容，并可根据需要对信息咨询管理进行详情等操作，如图5-15所示。</p>
<p>线上面试管理，在线上面试管理页面可以查看面试标题、面试附件、企业编号、企业名称、联系电话、日期、用户名、姓名、手机、专业等内容，并可根据需要对线上面试管理进行详情等操作，如图5-16所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-60ce.jpeg" alt="img"></p>
<p>考试记录，在考试记录页面可以查看用户ID、试卷、考试得分等内容，并可根据需要对考试记录进行查看详情等操作，如图5-18所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-1c31.jpeg" alt="img"></p>
<h2 id="5-3毕业生功能模块"><a href="#5-3毕业生功能模块" class="headerlink" title="5.3毕业生功能模块"></a>5.3毕业生功能模块</h2><p>线上面试管理，在线上面试管理页面通过填写面试标题、面试附件、企业编号、企业名称、联系电话、日期、用户名、姓名、手机、专业等内容并可根据需要对线上面试管理进行详情、面试回复，如图5-20所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-7c8c.jpeg" alt="img"></p>
<p>我的收藏管理，在我的收藏管理页面可以查看收藏ID、表名、收藏名称、收藏图片等内容，并可根据需要对我的收藏管理进行详情、删除等操作，如图5-22所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232203-f4ea.jpeg" alt="img"></p>
<h2 id="六、源码获取"><a href="#六、源码获取" class="headerlink" title="六、源码获取"></a>六、源码获取</h2><blockquote>
<p><strong>1、源码获取： 查看👇🏻获取联系方式👇🏻</strong></p>
<p><strong>2、精彩专栏推荐订阅：在下方专栏👇🏻</strong></p>
<p><a href="https://blog.csdn.net/u014534808/category_10711684.html">3、Python从入门到精通</a></p>
<p><a href="https://blog.csdn.net/u014534808/category_9621854.html">4、Java高并发编程入门</a></p>
<p><a href="https://download.csdn.net/user/u014534808">6、免费资源</a></p>
</blockquote>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>【毕业设计】基于 SpringBoot+vue 的校园二手书平台【包源码+教程+保证运行+完整源码私聊】</title>
    <url>/p/6977.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><blockquote>
<p> <strong>您好，我是<a href="https://blog.junxu666.top/p/57317.html">程序员徐师兄</a>，感谢您阅读本文，欢迎一键三连哦</strong>。<br>😁<br>1.<a href="https://blog.csdn.net/u014534808/category_12245313.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br>2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>本次设计任务是要设计一个乐校园二手书交易管理系统，通过这个系统能够满足乐校园二手书交易的管理员及卖家用户和用户二手书交易信息管理功能。系统的主要功能包括首页、个人中心、用户管理、卖家用户管理、图书分类管理、二手图书管理、求购图书管理、求购回复管理、留言反馈、系统管理、订单管理等功能。</p>
<p>管理员可以根据系统给定的账号进行登录，登录后可以进入乐校园二手书交易管理系统，对乐校园二手书交易管理系统所有模块进行管理。包括查看和修改自己的个人信息以及登录密码。</p>
<p>该系统为每一个用户都分配了一个用户账号，用户通过账号的登录可以在系统中查看乐校园二手书交易信息及对个人信息进行修改等功能。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303252303-b850.png"></p>
<h1 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2 .技术栈"></a>2 .技术栈</h1><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7（一定要5.7版本）</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;myeclipse&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<p>浏览器：谷歌浏览器</p>
<h1 id="3-需求分析"><a href="#3-需求分析" class="headerlink" title="3. 需求分析"></a>3. 需求分析</h1><p>乐校园二手书交易管理系统是三种身份的用户，主要涉及管理员，卖家用户和用户。每个身份都是操作起来都是清楚方便的。对于一些乐校园二手书交易信息,这是任何人都可以查看的，但是如果用户想进入后台进行操作,则必须是已经进行登录的用户，或者想修改乐校园二手书交易信息的话，也是需要用户为登录状态。这些用户的基本信息都由管理员对其统一管理。</p>
<p>根据乐校园二手书交易实际过程的分析，系统有以下几个部分，其中用户注册，发布个人信息，修改个人信息；用户注册登录，发布乐校园二手书交易信息；管理员管理用户信息；一般用户只可以浏览不可以发布信息。以上业务过程从用户角度可以分为三类使用本系统的用户角色，包括管理员，卖家用户和用户。以下针对各类用户说明相应的业务过程。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303252303-6002.jpg" alt="img"></p>
<h1 id="4系统设计"><a href="#4系统设计" class="headerlink" title="4系统设计"></a>4系统设计</h1><h2 id="4-1数据库设计"><a href="#4-1数据库设计" class="headerlink" title="4.1数据库设计"></a>4.1数据库设计</h2><p>信息管理系统的效率和实现的效果完全取决于数据库结构设计的好坏。为了保证数据的完整性，提高数据库存储的效率，那么统一合理地设计数据库结构是必要的。数据库设计一般包括如下几个步骤：</p>
<p>（1）根据用户需求，确定数据库信息进行保存</p>
<p>对用户的需求分析是数据库设计的第一阶段，用户的需求调研，熟悉运作流程，系统要求，这些都是以概念模型为基础的。</p>
<p>（2）设计数据的概念模型</p>
<p>概念模型与数据建模用户的观点一致，用于信息世界的建模工具。通过E-R图可以清楚地描述系统涉及到的实体之间的相互关系。</p>
<p>用户注册实体图如图4-1所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303252303-08dc.jpg" alt="img"></p>
<p>图4-1用户注册实体图</p>
<p>二手图书管理实体图如图4-2所示：</p>
<p>![img](Users&#x2F;junxu&#x2F;Library&#x2F;Group Containers&#x2F;UBF8T346G9.Office&#x2F;TemporaryItems&#x2F;msohtmlclip&#x2F;clip_image004.jpg)</p>
<p>（3）数据库逻辑结构分析</p>
<p>数据库概念结构设计后，可以数据库概念转化实际的数据模型，这是一种数据库的逻辑结构，就是将概念结构与支持数据库管理系统的模型相符合。具体的表设计如下所示：</p>
<p>表4-1：联系客服</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>userid</td>
<td>bigint</td>
<td></td>
<td>用户id</td>
<td></td>
<td></td>
</tr>
<tr>
<td>adminid</td>
<td>bigint</td>
<td></td>
<td>管理员id</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ask</td>
<td>longtext</td>
<td>4294967295</td>
<td>提问</td>
<td></td>
<td></td>
</tr>
<tr>
<td>reply</td>
<td>longtext</td>
<td>4294967295</td>
<td>回复</td>
<td></td>
<td></td>
</tr>
<tr>
<td>isreply</td>
<td>int</td>
<td></td>
<td>是否回复</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-2：图书分类</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>tushufenlei</td>
<td>varchar</td>
<td>200</td>
<td>图书分类</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="5系统详细设计"><a href="#5系统详细设计" class="headerlink" title="5系统详细设计"></a>5系统详细设计</h1><h2 id="5-1系统功能模块"><a href="#5-1系统功能模块" class="headerlink" title="5.1系统功能模块"></a>5.1系统功能模块</h2><p>乐校园二手书交易管理系统，在系统首页可以查看首页、二手图书，系统公告、留言反馈、个人中心、后台管理，购物车，联系客服等内容进行详细操作，如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303252303-cbd2.png" alt="image-20230325231407169"></p>
<p>图5-1系统首页界面图</p>
<p>用户注册，在用户注册页面通过填写用户账号、密码、确认密码、用户姓名、年龄等信息完成用户注册，如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303252303-1ea0.png" alt="image-20230325231454956"></p>
<p>图5-2用户注册界面图</p>
<p>二手图书，在二手图书页面可以查看价格，图书分类，作者，出版社，成色，卖家账号，卖家姓名，点击次数等详细内容，并进行添加到购物车和立即购买操作，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303252303-6cf3.png" alt="image-20230325231512615"></p>
<p>图5-3二手图书界面图</p>
<p>留言反馈，在留言反馈页面通过输入留言内容，上传图片进行立即提交或重置操作，还可以对留言信息和留言图片进行回复操作；如图5-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303252303-e189.png" alt="image-20230325231543987"></p>
<p>个人中心，在个人中心页面通过填写用户账号、密码、用户姓名、性别、年龄、上传图片、余额等信息进行更新信息，根据需要对我的订单，我的地址我的收藏进行详细操作，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303252303-b053.png" alt="image-20230325231556095"></p>
<h2 id="5-2管理员功能模块"><a href="#5-2管理员功能模块" class="headerlink" title="5.2管理员功能模块"></a>5.2管理员功能模块</h2><p>管理员登录系统后，可以对首页、个人中心、用户管理、卖家用户管理、图书分类管理、二手图书管理、求购图书管理、求购回复管理、留言反馈、系统管理、订单管理等功能模块进行相应操作，如图5-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303252303-b850.png" alt="image-20230325231645119"></p>
<p>用户管理，在用户管理页面可以对索引、用户账号、用户姓名、性别、年龄、头像等信息进行详情，修改和删除等操作，如图5-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303252303-e189.png"></p>
<p>卖家用户管理，在卖家用户管理页面可以对索引、卖家账号、卖家姓名、性别、卖家手机、邮箱、图片等信息进行详情，修改和删除等操作，如图5-8所示。</p>
<h2 id="5-3-卖家用户功能模块"><a href="#5-3-卖家用户功能模块" class="headerlink" title="5.3 卖家用户功能模块"></a>5.3 卖家用户功能模块</h2><p>卖家用户登录系统后，可以对首页、个人中心、二手图书管理、求购图书管理、求购回复管理、订单管理等功能模块进行相应操作，如图5-15所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303252303-745c.png" alt="image-20230325231753598"></p>
<p>图5-15卖家用户功能界面图</p>
<p>二手图书管理，在二手图书管理页面可以对索引、图书名称、图书分类、封面、作者、出版社、成色、卖家账号、卖家姓名、价格等内容进行详情，修改，查看评论和删除操作，如图5-16所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303252303-244b.png" alt="image-20230325231802829"></p>
<p>求购图书管理，在求购图书管理页面可以对索引、图书名称、图书分类、作者、出版社、成色要求、接受价位、发布时间、用户账号、用户姓名等内容进行详情和回复等操作，如图5-17所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303252303-ba7b.png" alt="image-20230325232555073"></p>
<h1 id="6、源码获取"><a href="#6、源码获取" class="headerlink" title="6、源码获取"></a>6、源码获取</h1><blockquote>
<p><strong>1、源码获取： 查看<a href="https://note.youdao.com/s/H1qh4lhu">源码地址</a></strong> </p>
<p><strong>2、精彩专栏推荐订阅：在下方专栏👇🏻</strong></p>
<p>😁<br>1.<a href="https://blog.csdn.net/u014534808/category_12245313.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br>2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<p>注意，源码是收费的，如果有需要，可以通过下方二维码加我，非诚勿扰。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-0f02.png"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>mac启动时自动添加多个ssh私钥</title>
    <url>/p/25832.html</url>
    <content><![CDATA[<h1 id="mac启动时自动添加多个ssh私钥"><a href="#mac启动时自动添加多个ssh私钥" class="headerlink" title="mac启动时自动添加多个ssh私钥"></a>mac启动时自动添加多个ssh私钥</h1><p>使用mac的”自动操作”app，添加启动时执行的shell脚本，将多个<a href="https://so.csdn.net/so/search?q=%E7%A7%81%E9%92%A5&spm=1001.2101.3001.7020">私钥</a>添加到ssh-agent中。</p>
<p>命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">ssh-add ~/.ssh/id_rsa_xujun_jy</span><br><span class="line">ssh-add ~/.ssh/id_rsa_xujun9411</span><br><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure>



<h2 id="操作方式："><a href="#操作方式：" class="headerlink" title="操作方式："></a>操作方式：</h2><p>第一步：打开”自动操作”，选择实用工具-运行shell脚本，添加shell脚本如下： </p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304021404-fa15.png" alt="image-20230402141125795"></p>
<p>第二步：保存文件，文件名”ssh-add.app”</p>
<p>第三步：系统偏好设置-用户与群组 在“登录项”选项中添加”ssh-add.app”以使其开机自动启动</p>
<p><img src="https://oscimg.oschina.net/oscnet/10be1bacd40fcad115b7a7d47cc35055663.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure>



<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304021404-debd.png" alt="image-20230402141234892"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>如何使用ChatGPT赚钱和变现的16种方法和途径：创意和机会的探索</title>
    <url>/p/64489.html</url>
    <content><![CDATA[<p><strong>了解如何使用ChatGPT赚钱：本文将分享2023年使用该AI工具ChatGPT赚钱的</strong> <strong>16****种方法</strong></p>
<p><a href="https://openai.com/">ChatGPT</a>一种基于文本的大型语言人工智能模型，它具有非常高的语言处理能力，可以应用于很多领域和场景，如文本生成，智能客服系统，教育，并且预计很快会在物联网中大量应用。</p>
<p>ChatGPT在很快的时间内就获得了巨大的人气。它在短短5天内就拥有100万用户。该模型已经用大量资源进行了训练，以响应几乎任何类型的查询。</p>
<p>本文将探讨如何利用CHATGPT赚取更多的财富。</p>
<h2 id="ChatGPT的工作原理"><a href="#ChatGPT的工作原理" class="headerlink" title="ChatGPT的工作原理"></a><strong>ChatGPT的工作原理</strong></h2><p>CHATGPT是一个大型语言模型，它使用基于神经网络的深度学习算法技术生成类似人类的文本，该模型预先进行了大规模的文本数据训练（例如，书籍、文章和网站）。可以在训练过程中自我进化和不断优化，它可以理解自然语言的模式和结构，因此达到更好的文本生成效果。当给出提示或指令时，模型使用这些预先训练的只是以连贯和自然的方式生成文本。它的应用范围很广泛，包括自然语言对话、文章创作、翻译、摘要生成等。</p>
<p>下面我们来看下，具体可以通过哪些途径和方法来用ChatGPT生成文本赚钱或变现。</p>
<p><a href="https://www.xnbeast.com/how-make-money-with-chatgpt/#1"><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304012304-04a3.jpg" alt="ChatGPT盈利方法"></a></p>
<h3 id="1-使用ChatGPT生成视频脚本"><a href="#1-使用ChatGPT生成视频脚本" class="headerlink" title="1. 使用ChatGPT生成视频脚本"></a>1. <strong>使用ChatGPT生成视频脚本</strong></h3><p>ChatGPT很容易使用。输入类似“制作一个三分钟的YouTube视频脚本，介绍世界上游泳高风险的五个地方”，它会帮你很快生成一段视频脚本。</p>
<p>正如YouTube中的这个频道“<a href="https://www.youtube.com/beamazed">BE AMAZED</a>”。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304012304-6b4b.png" alt="beamazed频道"></p>
<p>发布类似的视频每个月可以赚高达198K美元。</p>
<p><img src="https://www.xnbeast.com/wp-content/uploads/2023/02/youtube%E8%A7%86%E9%A2%91%E9%A2%91%E9%81%93%E6%9C%88%E6%94%B6%E5%85%A5.png" alt="youtube视频频道月收入"></p>
<p>你甚至不需要购买麦克风。在Canva上几分钟便可完成视频制作。</p>
<p>具体操作如下：</p>
<iframe class="elementor-video" frameborder="0" allowfullscreen="1" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" title="如何使用ChatGPT制作视频实现月入15K美刀+埃克森数字营销" width="640" height="360" src="https://www.youtube.com/embed/jOeDnXWCoQY?controls=1&amp;rel=0&amp;playsinline=0&amp;modestbranding=0&amp;autoplay=0&amp;enablejsapi=1&amp;origin=https%3A%2F%2Fwww.xnbeast.com&amp;widgetid=1" id="widget2" data-gtm-yt-inspected-4="true" style="box-sizing: border-box; border: none; font-size: 17px; font-style: inherit; font-weight: inherit; margin: 0px; outline: 0px; padding: 0px; vertical-align: baseline; max-width: 100%; width: 896px; line-height: 1; height: 504px; display: flex; background-color: rgb(0, 0, 0);"></iframe>

<p>视频中相关资源及链接：</p>
<ul>
<li><a href="https://www.xnbeast.com/create-openai-chatgpt-account/">如何注册ChatGPT(解决手机验证问题）</a></li>
<li><a href="https://openai.com/">ChatGPT官方网站</a></li>
<li><a href="https://socialblade.com/">社交平台盈利分析工具</a></li>
<li><a href="https://www.xnbeast.com/fiverr/">fiverr平台（可以找将视频脚本转化为音频的服务）</a></li>
<li><a href="https://www.canva.com/">视频编辑制作工具Canva</a></li>
</ul>
<p>当然ChatGPT在生成脚本的应用还不止于此。你还可以使用ChatGPT为播客、广播节目、电影、视频等编写脚本。</p>
<h3 id="2-使用ChatGPT生成视频描述"><a href="#2-使用ChatGPT生成视频描述" class="headerlink" title="2. 使用ChatGPT生成视频描述"></a>2. <strong>使用ChatGPT生成视频描述</strong></h3><p>像YouTube中允许5000个字符的视频描述，大约相当于500个单词。通常前面的150个字符（英文大约20个单词，中文大约55个字）会显示在搜索结果中。因此这150个字符的内容对于用户的吸引是最具影响力的，YouTube也将其用于SEO目的。</p>
<p>复制你视频现有的描述到ChatGPT, 让它对视频描述进行重写。注意尽可能让ChatGPT使用最简单的语言，写不超过150个字符的描述，描述中包括视频是关于什么主题的（核心关键词）。</p>
<p>YouTube的默认排名算法是相关性排序。因此，你的视频标题跟查询词越相关，它在搜索中出现的可能性就越大。</p>
<p>例如，我们让ChatGPT写了如下一段视频描述：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304012304-6d1c.png" alt="ChatGPT写视频描述"></p>
<p>一旦你习惯了ChatGPT更新YouTube视频描述所需的指令，它几乎可以成为你的虚拟助手。你可以作为描述更新者和SEO优化专家提供服务。</p>
<h3 id="3-使用ChatGPT为SEO生成内容和关键词"><a href="#3-使用ChatGPT为SEO生成内容和关键词" class="headerlink" title="3. 使用ChatGPT为SEO生成内容和关键词"></a>3. <strong>使用ChatGPT为SEO生成内容和关键词</strong></h3><p>SEO中ChatGPT可以帮助生成标题，元描述，关键词，来吸引点击。你可以这样和它互动：</p>
<ul>
<li>给出一些关于“实木板材”的标题</li>
<li>给出一些关于“如何使用ChatGPT”的思路</li>
<li>为“为什么人们需要智能家居”以一段介绍</li>
<li>用少于160个字符总结一下这篇文章</li>
</ul>
<p>如果你不知道如何确定关键词，可以在ChatGPT中说“就搜索意图为一下关键词进行分类”， 并提交一个关键词列表。然后让它为你写的不同话题生成SEO关键词。</p>
<p>当然，你还可以用ChatGPT帮助检查拼写和语法。</p>
<h3 id="4-使用ChatGPT生成产品描述"><a href="#4-使用ChatGPT生成产品描述" class="headerlink" title="4. 使用ChatGPT生成产品描述"></a>4. <strong>使用ChatGPT生成产品描述</strong></h3><p>使用ChatGPT来描述产品可以节省大量时间和资金。</p>
<p>例如，你可以这样给ChatGPT互动：“为户外帐篷写一个产品描述”。</p>
<p>大家知道在ChatGPT使用中，产出内容的质量很大程度上取决于，你输入的内容。</p>
<p>所以尽可能添加更多细节，才能在ChatGPT中获得更完美、精细的描述。</p>
<h3 id="5-使用ChatGPT生成网站文案"><a href="#5-使用ChatGPT生成网站文案" class="headerlink" title="5. 使用ChatGPT生成网站文案"></a>5. <strong>使用ChatGPT生成网站文案</strong></h3><p>就像ChatGPT可以写视频脚本一样，它还可以用来写博客文章。告诉他你的详细要求，以及字数限制，ChatGPT会为你的网站生成一整篇文章。</p>
<p>不过在这里建议大家多用ChatGPT去写技术性文章，这种客观性内容ChatGPT生产的内容不容易有错误。</p>
<p>例如，我们让ChatGPT写了一段关于“页面SEO”的内容：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304012304-df68.png" alt="ChatGPT生成页面SEO的内容"></p>
<p>可以看到基本都符合主流页面SEO策略。</p>
<p>如果，你正在雇佣写手帮你写文章，****不建议用ChatGPT来取代你的写手****。虽然ChatGPT省钱，但对于一些内容的创意、问题解决等它还是不能超越人类的。</p>
<p>同时，也建议在使用ChatGPT产出的内容时，已经要进行人工审核和编辑。现在很多搜索引擎已经能够识别AI内容，所以如果想避免被惩罚还是要谨慎使用AI内容。</p>
<p>这里不妨举个例子：</p>
<p>这个网站的内容基本都是AI生成内容。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304012304-1037.png" alt="howtosguru网站截图"></p>
<p>看下他们在2022年五月的流量：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304012304-d277.png" alt="howtosguru在2022年的流量"></p>
<p>再看下现在的流量：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304012304-77f8.png" alt="howtosguru现在的流量数据"></p>
<p>他们的流量变化曲线是这样的：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304012304-8400.png" alt="流量曲线"></p>
<p>从2022年5月流量到达顶点之后，逐步减少，到现在几乎为零。网站现在基本处于关停状态。</p>
<p>另外现在市场上也有很多AI内容监测工具， 比如：</p>
<ul>
<li><a href="https://gptzero.me/">GPTZero</a></li>
<li><a href="https://copyleaks.com/features/ai-content-detector">AI Content Detector</a></li>
</ul>
<p>这些工具都可以帮助你检查内容是否为AI生成内容。</p>
<h3 id="1-用ChatGPT回复邮件"><a href="#1-用ChatGPT回复邮件" class="headerlink" title="1. 用ChatGPT回复邮件"></a>1. <strong>用ChatGPT回复邮件</strong></h3><p>写邮件是一项比较费时费力的工作。ChatGPT可以让这个工作变得简单。给出关于要写邮件内容的清晰描述，剩下的就交给ChatGPT。</p>
<p>如果你经常进行邮件营销，ChatGPT可以帮你用更少的时间写邮件。</p>
<p>除了帮助生成文本以外，ChatGPT还有很多帮助人们赚钱的途径。</p>
<h3 id="6-将ChatGPT集成到聊天工具，自动回复信息"><a href="#6-将ChatGPT集成到聊天工具，自动回复信息" class="headerlink" title="6. 将ChatGPT集成到聊天工具，自动回复信息"></a>6. <strong>将ChatGPT集成到聊天工具，自动回复信息</strong></h3><p>据说QQ中已经有类似的工具。</p>
<h3 id="7-用ChatGPT写小说盈利"><a href="#7-用ChatGPT写小说盈利" class="headerlink" title="7. 用ChatGPT写小说盈利"></a>7. <strong>用ChatGPT写小说盈利</strong></h3><p>让ChatGPT撰写长篇小说是一个耗时的过程。你需要与人工智能合作，以获得想要的东西，并不断完善你的提示。下面是一本标准言情小说的例子。</p>
<p>然后，将这些小说发布到相应的平台赚取稿费。</p>
<h3 id="8-利用ChatGPT提供翻译服务"><a href="#8-利用ChatGPT提供翻译服务" class="headerlink" title="8.利用ChatGPT提供翻译服务"></a><strong>8.利用ChatGPT提供翻译服务</strong></h3><p>语言翻译看起来很简单，但它的意义远远超出了人们的想象。要成功翻译文本，你必须考虑文化的微妙之处、技术词汇、目的、受众等。</p>
<p>由于ChatGPT是一个机器学习模型，你可以训练它翻译语言中的所有细微之处。但这将花费大量时间。</p>
<p>提供翻译服务赚钱的最快方式是提供最简单的翻译形式。标准翻译不需要文本中的文化差异。因此，你可以使用ChatGPT翻译手册、培训材料和产品描述，这些都是巨大的机会领域。</p>
<p>例如，如果您想测试ChatGPT的能力，选择一个容易检查或自己熟悉的段落，让ChatGPT将英语翻译成西班牙语。</p>
<p>检查翻译的准确性，可以使用谷歌翻译或要求ChatGPT将生成的西班牙语翻译回英语，并将两者进行比较。</p>
<p>就像下面这个例子一样，如果翻译回来只有一两个单词跟原文不同，那么可以判定即使你完全不同一门语言也可以依靠ChatGPT来翻译。</p>
<p><img src="https://www.xnbeast.com/wp-content/uploads/2023/02/%E8%8B%B1%E8%AF%AD%E7%BF%BB%E8%AF%91%E6%88%90%E8%A5%BF%E7%8F%AD%E7%89%99%E8%AF%AD-%E7%84%B6%E5%90%8E%E5%86%8D%E5%B0%86%E8%A5%BF%E7%8F%AD%E7%89%99%E8%AF%AD%E7%BF%BB%E8%AF%91%E6%88%90%E8%8B%B1%E8%AF%AD.jpg" alt="英语翻译成西班牙语-然后再将西班牙语翻译成英语"></p>
<h3 id="10-使用ChatGPT写社交媒体内容"><a href="#10-使用ChatGPT写社交媒体内容" class="headerlink" title="10.使用ChatGPT写社交媒体内容"></a><strong>10.使用ChatGPT写社交媒体内容</strong></h3><p>社交媒体帖子也是ChatGPT发挥作用的地方。短推文、Instagram标题、LinkedIn上的长文章和帖子、TikTok、Facebook Messenger和YouTube Shorts的回复、转发、评论和脚本都是社交媒体内容写作的例子。帖子越短，输出越好，而且速度很快！</p>
<h2 id="利用ChatGPT赚钱的其他方法"><a href="#利用ChatGPT赚钱的其他方法" class="headerlink" title="利用ChatGPT赚钱的其他方法"></a><strong>利用ChatGPT赚钱的其他方法</strong></h2><h3 id="11-利用CHATGPT的智能投资顾问功能赚钱"><a href="#11-利用CHATGPT的智能投资顾问功能赚钱" class="headerlink" title="*11.利用CHATGPT的智能投资顾问功能赚钱*"></a>*<em>11.<strong><strong>利用CHATGPT的智能投资顾问功能</strong></strong>赚钱</em>*</h3><p>CHATGPT可以作为智能投资顾问，指导人们进行投资决策。它可以分析各种经济指标、市场趋势和财务数据，提供最佳的投资建议。这种投资方式比传统的投资更加智能化、快速和精准，可以获得更高的收益。</p>
<p>用户可以使用CHATGPT来建立自己的投资组合，以降低风险并获得更高的回报。同时，还可以学习其他投资者的策略和技巧，以不断提升自己的投资能力。</p>
<h3 id="12-使用ChatGPT模型开发智能客服系统"><a href="#12-使用ChatGPT模型开发智能客服系统" class="headerlink" title="12. 使用ChatGPT模型开发智能客服系统"></a>12. <strong>使用ChatGPT模型开发智能客服系统</strong></h3><p>大家知道ChatGPT本身就是一款聊天机器人应用程序，用它很容易接入到一些智能客服系统，然后向企业或个人销售或许可这些应用程序。</p>
<p>这些聊天机器人可以用于客户服务、虚拟协助或其他任务。</p>
<h3 id="13-提供咨询或开发服务，帮助他人将ChatGPT模型集成到自己的项目或产品中。"><a href="#13-提供咨询或开发服务，帮助他人将ChatGPT模型集成到自己的项目或产品中。" class="headerlink" title="13. 提供咨询或开发服务，帮助他人将ChatGPT模型集成到自己的项目或产品中。"></a>13. <strong>提供咨询或开发服务，帮助他人将ChatGPT模型集成到自己的项目或产品中。</strong></h3><p>这里主要涉及到一些软件、app以及物联网系统。</p>
<h3 id="14-用ChatGPT生成企业名称或标语"><a href="#14-用ChatGPT生成企业名称或标语" class="headerlink" title="14.用ChatGPT生成企业名称或标语"></a><strong>14.用ChatGPT生成企业名称或标语</strong></h3><p>使用ChatGPT生成企业名称和口号比较容易。你可以给出一些让ChatGPT遵循的指令。也可以向人工智能模型提示你想要什么、名字和口号是谁、位置、财务统计等细节，它将根据训练数据生成建议。</p>
<p>例如，可以让ChatGPT为你在伦敦的鞋店生成十个店铺名称和标语。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304012304-bb7a.png" alt="鞋店名称和标语生成"></p>
<p>很快，ChatGPT便给出它的十个建议。先从搜索引擎搜一下一下是否有重名或类似的。再到社交媒体中看一下有没有类似情况。</p>
<p>这类业务在<a href="https://www.xnbeast.com/fiverr/">Fiverr</a>中有很多相关服务。</p>
<h3 id="15-用ChatGPT为一些简单的网络工具写代码"><a href="#15-用ChatGPT为一些简单的网络工具写代码" class="headerlink" title="15.用ChatGPT为一些简单的网络工具写代码"></a><strong>15.用ChatGPT为一些简单的网络工具写代码</strong></h3><p>ChatGPT不仅可以生成类似人类的文本，你还可以用它来为你的网站设计网络工具。</p>
<p>例如，如果你需要一个让销售团队可以用来计算佣金的计算器，ChatGPT可以帮你生成。即使在未来某个时间你的佣金比例发生了变化，ChatGPT也可以再很短时间能进行更改，你不需要付任何费用找编程人员来进行这项工作。</p>
<h3 id="16-使用ChatGPT制作课程进行销售"><a href="#16-使用ChatGPT制作课程进行销售" class="headerlink" title="16. 使用ChatGPT制作课程进行销售"></a>16. <strong>使用ChatGPT制作课程进行销售</strong></h3><p>你可以使用ChatGPT和一个视频生成工具，比如Synthesia来创建课程，并在平台进行销售。</p>
<p>用ChatGPT帮助生成课程结构，大纲以及推广课程的广告文案。然后使用synthesia这样的工具创建多媒体内容让课程更有互动性。</p>
<p>下面是一个用ChatGPT为一个四周，每天两小时的小学英语课程列出的提纲：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304012304-4c50.png" alt="ChatGPT生成的课程大纲"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>使用ChatGPT赚钱需要在时间、资源和专业知识方面进行投资。此外，GPT-3的任何商业用途都需要OpenAI提供付费API访问。请注意，这些只是可能性，机会可能会随着时间的推移而改变。”</p>
<h2 id="ChatGPT相关资源："><a href="#ChatGPT相关资源：" class="headerlink" title="ChatGPT相关资源："></a>ChatGPT相关资源：</h2><ul>
<li><p><a href="https://www.kdocs.cn/l/cawtM5EUz0BT">ChatGPT注册教程</a>: 解决手机无法接收验证码问题（亲测有效）。</p>
</li>
<li><p><a href="https://kdocs.cn/l/cvGfuS1jBg2O">如何高效使用ChatGPT</a>: 介绍了ChatGPT在不同场景下的具体应用。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>ChatGpt</category>
      </categories>
  </entry>
  <entry>
    <title>高效使用ChatGPT大探索：打造高效生产力的秘密武器</title>
    <url>/p/65084.html</url>
    <content><![CDATA[<ul>
<li><p>最近ChatGPT一直是人们热议的一个话题。它完成100万的用户积累仅用了五天，而Facebook用了10个月，Twitter甚至用了两年。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/693cda96e225bbab1b84baf9720f788c.png" alt="img"></p>
<p>这个数据也从侧面说明了ChatGPT的受欢迎程度。</p>
<p>在使用过程中人们发现，有的人可以通过ChatGPT得到高质量的回答，而有些人得到的内容确实非常的普通。</p>
<p>其实，想让ChatGPT得到一个好的高质量的回答并不是问出来的，而应该是提示引导出来的。</p>
<p>如何提示AI生成高质量的你想要的结果已经催生了一个热门的新职业叫AI提示工程师（Prompt Engineer）。硅谷最近放出了大量30万美元年薪的高薪职位招聘AI提示工程师。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7f97c0ffb7ced6cea845c33ae8ac3ae2.jpeg" alt="img"></p>
<p>所以如果你想利用ChatGPT增强自己或企业的竞争力，就要学会如何提示ChatGPT，从而得到更高质量的内容。</p>
<p>这篇文章，我们就带大家一起来学习下如何高效使用ChatGPT。</p>
<h2 id="ChatGPT的优缺点"><a href="#ChatGPT的优缺点" class="headerlink" title="ChatGPT的优缺点"></a>ChatGPT的优缺点</h2><p>在学习高效使用ChatGPT之前，有必要了解一下ChatGPT这款AI工具有哪些优缺点。</p>
<p>先来看一下ChatGPT的优点：</p>
<ul>
<li>使用方便：只要具备上网环境，ChatGPT可以从任何地方访问。对话中输入你的诉求，很快便会得到一个不错的答案。</li>
<li>个性化学习：ChatGPT有自我学习和理解的能力，并能相应地调整对话或问题的难度。这可以使学习体验更加个性化和有效。</li>
<li>节省时间：用户可以通过ChatGPT快速获取答案，让他们继续进行其他任务或了解更多有关主题的信息，从而节省时间。</li>
<li>创造新的就业机会：比如开文讲到的提升工程师，当然也有人对于它的到来持恐惧的心态，因为AI人工智能的高度发展可能预示着很多人类的岗位会被替代掉，从而造成实业。同时我们也必须预见到AI人工智能时代的到来，同时会为我们创造大量的物质财富，从而提升整个人类的物质文化生活水平。</li>
</ul>
<p>ChatGPT的缺点：</p>
<ul>
<li>缺乏人际互动：虽然ChatGPT可以进行对话并提供信息，但它缺乏提供个性化反馈或与人类进行实时对话的能力。</li>
<li>对技术的依赖：ChatGPT依赖技术来运行，这意味着它可能并不总是可用的，或者可能会遇到技术困难。</li>
<li>知识有限：ChatGPT的知识仅限于其接受过培训的信息。它可能无法获取最新信息，也无法提供对某个主题的全面理解。</li>
<li>信息过时和内容创新缺乏：需要注意是，ChatGPT是使用2021的数据进行训练的，因此对有新闻价值或新鲜内容的搜索性能来说，它会提供过时的信息。同样，由于它基于现有内容生成文本，所以它很难提供一些新的观点。</li>
</ul>
<h2 id="如何高效使用CHATGPT"><a href="#如何高效使用CHATGPT" class="headerlink" title="如何高效使用CHATGPT"></a>如何高效使用CHATGPT</h2><h3 id="1-头脑风暴"><a href="#1-头脑风暴" class="headerlink" title="1. 头脑风暴"></a>1. 头脑风暴</h3><p>向ChatGPT提出一个简单的问题，就可以生成关于任何主题的各种数据和见解。这样，比如，“给我20个关于人工智能的文章的想法”，然后立即得到答案。头脑风暴是一个激发想法和思路的好方法，当然在使用它们之前，你应该仔细检查它的反应。</p>
<p>我还尝试了让ChatGPT用头脑风暴的方式来其品牌名或域名，确实非常有效：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/174d2fb811b5a51f3ac60bb93bebe4e7.png" alt="img"></p>
<h3 id="2-获得内容初稿"><a href="#2-获得内容初稿" class="headerlink" title="2. 获得内容初稿"></a>2. 获得内容初稿</h3><p>假设你着急要写一个新闻稿或者一篇博客文章，但又没有足够的时间来做这项工作。这时就可以用到ChatGPT。</p>
<p>例如：</p>
<p>这样，很快你就得到一篇文章初稿，在此基础上进行内容编辑，可以很快完成文章写作。</p>
<p>注意：请不要照搬ChatGPT写的博客文章，现在搜索引擎应该可以在一定程度上识别AI内容，这样对你的网站SEO以及网站本身都是不利的，严重的可能带来惩罚，比如取消收录等等。</p>
<h3 id="3-解决代码问题"><a href="#3-解决代码问题" class="headerlink" title="3. 解决代码问题"></a>3. 解决代码问题</h3><p>对早期语言模型的主要改进之一是ChatGPT理解和生成代码的能力。可以告诉ChatGPT修复代码中的错误并获得调试帮助。</p>
<h3 id="4-创建标题"><a href="#4-创建标题" class="headerlink" title="4. 创建标题"></a>4. 创建标题</h3><p>好的标题对于任何内容的成功都非常重要。所以，你可以让ChatGPT帮你为某个话题生成多个标题然后从中选择一个最满意的。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/a9676c1a159ec24f62ed9958c4f524eb.png" alt="img"></p>
<h3 id="5-尝试不同的提示格式"><a href="#5-尝试不同的提示格式" class="headerlink" title="5. 尝试不同的提示格式"></a>5. 尝试不同的提示格式</h3><p>通过探索模型对一系列问题的反应。给它提问、命令或陈述，看看它对每种输入类型的反应。</p>
<p>比如，在ChatGPT的使用指南中有提到一些提示格式：</p>
<ul>
<li>展示和讲述。通过说明、示例或两者的结合，明确你想要什么。如果你想让模型按照字母顺序对一系列项目进行排序，或者按照情感对一个段落进行分类，那么向它展示你想要的东西。</li>
<li>提供质量数据。如果你试图构建分类器或使模型遵循某个模式，请确保有足够的示例。一定要校对你的例子——这个模型通常足够聪明，能够识破基本的拼写错误，并给你一个答案，但它也可能会假设这是故意的，这种情况会影响你的答案。</li>
<li>问题排除。如果无法使ChatGPT按预期执行，可以遵循这个检查表：Is it clear what the intended generation should be? 2. Are there enough examples? 3. Did you check your examples for mistakes? (The API won’t tell you directly)  4. Are you using temperature and top_p correctly?</li>
</ul>
<p>你可以从<a href="https://platform.openai.com/docs/guides/completion/prompt-design">官方网站</a>了解到更多提示格式，帮助你更有效的使用ChatGPT.</p>
<h3 id="6-使用ChatGPT寻求帮助"><a href="#6-使用ChatGPT寻求帮助" class="headerlink" title="6. 使用ChatGPT寻求帮助"></a>6. 使用ChatGPT寻求帮助</h3><p>ChatGPT是一个很棒的资源，无论是想将其作为主要工具，还是想向其提问以用于调查。</p>
<p>以往，人们在需要获取某个主题的信息时，谷歌和维基百科是首先求助的两个地方。现在你可以在你的武器库中添加另一个强大的资源：ChatGPT。</p>
<h3 id="7-与其他NLP工具结合"><a href="#7-与其他NLP工具结合" class="headerlink" title="7. 与其他NLP工具结合"></a>7. 与其他NLP工具结合</h3><p>ChatGPT可以通过包括用于NLP（自然语言处理）的若干其他技术和资源来改进。得益于实体识别、情感分析和关键词提取工具，程序员可以创建更高级、功能更丰富的软件。</p>
<h3 id="8-重新设计文本"><a href="#8-重新设计文本" class="headerlink" title="8. 重新设计文本"></a>8. 重新设计文本</h3><p>你可以用ChatGPT对一段文字进行加工或编辑，比如：加长，缩短，以及重写。</p>
<p>例如，我们可以提供一篇文章，然后让ChatGPT来写一个元描述。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/cad4692ec61ad53eb0cabb0b7c501023.png" alt="img"></p>
<h2 id="如何为一些特定目的有效使用CHATGPT"><a href="#如何为一些特定目的有效使用CHATGPT" class="headerlink" title="如何为一些特定目的有效使用CHATGPT"></a>如何为一些特定目的有效使用CHATGPT</h2><h3 id="1-用ChatGPT生成图标ICON"><a href="#1-用ChatGPT生成图标ICON" class="headerlink" title="1. 用ChatGPT生成图标ICON"></a>1. 用ChatGPT生成图标ICON</h3><p>例如，我在ChatGPT中输入“生成汽车图标的SVG代码”：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d05d3e212e3d627ed395457fbb42e086.png" alt="img"></p>
<p>然后，把代码复制到免费的<a href="https://www.freecodeformat.com/svg-editor.php">SVG编辑器</a>中：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/4604b3d109afa0e1c7fbf7200295c61b.png" alt="img"></p>
<p>点击按钮，便可以看到ChatGPT帮你生成的图标了：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ff7fa37e79cd8fcf5a5e51ce942a5a43.png" alt="img"></p>
<p>最后，你可以将这个SVG代码复制到你的网页中要显示图表的位置。</p>
<h3 id="2-用ChatGPT生成Excel函数"><a href="#2-用ChatGPT生成Excel函数" class="headerlink" title="2. 用ChatGPT生成Excel函数"></a>2. 用ChatGPT生成Excel函数</h3><p>例如，我有这样一个Excel表格：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2632c30fdb231c1872c9e319cdda00ff.png" alt="img"></p>
<p>现在我想提取第二列网址中的中间部分作为第三列“网站名”的内容。这时让我们自己写一个Excel函数可能很难。</p>
<p>我们可以把任务交给ChatGPT, 在对话框中输入一个命令“在Excel中写一个函数，提取B2单元格内第一个句号和第二个句号中间的文本内容。”ChatGPT就会帮你生成这段函数：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/f31fa16290664b760d4da48b7b8e73ed.png" alt="img"></p>
<p>我们把生成的函数复制到刚才的Excel表格中，看看能否得到我们想要的结果：</p>
<p>可以看到，ChatGPT生成的Excel函数精准的帮我们把需要的内容提取出来了。</p>
<h3 id="3-用ChatGPT生成节日祝福语"><a href="#3-用ChatGPT生成节日祝福语" class="headerlink" title="3. 用ChatGPT生成节日祝福语"></a>3. 用ChatGPT生成节日祝福语</h3><p>假如，单位新年聚餐时，领导让你讲几句话。要说什么呢？</p>
<p>可以让ChatGPT来帮你，可以输入“假设你在参加新年单位聚餐，领导让你说几句话，按照以下格式写一段新年祝福语：1. 描绘当下感受。2.表达感谢。3. 最后向单位领导、同事以及公司说祝福语。”</p>
<p>看一下ChatGPT的回答：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ec67b4ab0af88915fa2b43fa3fe0adba.png" alt="img"></p>
<p>如果不满意，还可以继续让ChatGPT生成更多版本。</p>
<h3 id="4-用ChatGPT帮助生成AI生成图像描述"><a href="#4-用ChatGPT帮助生成AI生成图像描述" class="headerlink" title="4. 用ChatGPT帮助生成AI生成图像描述"></a>4. 用ChatGPT帮助生成AI生成图像描述</h3><p>我们知道AI工具输出内容的质量高低，很大程度上取决于你如何提示AI工具，这同样适用于AI生成图像的工具。</p>
<p>下面我们就来看一下如何用ChatGPT帮助生成图像描述。</p>
<p>例如，我们让ChatGPT帮助生成朱自清《荷塘月色》的景象描述：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/fa2c25bb09406b371ab6ce1f280600d4.png" alt="img"></p>
<p>然后将这段描述复制到AI生成图片的工具中，便可以得到一个质量不错的图片：</p>
<h3 id="5-用ChatGPT模拟求职面试"><a href="#5-用ChatGPT模拟求职面试" class="headerlink" title="5. 用ChatGPT模拟求职面试"></a>5. 用ChatGPT模拟求职面试</h3><p>找到一份理想工作的前提就是通过面试。那么如何为面试做好充分的准备呢？</p>
<p>ChatGPT可以帮你。</p>
<p>为了和ChatGPT进行模拟面试。请参考这个模板：</p>
<p>假设你是一家外贸企业的面试官，通过不断问问题来进行一场市场部经理的模拟面试，在这个场景里，我的角色是面试者，你需要根据岗位描述不断问有挑战性的问题来监测我的能力，但必须在我回答之后才能开始下一个问题，下面是这个岗位的描述：</p>
<p>【需求描述】</p>
<ul>
<li>市场策略和计划：负责制定市场策略和计划，包括市场营销和销售计划，以及市场推广和品牌建设。</li>
<li>业务拓展：负责开拓新的客户和市场，维护和拓展现有客户，实现销售业绩的增长和市场份额的提升。</li>
<li>市场调研和分析：进行市场调研和竞争分析，收集并分析市场数据和信息，以制定有效的市场策略和计划。</li>
<li>品牌管理：负责企业品牌的建设和管理，包括品牌定位、品牌传播、品牌形象塑造等。</li>
<li>团队管理：负责市场部门的管理和团队建设，包括员工招聘、培训和绩效管理等。</li>
<li>与其他部门协作：与其他部门（如生产、采购、财务等）紧密合作，以确保公司的整体运营顺畅和有效。</li>
<li>经营分析和报告：分析市场和销售数据，撰写经营报告和市场分析报告，为企业决策提供支持和建议。</li>
<li>活动策划和执行：负责企业市场活动的策划和执行，包括展会、推广活动、宣传活动等。</li>
<li>市场部门预算管理：负责市场部门的预算管理，确保预算的合理性和有效性。</li>
<li>与客户关系管理：维护和建立客户关系，提高客户满意度和忠诚度，促进销售业绩的提升。</li>
</ul>
<p>【职位要求】</p>
<ul>
<li>教育背景：大学本科或以上学历，市场营销、国际贸易、商务英语等相关专业。</li>
<li>工作经验：有5年以上外贸企业市场部门管理经验，熟悉国际贸易、市场营销等领域。</li>
<li>语言能力：良好的英语口语和书写能力，能够熟练使用英语进行商务沟通和谈判。</li>
<li>技能要求：具备市场营销、销售管理、品牌建设、团队管理等方面的专业知识和技能。</li>
<li>沟通能力：具备良好的沟通能力和人际交往能力，能够有效地与客户和团队成员沟通。</li>
<li>领导能力：有较强的领导能力和团队建设能力，能够有效地组织和管理团队工作。</li>
<li>分析能力：具备较强的数据分析能力和市场研究能力，能够通过数据分析和市场调研为公司制定市场策略和计划提供支持。</li>
<li>知识储备：对国际贸易政策、国内外市场趋势、行业发展动态等方面有较深入的了解和认识。</li>
<li>职业素养：具备高度的职业素养和商业道德，能够积极履行职责，为公司创造价值。</li>
<li>适应能力：能够适应外贸企业的工作节奏和文化氛围，具备较强的抗压能力和团队协作精神。</li>
</ul>
<p>请开始你对我的第一个问题。</p>
<p>下面，打开你的ChatGPT将以上的这段模板内容复制进去（注:你可以根据自己的需求替换具体内容）</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/cfcdab56420941bff5ab67489cbfbfac.png" alt="img"></p>
<p>然后就开始一问一答的模拟面试。通过这种模拟面试为你真实的面试准备好各种素材的应对内容，从而更有把握的获得更好的职位机会。</p>
<p>注：如果发现ChatGPT跑题了，要及时在会话中把它拽回模拟面试场景。只需要告诉它“请继续模拟面试问题”</p>
<h3 id="6-用ChatGPT练英语口语"><a href="#6-用ChatGPT练英语口语" class="headerlink" title="6. 用ChatGPT练英语口语"></a>6. 用ChatGPT练英语口语</h3><p>我们平常用的ChatGPT都是基于文本的内容，如何通过语音和ChatGPT对话，从而进行英语口语训练呢？</p>
<p>首先，你需要安装一款谷歌浏览器插件“<a href="https://chrome.google.com/webstore/detail/voice-control-for-chatgpt/eollffkcakegifhacjnlnegohfdlidhn/related">Voice Control For ChatGPT</a>”。</p>
<p>然后，你就可以使用ChatGPT练英语口语了。</p>
<h3 id="7-用ChatGPT起名字"><a href="#7-用ChatGPT起名字" class="headerlink" title="7. 用ChatGPT起名字"></a>7. 用ChatGPT起名字</h3><p>中国人比较注重根据五行命格为宝宝取名，所以也催生了很多起名网站而且大部分需要付费。其实完全可以用ChatGPT来帮你免费起名字，例如：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/77864ae4aa197f36fb25930684289f74.png" alt="img"></p>
<h3 id="8-用ChatGPT写商业计划书"><a href="#8-用ChatGPT写商业计划书" class="headerlink" title="8. 用ChatGPT写商业计划书"></a>8. 用ChatGPT写商业计划书</h3><p>这种情况下，你要给ChatGPT虚拟一个场景，比如：</p>
<p>你的角色是商业咨询专家，你需要为客户写一个商业计划书，用于融资，客户知道关于这个项目的所有信息，但不知道如何写商业计划书，你的任务是通过不断问问题，获得关于这个项目的商业计划书所需要的所有信息，然后生成商业计划书，你必须在客户回答后才能问下一个问题，明白了吗？</p>
<p>然后进入ChatGPT, 输入上面的内容，并开始回答ChatGPT的一些列问题，最后便可以生成一份商业计划书。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b7db877fbebdb8b59bdd9322759d139d.png" alt="img"></p>
<h3 id="9-用ChatGPT优化求职简历"><a href="#9-用ChatGPT优化求职简历" class="headerlink" title="9. 用ChatGPT优化求职简历"></a>9. 用ChatGPT优化求职简历</h3><p>比如你想求职SEO优化师的工作，可以先问一下ChatGPT一个优秀的SEO优化师的简历应该有什么样的特点？</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e88507e7357467d9a56c18e30300194f.png" alt="img"></p>
<p>然后，让它评价你的建立并给出修改意见。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7fd9fdc5a5c92df475243ac276c4cc82.png" alt="img"></p>
<p>你甚至可以要求它根据修改意见修改你的简历。</p>
<h3 id="10-使用ChatGPT写推广邮件"><a href="#10-使用ChatGPT写推广邮件" class="headerlink" title="10. 使用ChatGPT写推广邮件"></a>10. 使用ChatGPT写推广邮件</h3><p>例如，你的网站新发布了一篇关于<a href="https://www.xnbeast.com/google-analytics/">谷歌分析如何安装</a>的指南文章，你需要向你的受众写一封推广邮件，让他们来阅读这篇文章。你可以请ChatGPT来帮助你写推广邮件内容：</p>
<h3 id="11-使用ChatGPT创建网站和APP"><a href="#11-使用ChatGPT创建网站和APP" class="headerlink" title="11.使用ChatGPT创建网站和APP"></a>11.使用ChatGPT创建网站和APP</h3><p>ChatGPT的编码技巧是众所周知的。如果你是一个程序员，可以用ChatGPT开发任何类型的有用工具，包括但不限于：</p>
<ul>
<li>单位转换器</li>
<li>贷款偿还计算器</li>
</ul>
<p>等等。</p>
<h3 id="12-使用ChatGPT生成视频脚本"><a href="#12-使用ChatGPT生成视频脚本" class="headerlink" title="12. 使用ChatGPT生成视频脚本"></a>12. 使用ChatGPT生成视频脚本</h3><p>这个我们在文章“<a href="https://www.xnbeast.com/how-make-money-with-chatgpt/">如何用ChatGPT赚钱</a>”讲过，这里不再赘述。</p>
<h3 id="13-使用ChatGPT进行搜索引擎优化"><a href="#13-使用ChatGPT进行搜索引擎优化" class="headerlink" title="13. 使用ChatGPT进行搜索引擎优化"></a>13. 使用ChatGPT进行搜索引擎优化</h3><p>对于ChatGPT在SEO中的应用，包括：</p>
<ul>
<li>对关键词按照<a href="https://www.xnbeast.com/search-intent/">搜索意图</a>分类：提供一组关键词给ChatGPT, 它可以帮助你按照不同的搜索意图对关键词进行分类。</li>
<li>为内容生成<a href="https://www.xnbeast.com/title-tag/">标题标签</a>：你可以提供一段内容，然后要求ChatGPT生成不同版本的少于55个字符的标题标签。</li>
<li>用ChatGPT写<a href="https://www.xnbeast.com/meta-description-guide/">元描述</a>：这个跟标题标签类似，注意长度限制155个字符即可。</li>
<li>改写内容避免<a href="https://www.xnbeast.com/duplicate-content-guide/">重复内容</a>。</li>
<li>根据内容生成FAQ</li>
<li>生成内容摘要</li>
<li>为页面内容生成结构化数据</li>
<li>生成<a href="https://www.xnbeast.com/robots-txt-guide/">robots.txt</a>规则</li>
<li>回复<a href="https://www.helpareporter.com/">HARO</a>请求获取链接</li>
</ul>
<h3 id="14-在WordPress网站中使用ChatGPT"><a href="#14-在WordPress网站中使用ChatGPT" class="headerlink" title="14. 在WordPress网站中使用ChatGPT"></a>14. 在WordPress网站中使用ChatGPT</h3><ul>
<li>在wordPress网站中使用基于ChatGPT的聊天机器人插件</li>
<li>使用ChatGPT为WordPress网站生成定制插件</li>
</ul>
<h3 id="15-用ChatGPT写跨境电商产品文案"><a href="#15-用ChatGPT写跨境电商产品文案" class="headerlink" title="15. 用ChatGPT写跨境电商产品文案"></a>15. 用ChatGPT写跨境电商产品文案</h3><p>很多电商的产品描述太短无法达到SEO的标准，如果找专业的人血可能花费巨大。</p>
<p>你可以免费使用ChatGPTA来写电商产品描述。</p>
<p>首先，在谷歌中找到排名靠前的几个竞争对手，以及他们关于产品描述的关键词。</p>
<p>然后，给ChatGPT发指令，例如：</p>
<p>Write 300 words product description for Black Panther Mens Costume includes with Jumpsuit muscle padding, Attached gauntlets, Boot tops. Mask.</p>
<p>第三步，我们一直线上的一些AI内容监测工具可以发现你的内容是否是AI产生的。当然你也逃不过谷歌的审核。所以你必须讲这些内容重新润色，或者使用重写工具进行重写。确保AI监测工具检查不出是AI内容即可。</p>
<p>最后，用Grammlarly工具检查语法错误。然后就可以直接使用产品描述内容了。</p>
<h3 id="16-用ChatGPT分析Excel表格中的数据"><a href="#16-用ChatGPT分析Excel表格中的数据" class="headerlink" title="16. 用ChatGPT分析Excel表格中的数据"></a>16. 用ChatGPT分析Excel表格中的数据</h3><p>这个操作比较简单，可以直接把Excel表格中的数据复制到ChatGPT中，并告诉ChatGPT“做一下这些数据的分析，将结果告诉我”。</p>
<p>你便可以很快得到一个数据分析总结。</p>
<h2 id="ChatGPT收费版和免费版对比"><a href="#ChatGPT收费版和免费版对比" class="headerlink" title="ChatGPT收费版和免费版对比"></a>ChatGPT收费版和免费版对比</h2><p>大家知道ChatGPT已经推出了Plus付费版。所以我们需要了解付费和免费版对比有什么区别，以便我们更高效的使用这款工具。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d9eb756792bce665a076e2fab44a98d1.webp?x-oss-process=image/format,png" alt="img"></p>
<ul>
<li>使用效率和回复速度：付费版相应速度略快一点。尤其是免费版会经常有出错情况的出现。而付费版一般不会出现出错的情况。</li>
<li>打开ChatGPT窗口长时间不用的情况下，Plus版本不会出现掉线的问题，可以直接输入问题与ChatGPT对话。而免费版会掉线，你需要重新刷新或登录才可以使用。</li>
<li>Plus版本提供多种模式的选择，一种是标准模式，还有一种是Turbo模式，它是为速度而优化的，所以它的相应速度更快。</li>
<li>当平台负载过得的时候，免费版可能需要排队等候，而付费版可以直接访问。</li>
<li>付费版可以在未来享受更多的新功能。</li>
<li>回答内容质量：两个版本相差不大，只是表达方式略有却别。</li>
</ul>
<p>大家可以根据这些对比，来确定继续使用ChatGPT的免费版还是购买付费版使用。</p>
<h2 id="其他AI工具列表："><a href="#其他AI工具列表：" class="headerlink" title="其他AI工具列表："></a>其他AI工具列表：</h2><h3 id="文本AI工具"><a href="#文本AI工具" class="headerlink" title="文本AI工具"></a>文本AI工具</h3><ul>
<li><a href="https://www.notion.so/product/ai">Notion AI</a>：一款类似ChatGPT的工具，优点是预制了各种提示模板。</li>
<li><a href="https://www.copy.ai/">Copy.ai</a>: 优化拷贝的文章。</li>
<li><a href="https://cowriter.com/">Cowriter</a>：AI作家帮助用户加速写作寻找灵感。</li>
<li><a href="https://outplayhq.com/en-us">Outplay</a>：AI生成销售话术。</li>
<li><a href="https://beta.character.ai/">Character AI</a>:和AI生成的人物聊天对话。</li>
<li><a href="https://writesonic.com/">Writesonic</a>:AI作家</li>
</ul>
<h3 id="AI视频："><a href="#AI视频：" class="headerlink" title="AI视频："></a>AI视频：</h3><ul>
<li><a href="https://runwayml.com/">Runway</a>:提供先进的视频编辑能力</li>
<li><a href="https://dreamfaceapp.com/">DreamFace</a>:AI艺术生成器</li>
<li><a href="https://www.synthesia.io/">Synthesia</a>:根据输入的关键词创建AI视频</li>
<li><a href="https://www.d-id.com/">D-ID</a>:可以生成视频解说数字人。</li>
<li><a href="https://www.getmunch.com/">Munch</a>:AI抓取并剪辑视频</li>
<li><a href="https://fliki.ai/">Fliki</a>：文本转视频的AI工具</li>
<li><a href="https://pollinations.ai/">Pollinations</a>:定制个性化AI视频</li>
</ul>
<h3 id="AI音频："><a href="#AI音频：" class="headerlink" title="AI音频："></a>AI音频：</h3><ul>
<li><a href="https://poly.ai/">PolyAI</a>: AI客服语音助手</li>
<li><a href="https://www.lalal.ai/">LALAL AI</a>: 智能去除BGM, 保留人声。</li>
<li><a href="https://www.papercup.com/">Papercup</a>: AI制作配音。</li>
<li><a href="https://mubert.com/">Mubert</a>: AI自动生成免版权背景音乐</li>
<li><a href="https://murf.ai/">Murf</a>:AI一键变声</li>
</ul>
<h3 id="AI图片："><a href="#AI图片：" class="headerlink" title="AI图片："></a>AI图片：</h3><ul>
<li><a href="https://pebblely.com/">Pebblely</a>:可以帮助快速生成电商产品图片。而且40张免费。</li>
<li><a href="https://convert.leiapix.com/">LeiaPix</a>：可以帮助生成3D动态照片。可免费使用。</li>
<li><a href="https://www.midjourney.com/">Midjourney</a>: 最流行的AI生成图片工具之一。</li>
<li><a href="https://www.artbreeder.com/">Arbreeder</a>: AI头像合成。</li>
<li><a href="https://dreamlike.art/">Dreamlike.</a>art:AI艺术生成器</li>
<li><a href="https://stockimg.ai/">Stockimg.AI</a>:生成图像，海报等设计材料</li>
<li><a href="https://getimg.ai/">Getimg</a>: 用关键词生成图片的AI工具</li>
</ul>
<h2 id="ChatGPT相关资源："><a href="#ChatGPT相关资源：" class="headerlink" title="ChatGPT相关资源："></a>ChatGPT相关资源：</h2><ul>
<li><a href="https://kdocs.cn/l/cawtM5EUz0BT">ChatGPT注册教程</a>: 解决手机无法接收验证码问题（亲测有效）。</li>
<li><a href="https://www.xnbeast.com/how-make-money-with-chatgpt/">如何用ChatGPT赚钱</a>：介绍了通过ChatGPT盈利和变现的16种方法。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>ChatGpt</category>
      </categories>
  </entry>
  <entry>
    <title>Java 毕业设计，基于 SpringBoot+Vue 的网上图书商城管理系统（毕业设计，附源码，教程）</title>
    <url>/p/34944.html</url>
    <content><![CDATA[<blockquote>
<p> <strong>您好，我是<a href="https://blog.junxu666.top/p/57317.html">程序员徐师兄</a>，感谢您阅读本文，欢迎一键三连哦</strong>。<br> 😁 </p>
<p> 1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br> 2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>本次设计任务是要设计一个网上图书商城，通过这个系统能够满足网上图书商城的管理功能。系统的主要功能包括首页、个人中心、用户管理、卖家管理、图书类型管理、图书信息管理、订单管理、系统管理等功能。</p>
<p>管理员可以根据系统给定的账号进行登录，登录后可以进入网上图书商城，对网上图书商城所有模块进行管理。包括查看和修改自己的个人信息以及登录密码。</p>
<p>该系统为每一个用户都分配了一个用户账号，用户通过账号的登录可以在系统中查看网上图书商城信息及对个人信息进行修改等功能。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-11e9.png" alt="image-20230403213416600"></p>
<h1 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2 技术栈"></a>2 技术栈</h1><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7（5.7版本以上即可）</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;myeclipse&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<p>浏览器：谷歌浏览器</p>
<h2 id="3-1系统功能"><a href="#3-1系统功能" class="headerlink" title="3.1系统功能"></a>3.1系统功能</h2><p>通过前面的功能分析可以将网上图书商城的功能分为管理员，卖家和用户三个部分，系统的主要功能包括首页、个人中心、用户管理、卖家管理、图书类型管理、图书信息管理、订单管理、系统管理等内容。任何用户只要进入网站不需登录也可浏览到信息，后台管理是针对已登录的用户而设计的。</p>
<p>1、一般用户的功能及权限</p>
<p>所谓一般用户就是指还没有注册的过客,他们可以浏览主页面上的信息。但如果要进入后台进行信息管理时，要登录注册，只有注册成功才有的权限。</p>
<p>2、管理员的功能及权限</p>
<p>用户信息的添加和管理，网上图书商城详细信息添加和管理和文档信息添加和管理以及网站信息管理，这些都是管理员的功能。</p>
<p>3、系统功能结构图</p>
<p>系统功能结构图是系统设计阶段，系统功能结构图只是这个阶段一个基础，整个系统的架构决定了系统的整体模式，是系统的根据。网上图书商城的整个设计结构如图3-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-44d9.png" alt="image-20230403213654512"></p>
<h1 id="4系统设计"><a href="#4系统设计" class="headerlink" title="4系统设计"></a>4系统设计</h1><h2 id="4-1数据库设计"><a href="#4-1数据库设计" class="headerlink" title="4.1数据库设计"></a>4.1数据库设计</h2><p>信息管理系统的效率和实现的效果完全取决于数据库结构设计的好坏。为了保证数据的完整性，提高数据库存储的效率，那么统一合理地设计数据库结构是必要的。数据库设计一般包括如下几个步骤：</p>
<p>（1）根据用户需求，确定数据库信息进行保存</p>
<p>对用户的需求分析是数据库设计的第一阶段，用户的需求调研，熟悉图书商城的运作流程，系统要求，这些都是以概念模型为基础的。</p>
<p>（2）设计数据的概念模型</p>
<p>概念模型与数据建模用户的观点一致，用于信息世界的建模工具。通过E-R图可以清楚地描述系统涉及到的实体之间的相互关系。</p>
<p>用户注册实体图如图4-1所示：</p>
<p>![image-20230403213125201](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230403213125201.png)</p>
<p>​                               </p>
<p>图书信息实体图如图4-2所示：</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-3f22.png" alt="image-20230403213137516"></p>
<p>（3）数据库逻辑结构分析</p>
<p>数据库概念结构设计后，可以数据库概念转化实际的数据模型，这是一种数据库的逻辑结构，就是将概念结构与支持数据库管理系统的模型相符合。具体的表设计如下所示：</p>
<p>表4-1：图书类型</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>tushuleixing</td>
<td>varchar</td>
<td>200</td>
<td>图书类型</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-2：地址</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>userid</td>
<td>bigint</td>
<td></td>
<td>用户id</td>
<td></td>
<td></td>
</tr>
<tr>
<td>address</td>
<td>varchar</td>
<td>200</td>
<td>地址</td>
<td></td>
<td></td>
</tr>
<tr>
<td>name</td>
<td>varchar</td>
<td>200</td>
<td>收货人</td>
<td></td>
<td></td>
</tr>
<tr>
<td>phone</td>
<td>varchar</td>
<td>200</td>
<td>电话</td>
<td></td>
<td></td>
</tr>
<tr>
<td>isdefault</td>
<td>varchar</td>
<td>200</td>
<td>是否默认地址[是&#x2F;否]</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-3：图书借阅</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>dianpumingcheng</td>
<td>varchar</td>
<td>200</td>
<td>店铺名称</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tushumingcheng</td>
<td>varchar</td>
<td>200</td>
<td>图书名称</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tushuleixing</td>
<td>varchar</td>
<td>200</td>
<td>图书类型</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zhanghao</td>
<td>varchar</td>
<td>200</td>
<td>账号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shuliang</td>
<td>int</td>
<td></td>
<td>数量</td>
<td></td>
<td></td>
</tr>
<tr>
<td>jieyueriqi</td>
<td>date</td>
<td></td>
<td>借阅日期</td>
<td></td>
<td></td>
</tr>
<tr>
<td>guihairiqi</td>
<td>date</td>
<td></td>
<td>归还日期</td>
<td></td>
<td></td>
</tr>
<tr>
<td>jieyueshuoming</td>
<td>varchar</td>
<td>200</td>
<td>借阅说明</td>
<td></td>
<td></td>
</tr>
<tr>
<td>yonghuming</td>
<td>varchar</td>
<td>200</td>
<td>用户名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingming</td>
<td>varchar</td>
<td>200</td>
<td>姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shouji</td>
<td>varchar</td>
<td>200</td>
<td>手机</td>
<td></td>
<td></td>
</tr>
<tr>
<td>sfsh</td>
<td>varchar</td>
<td>200</td>
<td>是否审核</td>
<td></td>
<td>否</td>
</tr>
<tr>
<td>shhf</td>
<td>longtext</td>
<td>4294967295</td>
<td>审核回复</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="5系统详细设计"><a href="#5系统详细设计" class="headerlink" title="5系统详细设计"></a>5系统详细设计</h1><h2 id="5-1系统功能模块"><a href="#5-1系统功能模块" class="headerlink" title="5.1系统功能模块"></a>5.1系统功能模块</h2><p>网上图书商城，在系统首页可以查看首页、图书信息、图书资讯、个人中心、购物车等内容进行详细操作，如图5-1所示。</p>
<p>​                5系统详细设计</p>
<h2 id="5-1系统功能模块-1"><a href="#5-1系统功能模块-1" class="headerlink" title="5.1系统功能模块"></a>5.1系统功能模块</h2><p>网上图书商城，在系统首页可以查看首页、图书信息、图书资讯、个人中心、购物车等内容进行详细操作，如图5-1所示。</p>
<p>​                               <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-7e0b.png" alt="image-20230403213234772"></p>
<p>用户注册，在用户注册页面通过填写用户账号、密码、确认密码、姓名、邮箱、手机号码等信息完成用户注册，如图5-2所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-8869.png" alt="image-20230403213327645"></p>
<p>图书信息，在图书信息页面可以查看图书名称、价格、单次购买、库存、店铺名称、图书编号、图书类型、图片、作者、出版社、账号、买家账号、手机、图示介绍等详细内容，并进行添加到购物车，立即购买，评论，等收藏操作，如图5-3所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-4c43.png" alt="image-20230403213335988"></p>
<p>购物车，在购物车页面可以查看购买商品、价格、数量、总价等信息，还可以进行点击购买和删除操作；如图5-4所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-45cf.png" alt="image-20230403213343561"></p>
<p>个人中心，在个人中心页面通过填写用户名、密码、姓名、性别、上传图片、邮箱、手机、余额等信息进行更新信息，根据需要对我的订单，我的地址，我的收藏进行详细操作，如图5-5所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-7aa8.png" alt="image-20230403213353310"></p>
<h2 id="5-2管理员功能模块"><a href="#5-2管理员功能模块" class="headerlink" title="5.2管理员功能模块"></a>5.2管理员功能模块</h2><p>管理员登录网上图书商城，可以对首页、个人中心、用户管理、卖家管理、图书类型管理、图书信息管理、订单管理、系统管理等功能模块进行相应操作，如图5-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-11e9.png" alt="image-20230403213416600"> </p>
<p>用户管理，在用户管理页面可以对索引、用户名、姓名、性别、头像、邮箱、手机等信息进行详情，修改和删除等操作，如图5-7所示。 </p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-30a0.png" alt="image-20230403213426822"></p>
<p>卖家管理，在卖家管理页面可以对索引、账号、卖家姓名、性别、头像、身份证、手机、邮箱、审核回复、审核状态等内容进行详情，审核，修改和删除等操作，如图5-8所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-61ec.png" alt="image-20230403213435014"></p>
<p>图书类型管理，在图书类型管理页面可以查看索引、图书类型等内容，并进行新增、修改和删除操作，如图5-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-5525.png" alt="image-20230403213444261"></p>
<p>图书信息管理，在图书信息管理页面可以查看索引、店铺名称、图书编号、图书名称、图书类型、图片、作者、出版社、账号、买家姓名、手机、价格、单限、库存等内容，并进行详情，修改，查看评论和删除操作，如图5-10所示。</p>
<p>​               </p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-a4ca.png" alt="image-20230403213457208"></p>
<h1 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h1><p><a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-11e9.png" alt="image-20230403213416600"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031721-19ccfc0.png"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java 毕业设计，基于 SpringBoot+Vue 的会员制医疗预约服务管理信息系统（毕业设计，附源码，教程）</title>
    <url>/p/19940.html</url>
    <content><![CDATA[<blockquote>
<p> <strong>您好，我是<a href="https://blog.junxu666.top/p/57317.html">程序员徐师兄</a>，感谢您阅读本文，欢迎一键三连哦</strong>。<br> 😁 </p>
<p> 1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br> 2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>针对会员制医疗预约服务行业的管理现状，本会员制医疗预约服务管理信息系统主要实现以下几个目标：</p>
<p>  1.系统界面简洁，操作简便。</p>
<p>  2.拥有精准，高效的查询功能。</p>
<p>  3.使管理人员能够及时的获得精确的报表。</p>
<p>  4.对数据内容的管理安全，稳定，易维护。</p>
<p>  5.对信息全面跟踪，方便管理人员进行管理。</p>
<p>  6.提供用户登录和修改密码等服务，加强系统安全。</p>
<p>7.提供用户管理和数据备份，确保信息的安全性和可靠性。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-0094.png" alt="image-20230403211152622"></p>
<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7（5.7版本以上即可）</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;myeclipse&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<p>浏览器：谷歌浏览器</p>
<h1 id="3系统分析"><a href="#3系统分析" class="headerlink" title="3系统分析"></a>3系统分析</h1><h2 id="3-1需求分析"><a href="#3-1需求分析" class="headerlink" title="3.1需求分析"></a>3.1需求分析</h2><p>会员制医疗预约服务管理信息系统的作用，可以提高会员制医疗预约服务管理的工作人员的效率，协助他们对会员制医疗预约服务信息进行统一管理，为管理者提供信息储存和查询搜索系统。一个良好的会员制医疗预约服务管理信息系统可以实现对会员制医疗预约服务的精细化管理：对在线会员制医疗预约服务管理流程的全过程进行电子化操作，其主要作用是管理和控制会员制医疗预约服务所有的信息，分析库存数据，使工作人员对会员制医疗预约服务管理信息系统进行监管，根据系统所提供的相应信息，采取适当的措施，及时补救管理中的漏洞，提高在线会员制医疗预约服务管理的工作效率，使得在线会员制医疗预约服务管理变的更加系统和规范。</p>
<h1 id="4系统总体设计"><a href="#4系统总体设计" class="headerlink" title="4系统总体设计"></a>4系统总体设计</h1><h2 id="4-1系统结构"><a href="#4-1系统结构" class="headerlink" title="4.1系统结构"></a>4.1系统结构</h2><p>会员制医疗预约服务管理信息系统，它是一个由人、电脑及其他组件构成的，一种能够收集、存储、加工、传送信息的系统。该系统可以帮助决策者找出当前急需解决的问题，然后将信息快速的反馈，使管理人员能够以最快的时间知道目前的现状，进行更进一步的计划。</p>
<p>当前MIS系统结构目前存在两种较为流行的结构:C&#x2F;S和B&#x2F;S两种。</p>
<p>C&#x2F;S结构的系统：C&#x2F;S结构就是客户机服务器结构，它可以法派任务到Client端和Server端来进行，充分利用两端硬件环境的优势，来降低系统的通讯的花费。客户端主要作用是处理人机交互，执行客户端应用程序，收集数据以及向服务器发送任务请求。服务器基本作用是执行后台程序，它主要对客户机的请求申请进行反馈，除此之外，它的作用还包括：数据库存储系统的共享管理、通讯管理、文件管理等等。</p>
<p>B&#x2F;S结构的系统：这种网络结构简化了客户端，并把系统功能实现的中心集中到服务器上，在这种模式中，只需要一个浏览器就可以了。这种结构将很多的工作交于WEB服务器，只通过浏览器请求WEB服务，随后根据请求返回信息。</p>
<p>通常在只在企业网内部使用，采用C&#x2F;S。而使用不仅限于内网的情况下使用B&#x2F;S。考虑到本管理系统的一系列需求，所以，该系统开发使用B&#x2F;S结构开发。其主要功能结构如下图所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-b3f5.png" alt="image-20230403212507726"></p>
<h2 id="4-2数据库设计"><a href="#4-2数据库设计" class="headerlink" title="4.2数据库设计"></a>4.2数据库设计</h2><p>数据库设计是指为系统提供最优化的数据库模式，使得应用程序能够有效的存储数据，满足用户的各类需求。</p>
<h3 id="4-2-1-数据库概念结构设计"><a href="#4-2-1-数据库概念结构设计" class="headerlink" title="4.2.1 数据库概念结构设计"></a>4.2.1 数据库概念结构设计</h3><p>概念结构设计是根据用户需求形成的。用最常的E-R方法描述数据模型进行数据库的概念设计，首先设计局部的E-R模式，最后各局部ER模式综合成一个全局模式。然后再把概念模式转换成逻辑模式。将概念设计从设计过程中独立开来，设计复杂程度降低，不受特定DBMS的限制。</p>
<p>1.所有实体和属性的定义如下所示。</p>
<p>医院信息管理实体属性图，如图4-2所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-08d2.png" alt="image-20230403212438613"></p>
<p>药品信息管理实体属性图，如图4-3所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-ac06.png" alt="image-20230403212429334"></p>
<h3 id="4-2-2数据库逻辑结构设计"><a href="#4-2-2数据库逻辑结构设计" class="headerlink" title="4.2.2数据库逻辑结构设计"></a>4.2.2数据库逻辑结构设计</h3><p>根据E-R得出数据库包涵了以下几张数据表来实现了对数据库的存储、调用。以下分别列出数据表的每个字段名、数据类型、主外键及备注。</p>
<p>表4-1：挂号预约</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>yuyuebianhao</td>
<td>varchar</td>
<td>200</td>
<td>预约编号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>gonghao</td>
<td>varchar</td>
<td>200</td>
<td>工号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>yishengxingming</td>
<td>varchar</td>
<td>200</td>
<td>医生姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>yiyuanmingcheng</td>
<td>varchar</td>
<td>200</td>
<td>医院名称</td>
<td></td>
<td></td>
</tr>
<tr>
<td>yiyuandizhi</td>
<td>varchar</td>
<td>200</td>
<td>医院地址</td>
<td></td>
<td></td>
</tr>
<tr>
<td>keshimingcheng</td>
<td>varchar</td>
<td>200</td>
<td>科室名称</td>
<td></td>
<td></td>
</tr>
<tr>
<td>keshidizhi</td>
<td>varchar</td>
<td>200</td>
<td>科室地址</td>
<td></td>
<td></td>
</tr>
<tr>
<td>guahaofei</td>
<td>varchar</td>
<td>200</td>
<td>挂号费</td>
<td></td>
<td></td>
</tr>
<tr>
<td>yuyueriqi</td>
<td>date</td>
<td></td>
<td>预约日期</td>
<td></td>
<td></td>
</tr>
<tr>
<td>yuyuebeizhu</td>
<td>varchar</td>
<td>200</td>
<td>预约备注</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zhanghao</td>
<td>varchar</td>
<td>200</td>
<td>账号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingming</td>
<td>varchar</td>
<td>200</td>
<td>姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shoujihaoma</td>
<td>varchar</td>
<td>200</td>
<td>手机号码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>sfsh</td>
<td>varchar</td>
<td>200</td>
<td>是否审核</td>
<td></td>
<td>否</td>
</tr>
<tr>
<td>shhf</td>
<td>longtext</td>
<td>4294967295</td>
<td>审核回复</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ispay</td>
<td>varchar</td>
<td>200</td>
<td>是否支付</td>
<td></td>
<td>未支付</td>
</tr>
</tbody></table>
<p>表4-2：条形码机</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>mingcheng</td>
<td>varchar</td>
<td>200</td>
<td>名称</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tupian</td>
<td>varchar</td>
<td>200</td>
<td>图片</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zhanghao</td>
<td>varchar</td>
<td>200</td>
<td>账号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingming</td>
<td>varchar</td>
<td>200</td>
<td>姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>beizhu</td>
<td>varchar</td>
<td>200</td>
<td>备注</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-3：使用须知</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>biaoti</td>
<td>varchar</td>
<td>200</td>
<td>标题</td>
<td></td>
<td></td>
</tr>
<tr>
<td>neirong</td>
<td>longtext</td>
<td>4294967295</td>
<td>内容</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="5-系统详细设计"><a href="#5-系统详细设计" class="headerlink" title="5 系统详细设计"></a>5 系统详细设计</h1><h2 id="5-1系统功能模块"><a href="#5-1系统功能模块" class="headerlink" title="5.1系统功能模块"></a>5.1系统功能模块</h2><p>会员制医疗预约服务管理信息系统，在系统首页可以查看首页，医院信息，坐诊信息，核酸检测，疾控通知，健康资讯，就诊引导，个人中心，后台管理等内容，并进行详细操作；如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-b625.png" alt="image-20230403211124005"></p>
<p>医院信息，在医院信息页面可以查看医院名称，医院地址，院长，成立时间，联系电话，医院简介，医院详情等内容，并进行收藏操作，如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-19b8.png" alt="image-20230403211138150"></p>
<p>坐诊信息，在坐诊信息页面可以查看医生姓名，工号，性别，医院名称，医院地址，科室名称，科室地址，挂号费，医生简介等内容，并进行预约，咨询和收藏操作，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-0094.png" alt="image-20230403211152622"></p>
<p>会员注册，在会员注册页面通过填写账号、密码、确认密码、姓名、身份证、手机号码等信息进行会员注册操作，如图5-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-56fb.png" alt="image-20230403211300842"></p>
<p>个人中心，在个人中心页面通过填写账号、密码、姓名、性别、身份证、手机号码、上传图片等内容进行更新信息，并对我的收藏进行操作，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-56fb.png"></p>
<h2 id="5-2管理员功能模块"><a href="#5-2管理员功能模块" class="headerlink" title="5.2管理员功能模块"></a>5.2管理员功能模块</h2><p>管理员登录，管理员进入系统前在登录页面根据要求填写用户名和密码，选择角色等信息，点击登录进行登录操作，如图5-6所示。</p>
<p>![image-20230403211324024](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230403211324024.png)</p>
<p>管理员登录系统后，可以对首页、个人中心、会员管理、医生管理、医院信息管理、科室信息管理、坐诊信息管理、核酸检测管理、挂号预约管理、药品信息管理、诊断信息管理、处方信息管理、住院信息管理、在线咨询管理、咨询回复管理、核酸预约管理、疾控通知管理、健康资讯管理、健康档案管理、系统管理等功能进行相应的操作管理，如图5-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-d755.png" alt="image-20230403211335423"></p>
<p>会员管理，在会员管理页面可以对索引，账号，密码，姓名，性别，身份证，手机号码，相片等内容进行详情，修改和删除等操作，如图5-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-bc34.png" alt="image-20230403211346395"></p>
<p>医生管理，在医生管理页面可以对索引，工号，医生姓名，性别，身份证，手机号码，相片，医院名称，医院地址，科室名称，科室地址等内容进行详情，修改和删除等操作，如图5-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-937f.png" alt="image-20230403211401302"></p>
<h1 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h1><p><a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-0094.png" alt="image-20230403211152622"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031721-19ccfc0.png"></p>
<h1 id="源码下载地址-1"><a href="#源码下载地址-1" class="headerlink" title="源码下载地址"></a>源码下载地址</h1><p><a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304032104-0094.png" alt="image-20230403211152622"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031721-19ccfc0.png"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java 毕业设计，基于Java+SpringBoot+vue的租房网站设计与实现（毕业设计，附源码，教程）</title>
    <url>/p/1902.html</url>
    <content><![CDATA[<h1 id="基于Java-SpringBoot-vue的租房网站设计与实现"><a href="#基于Java-SpringBoot-vue的租房网站设计与实现" class="headerlink" title="基于Java+SpringBoot+vue的租房网站设计与实现"></a>基于Java+SpringBoot+vue的租房网站设计与实现</h1><blockquote>
<p><strong>博主介绍</strong> ：<strong>程序员徐师兄</strong>，大厂 6 年程序员经验，专注于Java技术领域和毕业项目实战</p>
<p>🍅 <strong>文末获取源码联系</strong> 🍅</p>
<p><strong>👇🏻 精彩专栏推荐订阅👇🏻 不然下次找不到哟</strong></p>
<p>1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br>2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<p>[toc]</p>
<hr>
<blockquote>
<h1 id="一、前言介绍"><a href="#一、前言介绍" class="headerlink" title="一、前言介绍"></a>一、前言介绍</h1></blockquote>
<p>在网络高速发展的时代，众多的软件被开发出来，给用户带来了很大的选择余地，而且人们越来越追求更个性的需求。在这种时代背景下，房东只能以用户为导向，所以开发租房网站是必须的。</p>
<p>系统采用了Java技术，将所有业务模块采用以浏览器交互的模式，选择MySQL作为系统的数据库，开发工具选择<br>eclipse来进行系统的设计。对系统进行测试后，改善了程序逻辑和代码。同时确保系统中所有的程序都能正常运行，所有的功能都能操作，并且该系统有很好的操作体验，实现了租房网站。</p>
<blockquote>
<h1 id="二、主要技术"><a href="#二、主要技术" class="headerlink" title="二、主要技术"></a>二、主要技术</h1></blockquote>
<table>
<thead>
<tr>
<th>技术名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>SpringBoot</td>
<td>后端框架</td>
</tr>
<tr>
<td>Vue</td>
<td>前端框架</td>
</tr>
<tr>
<td>MySQL</td>
<td>数据库</td>
</tr>
</tbody></table>
<blockquote>
<h1 id="三、系统设计（部分）"><a href="#三、系统设计（部分）" class="headerlink" title="三、系统设计（部分）"></a>三、系统设计（部分）</h1></blockquote>
<h2 id="3-1、主要功能模块设计"><a href="#3-1、主要功能模块设计" class="headerlink" title="3.1、主要功能模块设计"></a>3.1、主要功能模块设计</h2><p>本系统有管理员；首页、个人中心、用户管理、房屋类型管理、房屋信息管理、预约看房管理、在线签约管理、租赁评价管理、交流论坛、系统管理，用户；首页、个人中心、预约看房管理、在线签约管理、租赁评价管理、我的收藏管理，前台首页；首页、房屋信息、交流论坛、房屋资讯、个人中心、后台管理、在线客服等功能。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-a259.png"></p>
<h2 id="3-2、系统登录设计"><a href="#3-2、系统登录设计" class="headerlink" title="3.2、系统登录设计"></a>3.2、系统登录设计</h2><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-032f.png"></p>
<blockquote>
<h1 id="四、数据库设计（部分）"><a href="#四、数据库设计（部分）" class="headerlink" title="四、数据库设计（部分）"></a>四、数据库设计（部分）</h1></blockquote>
<p>数据库的功能就是对系统中所有的数据进行存储和管理。所有的数据可以在数据库中产时间的进行存储，方便用户的使用。而且所有的数据库中的数据也应该具有一定的共享性，任何的系统可以对一些数据进行使用，同时还应该保持一定的独立性，每一个数据库中的数据都有很强的安全性，可以被很好的存放到数据库，没有进行身份的验证是不能对这些数据进行查看和使用的。数据库的设计需要明确每一个实体之间的联系，系统的E-R图如下图所示：：</p>
<p>管理员实体主要存储管理信息包括用户名、密码、角色。管理员信息属性图如图4-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-6564.png"></p>
<p>在线签约信息实体图如图4-5所示：</p>
<p><img src="https://img-blog.csdnimg.cn/9c9241ea9ce946f4964329c7cef6606b.jpeg"></p>
<blockquote>
<h1 id="五、运行截图"><a href="#五、运行截图" class="headerlink" title="五、运行截图"></a>五、运行截图</h1></blockquote>
<h2 id="5-1、-管理员-登录"><a href="#5-1、-管理员-登录" class="headerlink" title="5.1、 管理员 登录"></a>5.1、 <strong>管理员</strong> <strong>登录</strong></h2><p>管理员输入个人的用户名、密码、角色登录系统，这时候系统的数据库就会在进行查找相关的信息，如果我们输入的用户名、密码、角色不正确，数据库就会提示出错误的信息提示，同时会提示管理员重新输入自己的用户名、密码、角色，直到账号密码输入成功后，会提登录成功的信息。网站管理员登录效果图如图5-1所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-9a08.png"></p>
<p>图5-1管理员登录界面</p>
<h2 id="5-2、管理员功能模块"><a href="#5-2、管理员功能模块" class="headerlink" title="5.2、管理员功能模块"></a><strong>5.2、管理员功能模块</strong></h2><h3 id="5-2-1、用户管理"><a href="#5-2-1、用户管理" class="headerlink" title="5.2.1、用户管理"></a>5.2.1、用户管理</h3><p>管理员对用户管理进行详情、删除、修改操作。程序成效图如下图5-2所示:</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-3987.png"></p>
<h3 id="5-2-2、房屋类型管理"><a href="#5-2-2、房屋类型管理" class="headerlink" title="5.2.2、房屋类型管理"></a>5.2.2、房屋类型管理</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-95ef.png"></p>
<p>图5-3房屋类型管理界面</p>
<h3 id="5-2-3、房屋信息管理"><a href="#5-2-3、房屋信息管理" class="headerlink" title="5.2.3、房屋信息管理"></a>5.2.3、房屋信息管理</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-5f47.png"></p>
<p>图5-4房屋信息管理界面</p>
<h3 id="5-2-4、房屋资讯"><a href="#5-2-4、房屋资讯" class="headerlink" title="5.2.4、房屋资讯"></a>5.2.4、房屋资讯</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-835f.png"></p>
<p>图5-5房屋资讯界面</p>
<h3 id="5-2-5预约看房管理"><a href="#5-2-5预约看房管理" class="headerlink" title="5.2.5预约看房管理"></a>5.2.5预约看房管理</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-7c31.png"></p>
<p>图5-6预约看房管理界面</p>
<h3 id="5-2-6在线签约管理"><a href="#5-2-6在线签约管理" class="headerlink" title="5.2.6在线签约管理"></a>5.2.6在线签约管理</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-5427.png"></p>
<p>图5-7在线签约管理界面</p>
<h3 id="5-2-7交流论坛"><a href="#5-2-7交流论坛" class="headerlink" title="5.2.7交流论坛"></a>5.2.7交流论坛</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-3913.png"></p>
<p>图5-8交流论坛界面</p>
<h2 id="5-3、-用户-功能模块"><a href="#5-3、-用户-功能模块" class="headerlink" title="5.3、 用户 功能模块"></a><strong>5.3、</strong> <strong>用户</strong> <strong>功能模块</strong></h2><p>用户进入系统可以对首页、个人中心、预约看房管理、在线签约管理、租赁评价管理、我的收藏管理进行相对应操作。程序成效图如下图5-9所示:</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-1436.png"></p>
<h3 id="5-3-预约看房管理"><a href="#5-3-预约看房管理" class="headerlink" title="5.3.预约看房管理"></a>5.3.预约看房管理</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-cf6c.png"></p>
<p>图5-10预约看房管理界面</p>
<h3 id="5-3-2在线签约管理"><a href="#5-3-2在线签约管理" class="headerlink" title="5.3.2在线签约管理"></a>5.3.2在线签约管理</h3><p><img src="https://img-blog.csdnimg.cn/8d0510d400994fbdbd0e6b4b3f90d4ed.png"></p>
<p>图5-11在线签约管理界面</p>
<h3 id="5-3-2租赁评价管理"><a href="#5-3-2租赁评价管理" class="headerlink" title="5.3.2租赁评价管理"></a>5.3.2租赁评价管理</h3><p><img src="https://img-blog.csdnimg.cn/a7aa25496e8148c8b8a3ac94dbafc644.png"></p>
<p>图5-12租赁评价管理界面</p>
<h2 id="5-4、前台首页功能模块"><a href="#5-4、前台首页功能模块" class="headerlink" title="5.4、前台首页功能模块"></a>5.4、前台首页功能模块</h2><p>租房网站，在租房网站可以查看首页、房屋信息、交流论坛、房屋资讯、个人中心、后台管理、在线客服等内容，如图5-13所示。</p>
<p><img src="https://img-blog.csdnimg.cn/0c047f4101a2409593a561c6e7f74699.png"></p>
<h3 id="5-4-1、用户登录、用户注册"><a href="#5-4-1、用户登录、用户注册" class="headerlink" title="5.4.1、用户登录、用户注册"></a>5.4.1、用户登录、用户注册</h3><p><img src="https://img-blog.csdnimg.cn/d396c26771b149b7bd2b8cf3942f37b2.png"></p>
<p><img src="https://img-blog.csdnimg.cn/e970254317e743a9b3f8124d518cb435.png"></p>
<h3 id="5-4-2、个人中心"><a href="#5-4-2、个人中心" class="headerlink" title="5.4.2、个人中心"></a>5.4.2、个人中心</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-2527.png"></p>
<h3 id="5-4-3、预约看房"><a href="#5-4-3、预约看房" class="headerlink" title="5.4.3、预约看房"></a>5.4.3、预约看房</h3><p><img src="https://img-blog.csdnimg.cn/d7849d92ef264197ab93130a3d393e6b.png"></p>
<blockquote>
<h1 id="七、代码参考"><a href="#七、代码参考" class="headerlink" title="七、代码参考"></a>七、代码参考</h1></blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.controller;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Calendar;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">import com.utils.ValidatorUtils;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import com.baomidou.mybatisplus.mapper.EntityWrapper;</span><br><span class="line">import com.baomidou.mybatisplus.mapper.Wrapper;</span><br><span class="line">import com.annotation.IgnoreAuth;</span><br><span class="line"></span><br><span class="line">import com.entity.ChatEntity;</span><br><span class="line">import com.entity.view.ChatView;</span><br><span class="line"></span><br><span class="line">import com.service.ChatService;</span><br><span class="line">import com.service.TokenService;</span><br><span class="line">import com.utils.PageUtils;</span><br><span class="line">import com.utils.R;</span><br><span class="line">import com.utils.MD5Util;</span><br><span class="line">import com.utils.MPUtil;</span><br><span class="line">import com.utils.CommonUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 在线客服</span><br><span class="line"> * 后端接口</span><br><span class="line"> * @author </span><br><span class="line"> * @email </span><br><span class="line"> * @date 2021-03-11 14:12:56</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/chat&quot;)</span><br><span class="line">public class ChatController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ChatService chatService;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 后端列表</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/page&quot;)</span><br><span class="line">    public R page(@RequestParam Map&lt;String, Object&gt; params,ChatEntity chat,</span><br><span class="line">		HttpServletRequest request)&#123;</span><br><span class="line">    	if(!request.getSession().getAttribute(&quot;role&quot;).toString().equals(&quot;管理员&quot;)) &#123;</span><br><span class="line">    		chat.setUserid((Long)request.getSession().getAttribute(&quot;userId&quot;));</span><br><span class="line">    	&#125;</span><br><span class="line">        EntityWrapper&lt;ChatEntity&gt; ew = new EntityWrapper&lt;ChatEntity&gt;();</span><br><span class="line">		PageUtils page = chatService.queryPage(params, MPUtil.sort(MPUtil.between(MPUtil.likeOrEq(ew, chat), params), params));</span><br><span class="line"></span><br><span class="line">        return R.ok().put(&quot;data&quot;, page);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 前端列表</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/list&quot;)</span><br><span class="line">    public R list(@RequestParam Map&lt;String, Object&gt; params,ChatEntity chat, HttpServletRequest request)&#123;</span><br><span class="line">    	if(!request.getSession().getAttribute(&quot;role&quot;).toString().equals(&quot;管理员&quot;)) &#123;</span><br><span class="line">    		chat.setUserid((Long)request.getSession().getAttribute(&quot;userId&quot;));</span><br><span class="line">    	&#125;</span><br><span class="line">        EntityWrapper&lt;ChatEntity&gt; ew = new EntityWrapper&lt;ChatEntity&gt;();</span><br><span class="line">		PageUtils page = chatService.queryPage(params, MPUtil.sort(MPUtil.between(MPUtil.likeOrEq(ew, chat), params), params));</span><br><span class="line">        return R.ok().put(&quot;data&quot;, page);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">     * 列表</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/lists&quot;)</span><br><span class="line">    public R list( ChatEntity chat)&#123;</span><br><span class="line">       	EntityWrapper&lt;ChatEntity&gt; ew = new EntityWrapper&lt;ChatEntity&gt;();</span><br><span class="line">      	ew.allEq(MPUtil.allEQMapPre( chat, &quot;chat&quot;)); </span><br><span class="line">        return R.ok().put(&quot;data&quot;, chatService.selectListView(ew));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	 /**</span><br><span class="line">     * 查询</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/query&quot;)</span><br><span class="line">    public R query(ChatEntity chat)&#123;</span><br><span class="line">        EntityWrapper&lt; ChatEntity&gt; ew = new EntityWrapper&lt; ChatEntity&gt;();</span><br><span class="line"> 		ew.allEq(MPUtil.allEQMapPre( chat, &quot;chat&quot;)); </span><br><span class="line">		ChatView chatView =  chatService.selectView(ew);</span><br><span class="line">		return R.ok(&quot;查询在线客服成功&quot;).put(&quot;data&quot;, chatView);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    /**</span><br><span class="line">     * 后端详情</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/info/&#123;id&#125;&quot;)</span><br><span class="line">    public R info(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">        ChatEntity chat = chatService.selectById(id);</span><br><span class="line">        return R.ok().put(&quot;data&quot;, chat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 前端详情</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/detail/&#123;id&#125;&quot;)</span><br><span class="line">    public R detail(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">        ChatEntity chat = chatService.selectById(id);</span><br><span class="line">        return R.ok().put(&quot;data&quot;, chat);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 后端保存</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/save&quot;)</span><br><span class="line">    public R save(@RequestBody ChatEntity chat, HttpServletRequest request)&#123;</span><br><span class="line">    	chat.setId(new Date().getTime()+new Double(Math.floor(Math.random()*1000)).longValue());</span><br><span class="line">    	//ValidatorUtils.validateEntity(chat);</span><br><span class="line">    	if(StringUtils.isNotBlank(chat.getAsk())) &#123;</span><br><span class="line">			chatService.updateForSet(&quot;isreply=0&quot;, new EntityWrapper&lt;ChatEntity&gt;().eq(&quot;userid&quot;, request.getSession().getAttribute(&quot;userId&quot;)));</span><br><span class="line">    		chat.setUserid((Long)request.getSession().getAttribute(&quot;userId&quot;));</span><br><span class="line">    		chat.setIsreply(1);</span><br><span class="line">    	&#125;</span><br><span class="line">    	if(StringUtils.isNotBlank(chat.getReply())) &#123;</span><br><span class="line">    		chatService.updateForSet(&quot;isreply=0&quot;, new EntityWrapper&lt;ChatEntity&gt;().eq(&quot;userid&quot;, chat.getUserid()));</span><br><span class="line">    		chat.setAdminid((Long)request.getSession().getAttribute(&quot;userId&quot;));</span><br><span class="line">    	&#125;</span><br><span class="line">        chatService.insert(chat);</span><br><span class="line">        return R.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 前端保存</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/add&quot;)</span><br><span class="line">    public R add(@RequestBody ChatEntity chat, HttpServletRequest request)&#123;</span><br><span class="line">    	chat.setId(new Date().getTime()+new Double(Math.floor(Math.random()*1000)).longValue());</span><br><span class="line">    	//ValidatorUtils.validateEntity(chat);</span><br><span class="line">    	chat.setUserid((Long)request.getSession().getAttribute(&quot;userId&quot;));</span><br><span class="line">    	if(StringUtils.isNotBlank(chat.getAsk())) &#123;</span><br><span class="line">			chatService.updateForSet(&quot;isreply=0&quot;, new EntityWrapper&lt;ChatEntity&gt;().eq(&quot;userid&quot;, request.getSession().getAttribute(&quot;userId&quot;)));</span><br><span class="line">    		chat.setUserid((Long)request.getSession().getAttribute(&quot;userId&quot;));</span><br><span class="line">    		chat.setIsreply(1);</span><br><span class="line">    	&#125;</span><br><span class="line">    	if(StringUtils.isNotBlank(chat.getReply())) &#123;</span><br><span class="line">    		chatService.updateForSet(&quot;isreply=0&quot;, new EntityWrapper&lt;ChatEntity&gt;().eq(&quot;userid&quot;, chat.getUserid()));</span><br><span class="line">    		chat.setAdminid((Long)request.getSession().getAttribute(&quot;userId&quot;));</span><br><span class="line">    	&#125;</span><br><span class="line">        chatService.insert(chat);</span><br><span class="line">        return R.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/update&quot;)</span><br><span class="line">    public R update(@RequestBody ChatEntity chat, HttpServletRequest request)&#123;</span><br><span class="line">        //ValidatorUtils.validateEntity(chat);</span><br><span class="line">        chatService.updateById(chat);//全部更新</span><br><span class="line">        return R.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/delete&quot;)</span><br><span class="line">    public R delete(@RequestBody Long[] ids)&#123;</span><br><span class="line">        chatService.deleteBatchIds(Arrays.asList(ids));</span><br><span class="line">        return R.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 提醒接口</span><br><span class="line">     */</span><br><span class="line">	@RequestMapping(&quot;/remind/&#123;columnName&#125;/&#123;type&#125;&quot;)</span><br><span class="line">	public R remindCount(@PathVariable(&quot;columnName&quot;) String columnName, HttpServletRequest request, </span><br><span class="line">						 @PathVariable(&quot;type&quot;) String type,@RequestParam Map&lt;String, Object&gt; map) &#123;</span><br><span class="line">		map.put(&quot;column&quot;, columnName);</span><br><span class="line">		map.put(&quot;type&quot;, type);</span><br><span class="line">		</span><br><span class="line">		if(type.equals(&quot;2&quot;)) &#123;</span><br><span class="line">			SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">			Calendar c = Calendar.getInstance();</span><br><span class="line">			Date remindStartDate = null;</span><br><span class="line">			Date remindEndDate = null;</span><br><span class="line">			if(map.get(&quot;remindstart&quot;)!=null) &#123;</span><br><span class="line">				Integer remindStart = Integer.parseInt(map.get(&quot;remindstart&quot;).toString());</span><br><span class="line">				c.setTime(new Date()); </span><br><span class="line">				c.add(Calendar.DAY_OF_MONTH,remindStart);</span><br><span class="line">				remindStartDate = c.getTime();</span><br><span class="line">				map.put(&quot;remindstart&quot;, sdf.format(remindStartDate));</span><br><span class="line">			&#125;</span><br><span class="line">			if(map.get(&quot;remindend&quot;)!=null) &#123;</span><br><span class="line">				Integer remindEnd = Integer.parseInt(map.get(&quot;remindend&quot;).toString());</span><br><span class="line">				c.setTime(new Date());</span><br><span class="line">				c.add(Calendar.DAY_OF_MONTH,remindEnd);</span><br><span class="line">				remindEndDate = c.getTime();</span><br><span class="line">				map.put(&quot;remindend&quot;, sdf.format(remindEndDate));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		Wrapper&lt;ChatEntity&gt; wrapper = new EntityWrapper&lt;ChatEntity&gt;();</span><br><span class="line">		if(map.get(&quot;remindstart&quot;)!=null) &#123;</span><br><span class="line">			wrapper.ge(columnName, map.get(&quot;remindstart&quot;));</span><br><span class="line">		&#125;</span><br><span class="line">		if(map.get(&quot;remindend&quot;)!=null) &#123;</span><br><span class="line">			wrapper.le(columnName, map.get(&quot;remindend&quot;));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		int count = chatService.selectCount(wrapper);</span><br><span class="line">		return R.ok().put(&quot;count&quot;, count);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<p>​        </p>
<blockquote>
<h1 id="八、源码获取"><a href="#八、源码获取" class="headerlink" title="八、源码获取"></a>八、源码获取</h1><p>大家 <strong>点赞、收藏、关注、评论</strong> 啦 、 <strong>查看文章结尾</strong> 👇🏻 <strong>获取联系方式</strong> 👇🏻</p>
<p><strong>精彩专栏推荐订阅：</strong> 在 <strong>下方专栏</strong> 👇🏻👇🏻👇🏻👇🏻</p>
<p><a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
</blockquote>
<p>私信我即可打包获取200多个项目源码+论文+演示视频~</p>
<p><img src="https://img-blog.csdnimg.cn/184bf013586d4a818988a7ff2717fcb8.png"></p>
<p><img src="https://img-blog.csdnimg.cn/d3518ccf233a4cccaccbd7c02e41d23f.png"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>300 套 SpringBoot+Vue 毕业设计题目推荐，附源码和教程，保证可用</title>
    <url>/p/41316.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><a href="https://blog.csdn.net/JasonXu94/article/details/130177195?spm=1001.2014.3001.5501">npm，yarn使用，npm ,yarn 更换使用国内镜像源</a></p>
<p><a href="https://blog.csdn.net/JasonXu94/article/details/130123572?spm=1001.2014.3001.5501">idea运行SSM项目及启动（tomcat），详细图解</a></p>
<p><a href="https://blog.csdn.net/JasonXu94/article/details/130123375?spm=1001.2014.3001.5501">SSM 框架原理简介及解析</a></p>
<p><a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
<p>大家好，我是程序员徐师兄，六年大厂经验，最近，有部分小伙伴问我，快毕业了，毕业设计有什么选题推荐吗？</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-42bb.png" alt="在这里插入图片描述"></p>
<p>其实，计算机专业的毕业设计有许多课题可以选择，假如你想要获得比较好的分数成绩的话，或者是想要新颖一点，那就需要重点的学习和参考一下各种新的开发技术，如目前的spring boot mysql ssm框架等，安卓，小程序方面。</p>
<p>虽然对本科生的毕业设计没有明确的创新要求，但如果能将新技术与行业相结合，将会在毕业设计的过程中获得更多的收获。</p>
<p>目前，大数据的技术体系已经成熟，在毕业设计的过程中，可以专注于网站，系统，小程序，安卓方面的相关的主题。网站，系统，小程序，安卓的工业应用场景很多。例如，网站，系统，小程序，安卓等诸多领域有大量的整合点，也有很多成熟的案例可以参与。也比较容易答辩。</p>
<p>更多的选题也可以参考下面为大家准备的，都有源码+数据库，详情<strong>可以加 v xiaoxu_9411 了解</strong></p>
<h2 id="SpringBoot-Vue-毕业设计题目推荐"><a href="#SpringBoot-Vue-毕业设计题目推荐" class="headerlink" title="SpringBoot+ Vue 毕业设计题目推荐"></a>SpringBoot+ Vue 毕业设计题目推荐</h2><table>
<thead>
<tr>
<th>题目</th>
<th>技术栈</th>
</tr>
</thead>
<tbody><tr>
<td>基于 SpringBoot+Vue 的医院急诊系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的社区维修平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园新闻网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的职称评审管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的在线动漫信息平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的心灵治愈交流平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的论坛管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的闲一品</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的线上教学平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的实验室管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的教师人事档案管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的租房网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的大学生社团活动平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的垃圾分类网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园闲置物品租售系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的在线BLOG网</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的家具销售电商平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的简历系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的汉服推广网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的准妈妈孕期交流平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的点餐平台网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的医疗服务系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园博客系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的商务安全邮箱邮件收发</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的springcloud房产销售平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的人职匹配推荐系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的Springboot的小区物业管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的旅游管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的口腔管家平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的汽车租赁系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的民宿管理平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的滴答拍摄影项目</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的酒店管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的汽车租赁系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的体质测试数据分析及可视化设计</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的家具网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的交流互动系统(1)</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的某银行OA系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的自习室预订系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的疫情网课管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的考研资讯平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的旅游管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的音乐翻唱与分享平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的旧物置换网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的影城管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的外卖点餐系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的餐厅点餐系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的新生宿舍管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园疫情防控系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的幼儿园管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的火车订票管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的毕业生信息招聘平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的二手交易平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园闲置物品交易网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的网上商城购物系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的学生毕业离校系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的在线答疑系统文件</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
</tbody></table>
<h2 id="项目效果图"><a href="#项目效果图" class="headerlink" title="项目效果图"></a>项目效果图</h2><h3 id="校园交友"><a href="#校园交友" class="headerlink" title="校园交友"></a>校园交友</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-f99f.png" alt="img"></p>
<h3 id="幼儿园管理系统"><a href="#幼儿园管理系统" class="headerlink" title="幼儿园管理系统"></a>幼儿园管理系统</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-6e46.png" alt="image-20230415153854963"></p>
<h3 id="酒店管理系统"><a href="#酒店管理系统" class="headerlink" title="酒店管理系统"></a>酒店管理系统</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304170004-c6bd.png" alt="image-20230415153936468"></p>
<h3 id="智慧外贸平台"><a href="#智慧外贸平台" class="headerlink" title="智慧外贸平台"></a>智慧外贸平台</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-2537.png" alt="image-20230415154111089"></p>
<h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><blockquote>
<p> 1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">200 套 Java 精品项目</a><br> 2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 200 套  精品项目</a></p>
<p> 3.<a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
</blockquote>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303232303-0f02.png" alt="img"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>【毕业设计】基于 Java+ SpringBoot+Vue 的藏区特产销售系统【源码(完整源码请私聊)+论文+包运行成功】</title>
    <url>/p/13785.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><blockquote>
<p>大家好，我是程序员徐师兄，六年大厂经验, 今天为大家带来的事基于 Java+ SpringBoot+Vue 的藏区特产销售系统，<strong>源码获取方式见文章底部</strong></p>
</blockquote>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>本次设计任务是要设计一个藏区特产销售平台，通过这个系统能够满足藏区特产销售管理的管理功能。系统的主要包括首页、个人中心、用户管理、特产信息管理、特产分类管理、特产分类管理、特产评分管理、系统管理、订单管理等功能。</p>
<p>管理员可以根据系统给定的账号进行登录，登录后可以进入藏区特产销售平台对所有模块进行管理。包括查看和修改自己的个人信息以及登录密码。</p>
<p>该系统为每一个用户都分配了一个用户账号，用户通过账号的登录可以在系统中查看藏区特产销售管理信息及对个人信息进行修改等功能。</p>
<p>![image-20230416232719387](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230416232719387.png)</p>
<h1 id="2-主要技术"><a href="#2-主要技术" class="headerlink" title="2.主要技术"></a>2.主要技术</h1><table>
<thead>
<tr>
<th>技术名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Springboot</td>
<td>后端框架</td>
</tr>
<tr>
<td>Vue</td>
<td>前端框架</td>
</tr>
<tr>
<td>MySQL</td>
<td>数据库</td>
</tr>
</tbody></table>
<h1 id="3-功能分析"><a href="#3-功能分析" class="headerlink" title="3 功能分析"></a>3 功能分析</h1><p>考虑到实际生活中在藏区特产销售管理方面的需要以及对该系统认真的分析，将系统权限按管理员和用户这两类涉及用户划分。</p>
<p>（1）管理员功能需求</p>
<p>管理员登陆后，主要模块包括首页、个人中心、用户管理、特产信息管理、特产分类管理、特产分类管理、特产评分管理、系统管理、订单管理等功能。管理员用例图如图3-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-b9f2.png" alt="image-20230416232255981"></p>
<p>（2）用户功能需求</p>
<p>用户登陆后，主要模块包括首页、特产信息、特产资讯、个人中心、购物车、在线客服等功能。用户用例图如图3-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-a91e.png" alt="image-20230416232246467"></p>
<h1 id="4-系统分析"><a href="#4-系统分析" class="headerlink" title="4 系统分析"></a>4 系统分析</h1><p>系统设计是把本系统的各项功能需求进行细化，而转换为软件系统表示的一个设计过程，在对目标系统的研究分析之后，做出整个系统平台的总体规划，进而对用例中各个对象进一步地合理精细设计。为降低整个系统的复杂度，而使其更加便于修改，提高代码的可读性，我们会将系统模块化，模块间保持相对独立，且每个模块只完成一个子功能，并且与其他模块通过简单的接口链接，即高内聚低耦合原则，而使整个系统能够拥有一个高性能的结构，这边是系统概要设计最重要的目的。在之前的需求分析的基础上，本藏区特产销售平台结构，如下图4-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-4f8c.png" alt="image-20230416232330164"></p>
<h1 id="5系统实现"><a href="#5系统实现" class="headerlink" title="5系统实现"></a>5系统实现</h1><h2 id="5-1系统功能模块"><a href="#5-1系统功能模块" class="headerlink" title="5.1系统功能模块"></a>5.1系统功能模块</h2><p>进入藏区特产销售平台页面中可以查看首页、特产信息、特产资讯、个人中心、购物车、在线客服等内容，进行详细的操作，如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-160c.png" alt="image-20230416231950913"></p>
<p>图5-1系统首页界面图</p>
<p>特产信息，在特产信息页面中可以查看特产名称、价格、单次购买、库存、特产类型、规格、点击次数等内容进行购买、评论或收藏等操作如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-bb0f.png" alt="image-20230416232000956"></p>
<p>图5-2特产信息界面图</p>
<p>个人中心，在个人中心页面中通过填写账号、密码、姓名、性别、手机、图片、余额等内容进行更新信息等操作，并可以根据我的订单、我的地址或我的收藏进行相应的操作，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-ed9c.png" alt="image-20230416232022365"></p>
<p>图5-3个人中心界面图</p>
<p>购物车，在购物车页面中可以查看购买商品、价格、 数量、总价等内容，进行删除或购买等操作，如图5-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-99d5.png" alt="image-20230416232052434"></p>
<p>图5-4购物车界面图</p>
<p>用户注册，在用户注册页面中通过填写账号、密码、确认密码、姓名、手机等内容进行注册等操作，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-3db1.png" alt="image-20230416232037294"></p>
<h1 id="六、代码参考"><a href="#六、代码参考" class="headerlink" title="六、代码参考"></a>六、代码参考</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.controller;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Calendar;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">import com.utils.ValidatorUtils;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import com.baomidou.mybatisplus.mapper.EntityWrapper;</span><br><span class="line">import com.baomidou.mybatisplus.mapper.Wrapper;</span><br><span class="line">import com.annotation.IgnoreAuth;</span><br><span class="line"></span><br><span class="line">import com.entity.BanjixinxiEntity;</span><br><span class="line">import com.entity.view.BanjixinxiView;</span><br><span class="line"></span><br><span class="line">import com.service.BanjixinxiService;</span><br><span class="line">import com.service.TokenService;</span><br><span class="line">import com.utils.PageUtils;</span><br><span class="line">import com.utils.R;</span><br><span class="line">import com.utils.MD5Util;</span><br><span class="line">import com.utils.MPUtil;</span><br><span class="line">import com.utils.CommonUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 班级信息</span><br><span class="line"> * 后端接口</span><br><span class="line"> * @author </span><br><span class="line"> * @email </span><br><span class="line"> * @date 2021-03-18 15:04:00</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/banjixinxi&quot;)</span><br><span class="line">public class BanjixinxiController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private BanjixinxiService banjixinxiService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 后端列表</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/page&quot;)</span><br><span class="line">    public R page(@RequestParam Map&lt;String, Object&gt; params,BanjixinxiEntity banjixinxi,</span><br><span class="line">		HttpServletRequest request)&#123;</span><br><span class="line">		String tableName = request.getSession().getAttribute(&quot;tableName&quot;).toString();</span><br><span class="line">		if(tableName.equals(&quot;jiaoshi&quot;)) &#123;</span><br><span class="line">			banjixinxi.setGonghao((String)request.getSession().getAttribute(&quot;username&quot;));</span><br><span class="line">		&#125;</span><br><span class="line">        EntityWrapper&lt;BanjixinxiEntity&gt; ew = new EntityWrapper&lt;BanjixinxiEntity&gt;();</span><br><span class="line">		PageUtils page = banjixinxiService.queryPage(params, MPUtil.sort(MPUtil.between(MPUtil.likeOrEq(ew, banjixinxi), params), params));</span><br><span class="line"></span><br><span class="line">        return R.ok().put(&quot;data&quot;, page);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 前端列表</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/list&quot;)</span><br><span class="line">    public R list(@RequestParam Map&lt;String, Object&gt; params,BanjixinxiEntity banjixinxi, HttpServletRequest request)&#123;</span><br><span class="line">        EntityWrapper&lt;BanjixinxiEntity&gt; ew = new EntityWrapper&lt;BanjixinxiEntity&gt;();</span><br><span class="line">		PageUtils page = banjixinxiService.queryPage(params, MPUtil.sort(MPUtil.between(MPUtil.likeOrEq(ew, banjixinxi), params), params));</span><br><span class="line">        return R.ok().put(&quot;data&quot;, page);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">     * 列表</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/lists&quot;)</span><br><span class="line">    public R list( BanjixinxiEntity banjixinxi)&#123;</span><br><span class="line">       	EntityWrapper&lt;BanjixinxiEntity&gt; ew = new EntityWrapper&lt;BanjixinxiEntity&gt;();</span><br><span class="line">      	ew.allEq(MPUtil.allEQMapPre( banjixinxi, &quot;banjixinxi&quot;)); </span><br><span class="line">        return R.ok().put(&quot;data&quot;, banjixinxiService.selectListView(ew));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	 /**</span><br><span class="line">     * 查询</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/query&quot;)</span><br><span class="line">    public R query(BanjixinxiEntity banjixinxi)&#123;</span><br><span class="line">        EntityWrapper&lt; BanjixinxiEntity&gt; ew = new EntityWrapper&lt; BanjixinxiEntity&gt;();</span><br><span class="line"> 		ew.allEq(MPUtil.allEQMapPre( banjixinxi, &quot;banjixinxi&quot;)); </span><br><span class="line">		BanjixinxiView banjixinxiView =  banjixinxiService.selectView(ew);</span><br><span class="line">		return R.ok(&quot;查询班级信息成功&quot;).put(&quot;data&quot;, banjixinxiView);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    /**</span><br><span class="line">     * 后端详情</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/info/&#123;id&#125;&quot;)</span><br><span class="line">    public R info(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">        BanjixinxiEntity banjixinxi = banjixinxiService.selectById(id);</span><br><span class="line">        return R.ok().put(&quot;data&quot;, banjixinxi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 前端详情</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/detail/&#123;id&#125;&quot;)</span><br><span class="line">    public R detail(@PathVariable(&quot;id&quot;) Long id)&#123;</span><br><span class="line">        BanjixinxiEntity banjixinxi = banjixinxiService.selectById(id);</span><br><span class="line">        return R.ok().put(&quot;data&quot;, banjixinxi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 后端保存</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/save&quot;)</span><br><span class="line">    public R save(@RequestBody BanjixinxiEntity banjixinxi, HttpServletRequest request)&#123;</span><br><span class="line">    	banjixinxi.setId(new Date().getTime()+new Double(Math.floor(Math.random()*1000)).longValue());</span><br><span class="line">    	//ValidatorUtils.validateEntity(banjixinxi);</span><br><span class="line">        banjixinxiService.insert(banjixinxi);</span><br><span class="line">        return R.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 前端保存</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/add&quot;)</span><br><span class="line">    public R add(@RequestBody BanjixinxiEntity banjixinxi, HttpServletRequest request)&#123;</span><br><span class="line">    	banjixinxi.setId(new Date().getTime()+new Double(Math.floor(Math.random()*1000)).longValue());</span><br><span class="line">    	//ValidatorUtils.validateEntity(banjixinxi);</span><br><span class="line">        banjixinxiService.insert(banjixinxi);</span><br><span class="line">        return R.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/update&quot;)</span><br><span class="line">    public R update(@RequestBody BanjixinxiEntity banjixinxi, HttpServletRequest request)&#123;</span><br><span class="line">        //ValidatorUtils.validateEntity(banjixinxi);</span><br><span class="line">        banjixinxiService.updateById(banjixinxi);//全部更新</span><br><span class="line">        return R.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/delete&quot;)</span><br><span class="line">    public R delete(@RequestBody Long[] ids)&#123;</span><br><span class="line">        banjixinxiService.deleteBatchIds(Arrays.asList(ids));</span><br><span class="line">        return R.ok();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 提醒接口</span><br><span class="line">     */</span><br><span class="line">	@RequestMapping(&quot;/remind/&#123;columnName&#125;/&#123;type&#125;&quot;)</span><br><span class="line">	public R remindCount(@PathVariable(&quot;columnName&quot;) String columnName, HttpServletRequest request, </span><br><span class="line">						 @PathVariable(&quot;type&quot;) String type,@RequestParam Map&lt;String, Object&gt; map) &#123;</span><br><span class="line">		map.put(&quot;column&quot;, columnName);</span><br><span class="line">		map.put(&quot;type&quot;, type);</span><br><span class="line">		</span><br><span class="line">		if(type.equals(&quot;2&quot;)) &#123;</span><br><span class="line">			SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">			Calendar c = Calendar.getInstance();</span><br><span class="line">			Date remindStartDate = null;</span><br><span class="line">			Date remindEndDate = null;</span><br><span class="line">			if(map.get(&quot;remindstart&quot;)!=null) &#123;</span><br><span class="line">				Integer remindStart = Integer.parseInt(map.get(&quot;remindstart&quot;).toString());</span><br><span class="line">				c.setTime(new Date()); </span><br><span class="line">				c.add(Calendar.DAY_OF_MONTH,remindStart);</span><br><span class="line">				remindStartDate = c.getTime();</span><br><span class="line">				map.put(&quot;remindstart&quot;, sdf.format(remindStartDate));</span><br><span class="line">			&#125;</span><br><span class="line">			if(map.get(&quot;remindend&quot;)!=null) &#123;</span><br><span class="line">				Integer remindEnd = Integer.parseInt(map.get(&quot;remindend&quot;).toString());</span><br><span class="line">				c.setTime(new Date());</span><br><span class="line">				c.add(Calendar.DAY_OF_MONTH,remindEnd);</span><br><span class="line">				remindEndDate = c.getTime();</span><br><span class="line">				map.put(&quot;remindend&quot;, sdf.format(remindEndDate));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		Wrapper&lt;BanjixinxiEntity&gt; wrapper = new EntityWrapper&lt;BanjixinxiEntity&gt;();</span><br><span class="line">		if(map.get(&quot;remindstart&quot;)!=null) &#123;</span><br><span class="line">			wrapper.ge(columnName, map.get(&quot;remindstart&quot;));</span><br><span class="line">		&#125;</span><br><span class="line">		if(map.get(&quot;remindend&quot;)!=null) &#123;</span><br><span class="line">			wrapper.le(columnName, map.get(&quot;remindend&quot;));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		String tableName = request.getSession().getAttribute(&quot;tableName&quot;).toString();</span><br><span class="line">		if(tableName.equals(&quot;jiaoshi&quot;)) &#123;</span><br><span class="line">			wrapper.eq(&quot;gonghao&quot;, (String)request.getSession().getAttribute(&quot;username&quot;));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		int count = banjixinxiService.selectCount(wrapper);</span><br><span class="line">		return R.ok().put(&quot;count&quot;, count);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="七、源码获取"><a href="#七、源码获取" class="headerlink" title="七、源码获取"></a>七、源码获取</h1><blockquote>
<p> 1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">200 套 Java 精品项目</a><br> 2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 200 套  精品项目</a></p>
<p> 3.<a href="https://blog.junxu666.top/p/57317.html">源码咨询</a>，叫 v xiaoxu_9411</p>
</blockquote>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-d969.png" alt="image-20230415160655333"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>【毕业设计】基于 Java+ SpringBoot+Vue 的藏区特产销售系统【源码(完整源码请私聊)+论文+包运行成功】</title>
    <url>/p/13786.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>地方废物回收机构的需求和管理上的不断提升，地方废物回收机构管理的潜力将无限扩大，地方废物回收机构管理系统在业界被广泛关注，本系统及对此进行总体分析，将地方废物回收机构信息管理的发展提供参考。地方废物回收机构管理系统对地方废物回收机构有着明显的带动效应，对管理者的帮助更大。</p>
<p>本系统主要包括管理员和员工两个角色组成；主要包括：首页、个人中心、员工管理、员工请假管理、销假申请管理、工作日志管理、员工工资管理、员工任务管理、任务汇报管理、设备信息管理、设备借用管理、设备归还管理、设备保修管理、维修入库管理、员工打卡管理、员工评价管理、回收价格管理、宿舍信息管理、宿舍入住管理、宿舍搬出管理、管理员管理、系统管理等功能的管理系统。</p>
<h1 id="3-可行性分析"><a href="#3-可行性分析" class="headerlink" title="3. 可行性分析"></a>3. 可行性分析</h1><p>基于SpringBoot地方废物回收机构管理系统，该系统软件开发仅需要一台普通的计算机便可完成实现开发，其成本很低。另外，作为毕业设计作品来讲，开发成本基本上可以忽略不计，且该系统软件的投入使用，可以实现更加快速高效的地方废物回收机构管理，同时还能实现对人力资源和管理资源的有效节约，该地方废物回收机构管理系统在经济上完全可行。</p>
<p>（1）管理员功能需求</p>
<p>管理员登陆后，主要模块包括首页、个人中心、员工管理、员工请假管理、销假申请管理、工作日志管理、员工工资管理、员工任务管理、任务汇报管理、设备信息管理、设备借用管理、设备归还管理、设备报修管理、维修入库管理、员工打卡管理、员工评价管理、回收价格管理、宿舍信息管理、宿舍入住管理、宿舍搬出管理、管理员管理、系统管理等功能。管理员用例图如图3-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-964a.png" alt="image-20230416233407146"></p>
<p>（2）员工功能需求</p>
<p>员工登陆后，主要模块包括首页、个人中心、员工请假管理、销假申请管理、工作日志管理、员工工资管理、员工任务管理、任务汇报管理、设备信息管理、设备借用管理、设备归还管理、设备报修管理、维修入库管理、员工打卡管理、员工评价管理、回收价格管理、宿舍入住管理、宿舍搬出管理等功能。员工用例图如图3-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-9670.png" alt="image-20230416233415999"></p>
<h1 id="四-系统设计"><a href="#四-系统设计" class="headerlink" title="四 系统设计"></a>四 系统设计</h1><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-26d4.png" alt="image-20230416233507173"></p>
<h1 id="第五章-系统功能实现"><a href="#第五章-系统功能实现" class="headerlink" title="第五章 系统功能实现"></a>第五章 系统功能实现</h1><p>系统登录，管理员和员工登录进入系统前在登录页面根据要求填写用户名和密码，选择角色等信息，点击登录进行系统操作，如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-11ba.png" alt="image-20230416233620964"></p>
<h2 id="5-1管理员功能模块"><a href="#5-1管理员功能模块" class="headerlink" title="5.1管理员功能模块"></a>5.1管理员功能模块</h2><p>管理员登录系统后，可以对首页、个人中心、员工管理、员工请假管理、销假申请管理、工作日志管理、员工工资管理、员工任务管理、任务汇报管理、设备信息管理、设备借用管理、设备归还管理、设备报修管理、维修入库管理、员工打卡管理、员工评价管理、回收价格管理、宿舍信息管理、宿舍入住管理、宿舍搬出管理、管理员管理、系统管理等功能进行相应的操作管理，如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-11ba.png"></p>
<p>员工管理，在员工管理页面可以对索引、员工工号、员工姓名、性别、部门、岗位、入职时间、联系方式、邮箱、身份证、照片等内容进行详情，修改，员工工资，评价或删除等操作，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-f8e5.png" alt="image-20230416233639688"></p>
<p>员工请假管理，在员工请假管理页面可以对索引、请假编号、请假类型、员工工号、员工姓名、岗位、部门、请假天数、开始时间、结束时间、申请时间、审核回复、审核状态、审核等信息进行详情，销假申请，修改或删除等操作，如图5-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-e8c0.png"></p>
<p>销假申请管理，在销假申请管理页面可以对索引、请假编号、请假类型、开始时间、结束时间、请假时长、销假说明、销假时间、员工工号、员工姓名、部门、岗位、审核回复、审核状态、审核等内容进行详情，修改或删除等操作，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304162304-62ef.png" alt="image-20230416233710238"></p>
<h1 id="七、源码获取"><a href="#七、源码获取" class="headerlink" title="七、源码获取"></a>七、源码获取</h1><blockquote>
<p> 1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">200 套 Java 精品项目</a><br> 2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 200 套  精品项目</a></p>
<p> 3.<a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/83d958070ac986e824d5065e27c0c410.png" alt="image-20230415160655333"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java 毕业设计，基于 SpringBoot+Vue 的学生就业管理信息系统（毕业设计，附源码，教程）</title>
    <url>/p/11867.html</url>
    <content><![CDATA[<blockquote>
<p> <strong>您好，我是<a href="https://blog.junxu666.top/p/57317.html">程序员徐师兄</a>，感谢您阅读本文，欢迎一键三连哦</strong>。<br> 😁 </p>
<p> 1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br> 2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>本次设计任务是要设计一个就业信息管理系统，通过这个系统能够满足就业信息管理功能。系统的主要功能包括：首页，个人中心，学生管理，导师管理，企业管理，招聘信息管理，应聘信息管理，面试邀请管理，就业指导管理，交流论坛，系统管理等。</p>
<p>管理员可以根据系统给定的账号进行登录，登录后可以进入就业信息管理系统对所有模块进行管理。包括查看和修改自己的个人信息以及登录密码。</p>
<p>该系统为每一个学生，企业和导师都分配了一个账号，他们通过账号的登录可以在系统中查看就业信息及对个人信息进行修改等功能。</p>
<h2 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2. 技术栈"></a>2. 技术栈</h2><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7（5.7版本以上即可）</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;myeclipse&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<p>浏览器：谷歌浏览器</p>
<h1 id="3-总体设计"><a href="#3-总体设计" class="headerlink" title="3. 总体设计"></a>3. 总体设计</h1><p>根据就业信息管理系统的功能需求，进行系统设计。</p>
<p>前台功能：进入系统可以实现首页，招聘信息，交流论坛，公告资讯，个人中心，后台管理等功能进行操作。</p>
<p>后台由管理员，学生，企业和导师，主要功能包括首页，个人中心，学生管理，导师管理，企业管理，招聘信息管理，应聘信息管理，面试邀请管理，就业指导管理，交流论坛，系统管理等。</p>
<p>系统对这些功能进行整合，产生的功能结构图如下：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-4c7e.jpg" alt="img"></p>
<h2 id="4-1前台功能模块"><a href="#4-1前台功能模块" class="headerlink" title="4.1前台功能模块"></a>4.1前台功能模块</h2><p>就业信息管理系统，进入到系统首页，可以查看首页，招聘信息，交流论坛，公告资讯，个人中心，后台管理等内容进行操作，如图4-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-5287.png" alt="image-20230410232708465"></p>
<p>图4-1系统首页界面图</p>
<p>学生注册；在学生注册页面中输入学生账号，密码，确认密码，学生姓名，学生电话等内容进行注册操作；如图4-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-5287.png"></p>
<p>图4-2用户注册界面图</p>
<p>招聘信息；在招聘信息页面中可以查看招聘编号，发布时间，岗位，岗位要求，薪资，企业账号，企业名称等内容；如图4-3所示。</p>
<p>![image-20230410232726790](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230410232726790.png)</p>
<p>图4-3招聘信息界面图</p>
<p>个人中心；在个人中心页面中输入学生账号，密码，学生姓名，性别，学生电话，图片等内容进行更新信息，并可以根据需要对我的发布进行详细的操作，如图4-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-a22a.png" alt="image-20230410232738869"></p>
<p>图4-4个人中心界面图</p>
<h2 id="4-2后台功能模块"><a href="#4-2后台功能模块" class="headerlink" title="4.2后台功能模块"></a>4.2后台功能模块</h2><p>后台登录，通过填写注册时输入的用户名、密码、选择角色等信息进行登录操作，如图4-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-f061.png" alt="image-20230410232755742"></p>
<p>图4-5后台登录界面图</p>
<h3 id="4-2-1管理员功能"><a href="#4-2-1管理员功能" class="headerlink" title="4.2.1管理员功能"></a>4.2.1管理员功能</h3><p>管理员登录进入就业信息管理系统可以查看首页，个人中心，学生管理，导师管理，企业管理，招聘信息管理，应聘信息管理，面试邀请管理，就业指导管理，交流论坛，系统管理等功能进行详细操作，如图4-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-f061.png"></p>
<p>图4-6管理员功能界面图</p>
<p>学生管理；在学生管理页面中可以查看索引，学生账号，学生姓名，性别，电话，头像等内容，并进行详情，修改和删除等操作；如图4-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-b3e0.png" alt="image-20230410232820388"></p>
<p>图4-7学生管理界面图</p>
<p>导师管理；在导师管理页面中可以查看索引，导师账号，导师姓名，性别，导师电话，头像等内容，并进行详情，修改和删除等操作；如图4-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-0258.png" alt="image-20230410232830028"></p>
<p>企业管理；在企业管理页面中可以查看索引，企业账号，企业名称，企业封面，企业电话，地址等内容，并进行详情，修改或删除等操作；如图4-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-27bc.png" alt="image-20230410232837858"></p>
<p>图4-9企业管理界面图</p>
<p>招聘信息管理；在招聘信息管理页面中可以查看索引，照片编号，招聘标题，招聘封面，发布时间，岗位，薪资，企业账号，企业名称等内容，并进行详情，修改和删除等操作；如图4-10所示。</p>
<h1 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h1><p><a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031721-19ccfc0.png"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java 毕业设计，基于 SpringBoot+Vue 的智慧外贸系统（毕业设计，附源码，教程）</title>
    <url>/p/13462.html</url>
    <content><![CDATA[<blockquote>
<p> <strong>您好，我是<a href="https://blog.junxu666.top/p/57317.html">程序员徐师兄</a>，感谢您阅读本文，欢迎一键三连哦</strong>。<br> 😁 </p>
<p> 1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br> 2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>本系统主要包括管理员，买家和商家三个角色组成；主要包括首页、个人中心、买家管理、商家管理、商品分类管理、商品信息管理、商品预订管理、关单信息管理、送仓申请管理、运单信息管理、出口发票管理、订单信息管理、系统管理等功能的管理系统。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-d95b.png" alt="image-20230410233931590"></p>
<h2 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2. 技术栈"></a>2. 技术栈</h2><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7（5.7版本以上即可）</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;myeclipse&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<p>浏览器：谷歌浏览器</p>
<h1 id="3-需求分析"><a href="#3-需求分析" class="headerlink" title="3. 需求分析"></a>3. 需求分析</h1><p>考虑到实际生活中在智慧外贸管理方面的需要以及对该系统认真的分析，将系统权限按管理员，买家和商家这三类涉及用户划分。</p>
<p>（1）管理员功能需求</p>
<p>管理员登陆后，主要包括首页、个人中心、买家管理、商家管理、商品分类管理、商品信息管理、商品预订管理、关单信息管理、送仓申请管理、运单信息管理、出口发票管理、订单信息管理、系统管理等功能。管理员用例图如图3-1所示。</p>
<p>​                                                                                             <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-04cb.png" alt="image-20230410234201711"></p>
<p>（2）买家功能需求</p>
<p>买家登陆后，主要包括首页、个人中心、商品预订管理、关单信息管理、送仓申请管理、运单信息管理、出口发票管理、订单信息管理等功能。买家用例图如图3-2所示。</p>
<p>​                                <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-2f8b.png" alt="image-20230410234216001"></p>
<p>（3）商家功能需求</p>
<p>商家登陆后，主要包括首页、个人中心、商品信息管理、商品预订管理、关单信息管理、送仓申请管理、运单信息管理、出口发票管理、订单信息管理等功能。商家用例图如图3-3所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-a3cb.png" alt="image-20230410234226379"></p>
<h1 id="第四章-系统设计"><a href="#第四章-系统设计" class="headerlink" title="第四章 系统设计"></a>第四章 系统设计</h1><h2 id="4-1功能结构"><a href="#4-1功能结构" class="headerlink" title="4.1功能结构"></a>4.1功能结构</h2><p>为了更好的去理清本系统整体思路，对该系统以结构图的形式表达出来，设计实现该智慧外贸平台的功能结构图如下所示：</p>
<p>​                                                                                                                            </p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-5c4f.png" alt="image-20230410233826334"></p>
<h1 id="五章-系统功能实现"><a href="#五章-系统功能实现" class="headerlink" title="五章 系统功能实现"></a>五章 系统功能实现</h1><h2 id="5-1系统功能模块"><a href="#5-1系统功能模块" class="headerlink" title="5.1系统功能模块"></a>5.1系统功能模块</h2><p>智慧外贸平台，在平台首页可以查看首页、商品信息、公告资讯、个人中心、后台管理等内容，并进行详细操作；如图5-1所示。</p>
<p>​                               </p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-04a2.png" alt="image-20230410233904713"></p>
<p>商品信息，在商品信息页面可以查看商品编号、商品名称、商品分类、品牌、规格、图片、价格、产地、发布时间、商家账号、商家姓名、点击次数、商品详情等内容，并进行商品预订，评论或收藏操作，如图5-2所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-4af2.png" alt="image-20230410233913324"></p>
<p>  个人中心，在个人中心页面通过填写买家账号、密码、买家姓名、性别、买家电话、图片等内容进行更新信息，还可以根据需要对我的收藏进行详细操作，如图5-3所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-d95b.png" alt="image-20230410233931590"></p>
<h2 id="5-2后台功能模块"><a href="#5-2后台功能模块" class="headerlink" title="5.2后台功能模块"></a>5.2后台功能模块</h2><p>后台登录，用户进入系统前在登录页面根据要求填写用户名和密码，选择角色等信息，点击登录进行系统操作，如图5-4所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-c787.png" alt="image-20230410233938716"></p>
<h3 id="5-2-1管理员功能"><a href="#5-2-1管理员功能" class="headerlink" title="5.2.1管理员功能"></a>5.2.1管理员功能</h3><p>管理员登录系统后，可以对首页、个人中心、买家管理、商家管理、商品分类管理、商品信息管理、商品预订管理、关单信息管理、送仓申请管理、运单信息管理、出口发票管理、订单信息管理、系统管理等功能进行相应的操作管理，如图5-5所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-5af0.png" alt="image-20230410233946048"></p>
<p>商品信息管理，在商品信息管理页面可以对索引、商品编号、商品名称、商品分类、品牌、规格、图片、价格、产地、发布时间、商家账号、商家姓名等内容进行详情，修改，查看评论或删除操作，如图5-6所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-b290.png" alt="image-20230410233953450"></p>
<p>关单信息管理，在关单信息管理页面可以对索引、关单编号、商家账号、商家姓名、商品名称、商品分类、关单时间、买家账号、买家姓名等信息进行详情，送仓申请，修改和删除操作，如图5-7所示。</p>
<p>![image-20230410234000945](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230410234000945.png)</p>
<h1 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h1><p><a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304102304-ba93.png" alt="image-20230410233826334"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031721-19ccfc0.png"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>基于springboot+vue民宿管理系统（Java 毕业设计，附源码，说明文档）</title>
    <url>/p/33891.html</url>
    <content><![CDATA[<h1 id="基于springboot-vue民宿管理系统（Java-毕业设计，附源码，说明文档）"><a href="#基于springboot-vue民宿管理系统（Java-毕业设计，附源码，说明文档）" class="headerlink" title="基于springboot+vue民宿管理系统（Java 毕业设计，附源码，说明文档）"></a>基于springboot+vue民宿管理系统（Java 毕业设计，附源码，说明文档）</h1><blockquote>
<p> <strong>您好，我是<a href="https://blog.junxu666.top/p/57317.html">程序员徐师兄</a>，感谢您阅读本文，欢迎一键三连哦</strong>。  目前有各类成品java毕设，需要请看文末联系方式 。javaweb，ssh，ssm，springboot等等项目框架，源码丰富，<a href="https://blog.junxu666.top/p/57317.html">欢迎咨询</a>。<br> 😁 </p>
<p> 1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br> 2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h2 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h2><h3 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h3><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat7</p>
<p>数据库：mysql 5.7+</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;idea</p>
<p>Maven包：Maven3.3.9</p>
<h3 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h3><p>nodejs，vue</p>
<h3 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h3><p>mysql</p>
<h2 id="系统架构："><a href="#系统架构：" class="headerlink" title="系统架构："></a>系统架构：</h2><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-f9fc.png"></p>
<h3 id="管理员："><a href="#管理员：" class="headerlink" title="管理员："></a>管理员：</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-b952.png"></p>
<h3 id="用户用例："><a href="#用户用例：" class="headerlink" title="用户用例："></a>用户用例：</h3><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-e87c.png"></p>
<h2 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h2><h3 id="用户功能模块"><a href="#用户功能模块" class="headerlink" title="用户功能模块"></a>用户功能模块</h3><p>用户点击进入到系统操作界面，可以对首页、个人中心、民宿信息管理、房间信息管理、房间预订管理、房间退订管理、投诉反馈管理、我的收藏管理等功能模块并进行操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-8f2e.png"></p>
<p>民宿信息管理：通过民宿信息管理列表可以获取商家编号、民宿编号、民宿名称、民宿地址、民宿图片、民宿简介等信息，进行详情查看操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-92e4.png"></p>
<p>房间预订管理：通过房间预订管理列表可以获取预定编号、商家编号、民宿名称、房间类型、房间价格、天数、已收金额、预订时间、入住时间、备注、账号、姓名、手机、是否支付等信息，进行详情、修改、删除等操作</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/05e80d1c7bb35a326b2eb9a28e367355.png"></p>
<p>房间退订管理：通过房间退订管理列表可以获取退订编号、商家编号、民宿名称、房间类型、房间价格、天数、已收金额、退订时间、备注、账号、姓名、手机、是否支付、审核回复、审核状态等信息，进行详情、修改、删除操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-dbfc.png"></p>
<h3 id="管理员功能模块"><a href="#管理员功能模块" class="headerlink" title="管理员功能模块"></a>管理员功能模块</h3><p>管理员通过用户名和密码、角色填写完成后进行登录，如图5-5所示。管理员登录成功后进入到系统操作界面，可以对首页、个人中心、用户管理、商家管理、民宿信息管理、房间类型管理、房间信息管理、房间预订管理、房间退订管理、投诉反馈管理、我的收藏管理、系统管理等功能模块进行相对应操作。</p>
<p>管理员商家管理：通过商家管理列表可以获取商家编号、密码、商家名称、联系电话、头像、备注等内容，可以进行修改或删除操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-559b.png"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/902b4719e1e3ff880dac6ad1d2d9a4b8.png"></p>
<p>管理员用户管理：通过用户管理列表可以获取账号、密码、姓名、性别、手机、邮箱、图片、备注等信息，进行删除或修改操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-a3f7.png"></p>
<p>管理员民宿信息管理：通过民宿信息管理列表可以获取商家编号、民宿编号、民宿名称、民宿地址、民宿图片、民宿简介等信息，进行修改或删除操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-3595.png"></p>
<p>管理员房间类型管理：通过房间类型管理列表可以获取索引、房间类型、操作等信息，进行详情、修改或删除操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-b72c.png"></p>
<p>管理员房间信息管理：通过房间信息管理列表可以获取商家编号、民宿编号、房间类型、图片、房间设施、房间价格、收取金额等信息，进行详情、查看或删除操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-40b7.png"></p>
<p>管理员房间预订管理：通过房间预订管理列表可以获取预定编号、商家编号、民宿名称、房间类型、房间价格、天数、已收金额、预订时间、入住时间、备注、账号、姓名、手机、是否支付等信息，进行备注或删除操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-6f22.png"></p>
<h3 id="商家用户功能模块"><a href="#商家用户功能模块" class="headerlink" title="商家用户功能模块"></a>商家用户功能模块</h3><p>商家用户点击进入到系统操作界面，可以对首页、个人中心、民宿信息管理、房间信息管理、房间预订管理、房间退订管理、投诉反馈管理、我的收藏管理等功能模块</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/cf6f6e4c34e2f480bedd8b4aff9f81a3.png"></p>
<p>商家用户民宿信息管理：通过民宿信息管理列表可以获取商家编号、民宿编号、民宿名称、民宿地址、民宿图片、民宿简介等信息，进行查询、新增、删除操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-6f33.png"></p>
<h3 id="前台首页功能模块"><a href="#前台首页功能模块" class="headerlink" title="前台首页功能模块"></a>前台首页功能模块</h3><p>前台首页，在系统首页可以查看首页、民宿信息、房间信息、个人中心、后台管理、在线客服等内容</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-b407.png"></p>
<p>用户登录，在登录页面通过填写账号、密码等信息完成登录，如图5-15所示。在民宿信息页面通过查看商家编号、民宿编号、民宿名称、民宿地址、民宿图片、民宿简介等信息进行购买操作</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2c5df8d2ec19d13ec2b2a22aef464291.png"></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-f49c.png"></p>
<p>以上就是项目的一些基本信息了。</p>
<h1 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h1><p><a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304172104-559b.png"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031721-19ccfc0.png"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java 毕业设计，基于 SpringBoot+Vue 的网上图书商城管理系统（毕业设计，附源码，教程）</title>
    <url>/p/34944.html</url>
    <content><![CDATA[<h1 id="基于springboot-vue的在线答疑系统（毕业设计，源码-说明文档）"><a href="#基于springboot-vue的在线答疑系统（毕业设计，源码-说明文档）" class="headerlink" title="基于springboot+vue的在线答疑系统（毕业设计，源码+说明文档）"></a>基于springboot+vue的在线答疑系统（毕业设计，源码+说明文档）</h1><blockquote>
<p> <strong>您好，我是<a href="https://blog.junxu666.top/p/57317.html">程序员徐师兄</a>，感谢您阅读本文，欢迎一键三连哦</strong>。<br> 😁 </p>
<p> 1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br> 2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<p>今天要和大家聊的是一款基于springboot的线答疑系统。</p>
<p>目前有各类成品java毕设，需要请看文末联系方式 。javaweb，ssh，ssm，springboot等等项目框架，源码丰富，欢迎咨询。</p>
<h2 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h2><h3 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h3><p>开发语言：Java</p>
<p>框架：springboot</p>
<p>JDK版本：JDK1.8</p>
<p>服务器：tomcat8</p>
<p>数据库：mysql 5.7+</p>
<p>数据库工具：Navicat11</p>
<p>开发软件：eclipse&#x2F;idea</p>
<p>Maven包：Maven3.3+</p>
<h3 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h3><p>nodejs，vue</p>
<h3 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h3><p>mysql</p>
<h2 id="系统架构："><a href="#系统架构：" class="headerlink" title="系统架构："></a>系统架构：</h2><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304051504-28a2.png"></p>
<p>系统中的功能模块主要是：</p>
<p>管理员权限：首页、个人中心、学生管理、教师管理、问题发布管理、疑难解答管理。</p>
<p>教师权限：首页、个人中心、疑难解答管理、试卷管理、试题管理、考试管理。</p>
<p>学生权限：首页、个人中心、问题发布管理、疑难解答管理、考试管理等功能部分。</p>
<h2 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h2><h3 id="管理员功能模块"><a href="#管理员功能模块" class="headerlink" title="管理员功能模块"></a>管理员功能模块</h3><p>管理员通过后台登录窗口进行输入自己的账号、密码、验证码等信息，进行登录。</p>
<p>管理员对个人中心进行操作填写原密码、新密码、确认密码并进行添加、删除、修改以及查看。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304051504-5e42.png"></p>
<h4 id="学生信息管理："><a href="#学生信息管理：" class="headerlink" title="学生信息管理："></a>学生信息管理：</h4><p>管理员通过学生信息可以在线查看学号、密码、姓名、性别、头像、院校、班级、手机等信息，进行详情或修改、删除操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304051504-fdbf.png"></p>
<h4 id="教师管理："><a href="#教师管理：" class="headerlink" title="教师管理："></a>教师管理：</h4><p>管理员通过教师管理可以在线查看工号、密码、 姓名、性别、头像、学院、班级、电话等信息，进行查看或修改、删除操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304051504-51f7.png"></p>
<h3 id="教师后台功能模块"><a href="#教师后台功能模块" class="headerlink" title="教师后台功能模块"></a>教师后台功能模块</h3><p>教师通过后台登录窗口进行输入自己的账号、密码、验证码等信息，进行登录</p>
<h4 id="个人信息："><a href="#个人信息：" class="headerlink" title="个人信息："></a>个人信息：</h4><p>通过在个人资料管理页面通过查看工号、密码、 姓名、性别、头像、学院、班级、电话可进行查看进行修改、删除等。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/04cbfb9befbaaac712e06a4fb664eedc.png"></p>
<h4 id="试卷管理："><a href="#试卷管理：" class="headerlink" title="试卷管理："></a>试卷管理：</h4><p>教师通过列表可以获取试卷名称、考试时长（分钟）、试卷状态，进行查看添加、修改等信息操作。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304051504-a4ba.png"></p>
<h4 id="试题管理："><a href="#试题管理：" class="headerlink" title="试题管理："></a>试题管理：</h4><p>教师通过列表可以获取试卷、试题名称、分值、答案、类型等信息，进行添加、修改、查看等信息操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304051504-b8fa.png"></p>
<h4 id="考试管理："><a href="#考试管理：" class="headerlink" title="考试管理："></a>考试管理：</h4><p>教师通过考试信息列表可以获取选择试卷、试题、类型、选项、答案&#x2F;分数等信息，进行添加、修改、删除查看等信息操作</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/74e52fe770d1335e275c9abf1ab94305.png"></p>
<h3 id="学生功能模块"><a href="#学生功能模块" class="headerlink" title="学生功能模块"></a>学生功能模块</h3><p>学生通过后台登录窗口进行输入自己的账号、密码等信息，进行登录</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/33a1e9a986d839cd9b9c511b490eb6c9.png"></p>
<h4 id="问题发布管理："><a href="#问题发布管理：" class="headerlink" title="问题发布管理："></a>问题发布管理：</h4><p>学生通过问题发布管理可以在线查看标题、题目、发布时间、学号、姓名、答案进行详情并添加&#x2F;修改、删除操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304051504-e9ad.png"></p>
<h4 id="疑难解答管理："><a href="#疑难解答管理：" class="headerlink" title="疑难解答管理："></a>疑难解答管理：</h4><p>学生通过疑难解答管理可以在线查看标题、题目、答案、发布时间、学号、姓名、审核回复等信息，进行查看查看提问操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304051504-52d1.png"></p>
<p>考试管理，学生通过考试管理可以在线进行考试&#x2F;查看答案等等操作</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304051504-fbe2.png"></p>
<p>以上就是项目的一些基本信息了。</p>
<h1 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h1><p><a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304051504-d2b1.png"></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/03/2023031721-19ccfc0.png"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>徐师兄 2023 年精品项目分享</title>
    <url>/p/57317.html</url>
    <content><![CDATA[<p>嗨喽，大家好，我是程序员徐师兄，大厂 7 年经验，专注于编程，提供毕业设计指导，源码交流，远程部署</p>
<blockquote>
<p>1、源码获取：叫 v <strong>xiaoxu_9411</strong> 了解</p>
<p><strong>2、精彩专栏推荐订阅：在下方专栏👇🏻</strong></p>
<p>😁<br>1.<a href="https://blog.csdn.net/jasonxu94/category_12197453.html">Java 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a><br>2.<a href="https://blog.csdn.net/jasonxu94/category_12191368.html">Python 毕业设计专栏，毕业季咱们不慌忙，几百款毕业设计等你选。</a></p>
</blockquote>
<h2 id="SpringBoot-Vue-毕业设计题目推荐"><a href="#SpringBoot-Vue-毕业设计题目推荐" class="headerlink" title="SpringBoot+ Vue 毕业设计题目推荐"></a>SpringBoot+ Vue 毕业设计题目推荐</h2><p><a href="https://www.mdnice.com/writing/29abe11ca4de4536a7dfdaa339a227e0">100 套基于 SpringBoot+Vue 毕业设计项目（含源码+毕业设计论文）</a></p>
<table>
<thead>
<tr>
<th>题目</th>
<th>技术栈</th>
</tr>
</thead>
<tbody><tr>
<td>基于 SpringBoot+Vue 的医院急诊系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的社区维修平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园新闻网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的职称评审管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的在线动漫信息平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的心灵治愈交流平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的论坛管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的闲一品</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的线上教学平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的实验室管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的教师人事档案管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的租房网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的大学生社团活动平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的垃圾分类网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园闲置物品租售系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的在线BLOG网</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的家具销售电商平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的简历系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的汉服推广网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的准妈妈孕期交流平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的点餐平台网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的医疗服务系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园博客系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的商务安全邮箱邮件收发</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的springcloud房产销售平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的人职匹配推荐系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的Springboot的小区物业管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的旅游管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的口腔管家平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的汽车租赁系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的民宿管理平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的滴答拍摄影项目</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的酒店管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的汽车租赁系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的体质测试数据分析及可视化设计</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的家具网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的交流互动系统(1)</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的某银行OA系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的自习室预订系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的疫情网课管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的考研资讯平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的旅游管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的音乐翻唱与分享平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的旧物置换网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的影城管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的外卖点餐系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的餐厅点餐系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的新生宿舍管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园疫情防控系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的幼儿园管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的火车订票管理系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的毕业生信息招聘平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的二手交易平台</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的校园闲置物品交易网站</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的网上商城购物系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的学生毕业离校系统</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
<tr>
<td>基于 SpringBoot+Vue 的在线答疑系统文件</td>
<td>SpringBoot+Vue+MySql</td>
</tr>
</tbody></table>
<h2 id="毕业设计咨询"><a href="#毕业设计咨询" class="headerlink" title="毕业设计咨询"></a>毕业设计咨询</h2><p><strong>代码都是我和朋友开发的，测试过的，还有视频演示和文档的。</strong>可以保证正常运行。</p>
<p><a href="https://www.mdnice.com/writing/29abe11ca4de4536a7dfdaa339a227e0">100 套基于 SpringBoot+Vue 毕业设计项目（含源码+毕业设计论文）</a></p>
<p><strong>微信Albert_HW07</strong></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303280003-7041.png"></p>
<h2 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h2><p>v : xiaoxu_9411</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304202204-fa62.png" alt="徐师兄毕业设计 (1)"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>基于 SpringBoot+Vue 在线考试系统的研究与实现，Java 毕业设计</title>
    <url>/p/32175.html</url>
    <content><![CDATA[<p>﻿</p>
<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p>在线考试的需求和管理上的不断提升，在线考试管理的潜力将无限扩大，在线考试系统在业界被广泛关注，本系统及对此进行总体分析，将在线考试信息管理的发展提供参考。在线考试系统对在线考试有着明显的带动效应，对管理帮助更大。</p>
<p>本系统主要包括管理员和用户两个角色组成；主要包括首页、个人中心、用户管理、教师管理、课程信息管理、班级信息管理、试题管理、在线试题管理、考试管理等功能的管理系统。</p>
<h1 id="第二章-主要技术"><a href="#第二章-主要技术" class="headerlink" title="第二章.主要技术"></a>第二章.主要技术</h1><table>
<thead>
<tr>
<th>技术名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Springboot</td>
<td>后端框架</td>
</tr>
<tr>
<td>Vue</td>
<td>前端框架</td>
</tr>
<tr>
<td>MySQL</td>
<td>数据库</td>
</tr>
</tbody></table>
<h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><p>考虑到实际生活中在在线考试管理方面的需要以及对该系统认真的分析，将系统权限按管理员和用户这两类涉及用户划分。</p>
<p>（1）管理员功能需求</p>
<p>管理员登陆后，主要模块包括首页、个人中心、用户管理、教师管理、课程信息管理、班级信息管理、试题管理、在线试题管理、考试管理等功能。管理员用例图如图3-1所示。</p>
<p>​                               </p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-4d69.png" alt="image-20230421223833416"></p>
<p>（2）用户功能需求</p>
<p>用户登陆后，主要模块包括首页、个人中心、课程信息管理、班级信息管理、考试管理等功能。用户用例图如图3-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-ea02.png" alt="image-20230421223843917"></p>
<h1 id="第四章-系统设计"><a href="#第四章-系统设计" class="headerlink" title="第四章 系统设计"></a>第四章 系统设计</h1><h2 id="4-1功能结构"><a href="#4-1功能结构" class="headerlink" title="4.1功能结构"></a>4.1功能结构</h2><p>为了更好的去理清本系统整体思路，对该系统以结构图的形式表达出来，设计实现该在线考试系统的功能结构图如下所示：</p>
<p>​                                                              <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-2b63.png" alt="image-20230421223439921"></p>
<h2 id="4-2-数据库设计"><a href="#4-2-数据库设计" class="headerlink" title="4.2 数据库设计"></a>4.2 数据库设计</h2><h3 id="4-2-1-数据库E-x2F-R图"><a href="#4-2-1-数据库E-x2F-R图" class="headerlink" title="4.2.1 数据库E&#x2F;R图"></a>4.2.1 数据库E&#x2F;R图</h3><p>ER图是由实体及其关系构成的图，通过E&#x2F;R图可以清楚地描述系统涉及到的实体之间的相互关系。在系统中对一些主要的几个关键实体如下图：</p>
<p>(1) 课程信息E&#x2F;R图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-da9d.png" alt="image-20230421223621219"></p>
<p> (2) 班级信息E&#x2F;R图如下所示：</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-acb3.png" alt="image-20230421223652944"></p>
<h3 id="4-2-2-数据库表"><a href="#4-2-2-数据库表" class="headerlink" title="4.2.2 数据库表"></a>4.2.2 数据库表</h3><p>数据库表的设计，如下表：</p>
<p>表4-1：课程信息</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>kechengbianhao</td>
<td>varchar</td>
<td>200</td>
<td>课程编号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>kechengmingcheng</td>
<td>varchar</td>
<td>200</td>
<td>课程名称</td>
<td></td>
<td></td>
</tr>
<tr>
<td>kechengfenlei</td>
<td>varchar</td>
<td>200</td>
<td>课程分类</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tupian</td>
<td>varchar</td>
<td>200</td>
<td>图片</td>
<td></td>
<td></td>
</tr>
<tr>
<td>kechengneirong</td>
<td>longtext</td>
<td>4294967295</td>
<td>课程内容</td>
<td></td>
<td></td>
</tr>
<tr>
<td>jiaoshigonghao</td>
<td>varchar</td>
<td>200</td>
<td>教师工号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>jiaoshixingming</td>
<td>varchar</td>
<td>200</td>
<td>教师姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xueshengzhanghao</td>
<td>varchar</td>
<td>200</td>
<td>学生账号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingming</td>
<td>varchar</td>
<td>200</td>
<td>姓名</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-2：课程分类</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>kechengfenlei</td>
<td>varchar</td>
<td>200</td>
<td>课程分类</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="第五章-系统功能实现"><a href="#第五章-系统功能实现" class="headerlink" title="第五章 系统功能实现"></a>第五章 系统功能实现</h1><h2 id="5-1系统登录注册"><a href="#5-1系统登录注册" class="headerlink" title="5.1系统登录注册"></a>5.1系统登录注册</h2><p>系统登录，管理员和用户进入系统前在登录页面根据要求填写用户名和密码，选择角色等信息，点击登录进行系统操作，如图5-1所示。</p>
<p>​                               </p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-7e97.png" alt="image-20230421224100227"></p>
<p>用户注册，在用户注册页面通过填写学号、密码、确认密码、姓名、院系、专业、手机等内容进行注册操作，如图5-2所示。</p>
<p> ![image-20230421224110114](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230421224110114.png) </p>
<h2 id="5-2管理员功能模块"><a href="#5-2管理员功能模块" class="headerlink" title="5.2管理员功能模块"></a>5.2管理员功能模块</h2><p>管理员登录系统后，可以对首页、个人中心、用户管理、教师管理、课程信息管理、班级信息管理、试题管理、在线试题管理、考试管理等功能进行相应的操作管理，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-280c.png" alt="image-20230421224119059"></p>
<p>用户管理，在用户管理页面可以对索引、学号、姓名、性别、院系、专业、班级、手机等内容进行详情，修改或删除操作，如图5-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-ca8b.png" alt="image-20230421224127578"></p>
<p>教师管理，在教师管理页面可以对索引、教师工号、教师姓名、性别、籍贯、出生日期、所教科目、职务、联系方式等信息进行详情，修改或删除操作，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-6251.png" alt="image-20230421224137312"></p>
<p>课程信息管理，在课程信息管理页面可以对索引、课程名称、科目类型、班级、授课老师、开课时间、结课时间、课件等内容进行详情，修改或删除操作，如图5-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-6a50.png" alt="image-20230421224145101"></p>
<h1 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h1><p><a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-2b63.png" alt="image-20230421223439921"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d3ea69d51f8b69bb208f82bbe067f4c4.png"></p>
]]></content>
  </entry>
  <entry>
    <title>基于 SpringBoot+Vue 的家政服务管理平台，Java 毕业设计</title>
    <url>/p/58140.html</url>
    <content><![CDATA[<p>﻿</p>
<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h1><p>本系统主要是设计出家政服务管理平台，基于B&#x2F;S构架，后台数据库采用了Mysql，可以使数据的查询和存储变得更加有效，可以确保家政服务管理的工作能够正常、高效的进行，从而提高工作的效率。总体的研究内容如下：</p>
<p>a）系统的界面简洁、明了，方便用户操作。系统大量的使用控件，大大的缩短了代码的长度。系统的大部分的功能能够通过控件来实现，用户可以非常方便的完成各类操作。</p>
<p>b）系统分前台和后台，可以同时达到管理员、用户和服务人员的不同需求。系统使用权限包括：管理员、用户和服务人员三个用户角色。主要功能包括首页、个人中心、用户管理、服务人员管理、服务信息管理、服务类型管理、服务预约管理、服务取消管理、服务分配管理、服务进度管理、评价信息管理、留言反馈、系统管理等等。</p>
<h1 id="2-主要技术"><a href="#2-主要技术" class="headerlink" title="2.主要技术"></a>2.主要技术</h1><table>
<thead>
<tr>
<th>技术名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Springboot</td>
<td>后端框架</td>
</tr>
<tr>
<td>Vue</td>
<td>前端框架</td>
</tr>
<tr>
<td>MySQL</td>
<td>数据库</td>
</tr>
</tbody></table>
<h1 id="3-可行性分析"><a href="#3-可行性分析" class="headerlink" title="3. 可行性分析"></a>3. 可行性分析</h1><p>本家政服务管理平台是作为毕业设计自己开发的，所以产生的费用微乎其微，系统建成之后可能会为今后的家政服务管理提供便利，并且系统完成之后产生的维护费用也不大。综合计算，所有的开支都不大，所以家政服务管理平台在经济上是不存在问题的。</p>
<h1 id="4-系统设计"><a href="#4-系统设计" class="headerlink" title="4.系统设计"></a>4.系统设计</h1><p>  本家政服务管理平台是把IT技术用到家政服务信息的管理中，它具有标准家政服务管理平台所具备的现实生活中完整的家政服务管理过程，完全的实现了虚拟现实。它可以收集和保存用户的信息，真正的实现了节约资源、提高使用效率、处理业务的同时实现了家政服务管理平台的功能。</p>
<p>本系统采取的原则有：</p>
<p>a）开发采用的是B&#x2F;S模式。B&#x2F;S模式的优点是处理前台与后台时层次分明，并且符合现在大部分用户习惯的网页搜索的方法。</p>
<p>b）运用面向对象的开发与设计思想。只有对系统的整体充分了解才能使用面向对象的技术，通过面向对象的技术可以保证系统的框架，从而使系统更加稳定，提高运行的效率。</p>
<p>c）采用结构化的设计方法。将系统分成各个功能模块，正确的处理模块之间和模块内部的联系以及与数据库的联系，定义各模块之间的内部结构，通过对不同模块的设计和模块与模块之间关系的设计来实现整个系统的功能。</p>
<p>d）系统的界面简单清晰。系统的界面设计简单，方便用户快速的操作使用。         </p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-9f50.png" alt="image-20230421221725263"></p>
<p>​                                </p>
<h1 id="5系统的详细设计与实现"><a href="#5系统的详细设计与实现" class="headerlink" title="5系统的详细设计与实现"></a>5系统的详细设计与实现</h1><h2 id="5-1前台模块设计"><a href="#5-1前台模块设计" class="headerlink" title="5.1前台模块设计"></a>5.1前台模块设计</h2><p>系统首页的主要功能展示了首页、服务信息、公告信息、留言反馈、个人中心、后台管理等，用户可根据权限进行相应操作。运行结果如图5-1所示。</p>
<p>​                               </p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-199d.png" alt="image-20230421221817494"></p>
<p>用户注册，通过填写账号、密码、确认密码、姓名、邮箱、手机号码等内容进行注册等操作，如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-74d2.png" alt="image-20230421221829335"></p>
<p>服务信息，在服务信息页面可以查看服务名称、 服务价格、服务简介、发布日期、合同信息等内容进行预约、详情或收藏等操作；如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-8ded.png" alt="image-20230421221839980"></p>
<p>个人中心，在个人中心页面中通过填写账号、密码、性别、姓名、邮箱、手机号码、图片等内容进行更新信息等操作，并可根据需要对我的收藏进行相应等操作，如图5-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-5a73.png" alt="image-20230421221848583"></p>
<h2 id="5-2后台功能模块"><a href="#5-2后台功能模块" class="headerlink" title="5.2后台功能模块"></a>5.2后台功能模块</h2><p>用户进入系统前在登录页面根据要求填写用户名、密码和验证码，选择角色等信息，点击登录进行登录操作，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304212204-5a73.png"></p>
]]></content>
  </entry>
  <entry>
    <title>基于 SpringBoot+Vue 超市进销库存系统，Java 毕业设计</title>
    <url>/p/17632.html</url>
    <content><![CDATA[<p>﻿</p>
<h1 id="一简介"><a href="#一简介" class="headerlink" title="一简介"></a>一简介</h1><p>本次设计任务是要设计一个超市进销存系统，通过这个系统能够满足超市进销存系统的管理及员工的超市进销存管理功能。系统的主要功能包括：首页、个人中心、员工管理、客户管理、供应商管理、承运商管理、仓库信息管理、商品类别管理、 商品信息管理、采购信息管理、入库信息管理、出库信息管理、销售订单管理、部门管理、岗位管理等功能。</p>
<p>管理员可以根据系统给定的账号进行登录，登录后可以进入超市进销存系统对超市进销存所有模块进行管理。包括查看和修改自己的个人信息以及登录密码。</p>
<p>该系统为每一个用户都分配了一个用户账号，员工通过账号的登录可以在系统中查看超市进销存信息及对个人信息进行修改等功能。</p>
<h1 id="2-主要技术"><a href="#2-主要技术" class="headerlink" title="2.主要技术"></a>2.主要技术</h1><table>
<thead>
<tr>
<th>技术名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Springboot</td>
<td>后端框架</td>
</tr>
<tr>
<td>Vue</td>
<td>前端框架</td>
</tr>
<tr>
<td>MySQL</td>
<td>数据库</td>
</tr>
</tbody></table>
<h1 id="三、系统"><a href="#三、系统" class="headerlink" title="三、系统"></a>三、系统</h1><p>根据超市进销存系统的功能需求，进行系统设计。</p>
<p>由管理员和员工，主要功能包括首页、个人中心、员工管理、客户管理、供应商管理、承运商管理、仓库信息管理、商品类别管理、 商品信息管理、采购信息管理、入库信息管理、出库信息管理、销售订单管理、部门管理、岗位管理等功能；</p>
<p>系统对这些功能进行整合，产生的功能结构图如下：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221904-8501.png" alt="image-20230422194853020"></p>
<h1 id="第四章-系统功能的具体实现"><a href="#第四章-系统功能的具体实现" class="headerlink" title="第四章 系统功能的具体实现"></a>第四章 系统功能的具体实现</h1><h2 id="4-1-登录注册"><a href="#4-1-登录注册" class="headerlink" title="4.1 登录注册"></a>4.1 登录注册</h2><p>登录，管理员和员工通过填写用户名、密码等信息，选择角色进行登录等操作，如图4-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221904-a60b.png" alt="image-20230422195014519"></p>
<p>员工注册；在员工注册页面中输入员工账号、密码、确认密码、员工姓名、员工电话等内容进行员工注册操作；如图4-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221904-bf60.png" alt="image-20230422195024199"></p>
<h2 id="4-2-管理员功能模块"><a href="#4-2-管理员功能模块" class="headerlink" title="4.2 管理员功能模块"></a>4.2 管理员功能模块</h2><p>管理员登录进入超市进销存系统可以查看首页、个人中心、员工管理、客户管理、供应商管理、承运商管理、仓库信息管理、商品类别管理、 商品信息管理、采购信息管理、入库信息管理、出库信息管理、销售订单管理、部门管理、岗位管理等功能进行详细操作；如图4-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221904-bf60.png"></p>
<p>员工管理；在员工管理页面中可以查看索引、员工账号、员工姓名、性别、员工电话、头像、部门、岗位等内容进行详情、修改或删除等操作；如图4-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221904-4b7e.png" alt="image-20230422195042068"></p>
<p>客户管理，在客户管理页面中可以查看索引、客户编号、客户姓名、客户头像、客户电话、客户地址等内容进行详情、修改或删除等操作，如图4-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221904-b643.png" alt="image-20230422195053482"></p>
<h2 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h2><p><a href="https://blog.junxu666.top/p/57317.html">源码咨询</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221904-a60b.png" alt="image-20230422195014519"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5d26ebcc1a6ab5075028d1ad1d214e97.png"> </p>
]]></content>
  </entry>
  <entry>
    <title>基于 SpringBoot+Vue 的财务管理系统，Java 毕业设计</title>
    <url>/p/22763.html</url>
    <content><![CDATA[<p>﻿</p>
<h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一 简介"></a>一 简介</h1><p>财务管理系统的需求和管理上的不断提升，财务管理系统的潜力将无限扩大，财务管理系统在业界被广泛关注，本系统及对此进行总体分析，将财务管理信息管理的发展提供参考。财务管理系统对财务管理有着明显的带动效应，尤其对企业、公司的管理帮助更大。</p>
<p>根据现有的模块，管理员对系统所有的信息进行管理。</p>
<p>本文将按以下步骤进行开发；</p>
<p> (1)绪论</p>
<p>系统的开发背景，意义和系统状况等，详细讲述了系统的用处，对本章进行总结。</p>
<p>(2)系统开发技术的介绍</p>
<p>分别对java技术、Springboot框架、Mysql和B&#x2F;S进行详细介绍。</p>
<p>(3)系统分析</p>
<p>本章主要是对系统可行性、系统性能、还有系统功能需求进行分析。</p>
<p>(4)系统设计</p>
<p>对系统系统功能和数据库等进行详细讲解。</p>
<p>(5)系统的实现</p>
<p>主要对首页，个人中心，员工管理，部门管理，员工工资管理，工资调整管理，资产类别管理，固定资产管理，经营信息管理，序时账管理，年度利润管理，系统管理的实现。</p>
<p>(6)系统的测试</p>
<p>在系统编码实现后，就需要对系统进行检测，检测的方法有黑盒测试和白盒测试两种方式，本系统采用的是黑白盒测试方法对不同组的数据进行功能模块测试。</p>
<h1 id="2-主要技术"><a href="#2-主要技术" class="headerlink" title="2.主要技术"></a>2.主要技术</h1><table>
<thead>
<tr>
<th>技术名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Springboot</td>
<td>后端框架</td>
</tr>
<tr>
<td>Vue</td>
<td>前端框架</td>
</tr>
<tr>
<td>MySQL</td>
<td>数据库</td>
</tr>
</tbody></table>
<h1 id="3-可行性分析"><a href="#3-可行性分析" class="headerlink" title="3. 可行性分析"></a>3. 可行性分析</h1><p>本家政服务管理平台是作为毕业设计自己开发的，所以产生的费用微乎其微，系统建成之后可能会为今后的家政服务管理提供便利，并且系统完成之后产生的维护费用也不大。综合计算，所有的开支都不大，所以家政服务管理平台在经济上是不存在问题的。</p>
<h1 id="第四章-系统设计"><a href="#第四章-系统设计" class="headerlink" title="第四章 系统设计"></a>第四章 系统设计</h1><h2 id="4-1功能结构"><a href="#4-1功能结构" class="headerlink" title="4.1功能结构"></a>4.1功能结构</h2><p>为了更好的去理清本系统整体思路，对该系统以结构图的形式表达出来，设计实现该财务管理系统的功能结构图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221804-0f63.png" alt="image-20230422182702279"></p>
<h2 id="4-2-数据库设计"><a href="#4-2-数据库设计" class="headerlink" title="4.2 数据库设计"></a>4.2 数据库设计</h2><h3 id="4-2-1-数据库E-x2F-R图"><a href="#4-2-1-数据库E-x2F-R图" class="headerlink" title="4.2.1 数据库E&#x2F;R图"></a>4.2.1 数据库E&#x2F;R图</h3><p>ER图是由实体及其关系构成的图，通过E&#x2F;R图可以清楚地描述系统涉及到的实体之间的相互关系。在系统中对一些主要的几个关键实体如下图：</p>
<p>(1)员工管理E&#x2F;R图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304222204-2099.png" alt="image-20230422182714835"></p>
<p> (2)工资调整管理E&#x2F;R图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221804-9c3d.png" alt="image-20230422182726741"></p>
<p> (3)固定资产管理E&#x2F;R图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221804-828f.png" alt="image-20230422182738834"></p>
<h3 id="4-2-2-数据库表"><a href="#4-2-2-数据库表" class="headerlink" title="4.2.2 数据库表"></a>4.2.2 数据库表</h3><p>数据库表的设计，如下表：</p>
<p>表4-1：序时账</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>pingzhengdanhao</td>
<td>varchar</td>
<td>200</td>
<td>凭证单号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>fapiao</td>
<td>varchar</td>
<td>200</td>
<td>发票</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shouzhileixing</td>
<td>varchar</td>
<td>200</td>
<td>收支类型</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zhaiyao</td>
<td>varchar</td>
<td>200</td>
<td>摘要</td>
<td></td>
<td></td>
</tr>
<tr>
<td>duifangkemu</td>
<td>varchar</td>
<td>200</td>
<td>对方科目</td>
<td></td>
<td></td>
</tr>
<tr>
<td>jine</td>
<td>float</td>
<td></td>
<td>金额</td>
<td></td>
<td></td>
</tr>
<tr>
<td>dengjishijian</td>
<td>date</td>
<td></td>
<td>登记时间</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-2：用户表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>username</td>
<td>varchar</td>
<td>100</td>
<td>用户名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>password</td>
<td>varchar</td>
<td>100</td>
<td>密码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>role</td>
<td>varchar</td>
<td>100</td>
<td>角色</td>
<td></td>
<td>管理员</td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>新增时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
</tbody></table>
<p>表4-3：token表</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>userid</td>
<td>bigint</td>
<td></td>
<td>用户id</td>
<td></td>
<td></td>
</tr>
<tr>
<td>username</td>
<td>varchar</td>
<td>100</td>
<td>用户名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tablename</td>
<td>varchar</td>
<td>100</td>
<td>表名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>role</td>
<td>varchar</td>
<td>100</td>
<td>角色</td>
<td></td>
<td></td>
</tr>
<tr>
<td>token</td>
<td>varchar</td>
<td>200</td>
<td>密码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>新增时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>expiratedtime</td>
<td>timestamp</td>
<td></td>
<td>过期时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
</tbody></table>
<p>表4-4：年度利润</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>niandutongji</td>
<td>varchar</td>
<td>200</td>
<td>年度统计</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zhuyingshouru</td>
<td>float</td>
<td></td>
<td>主营收入</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zhuyingyewuchengben</td>
<td>int</td>
<td></td>
<td>主营业务成本</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zhuyingyewushuijinjifujia</td>
<td>int</td>
<td></td>
<td>主营业务税金及附加</td>
<td></td>
<td></td>
</tr>
<tr>
<td>qitayewulirun</td>
<td>int</td>
<td></td>
<td>其他业务利润</td>
<td></td>
<td></td>
</tr>
<tr>
<td>yingyefeiyong</td>
<td>int</td>
<td></td>
<td>营业费用</td>
<td></td>
<td></td>
</tr>
<tr>
<td>guanlifeiyong</td>
<td>int</td>
<td></td>
<td>管理费用</td>
<td></td>
<td></td>
</tr>
<tr>
<td>caiwufeiyong</td>
<td>int</td>
<td></td>
<td>财务费用</td>
<td></td>
<td></td>
</tr>
<tr>
<td>touzishouyi</td>
<td>int</td>
<td></td>
<td>投资收益</td>
<td></td>
<td></td>
</tr>
<tr>
<td>butieshouyi</td>
<td>int</td>
<td></td>
<td>补贴收益</td>
<td></td>
<td></td>
</tr>
<tr>
<td>yingyewaishouru</td>
<td>int</td>
<td></td>
<td>营业外收入</td>
<td></td>
<td></td>
</tr>
<tr>
<td>yingyewaizhichu</td>
<td>int</td>
<td></td>
<td>营业外支出</td>
<td></td>
<td></td>
</tr>
<tr>
<td>suodeshui</td>
<td>int</td>
<td></td>
<td>所得税</td>
<td></td>
<td></td>
</tr>
<tr>
<td>jinglirun</td>
<td>int</td>
<td></td>
<td>净利润</td>
<td></td>
<td></td>
</tr>
<tr>
<td>dengjishijian</td>
<td>date</td>
<td></td>
<td>登记时间</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="第五章-系统功能实现"><a href="#第五章-系统功能实现" class="headerlink" title="第五章 系统功能实现"></a>第五章 系统功能实现</h1><p>系统登录，管理员和员工进入系统前在登录页面根据要求填写用户名和密码，选择角色等信息，点击登录进行登录操作，如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221904-693f.png" alt="image-20230422193826307"></p>
<h2 id="5-1管理员功能模块"><a href="#5-1管理员功能模块" class="headerlink" title="5.1管理员功能模块"></a>5.1管理员功能模块</h2><p>管理员登录系统后，可以对首页，个人中心，员工管理，部门管理，员工工资管理，工资调整管理，资产类别管理，固定资产管理，经营信息管理，序时账管理，年度利润管理，系统管理等功能进行相应的操作管理，如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221904-21c9.png" alt="image-20230422193835847"></p>
<p>员工管理，在员工管理页面可以对索引，员工工号，员工姓名，图片，性别，部门，职位，联系方式，入职时间等内容进行详情，修改和删除等操作，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221904-dc16.png" alt="image-20230422193850261"></p>
<p>部门管理，在部门管理页面可以对索引，部门等信息进行详情，修改和删除等操作，如图\d-\d.*图所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221904-6cfe.png" alt="image-20230422193909442"></p>
<p>员工工资管理，在员工工资管理页面可以对索引，工资月份，员工工号，部门，基本工资，工龄补贴，加班工资，奖励，罚款，个税，社保代缴，奖惩说明，实发工资，登记时间等内容进行详情，修改，删除等操作，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202304221904-c1e1.png" alt="image-20230422193918218"></p>
<p>工资调整管理，在工资调整管理页面可以对索引，调整原因，调整额度，调整时间，员工工号，员工姓名，部门等内容进行详情，修改，删除等操作，如图5-6所示。</p>
]]></content>
  </entry>
  <entry>
    <title>IntelliJ IDEA 2023.2.1激活破解教程，详细图文，亲测可用</title>
    <url>/p/19093.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>时间过得飞快，充电器一拔，又得回去做打工人了。打开电脑，发现 IDEA 又更新了一个小版本，2023.2.1 版本来了，于是笔者将 IDEA 做了一波升级。至于破解方法，还是用本站之前的破解方式，亲测依然有效，可以破解到 2025 年（实际是永久激活，可放心食用），无图无真相，下面是我破解成功的截图：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309122209-bd60.png" alt="image-20230912224752958"></p>
<p>废话不多说，和之前版本一样，笔者汇总了目前网上比较靠谱的三种破解方案（<strong>这三种都是笔者亲测成功的</strong>），小伙伴们任选其一即可：</p>
<ul>
<li><em>第一种【推荐】：👉激活脚本 + 激活码（全自动模式）</em>，<strong>即本文教程所写，这种方法适合最新的几个版本，具体步骤跟着本文教程一步一步来，运行一下激活脚本，一分钟即可搞定，超级简单</strong>。无图无真相，下面是我激活成功后的截图：</li>
</ul>
<blockquote>
<p>PS: 此方法和下面的第二种方法的补丁原理都是暴力拦截了 IDEA 的剩余使用期网络请求，实际上等于永久激活，至于激活到哪天，在之前的 <code>2021.3.3</code> <code>2021.3.2</code> 等老版本中是可以手动配置的，比如改成激活到 2099 年。可能是太高调了，最新的版本只能显示到 2025 年, 其实效果还是一样的, 都是永久激活，可放心食用。</p>
</blockquote>
<ul>
<li><em>第二种：👉破解补丁 + 激活码（需手动引用补丁）</em> ，相比较于第一种无脑执行一个激活脚本，这种方式需要手动引用破解补丁，再输入激活码。<strong>此方法同样仅适用于最新的几个版本。</strong></li>
<li><em>第三种：👉 无限重置 IDEA 30 天试用期（适用于比较老的版本）</em> ；</li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>本教程适用于 JetBrains 全系列产品，包括 IDEA、Pycharm、WebStorm、Phpstorm、Datagrip、RubyMine、CLion、AppCode 等。</li>
<li>本教程适用 Windows&#x2F;Mac&#x2F;Linux 系统，文中以 Windows 系统为例做讲解，其他系统同样参考着本教程来就行。</li>
</ul>
<h2 id="第一步：下载-IDEA-安装包"><a href="#第一步：下载-IDEA-安装包" class="headerlink" title="第一步：下载 IDEA 安装包"></a>第一步：下载 IDEA 安装包</h2><p>访问 IDEA 官网，下载 IDEA 2023.2.1 版本的安装包，下载链接如下 :</p>
<p><a href="https://www.jetbrains.com/idea/download/">https://www.jetbrains.com/idea/download/</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309122209-4220.jpeg" alt="下载 IDEA 2023.2.1 安装包"></p>
<p>打开页面后，点击 <code>Download</code> 按钮, 等待 IDEA 专业版下载完毕。</p>
<h2 id="第二步：卸载老版本-IDEA-未安装则不用管，跳过看下面步骤"><a href="#第二步：卸载老版本-IDEA-未安装则不用管，跳过看下面步骤" class="headerlink" title="第二步：卸载老版本 IDEA(未安装则不用管，跳过看下面步骤)"></a>第二步：卸载老版本 IDEA(未安装则不用管，跳过看下面步骤)</h2><p>注意，安装新版本 IDEA 之前，如果本机安装过老版本的 IDEA, <strong>需要先彻底卸载，以免两者冲突，导致破解失败。</strong></p>
<p><img src="https://img.chajianxw.com/chajian/164604171691955" alt="破解之前，先卸载老版本 IDEA">破解之前，先卸载老版本 IDEA</p>
<p>卸载完成后，点击 <code>Close</code> 按钮关闭弹框：</p>
<p><img src="https://img.chajianxw.com/chajian/164604174406150" alt="卸载 IDEA 完成">卸载 IDEA 完成</p>
<h2 id="第三步：安装-IDEA-2023-2-1-版本"><a href="#第三步：安装-IDEA-2023-2-1-版本" class="headerlink" title="第三步：安装 IDEA 2023.2.1 版本"></a>第三步：安装 IDEA 2023.2.1 版本</h2><p>卸载老版本 IDEA 完成后，双击刚刚下载好的 IDEA <code>2023.2.1</code> 版本安装包。弹框会提示选择安装路径，我这里直接选择的默认安装路径</p>
<p><code>C:\Program Files\JetBrains\IntelliJ IDEA 2023.2.1</code> , 然后点击 <code>Next</code> 按钮：</p>
<p><img src="https://img.chajianxw.com/chajian/164990923263634" alt="安装 IDEA 2023.2.1 版本">安装 IDEA 2023.2.1 版本</p>
<p>然后，勾选 <code>Create Desktop Shortcut</code> 创建 IDEA 桌面快捷启动方式，以方便后面快速打开 IDEA，再点击 <code>Next</code> 按钮 :</p>
<p><img src="https://img.chajianxw.com/chajian/164604195273430" alt="开始安装 IDEA 2023.2.1 版本：创建快捷启动图标">开始安装 IDEA 2023.2.1 版本：创建快捷启动图标</p>
<p>点击 <code>Install</code> 按钮，开始安装：</p>
<p><img src="https://img.chajianxw.com/chajian/164604205048090" alt="开始安装 IDEA 2023.2.1 版本：点击 Install 按钮">开始安装 IDEA 2023.2.1 版本：点击 Install 按钮</p>
<p>等待安装完成后，勾选 <code>Run IntellJ IDEA</code>, 点击 <code>Finish</code> 按钮即运行 IDEA :</p>
<p><img src="https://img.chajianxw.com/chajian/164604217799832" alt="安装 IDEA 2023.2.1 版本成功">安装 IDEA 2023.2.1 版本成功</p>
<p>IDEA 运行成功后，会弹出如下对号框，强制用户需要先登录 JetBrains 账户才能使用：</p>
<p><img src="https://img.chajianxw.com/chajian/164403992752191" alt="IDEA 2023.2.1 版本提示需要先登录 JetBrains 账户">IDEA 2023.2.1 版本提示需要先登录 JetBrains 账户</p>
<p><strong>不用管登录的事，点击 Exit 按钮退出对话框</strong>，准备开始破解激活。</p>
<h2 id="第四步：破解补丁下载"><a href="#第四步：破解补丁下载" class="headerlink" title="第四步：破解补丁下载"></a>第四步：破解补丁下载</h2><p>破解补丁我放置在了网盘中，提供了多个备用链接，以防下载失效。</p>
<blockquote>
<p><strong>提示：破解补丁的网盘链接文末获取~</strong></p>
<p><strong>提示：破解补丁的网盘链接文末获取~</strong></p>
</blockquote>
<p>补丁下载成功后，记得<strong>先解压</strong>, 解压后的目录如下, <strong>本文后面所需补丁都在下面标注的这个文件夹中</strong>：</p>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/166614369183397" alt="IDEA 破解补丁下载">IDEA 破解补丁下载</p>
<p>点击【方式3】文件夹 , 进入到文件夹 <code>/jetbra</code>，目录如下：</p>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/166610035609690" alt="IDEA 破解补丁文件夹最底层目录">IDEA 破解补丁文件夹最底层目录</p>
<h2 id="第五步：开始破解"><a href="#第五步：开始破解" class="headerlink" title="第五步：开始破解"></a>第五步：开始破解</h2><h3 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统"></a>Windows 系统</h3><p>将上面图示的补丁的所属文件夹 <code>/jetbra</code> 复制电脑某个位置，笔者这里放置到了 <code>D:/</code> 盘根目录下:</p>
<blockquote>
<p>注意： <strong>补丁所属文件夹需单独存放</strong>，且<strong>放置的路径不要有中文与空格</strong>，以免 IDEA 读取补丁错误。</p>
</blockquote>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/166610081036853" alt="将 IDEA 破解补丁放置到 D 盘下">将 IDEA 破解补丁放置到 D 盘下</p>
<p>点击进入 <code>/jetbra</code> 补丁目录，再点击进入 <code>/scripts</code> 文件夹，双击执行 <code>install-current-user.vbs</code> 破解脚本：</p>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/166610106073514" alt="IDEA 破解补丁执行脚本">IDEA 破解补丁执行脚本</p>
<blockquote>
<p>注意：<strong>如果执行脚本被安全软件提示有风险拦截，允许执行即可。</strong></p>
</blockquote>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/166610118612338" alt="IDEA 破解脚本执行后弹框提示信息">IDEA 破解脚本执行后弹框提示信息</p>
<p>会提示安装补丁需要等待数秒。点击【<strong>确定</strong>】按钮后，过程大概 10 - 30 秒，如看到弹框提示 <code>Done</code> 时，表示激活破解成功：</p>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/166610151900684" alt="补丁执行成功后，提示 Done"></p>
<h3 id="Mac-x2F-Linux-系统"><a href="#Mac-x2F-Linux-系统" class="headerlink" title="Mac &#x2F; Linux 系统"></a>Mac &#x2F; Linux 系统</h3><p>Mac &#x2F; Linux 系统与上面 Windows 系统一样，需将补丁所属文件 <code>/jetbra</code> 复制到某个路径，且<strong>路径不能包含空格与中文</strong>。</p>
<p>之后，打开终端，进入到 <code>/jetbra/scripts</code> 文件夹， 执行 <code>install.sh</code> 脚本, 命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo bash install.sh</span><br></pre></td></tr></table></figure>

<p>看到提示 <code>Done</code> , 表示激活成功。</p>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/166610205585170" alt="Mac/Linux 系统执行破解补丁成功后，提示 Done">Mac&#x2F;Linux 系统执行破解补丁成功后，提示 Done</p>
<p>部分小伙伴 Mac&#x2F;Linux 系统执行脚本遇到如下错误：</p>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/166799370514169" alt="Mac 执行破解脚本报错">Mac 执行破解脚本报错</p>
<p><strong>解决方法：</strong></p>
<p>可先执行如下命令，再执行脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LC_COLLATE=&#x27;C&#x27;</span><br><span class="line">export LC_CTYPE=&#x27;C&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://img.quanxiaoha.com/quanxiaoha/166799386665127" alt="img"></p>
<h3 id="执行脚本，都干了些啥？"><a href="#执行脚本，都干了些啥？" class="headerlink" title="执行脚本，都干了些啥？"></a>执行脚本，都干了些啥？</h3><ul>
<li><p>Windows 用户执行脚本后，脚本会自动在环境变量 -&gt; 用户变量下添加了 <code>IDEA_VM_OPTIONS</code> 变量，变量值为 <code>/jetbra</code> 文件夹下的 <code>.vmoptions</code> 参数文件绝对路径，如下所示：</p>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/166610253796353" alt="img"></p>
<p>然后，脚本自动在 <code>idea.vmoptions</code> 文件中引用了破解补丁 ：</p>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/166610294585947" alt="img"></p>
<blockquote>
<p><strong>提示： 细心的小伙伴应该也发现了，本文的破解方式与文章开头《第二种 IDEA 破解方法》的区别在于，这种方式提供了自动化脚本，脚本免去了手动引入补丁的繁琐步骤，一切都由脚本来完成了。</strong></p>
</blockquote>
</li>
<li><p>Mac &#x2F; Linux 用户执行脚本后，脚本会自动在当期用户环境变量文件中添加了相关参数文件，Mac &#x2F; Linux 需重启系统，以确保环境变量生效。</p>
</li>
</ul>
<p>小伙伴们也可自行检查一下，如果没有自动添加这些参数，说明脚本执行没有成功。</p>
<h2 id="第六步：重启-IDEA"><a href="#第六步：重启-IDEA" class="headerlink" title="第六步：重启 IDEA"></a>第六步：重启 IDEA</h2><p><strong>脚本执行成功后，一定要重启 IDEA ~~</strong></p>
<p><strong>脚本执行成功后，一定要重启 IDEA ~~</strong></p>
<h2 id="第七步：填入指定激活码完成激活"><a href="#第七步：填入指定激活码完成激活" class="headerlink" title="第七步：填入指定激活码完成激活"></a>第七步：填入指定激活码完成激活</h2><p>重新打开 IDEA 后，复制下面的激活码：</p>
<p>6G5NXCPJZB-eyJsaWNlbnNlSWQiOiI2RzVOWENQSlpCIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQUEMiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFJCIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA5MDJQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOi0xMDc4MzkwNTY4IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-SnRVlQQR1&#x2F;9nxZ2AXsQ0seYwU5OjaiUMXrnQIIdNRvykzqQ0Q+vjXlmO7iAUwhwlsyfoMrLuvmLYwoD7fV8Mpz9Gs2gsTR8DfSHuAdvZlFENlIuFoIqyO8BneM9paD0yLxiqxy&#x2F;WWuOqW6c1v9ubbfdT6z9UnzSUjPKlsjXfq9J2gcDALrv9E0RPTOZqKfnsg7PF0wNQ0&#x2F;d00dy1k3zI+zJyTRpDxkCaGgijlY&#x2F;LZ&#x2F;wqd&#x2F;kRfcbQuRzdJ&#x2F;JXa3nj26rACqykKXaBH5thuvkTyySOpZwZMJVJyW7B7ro&#x2F;hkFCljZug3K+bTw5VwySzJtDcQ9tDYuu0zSAeXrcv2qrOg&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<p>粘贴到输入框内，点击 <code>Activate</code> 按钮，就激活成功了。</p>
<p><img src="https://img.chajianxw.com/chajian/164412373711216" alt="输入 IDEA 破解激活码">输入 IDEA 破解激活码</p>
<blockquote>
<p>PS: 有部分小伙伴反应，重启 IDEA 填入激活码依然无法激活，重启系统才行，如果有小伙伴遇到这种情况，不妨试试看~</p>
</blockquote>
<p>激活成功后，又可以开心的 coding 了 ~</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309122209-bd60.png" alt="image-20230912224752958">IDEA 2023.2.1 版本激活破解成功</p>
<h2 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h2><h3 id="激活成功后，不要升级-IDEA-版本"><a href="#激活成功后，不要升级-IDEA-版本" class="headerlink" title="激活成功后，不要升级 IDEA 版本"></a>激活成功后，不要升级 IDEA 版本</h3><p>官方反制手段越来越严厉，这个版本能激活，新版本大概率补丁就被限制了。所以，如果打开 IDEA 后，右下角若出现提示升级新版本，请不要升级版本。能用就行，它不香嘛！</p>
<h3 id="激活成功后，补丁文件夹能不能删掉或者移动？"><a href="#激活成功后，补丁文件夹能不能删掉或者移动？" class="headerlink" title="激活成功后，补丁文件夹能不能删掉或者移动？"></a>激活成功后，补丁文件夹能不能删掉或者移动？</h3><p>上文中说到，执行脚本后会添加环境变量，变量值对应了你放置补丁位置的路径，删除掉或者移动，再打开 IDEA 就找不到对应文件了，激活也就失效了。放着吃灰就行，别动它。</p>
<h2 id="激活补丁下载地址"><a href="#激活补丁下载地址" class="headerlink" title="激活补丁下载地址"></a>激活补丁下载地址</h2><blockquote>
<p>PS: 破解补丁页面<strong>提取人数过多</strong>，<strong>导致分享的百度网盘链接容易被封</strong>：<img src="https://img.chajianxw.com/chajian/164604365771068" alt="IDEA 2023.2.1破解补丁分享失败">IDEA 2023.2.1破解补丁分享失败蛋疼ing，为限制人数，目前暂不提供页面直接提取，<strong>改为从笔者公众号提取</strong>。</p>
</blockquote>
<p>关注我的微信公众号 <strong>程序员徐师兄plus</strong>，回复 <strong>idea2</strong>，会自动将激活码和破解补丁发送给你</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-img/-/raw/main/gitlab/202309061609-3c1ad0.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>Pycharm 2023.2.1 最新激活码、破解、激活安装教程，亲测有效、持续更新</title>
    <url>/p/43782.html</url>
    <content><![CDATA[<blockquote>
<p>本文分享一下 PyCharm 2023.2.1 版本最新激活破解教程，都是 Jetbrains 产品，本文专门配上了 Pycharm 的图片，跟着下面教程一步一步来即可。<br><strong>申明：本教程 Pycharm 破解补丁、激活码均收集于网络，请勿商用，仅供个人学习使用，如有侵权，请联系作者删除。若条件允许，希望大家购买正版 ！</strong><br><strong>PS: 本教程最新更新时间: 2023年9月7日~</strong></p>
</blockquote>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309122309-0abe.jpeg" alt="Pycharm 2023.2 破解激活教程"></p>
<p>笔者试了网上几乎所有的 Pycharm 破解方案，发现两种靠谱的破解方法（这两种都是亲测成功的），都配上了详细的图文教程，在这里分享给大家，小伙伴们二选一即可：</p>
<ul>
<li><strong>第一种【推荐】：激活脚本 + 激活码（全自动模式）</strong>;</li>
<li><strong>第二种： 👉破解补丁 + 激活码（需手动引用破解补丁），即本文教程所写，这种方法适合最新的几个版本，具体步骤跟着本文教程一步一步来就行。</strong> 无图无真相，下面是我激活成功后的截图：</li>
</ul>
<blockquote>
<p><strong>PS: 此方法和上面第一种方案的补丁原理都是暴力拦截了 Pycharm 的剩余使用期网络请求，实际上等于永久激活，至于激活到哪天，在之前的 <code>2021.3.3</code> <code>2021.3.2</code> 等老版本中是可以手动配置的，比如改成激活到 2099 年。可能是太高调了，此法只能显示到 2023, 其实效果还是一样的, 都是永久激活，可放心食用。</strong></p>
</blockquote>
<ul>
<li><strong>第三种</strong>：👉 <strong>无限重置 Pycharm 30 天试用期（适合比较老的版本）</strong></li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li><strong>本教程适用于 Pycharm 2023.2.1 以下所有版本，请放心食用~</strong></li>
<li><strong>本教程适用于 JetBrains 全系列产品，包括 Pycharm、IDEA、WebStorm、Phpstorm、Datagrip、RubyMine、CLion、AppCode 等。</strong></li>
<li><strong>本教程适用 Windows&#x2F;Mac&#x2F;Linux 系统，文中以 Windows 系统为例做讲解，其他系统按照教程顺序即可。</strong></li>
</ul>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Pycharm 目前已经更新到最新的 2023.2.1 版本了，群里的小伙伴私聊问我，为啥之前 2021.3.1 的激活套路对新版本 2023.2.1 不管用了，是个什么情况？</p>
<p>很显然，Pycharm 官方发现了这种破解路数，新版本加入了更严厉的反制破解。所以说，小伙伴们破解成功了以后，尽量不要升级 Pycharm, 不然大概率又不行了。</p>
<p>好在z大又更新了新的补丁，针对最新版本，这边笔者亲测可行，仅以下文记录本人 Pycharm 2023.2.1 版本的激活破解的全过程，步骤非常详细，跟着图文来就行~</p>
<blockquote>
<p>PS: Pycharm 前面的安装步骤还是一样，主要是后面的激活步骤~</p>
</blockquote>
<h2 id="第一步-下载最新的-Pycharm-2023-2-1-版本安装包"><a href="#第一步-下载最新的-Pycharm-2023-2-1-版本安装包" class="headerlink" title="第一步: 下载最新的 Pycharm 2023.2.1 版本安装包"></a>第一步: 下载最新的 Pycharm 2023.2.1 版本安装包</h2><p>我们先从 Pycharm 官网下载 Pycharm 2023.2.1 版本的安装包，下载链接如下：</p>
<p><a href="https://www.jetbrains.com/pycharm/download/other.html">Pycharm  官网下载地址</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-990b.png" alt="在这里插入图片描述"></p>
<p>选择 Pucharm 专业版本，点击下载，然后等待其下载完成即可。</p>
<h2 id="第三步-开始安装-Pycharm-2023-2-1-版本"><a href="#第三步-开始安装-Pycharm-2023-2-1-版本" class="headerlink" title="第三步: 开始安装 Pycharm 2023.2.1 版本"></a>第三步: 开始安装 Pycharm 2023.2.1 版本</h2><p>2.安装目录默认为 <code>C:\Program Files\JetBrains\PyCharm 2023.2.1</code>, 这里建议安装到其他盘，不要转到 C 盘里面，点击 Browser 即可选择:</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-e065.jpeg" alt="Pycharm 2023.2.1安装第一步"></p>
<p>3.勾选创建桌面快捷方式，这边方便后续打开 Pycharm：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/661664959ec4cd6877a0beb59a1e6432.png" alt="Pycharm 2023.2.1安装第二步"></p>
<p>4.点击 <code>Install</code> ：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-9c68.jpeg" alt="Pycharm 2023.2.1安装第三步"></p>
<p>5.安装完成后，勾选 <code>Run Pycharm</code>，点击 <code>Finish</code> 运行软件:</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-1be5.jpeg" alt="Pycharm 2023.2.1安装第四步"></p>
<p>Pycharm 运行成功后，会弹出下面的对话框，提示我们需要先登录 JetBrains 账户才能使用：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-c4f1.jpeg" alt="Pycharm 2023.2.1 弹出对话框，提示需要登录账户"></p>
<p>这里我们先不管，<strong>先点击 <code>Exit</code> 退出，准备开始引入激活补丁</strong>。</p>
<h2 id="第四步：清空-Pycharm-以前使用过的激活方式【非常重要】"><a href="#第四步：清空-Pycharm-以前使用过的激活方式【非常重要】" class="headerlink" title="第四步：清空 Pycharm 以前使用过的激活方式【非常重要】"></a>第四步：清空 Pycharm 以前使用过的激活方式【非常重要】</h2><p>开始激活前，如果你之前破解过老版本的 Pycharm，可能做过以下几种操作，则需要恢复原样，如果没有，直接跳过看下面步骤即可。</p>
<h3 id="1、动过-hosts-文件，添加的配置需要删除"><a href="#1、动过-hosts-文件，添加的配置需要删除" class="headerlink" title="1、动过 hosts 文件，添加的配置需要删除"></a>1、动过 hosts 文件，添加的配置需要删除</h3><p><strong>手动为 Pycharm 修改过 hosts 文件，那么添加的配置，记得要删除；</strong></p>
<h3 id="2、引用过其他的破解补丁，或者执行过安装脚本"><a href="#2、引用过其他的破解补丁，或者执行过安装脚本" class="headerlink" title="2、引用过其他的破解补丁，或者执行过安装脚本"></a>2、引用过其他的破解补丁，或者执行过安装脚本</h3><p><strong>1. 引用过的补丁也要移除掉等, 不然可能会与本文提供的补丁有冲突，出现各种奇奇怪怪的问题。</strong></p>
<p><strong>2. 之前版本中, 我提供过通过安装脚本来引用补丁，如果你有使用过，脚本会添加相关环境变量，这些环境变量也需要清空，查看脚本文件夹，执行 <code>uninstall-\*</code> 脚本即可。</strong></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-4d52.png" alt="在这里插入图片描述"></p>
<h2 id="第五步：开始激活"><a href="#第五步：开始激活" class="headerlink" title="第五步：开始激活"></a>第五步：开始激活</h2><h3 id="下载激活脚本"><a href="#下载激活脚本" class="headerlink" title="下载激活脚本"></a>下载激活脚本</h3><p>先通过网盘下载好激活补丁，解压后，打开文件夹如下：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-66f8.png" alt="在这里插入图片描述"></p>
<blockquote>
<p><strong>注意：激活脚本文末获取！</strong></p>
</blockquote>
<p>打开文件夹后，目录如下，<code>ja-netfilter.jar</code> 为激活补丁：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-8c12.png" alt="在这里插入图片描述"></p>
<blockquote>
<p><strong>注意：激活脚本文末获取！</strong></p>
</blockquote>
<h3 id="复制补丁所在的整个文件夹到硬盘某个位置"><a href="#复制补丁所在的整个文件夹到硬盘某个位置" class="headerlink" title="复制补丁所在的整个文件夹到硬盘某个位置"></a>复制补丁所在的整个文件夹到硬盘某个位置</h3><p>将 <code>ja-netfilter</code>补丁所在的整个文件夹移动到电脑上某个位置，笔者这里放到了 <code>D</code> 盘下：</p>
<blockquote>
<p><strong>注意：是整个文件夹，不要只复制补丁，另外，确定了放置目录后，后面就不要动了，吃灰就行。</strong></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/08d0c98f7c374d81aed91c84c8a82c2b.png" alt="在这里插入图片描述"></p>
<h3 id="引用激活补丁"><a href="#引用激活补丁" class="headerlink" title="引用激活补丁"></a>引用激活补丁</h3><p>进入 Pycharm 的安装目录，笔者安装时，使用了默认安装路径，然后，进入 <code>/bin</code> 目录下，修改 <code>pycharm64.exe.vmoptions</code> 配置文件：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d7ecd6bb26fc2f6970db27e729b1f8cc.jpeg" alt="进入 Pycharm 2023.2.1 安装目录"></p>
<p>在 <code>pycharm64.exe.vmoptions</code> 配置文件结尾添加如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 引用补丁，开头必须以 -javaagent: 开头，后面跟着补丁的绝对路径（可根据你实际的位置进行修改）,注意路径一定要填写正确，且不能包含中文，否则会导致 Pycharm 无法启动</span><br><span class="line">-javaagent:D:/ja-netfilter/ja-netfilter.jar</span><br><span class="line"></span><br><span class="line"># 最新 Pycharm 版本需要添加下面两行，否则会报 key valid</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/506beb36c87313b37dfceae57977378b.jpeg" alt="Pycharm 配置文件中引用破解补丁"></p>
<h3 id="重启-PyCharm"><a href="#重启-PyCharm" class="headerlink" title="重启 PyCharm"></a>重启 PyCharm</h3><p><strong>配置完成后保存，一定要重启 Pycharm !!!</strong></p>
<p><strong>配置完成后保存，一定要重启 Pycharm !!!</strong></p>
<h2 id="第六步：打开-Pycharm-填入指定激活码完成激活"><a href="#第六步：打开-Pycharm-填入指定激活码完成激活" class="headerlink" title="第六步：打开 Pycharm, 填入指定激活码完成激活"></a>第六步：打开 Pycharm, 填入指定激活码完成激活</h2><p>重启 Pycharm 后，填入下面的激活码，点击激活即可。</p>
<p>VAE9B0CRYZ-eyJsaWNlbnNlSWQiOiJWQUU5QjBDUllaIiwibGljZW5zZWVOYW1lIjoiZnV6emVzIGFsbHkiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTA3LTAxIiwicGFpZFVwVG8iOiIyMDIzLTA3LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDctMDEiLCJwYWlkVXBUbyI6IjIwMjMtMDctMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wNy0wMSIsInBhaWRVcFRvIjoiMjAyMy0wNy0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDcwMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6MTMxNzYyODYxMCIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ&#x3D;&#x3D;-YxAJSVk5XIZkkI6vH33zgb&#x2F;hRmCdqia89zpsVHp2x52PY0XgOOiAlcR3&#x2F;BVhm0qRYLBYBBHMpPcz0+ZWr2diKy0QexfbtVIVsCRkVaRgl67Tbw9MKb5jVNqpqth2yEoW&#x2F;gmm2bZC5RS0qiGcPQpjD7AdRo66P78Vb2TrJ5hz055polMwR0hMxm9ECDedLnqKQXyzmcjkucStFNYYHbF0Gnn0I&#x2F;xrxnVoIDeHMdlsRiBXYPb6TGIVgOIh8ynuGwvP&#x2F;svLVPCI1dYPYF1V3ndDbOOQskOJaC+7K1&#x2F;80xVEb3TT7Orb7PJJDX1AiIjg0gsSctPulz3r1xLHIZNcZJcV0A&#x3D;&#x3D;-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU&#x2F;Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8&#x2F;COMrxRlZW5mfzo0xsK0dQGNH3UoG&#x2F;9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE&#x2F;BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5&#x2F;FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB&#x2F;R5oUlebwaTE6WZNBs+TA&#x2F;qPj+5&#x2F;we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329&#x2F;WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V&#x2F;0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ&#x2F;c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0&#x2F;&#x2F;lOmVya&#x2F;PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0&#x2F;WFPl1aw5VV&#x2F;VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH&#x2F;0onD</p>
<p>复制激活码后填入，点击 <code>Activate</code> 按钮完成激活：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/272aff1d9b0f7f60805ab83a7b17f241.png" alt="填入 Pycharm 2023.2.1 激活码"></p>
<blockquote>
<p>PS: 有部分小伙伴反应，重启 Pycharm 填入激活码依然无法激活，重启系统才行，如果有小伙伴遇到这种情况，不妨试试看~</p>
</blockquote>
<p>点击激活后，就可以看到激活成功辣，又可以开心的 coding 了~：</p>
<p><img src="https://img.quanxiaoha.com/quanxiaoha/169050587759722" alt="Pycharm 2023.2 版本激活破解成功"></p>
<h2 id="一切按照教程来的，激活还是出错，提示-Key-is-invalid？"><a href="#一切按照教程来的，激活还是出错，提示-Key-is-invalid？" class="headerlink" title="一切按照教程来的，激活还是出错，提示 Key is invalid？"></a>一切按照教程来的，激活还是出错，提示 <code>Key is invalid</code>？</h2><ul>
<li>1、部分小伙伴不仔细看教程，激活过程中只复制了 <code>ja-netfilter.jar</code> 一个文件，结果输入激活码时报 <code>Key is invalid</code>, 注意是所在的整个文件夹都需要复制，然后再引用补丁，而不是仅仅复制一个 <code>ja-netfilter.jar</code> 文件；</li>
<li>2、配置文件中，引用补丁必须以 <code>-javaagent:</code> 开头，后面跟着补丁的绝对路径，开头不能丢，否则无法引用破解补丁成功；</li>
<li>3、检查引用的补丁路径中是否包含中文，需要全英文才行；</li>
<li>4、可能是 Pycharm 没卸载干净导致，笔者在 Mac 电脑 Intel 芯片上安装 IDEA 就出现了各种问题，彻底卸载 Pycharm 后，再重新按教程来就激活成功了</li>
<li>5、部分小伙伴反馈说重启系统后，才激活成功的，这种法子也可以尝试一下；</li>
<li>6、检查破解补丁的位置是否动了，切记不要动，不然重启 IDE 又找不到补丁位置了，自然就失败了；</li>
<li>7、还有这种情况：有的小伙伴之前通过本站激活成功的，想破解最新版本的 IDE, 因为不知道补丁已经换了，虽然补丁名字一样，于是没换补丁，只重新输入了激活码，结果显示 <code>Key is invalid</code>, 请使用网站提供的最新补丁。</li>
<li>8、笔者亲测的版本 <code>2023.2.1</code>、<code>2022.1</code>、<code>2021.3.3</code>、<code>2021.3.2</code> 都是可以的，确认你的版本号是否是最新的这些版本，太老的版本请用第二种方法：<strong>无限重置 IDEA 30 天试用期</strong>；</li>
</ul>
<h2 id="2023-2-1-版本为啥不能像-2021-3-3-版本那样显示到-2099-了？"><a href="#2023-2-1-版本为啥不能像-2021-3-3-版本那样显示到-2099-了？" class="headerlink" title="2023.2.1 版本为啥不能像 2021.3.3 版本那样显示到 2099 了？"></a>2023.2.1 版本为啥不能像 2021.3.3 版本那样显示到 2099 了？</h2><p>最新的 2023.2.1 版本应该是做了反制，只能显示到 2023 年，但补丁的本质是暴力拦截了剩余使用期限网络请求，应该还是永久激活。</p>
<h2 id="激活成功后，不要升级-Pycharm-版本"><a href="#激活成功后，不要升级-Pycharm-版本" class="headerlink" title="激活成功后，不要升级 Pycharm 版本"></a>激活成功后，不要升级 Pycharm 版本</h2><p>官方反制手段越来越严厉，这个版本能激活，新版本大概率补丁就被搬了。所以，如果打开 Pycharm 后，右下角若出现提示升级新版本，请不要升级版本。能用就行，它不香嘛！</p>
<blockquote>
<p>也可以手动关闭升级提示，这样就可以防止控制不住自己升级了，如何关闭，参考下面的文章：</p>
<p><a href="https://www.exception.site/article/30">👉《Pycharm 如何关闭更新提示？》</a></p>
</blockquote>
<h2 id="激活成功后，补丁文件夹能不能删掉或者移动？"><a href="#激活成功后，补丁文件夹能不能删掉或者移动？" class="headerlink" title="激活成功后，补丁文件夹能不能删掉或者移动？"></a>激活成功后，补丁文件夹能不能删掉或者移动？</h2><p>前文中的环境变量，小伙伴也看到了，对应了你放置补丁位置的路径，删除掉或者移动，再打开 Pycharm 就找不到对应文件了，激活也就失效了。放着吃灰就行，别动它。</p>
<h2 id="激活补丁下载地址"><a href="#激活补丁下载地址" class="headerlink" title="激活补丁下载地址"></a>激活补丁下载地址</h2><blockquote>
<p>PS: 破解补丁页面提取人数过多，导致分享的百度网盘链接容易被封：<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303261803-caf5.jpeg" alt="Pycharm 2023.2.1破解补丁分享失败">蛋疼ing，为限制人数，目前暂不提供页面直接提取，**<a href="https://note.youdao.com/s/X6AovF9T">点击获取</a>**</p>
</blockquote>
<p>关注我的微信公众号 <strong>程序员徐师兄 plus</strong>，回复 <strong>Pycharm</strong>，会自动将激活码发送给你<br><img src="https://gitlab.com/gdutxiaoxu/blog-img/-/raw/main/gitlab/202309061609-3c1ad0.png" alt="img"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
  </entry>
  <entry>
    <title>Navicat Premium  macOS 永久激活、破解，绿色安装，亲测真实有效</title>
    <url>/p/53971.html</url>
    <content><![CDATA[<blockquote>
<p>嗨喽，大家好，这篇文章主要讲解是 Navicat Premium 的激活，破解教程，仅供学习使用，禁止商用，如有侵权，请联系作者删除</p>
</blockquote>
<p>Navicat 16 macOS 永久破解，软件已集成破解文件于一体，不需要注册机，只需下载安装即可完美激活，从而无限制使用软件中所有的功能服务，亲测真实有效，下面提供安装使用教程供大家参考！</p>
<h3 id="破解版安装教程"><a href="#破解版安装教程" class="headerlink" title="破解版安装教程"></a>破解版安装教程</h3><p>1、关注公众号：<strong>程序员徐师兄 plus</strong> 回复 <strong>navicat</strong> 即可获取 Navicat 16 macOS 永久破解包</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-img/-/raw/main/gitlab/202309061609-3c1ad0.png" alt="img"></p>
<p>2、下载得到 navicat 16 MacOS.dmg 压缩</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309130009-5781.jpg" alt="img"></p>
<p>3、解压后，如下图所示：将左侧的【Navicat Premium 】拉到右侧应用程序中</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309130009-e179.jpg" alt="img"></p>
<p>4、软件拷贝中，请耐心等待完成</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309130009-7fdd.jpg" alt="img"></p>
<p>5、进入应用程序，navicat 16 已经集成破解补丁，双击运行即可打开软件，破解完成</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309130009-df9d.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Navicat Premium 15、 Navicat 16 激活、破解教程，亲测有效</title>
    <url>/p/41063.html</url>
    <content><![CDATA[<blockquote>
</blockquote>
<p>本文讲的是Windows Navicat Premium 15、 Navicat 16 激活、破解教程，亲测有效。</p>
<p><strong>Navicat premium</strong>非常功能强大的多连接数据库管理工具，我们这款软件就是提供了简单数据库开发的基本和必需的功能，可以为专业开发人员提供满足他们所有特定需求的功能，而且对于刚接触数据库服务器的用户来说也很容易学习。用于商业用途，并支持 mysql、MariaDB、sql server、PostgreSQL、oracle 和 sqlite 数据库。</p>
<h2 id="Windows-Navicat-Premium-15、-Navicat-16-激活、破解教程，亲测有效"><a href="#Windows-Navicat-Premium-15、-Navicat-16-激活、破解教程，亲测有效" class="headerlink" title="Windows Navicat Premium 15、 Navicat 16 激活、破解教程，亲测有效"></a>Windows Navicat Premium 15、 Navicat 16 激活、破解教程，亲测有效</h2><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-fb29.png"></h3><h2 id="资源下载链接"><a href="#资源下载链接" class="headerlink" title="资源下载链接"></a>资源下载链接</h2><p>关注微信公众号<strong>【程序员徐师兄 plus】</strong>，回复 <strong>navicat</strong>，即可获取</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-img/-/raw/main/gitlab/202309061609-3c1ad0.png" alt="img"></p>
<h2 id="破解教程"><a href="#破解教程" class="headerlink" title="破解教程"></a><strong>破解教程</strong></h2><p><strong>在开始前，建议先断开本地网络！！！建议先断开本地网络！！！建议先断开本地网络！！！</strong></p>
<ol>
<li>解压缩navicat_premium_cxy521.com.rar，压缩包中包括了32位和64位，请根据自己的电脑选择安装</li>
</ol>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-225c.png"></p>
<p>3.一直下一步，中间会有个提示设置路径的地方，可以修改路径，不建议c盘，会影响电脑允许速度，然后继续一直下一步，直到安装完成</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-85b4.png"></p>
<p>4.安装完成后不要运行navicat premium15，将“Navicat Keygen Patch v5.6.0.zip”解压出来（<strong>提示：360安全卫士等杀毒软件可能会误报，最好激活前先关闭杀软</strong>）；</p>
<p>将Navicat Keygen Patch v5.6.0.exe复制到<strong>Navicat Premium 15安装目录下</strong>，右键选择“以管理员身份运行”</p>
<p>5.注册机打开后，Patch勾选Backup、Host，选择Navicat v15，然后点击Patch按钮</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-dbad.png"></p>
<p>过一会就会有个navicat.exe – x64 -&gt; Cracked!.的弹窗，点击“确定”</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-c192.png"></p>
<p>然后回到注册机，确保以下几个选项是对应的</p>
<p>License为Enterprise</p>
<p>Products为Premium</p>
<p>Languages为Simplified Chinese（简体中文，其它语言版本请自选）</p>
<p>Resale Version为Site license</p>
<p>Your Name和Your Organization可以任意填写或者默认</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-9b1c.png" alt="image-20230327214732141"></p>
<p>上面几项设置好后，点击“Generate”，会自动生成一个注册码，如下图</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-ec61.png"></p>
<p>6.这个时候就可以打开navicat premium15，将上面生成的注册码复制到注册窗口中（注册窗在头部“帮助”选项下面），点击激活，</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-5cc4.png" alt="image-20230327214756813"></p>
<p>会提示因为激活服务器暂时不可使用…..我们选择“手动激活”</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-e800.png"></p>
<p>会生成一个请求码</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-a205.png"></p>
<p>7.将请求码复制到注册机中的Request Code框中，然后点击Generate按钮</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-23c2.png"></p>
<p>Activation Code框中会生成一个激活码</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-ec4f.png"></p>
<p>8.将上面的激活码复制到手动激活窗口中，并点击“激活”</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202303272103-5205.png"></p>
<p>这个时候就会弹出Navicat 现已激活！！！</p>
<p>恭喜，到这里小伙伴们就激活成功啦！！如果经济允许，还是希望大家可以支持一下正版！！！</p>
<p>附上正版购买地址 <a href="http://www.navicat.com.cn/download/navicat-premium">http://www.navicat.com.cn/download/navicat-premium</a></p>
<p>关注微信公众号<strong>【程序员徐师兄 plus】</strong>，回复 <strong>navicat</strong>，即可获取</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-img/-/raw/main/gitlab/202309061609-3c1ad0.png" alt="img"></p>
]]></content>
      <categories>
        <category>破解/激活教程</category>
      </categories>
      <tags>
        <tag>Navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基于微信小程序的快递管理系统</title>
    <url>/p/41844.html</url>
    <content><![CDATA[<h1 id="第一章：简介"><a href="#第一章：简介" class="headerlink" title="第一章：简介"></a>第一章：简介</h1><p>基于微信小程序的快递柜管理系统，主要功能模块划分为用户管理、驿站管理、快递柜管理、取件管理。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-d28e.png" alt="img"></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-8603.png" alt="img"></p>
<h1 id="第二章、-开发环境："><a href="#第二章、-开发环境：" class="headerlink" title="第二章、*开发环境：*"></a>第二章、<em><strong>*开发环境：*</strong></em></h1><h2 id="后端："><a href="#后端：" class="headerlink" title="后端："></a><strong>后端：</strong></h2><p>开发语言：Java</p>
<p>框架：ssm，mybatis</p>
<p>JDK版本：JDK1.8</p>
<p>数据库：mysql 5.7+</p>
<p>数据库工具：Navicat11+</p>
<p>开发软件：eclipse&#x2F;idea</p>
<p>Maven包：Maven3.6</p>
<p>部署容器：tomcat7+</p>
<h2 id="前端："><a href="#前端：" class="headerlink" title="前端："></a><strong>前端：</strong></h2><p>jsp</p>
<h2 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a><strong>数据库：</strong></h2><p>mysql</p>
<h1 id="第三章-系统设计"><a href="#第三章-系统设计" class="headerlink" title="第三章 系统设计"></a>第三章 系统设计</h1><h2 id="3-3-系统功能设计"><a href="#3-3-系统功能设计" class="headerlink" title="3.3 系统功能设计"></a>3.3 系统功能设计</h2><p>结合前文对快递柜管理系统微信小程序的需求分析，将该快递柜管理系统微信小程序的主要功能模块划分为用户管理、驿站管理、快递柜管理、取件管理等。</p>
<h3 id="3-3-1-用户注册模块"><a href="#3-3-1-用户注册模块" class="headerlink" title="3.3.1 用户注册模块"></a>3.3.1 用户注册模块</h3><p>使用快递柜管理系统微信小程序时，需要先进行登录，登录的账号是通过注册信息后获取，其中注册流程图如图3.2所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-3166.png" alt="img"></p>
<p>图3-2 快递柜管理系统微信小程序注册流程图</p>
<p>用户注册时先输入个人的基本信息，为了获取个人的基本内容，尽量多的涉及个人信息字段，如联系方式、性别、生日等，并验证输入的信息是否正确，通过验证后，发送请求到服务器端，服务器端对注册的字段进行验证，通过验证后将信息保存到服务器数据库中，然后返回一个状态，小程序端得到注册成功的状态后，提示用户注册成功，完成注册。</p>
<h3 id="3-3-2-用户登录模块"><a href="#3-3-2-用户登录模块" class="headerlink" title="3.3.2 用户登录模块"></a>3.3.2 用户登录模块</h3><p>用户登录是管理系统必不可少的功能之一，防止非授权用户的破坏。流程图如图3-3所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-4a41.png" alt="img"></p>
<p>图3-3 快递柜管理系统微信小程序登录流程图</p>
<p>在登录页面输入账号和密码，如果没有输入，点击登录将提示用户的账号和密码是必填项，通过必填验证之后，调用服务器端的登录方法，服务器对登录内容进行验证通过后，调用service层的数据库查询，判断该用户是否存在数据库中，验证通过后返回一个状态，小程序根据状态来确定是否跳转到主界面。</p>
<h3 id="3-3-3-驿站管理模块"><a href="#3-3-3-驿站管理模块" class="headerlink" title="3.3.3 驿站管理模块"></a>3.3.3 驿站管理模块</h3><p>管理员登录后，录入驿站信息。包括地址、编号、说明、照片等信息。其中驿站数据管理的流程如3-4所示：</p>
<p>![img](Users&#x2F;junxu&#x2F;Library&#x2F;Group Containers&#x2F;UBF8T346G9.Office&#x2F;TemporaryItems&#x2F;msohtmlclip&#x2F;clip_image006.png)</p>
<h1 id="第4章-系统实现"><a href="#第4章-系统实现" class="headerlink" title="第4章 系统实现"></a>第4章 系统实现</h1><h2 id="4-1-服务器管理员功能实现"><a href="#4-1-服务器管理员功能实现" class="headerlink" title="4.1 服务器管理员功能实现"></a>4.1 服务器管理员功能实现</h2><h3 id="4-1-1-管理员登录功能实现"><a href="#4-1-1-管理员登录功能实现" class="headerlink" title="4.1.1 管理员登录功能实现"></a>4.1.1 管理员登录功能实现</h3><p>管理员登录界面设计如下图4-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-d28e.png" alt="img"></p>
<p>图 4-1 管理员登录界面</p>
<p>用户登录页面，通过div进行页面的布局，使用form表单设计了用户名和密码输入框，并通过button按钮进行form表单的提交，信息提交到control的后台方法中，该方法首先判断用户的权限，如果是管理员用户，使用管理员的service方法查询该管理员账号密码是否正确，并将管理员信息保存在session对象中。</p>
<h3 id="4-1-2-用户管理功能实现"><a href="#4-1-2-用户管理功能实现" class="headerlink" title="4.1.2 用户管理功能实现"></a>4.1.2 用户管理功能实现</h3><p>用户管理界面设计如下图4.2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-4759.png" alt="img"></p>
<p>图 4.2 用户管理界面</p>
<p>管理员点击“添加”按钮，出现添加页面。在添加页面，管理员输入用户名称、选择用户类别，点击“保存”，将该条用户信息录入数据库中。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-ecbe.png" alt="img"></p>
<p>图 4.3 用户添加界面</p>
<p>在用户录入页面，通过DIV进行页面的布局，Form表单收集用户基本信息，点击button按钮后提交form到后台用户保存事件中，业务层调用前台输入的用户实体对象，并将model实体进行保存，通过持久层的用户保存方法提交到数据库中，然后返回到用户列表页面。在列表页面查询用户信息，并将用户数据保存在集合中，用户列表页面使用Java的标签，通过foreach循环显示在界面，在列表中通过点击修改和删除进行数据的管理，点击修改的时候，跳转到后台编辑的页面，该方法获取用户输入的修改信息，并调用Service层的数据库修改方法，修改完成后再返回列表页面刷新集合。用户删除方法和修改方法流程类似。</p>
<h3 id="4-1-3-驿站管理功能实现"><a href="#4-1-3-驿站管理功能实现" class="headerlink" title="4.1.3 驿站管理功能实现"></a>4.1.3 驿站管理功能实现</h3><p>驿站管理界面设计如下图4.4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-a2d2.png" alt="img"></p>
<p>图 4-4驿站管理界面</p>
<p>在驿站录入页面，通过DIV进行页面的布局，Form表单收集驿站基本信息，点击button按钮后提交form到后台驿站保存事件中，业务层调用前台输入的驿站实体对象，并将model实体进行保存，通过持久层的驿站保存方法提交到数据库中，然后返回到驿站列表页面。在列表页面查询驿站信息，并将驿站数据保存在集合中，驿站列表页面使用Java的标签，通过foreach循环显示在界面，在列表中通过点击修改和删除进行数据的管理，点击修改的时候，跳转到后台编辑的页面，该方法获取驿站输入的修改信息，并调用Service层的数据库修改方法，修改完成后再返回列表页面刷新集合。驿站删除方法和修改方法流程类似。</p>
<h3 id="4-1-4-快递管理功能实现"><a href="#4-1-4-快递管理功能实现" class="headerlink" title="4.1.4 快递管理功能实现"></a>4.1.4 快递管理功能实现</h3><p>管理员成功登录后台管理界面，选择“快递管理”，出现系统快递列表。在快递管理页面，管理员可以查询及删除信息。</p>
<p>快递管理界面设计如下图4.5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-42d3.png" alt="img"></p>
<p>图 4-5 快递管理界面</p>
<p>在快递录入页面，通过DIV进行页面的布局，Form表单收集快递基本信息，点击button按钮后提交form到后台快递保存事件中，业务层调用前台输入的快递实体对象，并将model实体进行保存，通过持久层的快递保存方法提交到数据库中，然后返回到快递列表页面。在列表页面查询快递信息，并将快递数据保存在集合中，快递列表页面使用Java的标签，通过foreach循环显示在界面，在列表中通过点击修改和删除进行数据的管理，点击修改的时候，跳转到后台编辑的页面，该方法获取快递输入的修改信息，并调用Service层的数据库修改方法，修改完成后再返回列表页面刷新集合。快递删除方法和修改方法流程类似。</p>
<h2 id="4-2-客户端功能实现"><a href="#4-2-客户端功能实现" class="headerlink" title="4.2 客户端功能实现"></a>4.2 客户端功能实现</h2><h3 id="4-2-1-登录管理实现"><a href="#4-2-1-登录管理实现" class="headerlink" title="4.2.1 登录管理实现"></a>4.2.1 登录管理实现</h3><p>快递柜管理系统微信小程序运行服务器后，才能运行客户端，客户端需要调用服务器的方法才能执行。其中登录的界面设计如下图4-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-9fc1.png" alt="img"></p>
<p>图 4-6 登录界面</p>
<p>打开会员登录的页面，用户填写所有的登录信息后，点击登录，在登录中调用JS的AJAX方法。方法中接收用户实体信息，调用服务器端的用户登录方法。在服务器端获取用户实体信息，对实体进行序列化处理，然后调用用户信息查询的service数据库操作方法，将查询结果通过Json对象进行返回，在客户端解析Json，判断返回的信息是否登录成功。</p>
<p>用户登录成功的主界面为：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-0b0c.png" alt="img"></p>
<p>图 4-7 登录主界面</p>
<p>通过点击主界面列表，完成各功能的操作。因为功能较多，下面列举了系统关键的几个功能点进行实现说明。</p>
<h3 id="4-2-2-个人中心功能实现"><a href="#4-2-2-个人中心功能实现" class="headerlink" title="4.2.2 个人中心功能实现"></a>4.2.2 个人中心功能实现</h3><p>个人中心包括用户的登录、修改密码、个人信息、以及注销等模块。</p>
<p>用户个人信息界面设计如下图4-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-4d22.png" alt="img"></p>
<p>图 4-8用户个人信息界面</p>
<p>​    在个人信息修改中调用JS的AJAX方法。方法中接收用户实体信息，调用服务器端的用户个人信息修改方法。在服务器端获取用户实体信息，对实体进行序列化处理，然后调用用户信息保存的service数据库操作方法，将实体内的会员信息通过SQL语句插入到数据库，并返回一个成功标识的Json对象，在客户端解析Json。判断返回的信息是否修改成功并提供给用户，这样就实现了用户修改的完整流程。</p>
<h3 id="4-2-3-驿站查看功能实现"><a href="#4-2-3-驿站查看功能实现" class="headerlink" title="4.2.3 驿站查看功能实现"></a>4.2.3 驿站查看功能实现</h3><p>点击驿站信息，跳转到驿站信息页面，包括地址、图片等信息。驿站界面设计如下图4-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-8603.png" alt="img"></p>
<p>图 4-9快递驿站界面</p>
<p>​    在驿站信息页面加载时，初始化方法中，调用JS的AJAX方法。方法中接收驿站实体信息，调用服务器端的驿站查询方法。在服务器端获取驿站实体，对实体进行序列化处理，判断查询条件，然后调用驿站查询的service数据库操作方法，将查询结果通过Json对象进行返回，在客户端解析Json，把结果存储在临时集合变量中，对变量进行数据显示绑定到界面。</p>
<h3 id="4-2-4-快递取件管理功能实现"><a href="#4-2-4-快递取件管理功能实现" class="headerlink" title="4.2.4 快递取件管理功能实现"></a>4.2.4 快递取件管理功能实现</h3><p>点击我要取件，跳转到我要取件中，填写取件信息，然后进行提交。管理员对取件状态进行管理。其中取件订单界面设计如下图4-10所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171609-5f45.png" alt="img"></p>
<p>图 4-10取件列表信息界面</p>
<p>通过ajax方法调用服务器端方法，在服务器端方法中，查询数据库的取件信息，然后返回json数据。小程序对返回的信息通过循环显示取件数据。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java基于微信小程序的电影交流平台</title>
    <url>/p/56569.html</url>
    <content><![CDATA[<h1 id="第一章：简介"><a href="#第一章：简介" class="headerlink" title="第一章：简介"></a>第一章：简介</h1><p>基于微信小程序的电影交流平台，前台功能：用户进入系统可以实现首页、电影中心、留言反馈、我的等，在我的页面可以对个人中心、我的收藏管理、留言反馈等功能进行操作；</p>
<p>后台主要是管理员操作，管理员功能包括首页、个人中心、用户管理、电影类型管理、电影中心管理、留言反馈、系统管理等；</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-b139.png" alt="image-20230917170759911"></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-924d.png" alt="image-20230917170851229"></p>
<h1 id="第二章、开发环境："><a href="#第二章、开发环境：" class="headerlink" title="第二章、开发环境："></a>第二章、开发环境：</h1><h2 id="后端："><a href="#后端：" class="headerlink" title="后端："></a><strong>后端：</strong></h2><p>开发语言：Java</p>
<p>框架：ssm，mybatis</p>
<p>JDK版本：JDK1.8</p>
<p>数据库：mysql 5.7+</p>
<p>数据库工具：Navicat11+</p>
<p>开发软件：eclipse&#x2F;idea</p>
<p>Maven包：Maven3.6</p>
<p>部署容器：tomcat7+</p>
<h2 id="前端："><a href="#前端：" class="headerlink" title="前端："></a><strong>前端：</strong></h2><p>微信小程序</p>
<h2 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a><strong>数据库：</strong></h2><p>mysql</p>
<h1 id="三、系统详细设计"><a href="#三、系统详细设计" class="headerlink" title="三、系统详细设计"></a>三、系统详细设计</h1><p>根据电影交流平台小程序的功能需求，进行系统设计。</p>
<p>前台功能：用户进入系统可以实现首页、电影中心、留言反馈、我的等，在我的页面可以对个人中心、我的收藏管理、留言反馈等功能进行操作；</p>
<p>后台主要是管理员操作，管理员功能包括首页、个人中心、用户管理、电影类型管理、电影中心管理、留言反馈、系统管理等；</p>
<p>系统对这些功能进行整合，产生的功能结构图如下：</p>
<p>​                                                                                             <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-c20b.png" alt="image-20230917171436885"></p>
<p>​                               </p>
<p>图3-1 系统总体结构图</p>
<p>3.4 数据库设计与实现</p>
<p>在每一个系统中数据库有着非常重要的作用，数据库的设计得好将会增加系统的效率以及系统各逻辑功能的实现。所以数据库的设计我们要从系统的实际需要出发，才能使其更为完美的符合系统功能的实现。</p>
<h3 id="3-4-1-数据库概念结构设计"><a href="#3-4-1-数据库概念结构设计" class="headerlink" title="3.4.1 数据库概念结构设计"></a>3.4.1 数据库概念结构设计</h3><p>数据库的E-R图反映了实体、实体的属性和实体之间的联系。下面是各个实体以及实体的属性。</p>
<p>电影中心实体属性图如下所示：</p>
<p>![image-20230917171520835](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230917171520835.png) </p>
<p>用户信息实体属性图如下所示：</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-9c93.png" alt="image-20230917171545151"></p>
<h1 id="第四章-系统功能的具体实现"><a href="#第四章-系统功能的具体实现" class="headerlink" title="第四章  系统功能的具体实现"></a>第四章  系统功能的具体实现</h1><h2 id="4-1小程序端"><a href="#4-1小程序端" class="headerlink" title="4.1小程序端"></a>4.1小程序端</h2><p>登录，用户通过输入账号和密码，选择角色并点击登录进行系统登录操作，如图4-1所示。</p>
<p>​                               <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-70ff.png" alt="image-20230917170739077"></p>
<p>用户注册，在用户注册页面通过填写用户账号、密码、确认密码、用户姓名、性别、手机号码等信息进行注册操作；如图4-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-58d5.png" alt="image-20230917170746319"> </p>
<p>用户登陆小程序端，可以对首页、电影中心、留言反馈、我的等功能进行详细操作，如图4-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-b139.png" alt="image-20230917170759911"></p>
<p>电影中心，在电影中心页面可以查看电影名称、电影类型、导演、主演、封面、时长、上映日期、制片地区、评分、点击次数、电影简介等信息，并根据需要进行评论或收藏操作；如图4-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-6bf4.png" alt="image-20230917170810082"></p>
<p>用户，在我的页面可以对个人中心、我的收藏管理、留言反馈等详细信息进行操作，如图4-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-9b48.png" alt="image-20230917170819669"></p>
<p>用户信息，在用户信息页面通过填写用户账号、密码、用户姓名、头像、性别、手机号码等内容进行保存或退出登录操作，如图4-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-ffb1.png" alt="image-20230917170841943"></p>
<h2 id="4-2管理员功能模块"><a href="#4-2管理员功能模块" class="headerlink" title="4.2管理员功能模块"></a>4.2管理员功能模块</h2><p>管理员登录，管理员通过输入账号、密码，并点击登录进入系统操作界面，如图4-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-924d.png" alt="image-20230917170851229"></p>
<p>管理员登陆系统后，可以对首页、个人中心、用户管理、电影类型管理、电影中心管理、留言反馈、系统管理等功能进行相应操作，如图4-8所示。</p>
<p> ![image-20230917170908526](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230917170908526.png)</p>
<p>用户管理，在用户管理页面可以对索引、用户账号、用户姓名、头像、性别、手机号码、审核回复、审核状态、审核等内容进行详情、修改或删除等操作，如图4-9所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-206a.png" alt="image-20230917170915208"></p>
<p>电影类型管理，在电影类型管理页面可以对索引、电影类型等内容进行详情，修改或删除操作，如图4-10所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-bcee.png" alt="image-20230917170944901"></p>
<p>电影中心管理，在电影中心管理页面可以对索引、电影名称、海报、电影类型、导演、主演、时长、上映日期、制片地区、评分等内容进行详情，修改，查看评论或删除操作，如图4-11所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-2faa.png" alt="image-20230917171034521"></p>
<p>留言反馈，在留言反馈页面可以对索引、用户名、留言内容、留言图片、回复内容、回复图片等内容进行详情，修改，回复和删除操作，如图4-12所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-9942.png" alt="image-20230917171046620"></p>
<p>系统管理，在电影资讯页面可以对索引、标题、图片等内容进行详情，修改或删除等操作，还可以对轮播图管理进行详细操作；如图4-13所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309171709-3c3a.png" alt="image-20230917171210217"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java基于SpringBoot 的数码论坛管理系统</title>
    <url>/p/19032.html</url>
    <content><![CDATA[<blockquote>
<p>博主介绍：✌程序员徐师兄、7年大厂程序员经历。全网粉丝30W+、csdn博客专家、掘金&#x2F;华为云&#x2F;阿里云&#x2F;InfoQ等平台优质作者、专注于Java技术领域和毕业项目实战✌</p>
</blockquote>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252109-140f.png"></p>
<h2 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h2><p>本系统主要包括管理员和用户两个角色组成；主要包括：首页、个人中心、用户管理、分类管理、数码板块管理、数码评价管理、数码论坛管理、畅聊板块管理、系统管理等功能的管理系统。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-21dd.png" alt="image-20230925205508743"></p>
<h2 id="第二章-技术栈"><a href="#第二章-技术栈" class="headerlink" title="第二章 技术栈"></a>第二章 技术栈</h2><p>开发语言：Java<br>框架：springboot<br>JDK版本：JDK1.8<br>服务器：tomcat7 或者 Tomcat 8<br>数据库：mysql 5.7（一定要5.7版本，8.0 有时候坑很多）<br>数据库工具：Navicat11<br>开发软件：eclipse&#x2F;myeclipse&#x2F;idea<br>Maven包：Maven3.3.9 (无强制要求)</p>
<h2 id="第三章-具体分析"><a href="#第三章-具体分析" class="headerlink" title="第三章 具体分析"></a>第三章 具体分析</h2><p>考虑到实际生活中在数码论坛方面的需要以及对该系统认真的分析，将系统权限按管理员和用户这两类涉及用户划分。</p>
<p>（1）系统功能需求</p>
<p>登录系统后，主要模块包括首页、数码板块、数码评价、数码论坛、畅聊板块、新闻资讯、个人中心、后台管理等功能。系统功能用例图如图3-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-9a97.jpg" alt="img"></p>
<p>图3-1系统功能用例图</p>
<p>（2）管理员功能需求</p>
<p>管理员登陆后，主要模块包括首页、个人中心、用户管理、分类管理、数码板块管理、数码评价管理、数码论坛管理、畅聊板块管理、系统管理等功能。管理员用例图如图3-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-f31b.jpg" alt="img"></p>
<p>图3-2管理员用例图</p>
<p>（3）用户功能需求</p>
<p>教师登陆后，主要模块包括首页、个人中心、数码评价管理、数码论坛管理、畅聊板块管理等功能。用户用例图如图3-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-0712.jpg" alt="img"></p>
<p>图3-3用户用例图</p>
<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p>为了更好的去理清本系统整体思路，对该系统以结构图的形式表达出来，设计实现该数码论坛系统的功能结构图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-21dd.png" alt="image-20230925205508743"></p>
<h2 id="第五章-系统功能实现"><a href="#第五章-系统功能实现" class="headerlink" title="第五章 系统功能实现"></a>第五章 系统功能实现</h2><h3 id="5-1系统功能模块"><a href="#5-1系统功能模块" class="headerlink" title="5.1系统功能模块"></a>5.1系统功能模块</h3><p>数码论坛系统，在系统首页可以查看首页、数码板块、数码评价、数码论坛、畅聊板块、新闻资讯、个人中心、后台管理等内容，并进行详细操作；如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-ce76.jpg" alt="img"></p>
<p>图5-1系统首页界面图</p>
<p>数码板块，在数码板块页面可以查看综合评分、分类、品牌、产品定位、上市时间、点击次数等内容，并进行配置详情查看操作，如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-6229.jpg" alt="img"></p>
<p>图5-2数码板块界面图</p>
<p>数码评价，在数码评价页面可以查看品牌、分类、评分、优点、缺点、用户账号、用户姓名、评级时间等内容，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-d87c.jpg" alt="img"></p>
<p>图5-3数码评价界面图</p>
<p>数码论坛，在数码论坛页面可以查看产品名称、品牌、分类、讨论类型、用户账号、用户姓名、发布时间等内容，如图5-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-e93a.jpg" alt="img"></p>
<p>图5-4数码论坛界面图</p>
<p>  个人中心，在个人中心页面通过填写用户账号、密码、用户姓名、性别、年龄、上传图片、用户手机等内容进行更新信息，还可以根据需要对我的收藏进行详细操作，如图5-5所示。</p>
<p>![img](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Group Containers&#x2F;UBF8T346G9.Office&#x2F;TemporaryItems&#x2F;msohtmlclip&#x2F;clip_image010.jpg)</p>
<p>图5-5个人中心界面图</p>
<h3 id="5-2-管理员功能模块"><a href="#5-2-管理员功能模块" class="headerlink" title="5.2 管理员功能模块"></a>5.2 管理员功能模块</h3><p>用户登录进入系统前在登录页面根据要求填写用户名和密码，选择角色等信息，点击登录进行系统操作，如图5-6所示。<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-670b.jpg" alt="img"></p>
<p>图5-6管理员登录界面图</p>
<p>管理员登录系统后，可以对首页、个人中心、用户管理、分类管理、数码板块管理、数码评价管理、数码论坛管理、畅聊板块管理、系统管理等功能进行相应的操作管理，如图5-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-8bfa.jpg" alt="img"></p>
<p>图5-7管理员功能界面图</p>
<p>用户管理，在用户管理管理页面可以对索引、用户账号、用户姓名、性别、年龄、头像、用户手机等内容进行详情，修改和删除等操作，如图5-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-168b.jpg" alt="img"></p>
<p>图5-8用户管理界面图</p>
<p>数码板块管理，在数码板块管理页面可以对索引、产品名称、产品图片、综合评分、分类、品牌、产品定位、上市时间等内容进行详情，修改和删除等操作，如图5-9所示。<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-d139.jpg" alt="img"></p>
<p>图5-9数码板块管理界面图</p>
<p>数码评价管理，在数码评价管理页面可以对索引、产品名称、产品图片、品牌、分类、评分、优点、缺点、用户账号、用户姓名、评价时间等内容进行详情，修改，查看评论和删除等操作，如图5-10所示。<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-8e5b.jpg" alt="img"></p>
<p>图5-10数码评价管理界面图</p>
<p>数码论坛管理，在数码论坛管理页面可以对索引、产品名称、图片、品牌、分类、讨论类型、标题、用户账号、发布时间等内容进行查看，修改，查看评论和删除等操作，如图5-11所示。<img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-fb9f.jpg" alt="img"></p>
<p>图5-11数码论坛管理界面图</p>
<h3 id="5-3-用户后台管理模块"><a href="#5-3-用户后台管理模块" class="headerlink" title="5.3 用户后台管理模块"></a>5.3 用户后台管理模块</h3><p>用户登录进入数码论坛系统后台可以对首页、个人中心、数码评价管理、数码论坛管理、畅聊板块管理等功能进行相应操作，如图5-12所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309252009-323b.jpg" alt="img"></p>
<p>图5-12用户后台管理界面图</p>
<h2 id="源码咨询"><a href="#源码咨询" class="headerlink" title="源码咨询"></a>源码咨询</h2><p>更多Java 项目见 <a href="https://it1314.top/category/java_bysj/">Java 精品项目</a></p>
<p><a href="https://github.com/gdutxujun94/GraduationProject">Github 更多题目</a></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>基于微信小程序的学习资料销售平台，附源码、教程</title>
    <url>/p/27851.html</url>
    <content><![CDATA[<h2 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h2><p>本次设计任务是要设计一个微信小程序学习资料销售平台，通过这个系统能够满足微信小程序学习资料销售平台的管理及用户的学习资料销售功能。系统的主要功能包括：首页、个人中心、用户管理、资料类型管理、学习资料管理、系统管理、订单管理等功能。</p>
<p>管理员可以根据系统给定的账号进行登录，登录后可以进入微信小程序学习资料销售平台对学习资料销售所有模块进行管理。包括查看和修改自己的个人信息以及登录密码。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309210009-a319.png" alt="image-20230921001039765"></p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>前端：小程序</p>
<p>开发语言：Java</p>
<p>框架：ssm，mybatis</p>
<p>JDK版本：JDK1.8</p>
<p>数据库：mysql 5.7+</p>
<p>数据库工具：Navicat11+</p>
<p>开发软件：eclipse&#x2F;idea、微信开发者工具</p>
<p>Maven包：Maven3.6</p>
<p>部署容器：tomcat7+</p>
<h2 id="第三章-总体设计"><a href="#第三章-总体设计" class="headerlink" title="第三章 总体设计"></a>第三章 总体设计</h2><p>根据微信小程序学习资料销售平台的功能需求，进行系统设计。</p>
<p>前台功能：用户进入系统可以对我的首页、学习资料、购物车、我的等功能进行操作；在我的页面可以对我的收藏管理，用户充值，购物车，我的订单等进行操作。</p>
<p>后台主要是管理员，管理员功能包括首页、个人中心、用户管理、资料类型管理、学习资料管理、系统管理、订单管理等；</p>
<p>系统对这些功能进行整合，产生的功能结构图如下：</p>
<p>​                               </p>
<p>​                               <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309210009-a319.png" alt="image-20230921001039765"></p>
<h2 id="第四章-系统功能的具体实现"><a href="#第四章-系统功能的具体实现" class="headerlink" title="第四章  系统功能的具体实现"></a>第四章  系统功能的具体实现</h2><h3 id="4-1小程序端"><a href="#4-1小程序端" class="headerlink" title="4.1小程序端"></a>4.1小程序端</h3><p>登录，用户通过输入账号和密码，并点击登录进行系统登录操作，如图4-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309210009-bc44.png" alt="image-20230921000741819"></p>
<p>用户注册，在用户注册页面通过填写账号、密码、确认密码、昵称、性别、手机等信息进行注册操作；如图4-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309210009-5538.png" alt="image-20230921000749229"></p>
<p>用户登陆小程序端，可以对首页、学习资料、购物车、我的等功能进行详细操作，如图4-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309210009-5319.png" alt="image-20230921000800958"></p>
<p>学习资料，在学习资料页面可以查看资料图片、资料名称、价格、资料编号、资料类型、下载链接、发布日期、资料简介等信息，用户可根据自身需要进行加入购物车、立即订购或收藏等操作管理；如图4-4所示。</p>
<p>![image-20230921000814310](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230921000814310.png)</p>
<p>我的订单，在我的订单页面可以查看未支付、已支付、已发货、已完成、已取消、已退款订单等内容；并对不同类型的订单进行处理。如图4-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309210009-6718.png" alt="image-20230921000822506"></p>
<p>用户，在我的页面可以对我的收藏管理、用户充值、购物车、我的订单等详细信息进行操作，如图4-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309210009-de35.png" alt="image-20230921000832294"></p>
<p>用户信息，在用户信息页面通过填写账号、密码、昵称、性别、手机等内容进行保存操作，如图4-7所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309210009-a5fb.png" alt="image-20230921000844578"></p>
<h3 id="4-2-后台管理员功能模块"><a href="#4-2-后台管理员功能模块" class="headerlink" title="4.2 后台管理员功能模块"></a>4.2 后台管理员功能模块</h3><p>管理员登录，管理员通过输入账号、密码，并点击登录进行系统登录操作，如图4-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309210009-b132.png" alt="image-20230921000903218"></p>
<p>管理员登录系统后，可以对首页、个人中心、用户管理、资料类型管理、学习资料管理、系统管理、订单管理等功能进行相应操作，如图4-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309210009-dce4.png" alt="image-20230921000912289"></p>
<p>用户管理，在用户管理页面可以对索引、账号、昵称、性别、手机等内容进行详情、修改或删除等操作，如图4-10所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309210009-f015.png" alt="image-20230921000920738"></p>
<h2 id="第五章-源码咨询"><a href="#第五章-源码咨询" class="headerlink" title="第五章 源码咨询"></a>第五章 源码咨询</h2>]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java基于微信小程序的学习考研平台</title>
    <url>/p/52185.html</url>
    <content><![CDATA[<h1 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h1><p>本文研究了基于微信小程序一起考研学习平台，通过该系统，用户可以主动的在线学习，下载资料，解决实际的问题，提高了效率，同时加强了用户之间的相互交流沟通，促进了信息化的发展。本文研究开发的小程序是学习并上传下载的小程序，开发完成后可以为学生提供很方便的学习平台。微信小程序用户群庞大，使用简单，通过创建微信小程序应用，减少APP的下载安装，更有利于手机软件的维护。手机应用是当前的潮流，传统的管理系统的用户群逐渐减少，通过手机应用可以更加方便地完成相关事宜。对于在线学习来说，通过手机小程序学习过程更加的便捷，用户体验更好。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-49f8.png"></p>
<h1 id="第二章、开发环境："><a href="#第二章、开发环境：" class="headerlink" title="第二章、开发环境："></a>第二章、开发环境：</h1><h2 id="后端："><a href="#后端：" class="headerlink" title="后端："></a><strong>后端：</strong></h2><p>开发语言：Java</p>
<p>框架：ssm，mybatis</p>
<p>JDK版本：JDK1.8</p>
<p>数据库：mysql 5.7+</p>
<p>数据库工具：Navicat11+</p>
<p>开发软件：eclipse&#x2F;idea</p>
<p>Maven包：Maven3.6</p>
<p>部署容器：tomcat7+</p>
<h2 id="前端："><a href="#前端：" class="headerlink" title="前端："></a><strong>前端：</strong></h2><p>微信小程序</p>
<h2 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a><strong>数据库：</strong></h2><p>mysql</p>
<h1 id="第三章：-需求分析"><a href="#第三章：-需求分析" class="headerlink" title="第三章： 需求分析"></a>第三章： 需求分析</h1><p>基于微信小程序一起考研学习平台为用户提供在线学习服务，系统包括微信小程序端和后台。</p>
<p>微信小程序端用户可以先进行注册，注册完成后，管理员审核注册信息。然后进行登录，登录之后查看文件信息，信息包普通文件、付费文件、购买下载付费文件等。科目内容在首页展示，对这些信息中，可以查看对应科目的文件，并在线评论和收藏。点开我的功能模块，修改个人信息，重新登录，查看我的收藏，我的购买历史等功能。</p>
<p>管理员是后台的管理者，对文件的内容进行发布和审核，管理员对文件的科目分类进行管理，管理员还可以对交易信息进行管理，管理用户和发布文件的商家用户。</p>
<h1 id="第四章-详细设计"><a href="#第四章-详细设计" class="headerlink" title="第四章 详细设计"></a>第四章 详细设计</h1><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-49f8.png" alt="image-20230919225828415"></p>
<p>平台的客户端包括注册登录、小程序主页，文件内容搜索，查看文件，文件信息，我的收藏，评价点赞和个人中心。</p>
<p>注册登录是小程序用户基本功能数据库，存储用户的数据，在小程序主页推荐文件信息。用户搜索文件内容，可以根据分类和关键字进行搜索。在文件页面点击下载，可以进行在线下载，其中收藏和评价点赞是针对文件内容的。评论管理是对文件的回复交流，当文件信息删除的时候，对应的评论信息也会删除，评论信息设计了评论名称、评论内容和对应的文件ID，通过文件ID进行外键关联。在个人中心模块进行密码修改或者个人信息的维护</p>
<h1 id="第五章-系统实现"><a href="#第五章-系统实现" class="headerlink" title="第五章 系统实现"></a>第五章 系统实现</h1><h2 id="5-1-服务器功能实现"><a href="#5-1-服务器功能实现" class="headerlink" title="5.1 服务器功能实现"></a>5.1 服务器功能实现</h2><h3 id="5-1-1管理员登录"><a href="#5-1-1管理员登录" class="headerlink" title="5.1.1管理员登录"></a>5.1.1管理员登录</h3><p>使用脚本把数据库导入到mysql中，配置tomcat服务器，运行程序。其中用户登录的界面如下所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-a4da.png" alt="image-20230919225459341"></p>
<p>​                               </p>
<p>图5.1 管理员登录</p>
<p>查询数据库中管理员的用户名和密码，最终查询成功后把信息保存在session中，Session是存储在服务器端的对象，是比较安全的一种技术，在管理端通过判断session中的十来获取用户操作权限。</p>
<h3 id="5-1-2管理主界面"><a href="#5-1-2管理主界面" class="headerlink" title="5.1.2管理主界面"></a>5.1.2管理主界面</h3><p>主界面主要包括了系统管理菜单，通过菜单对系统功能进行管理。每一个功能包括基本的查询、添加等操作。其中主界面如下所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-9cfa.png" alt="image-20230919225506677"></p>
<h3 id="5-1-3文件信息管理"><a href="#5-1-3文件信息管理" class="headerlink" title="5.1.3文件信息管理"></a>5.1.3文件信息管理</h3><p>文件管理包括文件编号、名称、类别、图片内容信息。其中文件管理如下所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-b9ed.png" alt="image-20230919225519154"></p>
<p>创建一个信息录入的form表单，在form中设计文件基本信息收集栏，点击提交的时候，通过form的POST方法传递到文件Action方法中。在Action中定义插入的方法，先实例化文件实体类，将文件信息通过实体类进行设置，然后调用文件数据库操作方法，保存文件信息到数据库，然后返回成功消息。</p>
<h3 id="5-1-4用户管理"><a href="#5-1-4用户管理" class="headerlink" title="5.1.4用户管理"></a>5.1.4用户管理</h3><p>用户管理包括用户信息查看和用户删除功能，管理员对过期的用户进行删除。并审核商家用户。其中用户管理如下所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-f21b.png" alt="image-20230919225532034"></p>
<p>创建一个信息录入的form表单，在form中设计用户基本信息收集栏，点击提交的时候，通过form的POST方法传递到用户Action方法中。在Action中定义插入的方法，先实例化用户实体类，将用户信息通过实体类进行设置，然后调用用户数据库操作方法，保存用户信息到数据库，然后返回成功消息。</p>
<p>在用户信息管理页面先通过查询条件，获取对应的用户列表，然后在用户管理页面通过标签，把所有的用户信息绑定到列表中。</p>
<h2 id="5-2-小程序端功能实现"><a href="#5-2-小程序端功能实现" class="headerlink" title="5.2 小程序端功能实现"></a>5.2 小程序端功能实现</h2><h3 id="5-2-1用户注册"><a href="#5-2-1用户注册" class="headerlink" title="5.2.1用户注册"></a>5.2.1用户注册</h3><p>基于微信小程序一起考研学习平台的用户，必须得进行注册。如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-3104.png" alt="image-20230919225547981"></p>
<p>使用基于微信小程序一起考研学习平台的客户端时，先要进行注册，打开用户注册的页面，用户填写所有的注册信息后，点击注册，在注册中调用JS的AJAX方法。方法中接收用户实体信息，调用服务器端的用户注册方法。在服务器端获取用户实体信息，对实体进行序列化处理，然后调用用户信息保存的service数据库操作方法，将实体内的用户信息通过SQL语句插入到数据库，返回成功的消息。</p>
<h3 id="5-2-2用户登录"><a href="#5-2-2用户登录" class="headerlink" title="5.2.2用户登录"></a>5.2.2用户登录</h3><p>用户填写用户名及密码，正确后才能登入系统，不正确则重新登录。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-01ab.png" alt="image-20230919225602184"></p>
<p>在服务器端获取用户实体信息，对实体进行序列化处理，然后调用用户信息查询的service数据库操作方法，将查询结果通过Json对象进行返回，在客户端解析Json，判断返回的信息是否登录成功。</p>
<h3 id="5-2-3文件查看"><a href="#5-2-3文件查看" class="headerlink" title="5.2.3文件查看"></a>5.2.3文件查看</h3><p>用户登录后，进入系统的主界面，能够看到所有功能列表信息，包括普通文件信息，付费文件信息，订单信息，交易信息，文件收藏。其中客户端主界面如5.8所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-c862.png" alt="image-20230919225612685"></p>
<p>点击文件列表，跳转到文件详情的界面，用户可选择进行查看。在文件详情界面，点击首页，返回到主界面。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-75ad.png" alt="image-20230919225625476"></p>
<p>在文件页面加载时，初始化方法中，调用JS的AJAX方法。方法中接收文件实体信息，调用服务器端的文件查询方法。在服务器端获取文件实体，对实体进行序列化处理，判断查询条件，然后调用文件查询的service数据库操作方法，将查询结果通过Json对象进行返回，在客户端解析Json，把结果存储在临时集合变量中，对变量进行数据显示绑定到界面。</p>
<h3 id="5-2-4用户购买"><a href="#5-2-4用户购买" class="headerlink" title="5.2.4用户购买"></a>5.2.4用户购买</h3><p>选择相关的文件后，在线购买，购买后在个人订单列表中，可以提交到后台。购买界面如5.10所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-d85f.png" alt="image-20230919225634168"></p>
<p>接收购买实体信息，调用服务器端的购买查询方法。在服务器端获取购买实体，对购买实体进行序列化处理，判断查询条件，然后调用购买的service数据库操作方法，将查询结果通过Json对象进行返回，在客户端解析Json，把结果存储在临时集合变量中，对变量进行数据显示绑定到购买列表。</p>
<p>用户购买后，商家审核，并发布文件下载地址，会员可以到购买的列表中，去下载对应的文件。</p>
<h1 id="六-源码咨询"><a href="#六-源码咨询" class="headerlink" title="六 源码咨询"></a>六 源码咨询</h1>]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java基于微信小程序的自主购药系统</title>
    <url>/p/37306.html</url>
    <content><![CDATA[<h2 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h2><p>一个好的系统能将自助购药小程序管理手段提上一个新的台阶。系统内容可以随时更新，这点对于自助购药小程序拥有者来说是很重要，但这是传统的管理方式都无法做到的。自助购药小程序就可以每天更新，随时了解自助购药小程序的最新情况。</p>
<p>自助购药小程序能够通过互联网得到广泛的、全面的宣传，让尽可能多的用户了解和熟知自助购药小程序的便捷高效，为管理者和用户提供了服务，节省人力、物力和时间，提高工作效率。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-3b1d.png" alt="image-20230920235733718"></p>
<h2 id="第二章-技术栈"><a href="#第二章-技术栈" class="headerlink" title="第二章 技术栈"></a>第二章 技术栈</h2><p>前端：小程序</p>
<p>开发语言：Java</p>
<p>框架：ssm，mybatis</p>
<p>JDK版本：JDK1.8</p>
<p>数据库：mysql 5.7+</p>
<p>数据库工具：Navicat11+</p>
<p>开发软件：eclipse&#x2F;idea、微信开发者工具</p>
<p>Maven包：Maven3.6</p>
<p>部署容器：tomcat7+</p>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>一个完整的系统，可行性分析是必须要有的，因为他关系到系统生存问题，对开发的意义进行分析，能否通过本系统来补充线下自助购药小程序管理模式中的缺限，去解决其中的不足等，通过对本系统，不仅能使工作量不断地减少，还能使工作和管理的效率更加高。所以开发该系统能实现更大的意义和价值，系统完成后，能否达到预期效果就要通过可行性分析，分析之后，决定此系统是否开发。该自助购药小程序的开发设计中，对技术、经济、操作方面进行了可行性分析。</p>
<h2 id="第四章系统设计"><a href="#第四章系统设计" class="headerlink" title="第四章系统设计"></a>第四章系统设计</h2><h3 id="4-1功能结构"><a href="#4-1功能结构" class="headerlink" title="4.1功能结构"></a>4.1功能结构</h3><p>为了更好的去理清本系统整体思路，对该系统以结构图的形式表达出来，设计实现该自助购药小程序的功能结构图如下所示：</p>
<p>​                               <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-3b1d.png" alt="image-20230920235733718"></p>
<p>​                           </p>
<h3 id="4-2数据库设计"><a href="#4-2数据库设计" class="headerlink" title="4.2数据库设计"></a>4.2数据库设计</h3><h4 id="4-2-1-数据库E-x2F-R图"><a href="#4-2-1-数据库E-x2F-R图" class="headerlink" title="4.2.1 数据库E&#x2F;R图"></a>4.2.1 数据库E&#x2F;R图</h4><p>ER图是由实体及其关系构成的图，通过E&#x2F;R图可以清楚地描述系统涉及到的实体之间的相互关系。在系统中对一些主要的几个关键实体如下图：</p>
<p>(1)用户注册E&#x2F;R图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-e258.png" alt="image-20230920235747428"></p>
<p>(2)药品信息E&#x2F;R图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-0dbf.png" alt="image-20230920235759386"></p>
<h2 id="第五章系统功能实现"><a href="#第五章系统功能实现" class="headerlink" title="第五章系统功能实现"></a>第五章系统功能实现</h2><h3 id="5-1前台功能模块"><a href="#5-1前台功能模块" class="headerlink" title="5.1前台功能模块"></a>5.1前台功能模块</h3><p>登录，用户通过输入账号和密码等信息并点击登录进行系统登录操作，如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-8a81.png" alt="image-20230920235431368"></p>
<p>用户注册，在注册页面通过填写账号、密码、确认密码、姓名、性别、身份证、手机号码等详细信息进行注册操作；如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-2caa.png" alt="image-20230920235438552"></p>
<p>用户登陆系统后，可以对首页、药品信息、购物车、我的等功能进行详细操作，如图5-3所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-fd1b.png" alt="image-20230920235450877"></p>
<p>药品信息，在药品信息页面可以查看药品名称、药品图片、药品分类、药品成分、生产商、药品功效、服用方式、上架日期、商家账号、商家名称、联系手机、价格、单限、库存、药品简介等详细信息；并进行评加入购物车，立即订购，评论和收藏操作；如图5-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-f468.png" alt="image-20230920235500570"></p>
<p>用户功能，用户在我的页面可以对发票信息、我的收藏管理、用户充值、购物车、我的订单等详细信息进行操作，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-f18b.png" alt="image-20230920235511223"></p>
<p>用户信息，在用户信息页面通过填写账号、密码、姓名、性别、身份证、手机号码、相片等详细信息进行保存或退出登录操作，如图5-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-1520.png" alt="image-20230920235519470"></p>
<h3 id="5-2后台功能模块"><a href="#5-2后台功能模块" class="headerlink" title="5.2后台功能模块"></a>5.2后台功能模块</h3><p>管理员和商家登录，管理员和商家通过输入账号、密码，选择角色并点击登录进行系统登录操作，如图5-7所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-ee02.png" alt="image-20230920235529619"></p>
<h4 id="5-2-1-管理员功能"><a href="#5-2-1-管理员功能" class="headerlink" title="5.2.1 管理员功能"></a>5.2.1 管理员功能</h4><p>管理员登录系统后，可以对首页、个人中心、用户管理、商家管理、药品信息管理、药品分类管理、发票信息管理、系统管理等功能进行相应操作，如图5-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-2fb2.png" alt="image-20230920235551964"></p>
<p>用户管理，在用户管理页面可以对索引、账号、姓名、性别、身份证、手机号码、相片等内容进行详情，修改和删除操作，如图5-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-8c7b.png" alt="image-20230920235603991"></p>
<p>商家管理，在商家管理页面可以对索引、商家账号、商家名称、负责人、身份证、联系手机、相片等内容进行详情，修改和删除操作，如图5-10所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-8c7b.png"></p>
<p>药品信息管理，在药品信息管理页面可以对索引、药品名称、药品图片、药品分类、药品成分、生产商、药品功效、服用方式、上架日期、商家账号、商家名称、联系手机、价格、单限、库存等内容进行详情，修改，查看评论和删除操作，如图5-11所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309202309-aceb.png" alt="image-20230920235620445"></p>
<h2 id="六-源码咨询"><a href="#六-源码咨询" class="headerlink" title="六 源码咨询"></a>六 源码咨询</h2>]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java基于微信小程序的校园商铺平台</title>
    <url>/p/60790.html</url>
    <content><![CDATA[<h2 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h2><p>今天，为大家带来的事基于微信小程序的校园商铺系统。本系统的主要意义在于，全力以赴为用户提供一个操作方便，界面简洁，信息直观的网上交易系统。使用该系统的用户，可以先浏览到最新上架的新品和最热门的产品，并可以注册成为本网站的用户，可以利用购物车选择自己想买的产品，然后向商铺提交订单，从而完成网上的交易流程。</p>
<h2 id="第二章-技术栈"><a href="#第二章-技术栈" class="headerlink" title="第二章 技术栈"></a>第二章 技术栈</h2><p>前端：小程序</p>
<p>开发语言：Java</p>
<p>框架：ssm，mybatis</p>
<p>JDK版本：JDK1.8</p>
<p>数据库：mysql 5.7+</p>
<p>数据库工具：Navicat11+</p>
<p>开发软件：eclipse&#x2F;idea、微信开发者工具</p>
<p>Maven包：Maven3.6</p>
<p>部署容器：tomcat7+</p>
<h2 id="第三章：总体设计"><a href="#第三章：总体设计" class="headerlink" title="第三章：总体设计"></a>第三章：总体设计</h2><p>根据校园商铺系统的功能需求，进行系统设计。</p>
<p>前台功能：用户进入系统可以实现首页、商品信息、交流论坛、我的等进行操作；</p>
<p>后台主要是管理员，管理员功能包括首页、个人中心、用户管理、商家管理、商品类型管理、商品信息管理、在线咨询管理、咨询回复管理、交流论坛、我的收藏管理、留言板管理、系统管理、订单管理等；</p>
<p>系统对这些功能进行整合，产生的功能结构图如下图所示：</p>
<p>​                               <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-2fa4.png" alt="image-20230923234544654"></p>
<h2 id="第四章系统详细设计"><a href="#第四章系统详细设计" class="headerlink" title="第四章系统详细设计"></a>第四章系统详细设计</h2><h3 id="4-1-前台功能模块"><a href="#4-1-前台功能模块" class="headerlink" title="4.1 前台功能模块"></a>4.1 前台功能模块</h3><p>用户要登录微信小程序，则需要注册。在微信小程序的校园商铺系统里有两个用户可以进行登录，分别是用户和商家。用户注册：输入用户名，密码、姓名、性别、手机等信息进行用户注册；商家注册：输入账号、密码、商家姓名、性别、邮箱、联系电话等信息进行商家注册，如图4-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-5e71.png" alt="image-20230923234054866"></p>
<p>​                                 </p>
<p>前台登录：通过注册时输入账号、密码、选择登录的角色，进行登录，如图4-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-c751.png" alt="image-20230923234131874"></p>
<p>商品信息：在商品信息页面，可以查看商品名称、价格、图片、商品类型、发布日期、账号、商家姓名、联系电话、点击次数、库存、商品详情等内容，也能对商品信息进行咨询，加入购物车，立即订购，评论或收藏等操作，如图4-4所示。</p>
<p>​                               <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-c046.png" alt="image-20230923234430131"></p>
<p>用户：在我的页面，可以对商品信息、在线咨询、咨询回复、用户充值、我要发贴、我的发贴、购物车、我的订单、留言板等功能进行相应的操作，如图4-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-8d1f.png" alt="image-20230923234455207"></p>
<p>用户信息：点击用户信息，通过输入用户名、密码、姓名、性别、头像、手机等内容，点击保存来更新用户信息，也可以点击退出登录，退出系统，如图4-6所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-8d1f.png"></p>
<h3 id="4-2后台功能模块"><a href="#4-2后台功能模块" class="headerlink" title="4.2后台功能模块"></a>4.2后台功能模块</h3><p>后台登录，通过输入账号和密码，选择角色等信息进行登录，登录到系统后台，进行相应的操作，如下图所示。 </p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-24aa.png" alt="image-20230923234218605"></p>
<h4 id="4-2-1管理员功能模块"><a href="#4-2-1管理员功能模块" class="headerlink" title="4.2.1管理员功能模块"></a>4.2.1管理员功能模块</h4><p>登录到微信小程序校园商铺系统的后台，管理员可以对首页、个人中心、用户管理、商家管理、商品类型管理、商品信息管理、在线咨询管理、咨询回复管理、交流论坛、我的收藏管理、留言板管理、系统管理、订单管理等功能进行相应操作，如下图所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-2748.png" alt="image-20230923234234872"></p>
<p>用户管理：在用户管理页面，可以对索引、用户名、姓名、性别、头像、手机等用户信息进行详情、修改和删除等操作，如下图所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-2748.png"></p>
<p>商家管理：在商家管理页面，可以对索引、账号、商家姓名、性别、头像、邮箱、联系电话等商家信息进行详情、修改和删除等操作，如下图所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-fdf2.png" alt="image-20230923234253518"></p>
<p>商品信息管理：在商品信息管理页面，可以对索引、商品名称、商品类型、图片、发布日期、账号、商家姓名、联系电话、价格、单限、库存等商品信息进行详情，修改，查看评论或删除等操作，如下图所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-d074.png" alt="image-20230923234304648"></p>
<p>在线咨询管理：在在线咨询管理页面，可以对索引、编号、账号、商家姓名、咨询时间、用户名、姓名等信息进行详情、修改和删除等操作，如下图所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-d074.png"> </p>
<p>咨询回复管理：在咨询回复管理页面，可以对索引、编号、用户名、姓名、回复时间、账号、商家姓名等信息进行详情、修改和删除等操作，如下图所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-9aae.png" alt="image-20230923234322691"></p>
<p>交流论坛：在交流论坛页面，可以对索引、帖子标题、用户名、状态等信息进行详情、修改和删除等操作，如下图所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309232309-9aae.png"></p>
<h2 id="六-源码咨询"><a href="#六-源码咨询" class="headerlink" title="六 源码咨询"></a><strong>六 源码咨询</strong></h2><p><a href="https://it1314.top/category/java_bysj/">500 道Java 毕业设计精品项目</a></p>
<p><a href="https://it1314.top/category/xiaochengxu/">200 道小程序毕业设计精品项目</a></p>
<p><a href="https://github.com/gdutxujun94/GraduationProject">Github 更多题目</a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/github/202309221509-c4055c.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java基于微信小程序的青少年心理健康科普平台</title>
    <url>/p/33632.html</url>
    <content><![CDATA[<h1 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h1><p>青少年心理健康科普平台为用户提供心理医生咨询服务，系统包括微信小程序端和后台。</p>
<p>微信小程序用户可以先进行注册，填写个人的基本信息提交到服务器，服务器把数据保存到数据库。管理员对青少年的信息进行验证后，青少年通过验证后的用户名和密码进行登录，登录之后查看健康知识。心理医生在首页展示，查看心理医生具体信息后，可以进行咨询，填写咨询信息后，医生端可以查看咨询，并进行回复。点开我的功能模块，修改个人信息，重新登录等功能。</p>
<p>管理员是后台的管理者，对系统用户进行管理，对系统健康信息进行管理，系统管理等，发布公告推送给小程序端。</p>
<p><a href="https://www.bilibili.com/video/BV1nV411A7WX/">视频演示地址</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-4d0a.png" alt="image-20230919224019313"></p>
<h1 id="第二章、开发环境："><a href="#第二章、开发环境：" class="headerlink" title="第二章、开发环境："></a>第二章、开发环境：</h1><h2 id="后端："><a href="#后端：" class="headerlink" title="后端："></a><strong>后端：</strong></h2><p>开发语言：Java</p>
<p>框架：ssm，mybatis</p>
<p>JDK版本：JDK1.8</p>
<p>数据库：mysql 5.7+</p>
<p>数据库工具：Navicat11+</p>
<p>开发软件：eclipse&#x2F;idea</p>
<p>Maven包：Maven3.6</p>
<p>部署容器：tomcat7+</p>
<h2 id="前端："><a href="#前端：" class="headerlink" title="前端："></a><strong>前端：</strong></h2><p>jsp</p>
<h2 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a><strong>数据库：</strong></h2><p>mysql</p>
<h1 id="第三章-系统设计"><a href="#第三章-系统设计" class="headerlink" title="第三章 系统设计"></a>第三章 系统设计</h1><p>青少年心理健康科普平台包括用户管理、新闻公告管理、咨询管理、健康知识、系统管理、心理测试管理、心理问答管理。</p>
<p>用户管理包括管理员管理、心理医生管理、青少年用户管理。当前台青少年进行注册的时候，权限设为青少年。管理员用户权限设置为管理员。虽然数据存储在一个数据库表，但是在登录的时候使用权限类别进行区分，管理员用户无法通过客户端进行登录。同理，客户端用户也无法登陆管理员端。</p>
<p>新闻公告是管理员发布健康知识的公告，信息发布后的公告在客户端浏览查看。</p>
<p>其中系统功能结构图如4.1所示：</p>
<p>​                                                                </p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-4d0a.png" alt="image-20230919224019313">         </p>
<p>主要功能：</p>
<p>青少年管理。青少年用户的注册、登录。青少年在个人中心，进行个人信息的修改和用户密码的修改，系统注销等操作。</p>
<p>心理医生管理，管理员录入心理医生，修改心理医生信息。在前台可以查看心理医生风采，包括心理医生的介绍和个人图片信息。心理医生通过用户名和密码登录系统，管理个人信息。</p>
<p>站内新闻管理。管理员对站内新闻信息的管理，信息保存在数据库中，通过前台查看站内新闻信息。</p>
<p>其中图片是保存在服务器端，数据库记录对应的图片链接地址，在资源类信息保存中还可以通过二进制进行保存。本系统为了降低数据库的负荷，把图片以文件格式进行存储，这样既减轻了服务器的数据库的存储，也提高了图片数据传输的速度。青少年发布后，在管理端对数据进行管理，删除一些违法违规的记录。没有删除的记录将在客户端首页进行展示，用于其他青少年查看。青少年可以通过健康知识的分类进行搜索，不同分类对应了不同的健康知识。也可以通过关键字进行检索。</p>
<p>更改个人信息：用户登录后可以对个人信息进行修改，确保用户信息的准确性和实效性。</p>
<p>心理测试:为用户提供一些心理小测试，用户可以根据测试结果对自己的心理状态有一个大概的了解。</p>
<p>健康知识：里面有各个专题的心理文章，比如人际社交、家庭关系等。</p>
<p>心理咨询：主要是学生用户进行心理咨询。</p>
<h1 id="第四章-效果图"><a href="#第四章-效果图" class="headerlink" title="第四章 效果图"></a>第四章 效果图</h1><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-2777.png" alt="image-20230919224414065"></p>
<h2 id="我的"><a href="#我的" class="headerlink" title="我的"></a>我的</h2><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-e880.png" alt="image-20230919224357988"></p>
<h2 id="后台界面"><a href="#后台界面" class="headerlink" title="后台界面"></a>后台界面</h2><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309192209-68b2.png" alt="image-20230919224458178"></p>
<h1 id="五、-源码咨询"><a href="#五、-源码咨询" class="headerlink" title="五、 源码咨询"></a>五、 源码咨询</h1><p> v xiaoxu_9411</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA 控制台中文乱码的四种解决方案，统一设置 UTF-8</title>
    <url>/p/2694.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>IntelliJ IDEA 如果不进行配置的话，运行程序时控制台有时候会遇到中文乱码，中文乱码问题非常严重，甚至影响我们对信息的获取和程序的跟踪。开发体验非常不好。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309302009-9e36.png" alt="在这里插入图片描述"></p>
<p>本文中我总结出四点用于解决控制台中文乱码问题的方法，希望有助于大家。  </p>
<p><strong>注意</strong>：下面根据我日常工作的经验总结，排序的先后即为我们需要注意修改的先后。在每次进行修改之后<strong>一定要重启 IntelliJ IDEA 使配置生效</strong>。</p>
<h2 id="一、修改当前-Web-项目-Tomcat-Server-的虚拟机输出选项"><a href="#一、修改当前-Web-项目-Tomcat-Server-的虚拟机输出选项" class="headerlink" title="一、修改当前 Web 项目 Tomcat Server 的虚拟机输出选项"></a>一、修改当前 Web 项目 Tomcat Server 的虚拟机输出选项</h2><p>上方导航栏“Run→Edit Configurations…”进入配置页面，修改当前 Web 项目 Tomcat Server 的虚拟机输出选项 VM options 添加 <code>-Dfile.encoding=UTF-8</code> ，具体如下图所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309302009-70e5.png" alt="img"></p>
<p> 在重启之后运行程序检查控制台信息，如果不管用请执行下面的步骤。</p>
<h2 id="二、修改-IntelliJ-IDEA-全局编码、项目编码、属性文件编码"><a href="#二、修改-IntelliJ-IDEA-全局编码、项目编码、属性文件编码" class="headerlink" title="二、修改 IntelliJ IDEA 全局编码、项目编码、属性文件编码"></a>二、修改 IntelliJ IDEA 全局编码、项目编码、属性文件编码</h2><p>上方导航栏“File→Settings…”进入配置页面，在“Editor”中下滑找到“File Encodings”，分别将 Global Encoding、Project Encoding、Default encoding for properties files 都设置为 <code>UTF-8</code>，具体如下图所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309302009-2df4.png" alt="img"></p>
<p> 在重启之后运行程序检查控制台信息，如果不管用请执行下面的步骤。</p>
<h2 id="三、IntelliJ-IDEA-中自定义虚拟机选项"><a href="#三、IntelliJ-IDEA-中自定义虚拟机选项" class="headerlink" title="三、IntelliJ IDEA 中自定义虚拟机选项"></a>三、IntelliJ IDEA 中自定义虚拟机选项</h2><p>上方导航栏“Help→Etit Custom VM Options…”进入自定义虚拟机选项页面，具体如下图所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309302009-c87b.png" alt="img"></p>
<p> 在 idea64.exe.vmoptions 文件尾加上<code>-Dfile.encoding=UTF-8</code>，具体如下图所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309302009-aa75.png" alt="image-20230930204618792"></p>
<p> 在重启之后运行程序检查控制台信息，一般到了这步问题就解决了，当然如果不管用请执行下面的<strong>超级步骤</strong>。</p>
<h2 id="四、直接修改-IntelliJ-IDEA-配置文件的编码信息"><a href="#四、直接修改-IntelliJ-IDEA-配置文件的编码信息" class="headerlink" title="四、直接修改 IntelliJ IDEA 配置文件的编码信息"></a>四、直接修改 IntelliJ IDEA 配置文件的编码信息</h2><p>我们打开 IntelliJ IDEA 在本地的安装目录，找到下面两个文件，使用记事本打开，在最后一行添加<code>-Dfile.encoding=UTF-8</code> 即可，具体如下图所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309302009-901b.png" alt="image-20230930204632232"></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309302009-ddf7.png" alt="image-20230930204653178"></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309302009-0ff4.png" alt="image-20230930204704850"></p>
<p> 在重启之后运行程序检查控制台信息，问题解决！</p>
<h2 id="五、修改成功乱码问题解决"><a href="#五、修改成功乱码问题解决" class="headerlink" title="五、修改成功乱码问题解决"></a>五、修改成功乱码问题解决</h2><p>通过以上四种方式完全可以修改我们在 IntelliJ IDEA 遇到的控制台中文乱码问题，<strong>记得要重启哦</strong><br>希望大家能够在看了本帖之后，请将你使用哪种方法进行修改成功留言在本帖下方，给予更多人帮助。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309302009-83c2.png" alt="image-20230930204717834"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  在本文中我总结了四种方法完美解决 IntelliJ IDEA 控制台中文乱码问题。</p>
<p>这里我再次强调一下：在每次进行修改之后一定要<strong>重启 IntelliJ IDEA</strong> 使配置生效。</p>
<p>另外，大家可以在评论区说一下到底哪种方式对你来说有用，也就是说哪种乱码问题最常见。关于 IDEA 的问题和一些技巧之类的博客，我之后会更加频繁的更新！好工具用起来！  </p>
<p><a href="https://blog.csdn.net/JasonXu94/article/details/128890123">Pycharm 中文乱码解决，统一设置 UTF-8，再也不会乱码了</a></p>
]]></content>
      <categories>
        <category>破解-激活教程</category>
      </categories>
  </entry>
  <entry>
    <title>Java 毕业设计 - 基于 Vue 和 SpringBoot 前后端分离的人事管理系统</title>
    <url>/p/20103.html</url>
    <content><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>本文讲解的事 Java基于 SpringBoot 的人事管理系统。本系统涉到的功能主要有：首页，个人中心，员工管理，部门管理，员工考勤管理，请假申请管理，加班申请管理，员工工资管理，招聘计划管理，员工培训管理，部门培训管理，员工详细管理等功能</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011710-a399.jpg" alt="img"></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011710-1032.png" alt="image-20231001172240427"></p>
<h2 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2 技术栈"></a>2 技术栈</h2><p>开发语言：Java<br>框架：springboot<br>JDK版本：JDK1.8<br>服务器：tomcat7 或者 Tomcat 8<br>数据库：mysql 5.7（一定要5.7版本，8.0 有时候坑很多）<br>数据库工具：Navicat11<br>开发软件：eclipse&#x2F;myeclipse&#x2F;idea<br>Maven包：Maven3.3.9 (无强制要求)</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="3-功能分析"><a href="#3-功能分析" class="headerlink" title="3 功能分析"></a>3 功能分析</h2><p>对系统性能进行分析，可对系统反应度、界面简洁清晰度、储存能性、易学性和稳定性进行分析；</p>
<p>系统反应度：同时上万人在线时反应时间应该在两三秒以内。</p>
<p>界面简洁清晰：系统界面要求简单明了，操作简单，员工操作容易上手。</p>
<p>储存性能高：人事管理系统中需要存储的信息有很多，所以对系统的存储量要求很高，因此数据库就应该很强大，才能保证信息能安全稳定的进行存储；</p>
<p>易学性：该系统在操作上必须简单好上手，没有很多复杂的操作，只需要简单的进行学习就能操作该系统。</p>
<p>稳定性：要求人事管理系统运行要稳定，界面清楚、字体清晰等。</p>
<h3 id="3-1-系统功能分析"><a href="#3-1-系统功能分析" class="headerlink" title="3.1 系统功能分析"></a>3.1 系统功能分析</h3><p>考虑到实际生活中在人事管理方面的需要以及对该系统认真的分析,将系统权限按管理员和员工这两类涉及用户划分。</p>
<p>(a)管理员；管理员使用本系统涉到的功能主要有：首页，个人中心，员工管理，部门管理，员工考勤管理，请假申请管理，加班申请管理，员工工资管理，招聘计划管理，员工培训管理，部门培训管理，员工详细管理等功能。管理员用例图如图3-1所示。</p>
<p> (b)员工；员工使用本系统涉到的功能主要有：首页，个人中心，员工考勤管理，请假申请管理，加班申请管理，员工工资管理，招聘计划管理，员工培训管理，部门培训管理，员工详细管理等功能。员工用例图如图3-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011710-2ce3.jpg" alt="img"></p>
<h2 id="4-平台设计"><a href="#4-平台设计" class="headerlink" title="4 平台设计"></a>4 平台设计</h2><h3 id="4-1功能结构"><a href="#4-1功能结构" class="headerlink" title="4.1功能结构"></a>4.1功能结构</h3><p>为了更好的去理清本平台整体思路，对该平台以结构图的形式表达出来，功能结构图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011710-1032.png" alt="image-20231001172240427"></p>
<h2 id="5系统详细设计"><a href="#5系统详细设计" class="headerlink" title="5系统详细设计"></a>5系统详细设计</h2><h3 id="5-1-管理员功能模块"><a href="#5-1-管理员功能模块" class="headerlink" title="5.1 管理员功能模块"></a>5.1 管理员功能模块</h3><p>管理员进行登录，进入系统前在登录页面根据要求填写用户名和密码，选择角色等信息，点击登录进行登录操作，如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011710-a399.jpg" alt="img"></p>
<p>管理员登录系统后，可以对首页，个人中心，员工管理，部门管理，员工考勤管理，请假申请管理，加班申请管理，员工工资管理，招聘计划管理，员工培训管理，部门培训管理，员工详细管理等进行相应的操作管理，如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011710-c069.jpg" alt="img"></p>
<p>员工工资管理，在员工工资管理页面可以对索引，发放时间，员工工号，员工姓名，职位，部门，基本工资，绩效，车补，餐补，房补，全勤奖，加班费，五险一金，扣绩效，旷工费，其它扣款，实发工资等内容进行详情，修改和删除等操作，如图5-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011710-8c77.jpg" alt="img"></p>
<p>招聘计划管理，在招聘计划管理页面可以对索引，员工工号，员工姓名，职位，部门，招聘岗位，招聘要求，招聘人数，申请时间，审核回复，审核状态，审核等内容进行详情，修改和删除等操作，如图5-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011710-b06b.jpg" alt="img"></p>
<p>部门培训管理，在部门培训管理页面可以对索引，部门，培训时间，培训地点，结束时间，备注等内容进行详情，修改和删除等操作，如图5-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011710-d1a2.jpg" alt="img"></p>
<h3 id="5-2-员工功能模块"><a href="#5-2-员工功能模块" class="headerlink" title="5.2 员工功能模块"></a>5.2 员工功能模块</h3><p>员工登录进入人事管理系统可以对首页，个人中心，员工考勤管理，请假申请管理，加班申请管理，员工工资管理，招聘计划管理，员工培训管理，部门培训管理，员工详细管理等进行相应操作，如图5-11所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011710-fb4c.jpg" alt="img"></p>
<p>个人中心，在个人信息页面通过填写员工工号，员工姓名，部门，职位，性别，年龄，员工手机，照片，基本工资等内容对个人信息进行修改操作，如图5-12所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011710-7ceb.jpg" alt="img"></p>
<h2 id="6-推荐阅读"><a href="#6-推荐阅读" class="headerlink" title="6 推荐阅读"></a>6 推荐阅读</h2><p><a href="https://it1314.top/article/583/">微信小程序毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/41/">Java毕业设计-SpringBoot+Vue毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/584/">Java毕业设计-Java SSM+JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/585/">Java毕业设计-Java JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/616/">Android 毕业设计-项目合集</a></p>
<p><a href="https://it1314.top/article/615/">Python 毕业设计合集</a></p>
<p><a href="https://it1314.top/category/java_bysj/">Java 精品项目</a></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java 基于 SpringBoot 的考研咨询、考研论坛平</title>
    <url>/p/36431.html</url>
    <content><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>考研资讯平台，在系统当中学生可以根据不同的信息来实现该网站的考研资讯平台信息的管理。</p>
<p><a href="https://www.zhihu.com/zvideo/1689668081801216000">视频演示地址</a></p>
<p><a href="https://www.zhihu.com/zvideo/1689668081801216000">视频演示地址</a></p>
<p>系统主要分为前台和后台。主要包括学生前台：首页、考研资讯、报考指南、资料信息、论坛信息、我的、跳转到后台、购物车、客服，</p>
<p>管理员：首页、个人中心、考研资讯管理、学生管理、报考指南管理、资料信息管理、资料分类管理、论坛管理、系统管理、订单管理</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-fc64.png" alt="img"></p>
<h2 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2 技术栈"></a>2 技术栈</h2><p>开发语言：Java<br>框架：springboot<br>JDK版本：JDK1.8<br>服务器：tomcat7 或者 Tomcat 8<br>数据库：mysql 5.7（一定要5.7版本，8.0 有时候坑很多）<br>数据库工具：Navicat11<br>开发软件：eclipse&#x2F;myeclipse&#x2F;idea<br>Maven包：Maven3.3.9 (无强制要求)</p>
<h2 id="3-需求分析"><a href="#3-需求分析" class="headerlink" title="3 需求分析"></a>3 需求分析</h2><p>本课题要求实现一套考研资讯平台，系统主要分为前台和后台。主要包括学生前台：首页、考研资讯、报考指南、资料信息、论坛信息、我的、跳转到后台、购物车、客服，<br>管理员：首页、个人中心、考研资讯管理、学生管理、报考指南管理、资料信息管理、资料分类管理、论坛管理、系统管理、订单管理，<br>学生后台：首页、个人中心、我的收藏管理、订单管理等功能。<br>学生前台用例需求如图3-1所示：</p>
<h2 id="4-系统设计"><a href="#4-系统设计" class="headerlink" title="4 系统设计"></a>4 系统设计</h2><p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-06b8.png" alt="img"></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-799f.png" alt="img"></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-bac4.png" alt="img"></p>
<h2 id="5-系统效果图"><a href="#5-系统效果图" class="headerlink" title="5 系统效果图"></a>5 系统效果图</h2><h3 id="5-1学生前台功能模块"><a href="#5-1学生前台功能模块" class="headerlink" title="5.1学生前台功能模块"></a>5.1学生前台功能模块</h3><p>5.1.2首页</p>
<p>在系统首页可以查看首页、考研资讯、报考指南、资料信息、论坛信息、我的、跳转到后台、购物车、客服等内容，如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-1ca4.png" alt="image-20230930154322873"></p>
<p> 5.1.3 学生注册</p>
<p>在学生注册页面通过填写学号、密码、学生姓名、专业、班级、手机、邮箱等信息完成学生注册，如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-44f8.png" alt="img"></p>
<p>5.1.4登录</p>
<p>在登录页面可以填账号、密码等详细内容进行登录，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-7fa8.png" alt="img"></p>
<h3 id="5-2登录设计实现"><a href="#5-2登录设计实现" class="headerlink" title="5.2登录设计实现"></a>5.2登录设计实现</h3><p>学生和管理员输入个人的账号和密码登录系统，这时候我们所对于这个系统的数据库来进行一些相关信息的查找，假如我们对输入的账号和密码不正确的时候，数据库就会自动提示出错误的信息，同时提示用户要从新输入正确的信息。网站登录效果图如图5-5、5-6所示：</p>
<p>![img](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Group Containers&#x2F;UBF8T346G9.Office&#x2F;TemporaryItems&#x2F;msohtmlclip&#x2F;clip_image005.png)</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-fc64.png" alt="img"></p>
<h3 id="5-3-后台系统实现"><a href="#5-3-后台系统实现" class="headerlink" title="5.3 后台系统实现"></a>5.3 后台系统实现</h3><h4 id="5-3-1管理员模块"><a href="#5-3-1管理员模块" class="headerlink" title="5.3.1管理员模块"></a>5.3.1管理员模块</h4><p>管理员主要管理：首页、个人中心、考研资讯管理、学生管理、报考指南管理、资料信息管理、资料分类管理、论坛管理、系统管理、订单管理等内容。具体管理员管理效果如下图5-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-80fc.png" alt="img"></p>
<h4 id="5-3-2考研资讯管理"><a href="#5-3-2考研资讯管理" class="headerlink" title="5.3.2考研资讯管理"></a>5.3.2考研资讯管理</h4><p>管理员登录系统后台以后可以对考研资讯管理进行修改、删除以及对考研资讯管理进行查看等操作，具体的运行效果图如下图5-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-96cc.png" alt="img"></p>
<h4 id="5-3-3学生管理"><a href="#5-3-3学生管理" class="headerlink" title="5.3.3学生管理"></a>5.3.3学生管理</h4><p>管理员进入后台对学生管理信息进行查看、修改、删除等操作，学生管理功能效果图如图5-9所示。</p>
<p>  <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-dfdd.png" alt="img"></p>
<h4 id="5-3-4报考指南管理"><a href="#5-3-4报考指南管理" class="headerlink" title="5.3.4报考指南管理"></a>5.3.4报考指南管理</h4><p>管理员可以对报考指南管理信息进行修改、查看、删除等操作。报考指南管理效果图如下图5-10所示：</p>
<p>![img](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Group Containers&#x2F;UBF8T346G9.Office&#x2F;TemporaryItems&#x2F;msohtmlclip&#x2F;clip_image010.png)</p>
<h4 id="5-3-5资料信息管理"><a href="#5-3-5资料信息管理" class="headerlink" title="5.3.5资料信息管理"></a>5.3.5资料信息管理</h4><p>管理员可以对资料信息管理信息进行删除、修改、添加等具体的操作。资料信息管理效果图如下图5-11所示：</p>
<p>![img](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Group Containers&#x2F;UBF8T346G9.Office&#x2F;TemporaryItems&#x2F;msohtmlclip&#x2F;clip_image011.png)</p>
<h4 id="5-3-6资料分类管理"><a href="#5-3-6资料分类管理" class="headerlink" title="5.3.6资料分类管理"></a>5.3.6资料分类管理</h4><p>管理员可以对资料分类管理信息进行添加、查看、删除、修改等操作。资料分类管理效果图如5-12所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-cabe.png" alt="img"></p>
<h4 id="5-3-7论坛管理"><a href="#5-3-7论坛管理" class="headerlink" title="5.3.7论坛管理"></a>5.3.7论坛管理</h4><p>管理员可以对论坛管理信息进行添加、查看、删除、修改等操作。论坛管理效果图如5-13所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-e7d3.png" alt="img"></p>
<h2 id="源码咨询"><a href="#源码咨询" class="headerlink" title="源码咨询"></a>源码咨询</h2><p><a href="https://it1314.top/article/583/">微信小程序毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/41/">Java毕业设计-SpringBoot+Vue毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/584/">Java毕业设计-Java SSM+JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/585/">Java毕业设计-Java JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/616/">Android 毕业设计-项目合集</a></p>
<p><a href="https://it1314.top/article/615/">Python 毕业设计合集</a></p>
<p><a href="https://it1314.top/category/java_bysj/">Java 精品项目</a></p>
<p><a href="https://github.com/gdutxujun94/GraduationProject">Github 更多题目</a> </p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java 毕业设计，基于 SpringBoot+Vue 的网上书城商城管理系统（毕业设计，附源码，教程）</title>
    <url>/p/29537.html</url>
    <content><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>本文讲解的是 Java基于 SpringBoot 的网上书城管理系统。网上书城管理系统，为用户随时随地查看网上书城管理系统信息提供了便捷的方法，更重要的是大大的简化了管理员管理网上书城信息的方式方法，更提供了其他想要了解网上书城信息及运作情况以及挑选方便快捷的可靠渠道。相比于传统网上书城管理系统信息管理方法，这样的电子信息管理更为简洁方便，在网上书城管理系统维护信息反馈和处理网上书城信息意见方面也有得天独厚的优势。</p>
<p><a href="https://it1314.top/article/943/">文章首发地址</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-d32d.png" alt="image-20231002235558527"></p>
<h2 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2 技术栈"></a>2 技术栈</h2><p>开发语言：Java<br>框架：springboot<br>JDK版本：JDK1.8<br>服务器：tomcat7 或者 Tomcat 8<br>数据库：mysql 5.7（一定要5.7版本，8.0 有时候坑很多）<br>数据库工具：Navicat11<br>开发软件：eclipse&#x2F;myeclipse&#x2F;idea<br>Maven包：Maven3.3.9 (无强制要求)</p>
<h2 id="3-需求分析"><a href="#3-需求分析" class="headerlink" title="3 需求分析"></a>3 需求分析</h2><p>通过前面的功能分析可以将网上书城管理系统的功能分为管理员和用户两个部分，系统的主要功能包括首页、个人中心、用户管理、图书类型管理、图书分类管理、图书信息管理、我的收藏管理、系统管理、订单管理等内容。任何用户只要进入网站不需登录也可浏览到的信息，后台管理是针对已登录的用户看到满意的网上书城信息而设计的</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310030010-d03d.png" alt="image-20231003000549336"></p>
<h2 id="4-数据库设计"><a href="#4-数据库设计" class="headerlink" title="4 数据库设计"></a>4 数据库设计</h2><p>用户注册实体图如图4-1所示：</p>
<p>​                                                                              <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310030010-3886.png" alt="image-20231003000331891">               </p>
<p>图书信息实体图如图4-2所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310030010-4c12.png" alt="image-20231003000359123"></p>
<p>购物车实体图如图4-3所示：</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310030010-98f2.png" alt="image-20231003000411972"></p>
<p>（3）数据库逻辑结构分析</p>
<p>数据库概念结构设计后，可以数据库概念转化实际的数据模型，这是一种数据库的逻辑结构，就是将概念结构与支持数据库管理系统的模型相符合。具体的表设计如下所示：</p>
<p>表4-1：配置文件</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td>varchar</td>
<td>100</td>
<td>配置参数名称</td>
<td></td>
<td></td>
</tr>
<tr>
<td>value</td>
<td>varchar</td>
<td>100</td>
<td>配置参数值</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表4-2：用户</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>yonghuming</td>
<td>varchar</td>
<td>200</td>
<td>用户名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>mima</td>
<td>varchar</td>
<td>200</td>
<td>密码</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingming</td>
<td>varchar</td>
<td>200</td>
<td>姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xingbie</td>
<td>varchar</td>
<td>200</td>
<td>性别</td>
<td></td>
<td></td>
</tr>
<tr>
<td>touxiang</td>
<td>varchar</td>
<td>200</td>
<td>头像</td>
<td></td>
<td></td>
</tr>
<tr>
<td>youxiang</td>
<td>varchar</td>
<td>200</td>
<td>邮箱</td>
<td></td>
<td></td>
</tr>
<tr>
<td>shouji</td>
<td>varchar</td>
<td>200</td>
<td>手机</td>
<td></td>
<td></td>
</tr>
<tr>
<td>money</td>
<td>float</td>
<td></td>
<td>余额</td>
<td></td>
<td>0</td>
</tr>
</tbody></table>
<h1 id="5系统详细设计"><a href="#5系统详细设计" class="headerlink" title="5系统详细设计"></a>5系统详细设计</h1><h2 id="5-1系统功能模块"><a href="#5-1系统功能模块" class="headerlink" title="5.1系统功能模块"></a>5.1系统功能模块</h2><p>网上书城管理系统，在系统首页可以查看首页、图书信息、公告资讯、个人中心、后台管理、购物车等内容进行详细操作，如图5-1所示。</p>
<p>​                               <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-d32d.png" alt="image-20231002235558527"></p>
<p>用户注册，在用户注册页面通过填写用户名、密码、姓名、邮箱、手机等信息完成用户注册，如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-d453.png" alt="image-20231002235637255"></p>
<p>  图书信息，在图书信息页面可以查看图书名称、价格、单次购买、库存、图书分类、图书类型、图片、简述、作者、出版社、点击次数、详情等详细内容，并进行添加到购物车、立即购买，评论或收藏等操作，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-9e22.png" alt="image-20231002235708142"></p>
<p>个人中心，在个人中心页面通过填写用户名、密码、姓名、性别、上传图片、邮箱、手机、余额等内容进行更新信息，根据需要对我的订单，我的地址、我的收藏进行相应的操作管理，如图5-4所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-aecc.png" alt="image-20231002235725472"></p>
<p>购物车，在购物车页面可以查看购买商品、价格、数量、总价等详细内容，并进行点击购买或删除等操作，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-aecc.png"></p>
<h2 id="5-2管理员功能模块"><a href="#5-2管理员功能模块" class="headerlink" title="5.2管理员功能模块"></a>5.2管理员功能模块</h2><p>管理员登录系统，管理员通过输入用户名、密码，选择角色并点击登录进行系统登录操作，如图5-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-c76e.png" alt="image-20231002235852701"></p>
<p>管理员登录系统后，可以对首页、个人中心、用户管理、图书类型管理、图书分类管理、图书信息管理、我的收藏管理、系统管理、订单管理等功能进行相应操作，如图5-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-d0b3.png" alt="image-20231002235900533"></p>
<p>用户管理，在用户管理页面可以对索引、用户名、姓名、性别、头像、邮箱、手机等信息进行详情，修改或删除等操作，如图5-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-fb4c.png" alt="image-20231002235915416"></p>
<p>图书类型管理，在图书类型管理页面可以对索引、图书类型等信息进行修改和删除等操作，如图5-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-0a9f.png" alt="image-20231002235922028"></p>
<p>图书分类管理，在图书分类管理页面可以对索引、图书分类信息进行修改或删除等操作，如图5-10所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-3b5a.png" alt="image-20231002235929461"></p>
<p>图书信息管理，在图书信息管理页面可以对索引、图书名称、图书分类、图书类型、图片、简述、作者、出版社、价格、单限、库存等信息进行详情，修改、查看评论或删除等操作，如图5-11所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-fb4c.png"></p>
<p>系统管理，在公告资讯页面可以对索引、标题、图片等信息进行详情，修改或删除等操作，还可以对轮播图管理进行详细操作；如图5-12所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-a15f.png" alt="image-20231002235947700"></p>
<p>订单管理，在已支付订单页面可以对索引、订单编号、商品名称、商品图片、购买数量、价格&#x2F;积分、折扣价格、总价格&#x2F;总积分、折扣总价格、支付类型、状态、地址、电话、收货人、商品类型、下单时间等信息进行详情，发货或删除等操作，还可以对已退款订单，已完成订单，已发货订单，未支付订单，已取消订单进行相应的操作管理；如图5-13所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310022310-7692.png" alt="image-20231002235955709"></p>
<h2 id="5-3用户后台功能模块"><a href="#5-3用户后台功能模块" class="headerlink" title="5.3用户后台功能模块"></a>5.3用户后台功能模块</h2><p>用户登录进入系统后台，可以对首页、个人中心、我的收藏管理、订单管理等功能进行相应操作，如图5-14所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310030010-3677.png" alt="image-20231003000008241"></p>
<p>个人中心，在个人信息页面通过填写用户名、姓名、性别、头像、邮箱、手机等信息进行个人信息修改操作，如图5-15所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310030010-3677.png"></p>
<h2 id="6-推荐阅读"><a href="#6-推荐阅读" class="headerlink" title="6 推荐阅读"></a>6 推荐阅读</h2><p><a href="https://it1314.top/article/583/">微信小程序毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/41/">Java毕业设计-SpringBoot+Vue毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/584/">Java毕业设计-Java SSM+JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/585/">Java毕业设计-Java JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/616/">Android 毕业设计-项目合集</a></p>
<p><a href="https://it1314.top/article/615/">Python 毕业设计合集</a></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java 基于 SpringBoot的教师人事档案管理系统</title>
    <url>/p/9717.html</url>
    <content><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>教师人事档案管理系统利用信息的合理管理，动态的、高效的、安全的实现了教师的各种需求，改变了传统的网上查看方式，使教师可以足不出户的在线查看最适合自己个人档案、奖惩信息、档案变动、培训报名或者新闻资讯。</p>
<p><a href="https://www.zhihu.com/zvideo/1689667822731550720">视频演示地址</a></p>
<p><a href="https://www.zhihu.com/zvideo/1689667822731550720">视频演示地址</a></p>
<p>1、教师后台功能模块包括：首页、个人中心、个人档案管理、奖惩信息管理、档案变动管理、培训报名管理、课程信息管理、我的收藏管理模块。</p>
<p>2、前台功能模块包括：首页、培训信息、系统公告、个人中心、后台管理、客服模块。</p>
<p>3、管理员功能模块包括：个人中心、教师管理、个人档案管理、奖惩信息管理、档案变动管理、培训学校管理、培训报名管理、课程信息管理、论坛管理、系统管理1模块。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-e042.jpg" alt="img"></p>
<h2 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2 技术栈"></a>2 技术栈</h2><p>开发语言：Java<br>框架：springboot<br>JDK版本：JDK1.8<br>服务器：tomcat7 或者 Tomcat 8<br>数据库：mysql 5.7（一定要5.7版本，8.0 有时候坑很多）<br>数据库工具：Navicat11<br>开发软件：eclipse&#x2F;myeclipse&#x2F;idea<br>Maven包：Maven3.3.9 (无强制要求)</p>
<h2 id="3-需求功能分析"><a href="#3-需求功能分析" class="headerlink" title="3 需求功能分析"></a>3 需求功能分析</h2><p>此系统的功能分为教师和管理员模块：</p>
<p>1、教师后台功能模块包括：首页、个人中心、个人档案管理、奖惩信息管理、档案变动管理、培训报名管理、课程信息管理、我的收藏管理模块。</p>
<p>2、前台功能模块包括：首页、培训信息、系统公告、个人中心、后台管理、客服模块。</p>
<p>3、管理员功能模块包括：个人中心、教师管理、个人档案管理、奖惩信息管理、档案变动管理、培训学校管理、培训报名管理、课程信息管理、论坛管理、系统管理1模块。</p>
<h2 id="4-系统功能介绍"><a href="#4-系统功能介绍" class="headerlink" title="4 系统功能介绍"></a>4 系统功能介绍</h2><p>管理员主要功能包括：首页、个人中心、教师管理、个人档案管理、奖惩信息管理、档案变动管理、培训学校管理、培训报名管理、课程信息管理、论坛管理、系统管理如，图4-3</p>
<p>  <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-e042.jpg" alt="img"></p>
<p>教师后台：首页、个人中心、个人档案管理、奖惩信息管理、档案变动管理、培训报名管理、课程信息管理、我的收藏管理功能结构图</p>
<h2 id="5-系统详细设计"><a href="#5-系统详细设计" class="headerlink" title="5 系统详细设计"></a>5 系统详细设计</h2><h3 id="5-1-前台功能模块"><a href="#5-1-前台功能模块" class="headerlink" title="5.1 前台功能模块"></a>5.1 前台功能模块</h3><p>前台首页，在教师人事档案管理系统首页可以查看首页、培训信息、系统公告、个人中心、后台管理、客服等内容，如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-e042.jpg" alt="img"></p>
<p>登录，在登录页面可以填写账号、密码、角色等详细信息，根据需要进行登录，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-e321.jpg" alt="img"></p>
<p>个人中心，在个人中心页面可以填写教师工号、密码、教师姓名、性别、照片、联系电话、邮箱等信息，根据需要对个人信息进行添加、修改、删除如图5-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-7e88.jpg" alt="img"></p>
<p>培训信息，在培训信息页面可以查看信息，根据需要对培训信息进行报名、评论、收藏等，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-6550.jpg" alt="img"></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-6e9e.jpg" alt="img"></p>
<p>论坛信息，在论坛信息页面可以进行查看等信息，根据需要发布帖子，如图5-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-e1b7.jpg" alt="img"></p>
<p>5.2管理员功能模块</p>
<p>管理员登录，管理员通过输入账号，密码，权限等信息即可进行系统登录，如图5-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-d1da.jpg" alt="img"></p>
<p>管理员登录进入教师人事档案管理系统可以查看首页、个人中心、教师管理、个人档案管理、奖惩信息管理、档案变动管理、培训信息管理、、培训报名管理、课程信息管理、论坛管理、系统管理等内容，如图5-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-aae7.jpg" alt="img"></p>
<p>个人信息，管理员对个人中心进行操作填写原密码、新密码、确认密码并进行添加、删除、修改以及查看。，如图5-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-da74.jpg" alt="img"></p>
<p>教师管理，在教师管理页面可以查看教师工号、密码、教师姓名、性别、照片、联系电话、邮箱等内容，并可根据需要进行删除，修改等操作，如图5-10所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-805f.jpg" alt="img"></p>
<p>奖惩信息管理，在奖惩信息管理页面可以查看教师工号、教师姓名、性别、 获奖时间、惩罚时间、获奖内容、惩罚内容等信息，并可根据需要进行删除，修改等操作，如图5-11所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-dc1d.jpg" alt="img"></p>
<p>培训信息管理，在培训信息管理页面可以查看培训时间、培训地点、授课讲师、天数、发表日期、培训目标、培训内容等信息，并可根据需要进行删除，修改等操作，如图5-12所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-d5d5.jpg" alt="img"></p>
<p>系统管理，管理员通过系统管理页面查看轮播图&#x2F;系统公告&#x2F;客服管理等进行上传图片进行添加、删除、修改以及查看并对整个系统进行维护等操作，如图5- 13所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-94cf.jpg" alt="img"></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301509-1aa5.jpg" alt="img"></p>
<h2 id="源码咨询"><a href="#源码咨询" class="headerlink" title="源码咨询"></a>源码咨询</h2><p><a href="https://it1314.top/article/583/">微信小程序毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/41/">Java毕业设计-SpringBoot+Vue毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/584/">Java毕业设计-Java SSM+JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/585/">Java毕业设计-Java JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/616/">Android 毕业设计-项目合集</a></p>
<p><a href="https://it1314.top/article/615/">Python 毕业设计合集</a></p>
<p><a href="https://it1314.top/category/java_bysj/">Java 精品项目</a></p>
<p><a href="https://github.com/gdutxujun94/GraduationProject">Github 更多题目</a> </p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>Java基于 SpringBoot 的大学生租房网站的研究与实</title>
    <url>/p/31107.html</url>
    <content><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>本大学生租房系统使用简洁的框架结构，专门用于用户浏览首页，房屋信息，房屋评价，公告资讯，个人中心，后台管理，意见反馈等信息，对个人信息进行修改等，以及系统管理员对首页，个人中心，房主管理，用户管理，房屋类型管理，房屋信息管理，预约看房管理，定金留房管理，租赁订单管理，房屋评价管理等的操作。房主对首页，个人中心，房屋信息管理，预约看房管理，定金留房管理，租赁订单管理，房屋评价管理等的操作。系统具有方便性、灵活性、应用性。本大学生租房系统设计使用简洁的框架结构，让管理员，房主和用户登录后的进行相关的操作</p>
<p><a href="https://www.zhihu.com/zvideo/1689668081801216000">视频演示地址</a></p>
<p><a href="https://www.zhihu.com/zvideo/1689668081801216000">视频演示地址</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-c36e.jpg" alt="img"></p>
<h2 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2 技术栈"></a>2 技术栈</h2><p>开发语言：Java<br>框架：springboot<br>JDK版本：JDK1.8<br>服务器：tomcat7 或者 Tomcat 8<br>数据库：mysql 5.7（一定要5.7版本，8.0 有时候坑很多）<br>数据库工具：Navicat11<br>开发软件：eclipse&#x2F;myeclipse&#x2F;idea<br>Maven包：Maven3.3.9 (无强制要求)</p>
<h2 id="3-需求分析"><a href="#3-需求分析" class="headerlink" title="3 需求分析"></a>3 需求分析</h2><p>本次的毕业设计主要就是在基于Java语言平台下设计并开发一个大学生租房系统软件。运用当前Google提供的Java来实现对大学生租房信息查询。当然使用的数据库是Mysql。尽管没有面向对象的数据库的作用强大，但是在Java开发上还是比较的灵活和方便的。系统功能主要介绍以下几点：</p>
<p>l 欢迎界面功能</p>
<p>欢迎界面是在运行该软件时的第一个要显示的界面，出现在菜单界面之前。主要就是显示欢迎使用大学生租房系统。只要用户开启该软件，就会首先出来欢迎界面。</p>
<p>l 主界面菜单选项功能</p>
<p>主界面是该软件的第一个真正意义上的可操作界面，来响应用户的第一步的操作。主要就是让用户进行选择功能，即大学生租房信息查询的选择。界面的主要需求就是简单明了，在加上清新明目的背景图片，一定会给用户视觉上的快感。主界面这里拒绝那些繁琐的操作，给用户以方便。</p>
<h2 id="4-系统设计"><a href="#4-系统设计" class="headerlink" title="4 系统设计"></a>4 系统设计</h2><p>根据大学生租房系统的功能需求，进行系统设计。</p>
<p>前台功能：进入系统可以实现首页，房屋信息，房屋评价，公告资讯，个人中心，后台管理，意见反馈等功能进行操作；</p>
<p>后台主要是管理员，房主和用户，主要功能包括首页，个人中心，房主管理，用户管理，房屋类型管理，房屋信息管理，预约看房管理，定金留房管理，租赁订单管理，房屋评价管理等。</p>
<p>系统对这些功能进行整合，产生的功能结构图如下：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-c36e.jpg" alt="img"></p>
<h1 id="5-系统详细设计"><a href="#5-系统详细设计" class="headerlink" title="5 系统详细设计"></a>5 系统详细设计</h1><h2 id="5-1系统功能模块"><a href="#5-1系统功能模块" class="headerlink" title="5.1系统功能模块"></a>5.1系统功能模块</h2><p>大学生租房系统，在系统首页可以查看首页，房屋信息，房屋评价，公告资讯，个人中心，后台管理，意见反馈等内容，并进行详细操作；如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-bfbd.jpg" alt="img"></p>
<p>用户注册，在用户注册页面通过填写用户名，密码，确认密码，姓名，手机，身份证等信息进行注册操作，如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-e764.jpg" alt="img"></p>
<p>房屋信息，在房屋信息页面可以查看房屋类型，地区，位置，朝向，楼层，楼号，房屋面积，房屋设施，房屋状态，房屋租金，房主账号，房主姓名等内容，并可以进行预约看房，定金留房等操作，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-0558.jpg" alt="img"></p>
<h2 id="5-2管理员模块"><a href="#5-2管理员模块" class="headerlink" title="5.2管理员模块"></a>5.2管理员模块</h2><p>登录，进入系统前在登录页面根据要求填写用户名和密码，选择角色等信息，点击登录进行登录操作，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-f95c.jpg" alt="img"></p>
<p>管理员登录系统后，可以对首页，个人中心，房主管理，用户管理，房屋类型管理，房屋信息管理，预约看房管理，定金留房管理，租赁订单管理，房屋评价管理等功能进行相应的操作，如图5-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-e8b1.jpg" alt="img"></p>
<p>房主管理，在房主管理页面可以对索引，房主账号，房主姓名，性别，照片，联系电话，身份证等内容进行详情，修改和删除等操作，如图5-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-8a1f.jpg" alt="img"></p>
<p>用户管理，在用户管理页面可以对索引，用户名，姓名，性别，头像，手机，身份证等信息进行详情，修改和删除操作，如图5-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-2b02.jpg" alt="img"></p>
<p>房屋信息管理，在房屋信息管理页面可以对 索引，房屋名称，房屋类型，图片，地区，位置，朝向，楼层，楼号，房屋面积，房屋设施，房屋状态，房屋租金，房主账号，房主姓名，联系电等内容进行详情，修改和删除操作，如图5-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-4caf.jpg" alt="img"></p>
<h2 id="5-3房主功能模块"><a href="#5-3房主功能模块" class="headerlink" title="5.3房主功能模块"></a>5.3房主功能模块</h2><p>房主登录进入大学生租房系统可以对首页，个人中心，房屋信息管理，预约看房管理，定金留房管理，租赁订单管理，房屋评价管理等功能进行相应操作，如图5-11所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-8b5a.jpg" alt="img"></p>
<h2 id="5-4用户功能模块"><a href="#5-4用户功能模块" class="headerlink" title="5.4用户功能模块"></a>5.4用户功能模块</h2><p>用户登录进入大学生租房系统可以对首页，个人中心，预约看房管理，定金留房管理，租赁订单管理，房屋评价管理，消息提醒管理，我的收藏管理等功能进行相应操作，如图5-14所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-83c3.jpg" alt="img"></p>
<p>预约看房管理，在预约看房管理页面可以对索引，房屋名称，房屋类型，房屋图片，房主账号，联系电话，看房时间，预约备注，用户名，手机，审核回复，审核状态等内容进行详情操作，如图5-15所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-e04b.jpg" alt="img"></p>
<p>定金留房管理，在定金留房管理页面可以对索引，房屋名称，房屋类型，房屋图片，定金金额，下单日期，房主账号，房屋租金，租赁状态，留言备注，用户名，手机，是否支付等内容进行详情，租赁下单等操作，如图5-16所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309301809-ab4a.jpg" alt="img"></p>
<p>​                                           </p>
<h2 id="源码咨询"><a href="#源码咨询" class="headerlink" title="源码咨询"></a>源码咨询</h2><p><a href="https://it1314.top/article/583/">微信小程序毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/41/">Java毕业设计-SpringBoot+Vue毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/584/">Java毕业设计-Java SSM+JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/585/">Java毕业设计-Java JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/616/">Android 毕业设计-项目合集</a></p>
<p><a href="https://it1314.top/article/615/">Python 毕业设计合集</a></p>
<p><a href="https://it1314.top/category/java_bysj/">Java 精品项目</a></p>
<p><a href="https://github.com/gdutxujun94/GraduationProject">Github 更多题目</a> </p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>java 基于 SpringBoot 的企业信息反馈平台</title>
    <url>/p/50433.html</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>企业客户信息反馈的需求和管理上的不断提升，企业客户信息反馈管理的潜力将无限扩大，企业客户信息反馈平台在业界被广泛关注，本平台及对此进行总体分析，将企业客户信息反馈信息管理的发展提供参考。企业客户信息反馈平台对企业客户信息反馈有着明显的带动效应，对管理帮助更大。</p>
<p>本平台主要包括管理员和客户两个角色组成；主要包括：首页，个人中心，客户管理，问题类型管理，问题信息管理，问题报表管理，技术文档管理，系统管理等功能的管理平台。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-7a55.jpg" alt="img"></p>
<h2 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2 技术栈"></a>2 技术栈</h2><p>开发语言：Java<br>框架：springboot<br>JDK版本：JDK1.8<br>服务器：tomcat7 或者 Tomcat 8<br>数据库：mysql 5.7（一定要5.7版本，8.0 有时候坑很多）<br>数据库工具：Navicat11<br>开发软件：eclipse&#x2F;myeclipse&#x2F;idea<br>Maven包：Maven3.3.9 (无强制要求)</p>
<h2 id="3-功能分析"><a href="#3-功能分析" class="headerlink" title="3 功能分析"></a>3 功能分析</h2><p>考虑到实际生活中在企业客户信息反馈管理方面的需要以及对该平台认真的分析，将平台权限按管理员、客户这两类涉及用户划分。</p>
<p>（1）管理员功能需求</p>
<p>管理员登陆后，主要模块包括首页，个人中心，客户管理，问题类型管理，问题信息管理，问题报表管理，技术文档管理，系统管理等功能。管理员用例图如图3-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-7e23.jpg" alt="img"></p>
<p>图3-1 管理员用例图</p>
<p>（2）客户功能需求</p>
<p>客户登陆后，主要模块包括首页，问题信息，技术文档，平台公告，个人中心，后台管理等功能。客户用例图如图3-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-f3d2.jpg" alt="img"></p>
<p>图3-2 客户用例图</p>
<h2 id="4-功能结构"><a href="#4-功能结构" class="headerlink" title="4 功能结构"></a>4 功能结构</h2><p>为了更好的去理清本平台整体思路，对该平台以结构图的形式表达出来，设计实现该企业客户信息反馈平台的功能结构图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-7a55.jpg" alt="img"></p>
<p>图4-1 平台总体结构图</p>
<h2 id="4-2-数据库设计"><a href="#4-2-数据库设计" class="headerlink" title="4.2 数据库设计"></a>4.2 数据库设计</h2><h3 id="4-2-1-数据库E-x2F-R图"><a href="#4-2-1-数据库E-x2F-R图" class="headerlink" title="4.2.1 数据库E&#x2F;R图"></a>4.2.1 数据库E&#x2F;R图</h3><p>ER图是由实体及其关系构成的图，通过E&#x2F;R图可以清楚地描述平台涉及到的实体之间的相互关系。在平台中对一些主要的几个关键实体如下图：</p>
<p>(1)客户管理E&#x2F;R图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-8a79.jpg" alt="img"></p>
<p>图4-2客户管理E&#x2F;R图</p>
<p> (2)问题信息管理E&#x2F;R图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-11cd.jpg" alt="img"></p>
<p>图4-3问题信息管理E&#x2F;R图</p>
<h2 id="第五章-平台功能实现"><a href="#第五章-平台功能实现" class="headerlink" title="第五章 平台功能实现"></a>第五章 平台功能实现</h2><h3 id="5-1平台功能模块"><a href="#5-1平台功能模块" class="headerlink" title="5.1平台功能模块"></a>5.1平台功能模块</h3><p>企业客户信息反馈平台，在平台首页可以查看首页，问题信息，技术文档，平台公告，个人中心，后台管理等内容，并进行详细操作；如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-a868.jpg" alt="img"></p>
<p>图5-1平台首页界面图</p>
<p>技术文档，在技术文档页面可以查看文档名称，文档编号，上传时间，技术文档等内容，并进行收藏操作，如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-0dde.jpg" alt="img"></p>
<p>图5-2技术文档界面图</p>
<p>问题信息，在问题信息页面可以查看问题名称，问题类型，问题状态，提出时间，账号，姓名，电话等内容，并进行提交评论操作，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-6425.jpg" alt="img"></p>
<p>图5-3问题信息界面图</p>
<p>  个人中心，在个人中心页面通过填写账号，姓名，密码，性别，上传图片，电话，年龄等内容进行更新信息，还可以根据需要对我的收藏进行详细操作，如图5-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-024e.jpg" alt="img"></p>
<p>图5-4个人中心界面图</p>
<h3 id="5-2后台登录"><a href="#5-2后台登录" class="headerlink" title="5.2后台登录"></a>5.2后台登录</h3><p>用户登录进入平台前在登录页面根据要求填写用户名和密码，点击登录进行平台操作，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-3d48.jpg" alt="img"></p>
<p>图5-5后台登录界面图</p>
<h4 id="5-2-1管理员功能"><a href="#5-2-1管理员功能" class="headerlink" title="5.2.1管理员功能"></a>5.2.1管理员功能</h4><p>管理员登录平台后，可以对首页，个人中心，客户管理，问题类型管理，问题信息管理，问题报表管理，技术文档管理，系统管理等功能进行相应的操作管理，如图5-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-468c.jpg" alt="img"></p>
<p>图5-6管理员功能界面图</p>
<p>客户管理，在客户管理页面可以对索引，账号，姓名，头像，性别，电话，年龄等内容进行详情，修改，或删除等操作，如图5-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-6536.jpg" alt="img"></p>
<p>图5-7客户管理界面图</p>
<p>问题信息管理，在问题信息管理页面可以对索引，问题名称，问题类型，封面，问题状态，提出时间，账号，姓名，电话等信息进行详情，修改，查看评论，删除等操作，如图5-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-4df0.jpg" alt="img"></p>
<p>图5-8问题信息管理界面图</p>
<p>问题报表管理，在问题报表管理页面可以对索引，报表编号，问题类型，新增数量，解决数量，统计日期等内容进行详情，修改或删除等操作，如图5-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-2433.jpg" alt="img"></p>
<p>图5-9问题报表管理界面图</p>
<p>技术文档管理，在技术文档管理页面可以对索引，文档编码，文档名称，文档图片，技术文档，上传时间等内容进行详情，修改，查看评论，删除等操作，如图5-10所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-4346.jpg" alt="img"></p>
<p>图5-10技术文档管理界面图</p>
<p>问题类型管理，在问题类型管理页面可以对索引，问题类型等内容进行详情，修改和删除等操作，如图5-11所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-165b.jpg" alt="img"></p>
<p>图5-11问题类型管理界面图</p>
<p>系统管理，在平台公告页面可以对索引，标题，图片等内容进行详情，修改和删除等操作，还可以对轮播图管理进行详细的操作管理；如图5-12所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-a25f.jpg" alt="img"></p>
<p>图5-12平台管理界面图</p>
<h4 id="5-2-2客户功能"><a href="#5-2-2客户功能" class="headerlink" title="5.2.2客户功能"></a>5.2.2客户功能</h4><p>客户登录平台后，可以对首页，个人中心，问题信息管理，我的收藏管理等功能进行相应的操作管理，如图5-13所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-e69e.jpg" alt="img"></p>
<p>图5-13管理员功能界面图</p>
<p>个人中心，在个人中心页面可以对账号，姓名，头像，性别，电话，年龄等内容进行修改操作，如图5-14所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310011610-9e79.jpg" alt="img"></p>
<h2 id="6-推荐阅读"><a href="#6-推荐阅读" class="headerlink" title="6 推荐阅读"></a>6 推荐阅读</h2><p><a href="https://it1314.top/article/583/">微信小程序毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/41/">Java毕业设计-SpringBoot+Vue毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/584/">Java毕业设计-Java SSM+JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/585/">Java毕业设计-Java JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/616/">Android 毕业设计-项目合集</a></p>
<p><a href="https://it1314.top/article/615/">Python 毕业设计合集</a></p>
<p><a href="https://it1314.top/category/java_bysj/">Java 精品项目</a></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>基于 SpringBoot 的学生考勤管理系统</title>
    <url>/p/9893.html</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>本文讲解的是 Java基于 SpringBoot 的学生考勤系统。学生考勤管理系统能做到的不仅是大大简化管理员的信息管理工作，在提高学生考勤管理效率的同时还能缩减开支，更能在数字化的平面网络上将学生考勤管理最好的一面展示给客户和潜在客户，而这个系统在带给学生考勤管理全新用户信息管理统计和分类的同时，还成为日后学生考勤管理制定管理方式的重要数据参考</p>
<p><a href="https://it1314.top/article/946/">文章首发地址</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-2f9f.png" alt="image-20231004115439670"></p>
<h2 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2 技术栈"></a>2 技术栈</h2><p>开发语言：Java<br>框架：springboot<br>JDK版本：JDK1.8<br>服务器：tomcat7 或者 Tomcat 8<br>数据库：mysql 5.7（一定要5.7版本，8.0 有时候坑很多）<br>数据库工具：Navicat11<br>开发软件：eclipse&#x2F;myeclipse&#x2F;idea<br>Maven包：Maven3.3.9 (无强制要求)</p>
<h2 id="3-功能分析"><a href="#3-功能分析" class="headerlink" title="3 功能分析"></a>3 功能分析</h2><p>本课题要求实现一套学生考勤管理系统，系统主要包括（管理员，教师和学生）三个模块等功能。</p>
<p>（1）管理员用例图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-b000.png" alt="image-20231004142621248"></p>
<p>（2）教师用例图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-9ccf.png" alt="image-20231004142632728"></p>
<p>（3）学生用例图如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-0b32.png" alt="image-20231004142645809"></p>
<h2 id="4-ER-图"><a href="#4-ER-图" class="headerlink" title="4 ER 图"></a>4 ER 图</h2><p>考勤信息管理E&#x2F;R图，如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-df97.png" alt="image-20231004115758491"></p>
<p>学生E&#x2F;R图，如下所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-c595.png" alt="image-20231004115810768"></p>
<p>图4-3学生E&#x2F;R图</p>
<h2 id="5-系统实现"><a href="#5-系统实现" class="headerlink" title="5 系统实现"></a>5 系统实现</h2><h3 id="5-1系统登录注册"><a href="#5-1系统登录注册" class="headerlink" title="5.1系统登录注册"></a>5.1系统登录注册</h3><p>系统登录，用户在登录页面通过填写用户名，密码，选择相对应的角色等信息进行登录操作；如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-2f9f.png" alt="image-20231004115439670"></p>
<p>学生注册，在学生注册页面通过填写学号，密码，确认密码，姓名，年级，专业，班级，手机等信息进行注册操作；如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-47ef.png" alt="image-20231004115448318"></p>
<h3 id="5-2管理员功能模块"><a href="#5-2管理员功能模块" class="headerlink" title="5.2管理员功能模块"></a>5.2管理员功能模块</h3><p>管理员登录进入系统可以查看首页，个人中心，学生管理，教师管理，班级信息管理，课程信息管理，签到信息管理，考勤信息管理，请假信息管理，考勤统计管理等功能，并进行详细操作，如图5-3所示。</p>
<p>![image-20231004115456521](&#x2F;Users&#x2F;junxu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20231004115456521.png) </p>
<p>学生管理；在学生管理页面中可以查看索引，学号，姓名，性别，年级，专业，班级，手机，照片等内容，并进行详情，统计考勤，修改和删除操作；如图5-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-0381.png" alt="image-20231004115507195"></p>
<p>教师管理；在教师管理页面中可以查看索引，教师工号，教师姓名，性别，职称，手机，邮箱，照片等内容，并进行详情，修改和删除操作；如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-0381.png"> </p>
<p>班级信息管理；在班级信息管理页面中可以查看索引，班级号，班级名称，班级图片，所属院系，所属专业，班主任，班级人数等内容，并进行排课程表，修改和删除操作；如图5-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-eeeb.png" alt="image-20231004115534272"></p>
<p>考勤信息管理；在考勤信息管理页面中可以查看索引，班级名称，课程号，课程名称，课程类别，周次，上课日，节次，教师工号，教师姓名，签到状态，截止时间，学号，姓名，签到时间等内容，并进行修改和删除操作；如图5-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-eeeb.png"></p>
<h3 id="5-3教师功能模块"><a href="#5-3教师功能模块" class="headerlink" title="5.3教师功能模块"></a>5.3教师功能模块</h3><p>教师登录进入系统可以查看首页，个人中心，学生管理，班级信息管理，课程信息管理，签到信息管理，考勤信息管理，请假信息管理，考勤统计管理等功能，并根据需要进行详细操作，如图5-8所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-81b7.png" alt="image-20231004115557292"></p>
<p>学生管理；在学生管理页面中可以查看索引，学号，姓名，性别，年级，专业，班级，手机，照片等内容，并进行详情，统计考勤操作；如图5-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-42bb.png" alt="image-20231004115625907"></p>
<p>课程信息管理；在课程信息管理页面中可以查看索引，班级名称，课程号，课程名称，课程类别，图片，周次，上课日，节次等内容，并进行发起签到操作；如图5-10所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-42bb.png"></p>
<p>请假信息管理；在请假信息管理页面中可以查看索引，班级名称，课程号，课程名称，课程类别，周次，上课日，节次，教师工号，教师姓名，请假原因，学号，姓名，请假时间，审核回复，审核状态，审核等内容；如图5-11所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-4461.png" alt="image-20231004115651195"></p>
<h3 id="5-4学生功能模块"><a href="#5-4学生功能模块" class="headerlink" title="5.4学生功能模块"></a>5.4学生功能模块</h3><p>学生登录进入系统可以查看首页，个人中心，班级信息管理，课程信息管理，签到信息管理，考勤信息管理，请假信息管理，考勤统计管理等功能，并根据需要进行详细操作，如图5-12所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041110-9b2c.png" alt="image-20231004115703659"></p>
<h2 id="6-推荐阅读"><a href="#6-推荐阅读" class="headerlink" title="6 推荐阅读"></a>6 推荐阅读</h2><p><a href="https://it1314.top/article/583/">微信小程序毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/41/">Java毕业设计-SpringBoot+Vue毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/584/">Java毕业设计-Java SSM+JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/585/">Java毕业设计-Java JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/616/">Android 毕业设计-项目合集</a></p>
<p><a href="https://it1314.top/article/615/">Python 毕业设计合集</a></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>基于 SpringBoot 的汽车租赁系</title>
    <url>/p/62694.html</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>致远汽车租赁管理方面的任务繁琐,以至于公司每年都在致远汽车租赁管理这方面投入较多的精力却效果甚微,致远汽车租赁系统的目标就是为了能够缓解致远汽车租赁管理工作方面面临的压力,让致远汽车租赁管理方面的工作变得更加高效准确。</p>
<p><a href="https://it1314.top/article/950/">文章首发地址</a></p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-522d.png" alt="image-20231004144851443"></p>
<h2 id="2-技术栈"><a href="#2-技术栈" class="headerlink" title="2 技术栈"></a>2 技术栈</h2><p>开发语言：Java<br>框架：springboot<br>JDK版本：JDK1.8<br>服务器：tomcat7 或者 Tomcat 8<br>数据库：mysql 5.7（一定要5.7版本，8.0 有时候坑很多）<br>数据库工具：Navicat11<br>开发软件：eclipse&#x2F;myeclipse&#x2F;idea<br>Maven包：Maven3.3.9 (无强制要求)</p>
<h2 id="3-需求分析"><a href="#3-需求分析" class="headerlink" title="3 需求分析"></a>3 需求分析</h2><p>考虑到实际生活中在致远汽车租赁方面的需要以及对该系统认真的分析,将系统权限按管理员，用户和业务员这三类涉及用户划分。</p>
<p>(a) 管理员；管理员使用本系统涉到的功能主要有：首页，个人中心，用户管理，业务员管理，汽车类型管理，租赁汽车管理，汽车租赁管理，汽车归还管理，租赁订单管理，检查信息管理，系统管理等功能。管理员用例图如图3-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-90d5.jpg" alt="img"></p>
<p> (b)用户；用户使用本系统涉到的功能主要有：首页，个人中心，汽车租赁管理，汽车归还管理，租赁订单管理，检查信息管理，我的收藏管理等功能。用户用例图如图3-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-3040.jpg" alt="img"></p>
<p>(c)业务员，业务员使用本系统主要包括首页，个人中心，汽车租赁管理，汽车归还管理，租赁订单管理，检查信息管理等功能。业务员用例图如图3-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-d00a.jpg" alt="img"></p>
<h2 id="4-软件功能模块设计"><a href="#4-软件功能模块设计" class="headerlink" title="4  软件功能模块设计"></a>4  软件功能模块设计</h2><p>网站整体功能如下图所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-2ea2.png" alt="image-20231004144806438"></p>
<p>图 4-1 致远汽车租赁系统总体功能模块图</p>
<h2 id="5-系统效果图"><a href="#5-系统效果图" class="headerlink" title="5 系统效果图"></a>5 系统效果图</h2><p>致远汽车租赁系统，在系统首页可以查看首页，汽车租赁，公告信息，个人中心，后台管理等内容，并进行详细操作，如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-522d.png" alt="image-20231004144851443"></p>
<p>用户注册，在用户注册页面通过填写用户账号，密码，确认密码，姓名，手机号码，邮箱，身份证号等信息进行注册操作，如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-56c3.jpg" alt="img"></p>
<p>汽车租赁，在汽车租赁页面可以查看汽车型号，汽车编号，汽车类型，汽车品牌，车牌号，颜色，押金，目前价格，租赁状态，提车地点等内容，如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-f601.jpg" alt="img"></p>
<p>个人中心，在个人中心页面通过填写用户信息进行更新信息，还可以根据需要对我的收藏进行详细操作，如图5-4所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-1f3f.jpg" alt="img"></p>
<h3 id="5-2管理员功能模块"><a href="#5-2管理员功能模块" class="headerlink" title="5.2管理员功能模块"></a>5.2管理员功能模块</h3><p>管理员进行登录，进入系统前在登录页面根据要求填写用户名和密码，选择角色等信息，点击登录进行登录操作，如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-f074.jpg" alt="img"></p>
<p>管理员登录系统后，可以对首页，个人中心，用户管理，业务员管理，汽车类型管理，租赁汽车管理，汽车租赁管理，汽车归还管理，租赁订单管理，检查信息管理，系统管理等进行相应的操作管理，如图5-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-70e1.jpg" alt="img"></p>
<p>用户管理，在用户管理页面可以对用户账号，姓名，头像，性别，手机号码，邮箱，身份证号等内容进行详情，修改和删除等操作，如图5-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-7900.jpg" alt="img"></p>
<p>业务员管理，在业务员管理页面可以对索引、业务员账号，业务员姓名，头像，性别，联系电话，身份证号等内容进行详情，修改和删除等操作，如图5-8所示。</p>
<p>![img](Users&#x2F;junxu&#x2F;Library&#x2F;Group Containers&#x2F;UBF8T346G9.Office&#x2F;TemporaryItems&#x2F;msohtmlclip&#x2F;clip_image013.jpg)</p>
<p>汽车类型管理，在汽车类型管理页面可以对索引、汽车类型等内容进行详情，修改和删除等操作，如图5-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-ceeb.jpg" alt="img"></p>
<p>租赁汽车管理，在租赁汽车管理页面可以对索引、汽车编号，汽车品牌，汽车型号，图片，汽车类型，车牌号，颜色，押金，日租价格，租赁状态，提车地点等内容进行详情，修改，查看评论和删除等操作，如图5-10所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-5a56.jpg" alt="img"></p>
<p>汽车租赁管理，在汽车租赁管理页面可以对索引、订单编号，汽车编号，汽车品牌，汽车型号，车牌号，颜色，汽车类型，押金，日租价格，租赁时间，汽车状态，用户账号，姓名，手机号码，身份证号，是否支付等内容进行详情和删除等操作，如图5-11所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-18fb.jpg" alt="img"></p>
<h3 id="5-3业务员功能模块"><a href="#5-3业务员功能模块" class="headerlink" title="5.3业务员功能模块"></a>5.3业务员功能模块</h3><p>业务员登录进入致远汽车租赁系统可以对首页，个人中心，汽车租赁管理，汽车归还管理，租赁订单管理，检查信息管理等进行相应操作，如图5-12所示。</p>
<p>![img](Users&#x2F;junxu&#x2F;Library&#x2F;Group Containers&#x2F;UBF8T346G9.Office&#x2F;TemporaryItems&#x2F;msohtmlclip&#x2F;clip_image021.jpg)</p>
<p>汽车归还管理，在汽车归还页面通过填写索引，订单编号，汽车编号，汽车品牌，汽车型号，车牌号，颜色，汽车类型，押金，日租价格，租赁时间，归还时间，用户账号，姓名，手机号码，身份证号等内容进行详情，租赁订单，检查信息等操作，如图5-13所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-41bf.jpg" alt="img"></p>
<h3 id="5-3用户功能模块"><a href="#5-3用户功能模块" class="headerlink" title="5.3用户功能模块"></a>5.3用户功能模块</h3><p>用户登录进入致远汽车租赁系统可以对首页，个人中心，汽车租赁管理，汽车归还管理，租赁订单管理，检查信息管理，我的收藏管理等进行相应操作，如图5-14所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202310041410-6649.jpg" alt="img"></p>
<h2 id="6-推荐阅读"><a href="#6-推荐阅读" class="headerlink" title="6 推荐阅读"></a>6 推荐阅读</h2><p><a href="https://it1314.top/article/583/">微信小程序毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/41/">Java毕业设计-SpringBoot+Vue毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/584/">Java毕业设计-Java SSM+JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/585/">Java毕业设计-Java JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/616/">Android 毕业设计-项目合集</a></p>
<p><a href="https://it1314.top/article/615/">Python 毕业设计合集</a></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
  <entry>
    <title>基于微信小程序的党员之家系统</title>
    <url>/p/37884.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>基于微信小程序的党员之家，本系统的主要意义在于，全力以赴为用户提供一个操作方便，界面简洁，信息直观的党员之家服务系统小程序。使用该系统的用户，可以先浏览到最新更新的党员信息，并可以注册成为本网站的用户。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-8dac.png" alt="image-20230929133536050"></p>
<h2 id="第二章-技术栈"><a href="#第二章-技术栈" class="headerlink" title="第二章 技术栈"></a>第二章 技术栈</h2><p>前端：小程序</p>
<p>开发语言：Java</p>
<p>框架：ssm，mybatis</p>
<p>JDK版本：JDK1.8</p>
<p>数据库：mysql 5.7+</p>
<p>数据库工具：Navicat11+</p>
<p>开发软件：eclipse&#x2F;idea、微信开发者工具</p>
<p>Maven包：Maven3.6</p>
<p>部署容器：tomcat7+</p>
<h2 id="3-小程序功能结构"><a href="#3-小程序功能结构" class="headerlink" title="3 小程序功能结构"></a>3 小程序功能结构</h2><p>一、学生和教师管理功能</p>
<p>该部分内容提供用户注册、用户资料修改、新闻公告、交流论坛、我要发贴等等功能。</p>
<p>二、管理员管理功能</p>
<p>该部分内容包含了首页、个人中心、学生管理、教师管理、任务信息管理、报名信息管理、任务排名管理、学习资料管理、每日打卡管理、交流信息管理、回复信息管理、积极分子管理、党员信息管理、交流论坛、系统管理等。管理员可对所有的信息进行增、删、改、查，能对用户信息进行管理,更新最近的党员信息。</p>
<p>为了方便更直观的理解,下图以图形形式给出关于整个小程序的结构图。小程序总体功能结构图3-1如图所示：                               </p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-8dac.png" alt="image-20230929133536050"></p>
<h1 id="第四章数据库设计"><a href="#第四章数据库设计" class="headerlink" title="第四章数据库设计"></a>第四章数据库设计</h1><h2 id="4-1数据库概念设计"><a href="#4-1数据库概念设计" class="headerlink" title="4.1数据库概念设计"></a>4.1数据库概念设计</h2><p>在对数据库设计之前首先要分析一下党员之家服务系统小程序的功能，和各模块之间的关系，再对数据表进行设计。每一个模块的实体都会对应多个实体对象，下面是几个系统中的数据实体如下所示。</p>
<p>任务信息实体E-R图如图4-1所示：</p>
<p>​                                           <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-bb74.png" alt="image-20230929133426110"></p>
<p>学生信息实体E-R图如图4-2所示：</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-3e4c.png" alt="image-20230929133437317"></p>
<p>学习资料实体E-R图如图4-3所示：</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-5050.png" alt="image-20230929133449837"></p>
<h2 id="4-2数据表设计"><a href="#4-2数据表设计" class="headerlink" title="4.2数据表设计"></a>4.2数据表设计</h2><p>党员之家服务系统小程序的操作都是依靠数据库来进行数据的操作,包括对数据的添加、删除、修改和查询等。所以对数据库的设计是一个很重要的环节，本党员之家服务系统小程序根据学生，教师和管理员的需求分析，对数据库进行了设计，为方便数据查询，本党员之家服务系统小程序数据库中创建了数据表。这些实体对象是数据表结构的基本模型，这个数据模型包含了网站所有的数据实体和属性。如下表所示：</p>
<p>表4-1：党员信息</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>类型</th>
<th>长度</th>
<th>字段说明</th>
<th>主键</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint</td>
<td></td>
<td>主键</td>
<td>主键</td>
<td></td>
</tr>
<tr>
<td>addtime</td>
<td>timestamp</td>
<td></td>
<td>创建时间</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
</tr>
<tr>
<td>xuehao</td>
<td>varchar</td>
<td>200</td>
<td>学号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>xueshengxingming</td>
<td>varchar</td>
<td>200</td>
<td>学生姓名</td>
<td></td>
<td></td>
</tr>
<tr>
<td>touxiang</td>
<td>varchar</td>
<td>200</td>
<td>头像</td>
<td></td>
<td></td>
</tr>
<tr>
<td>nianling</td>
<td>varchar</td>
<td>200</td>
<td>年龄</td>
<td></td>
<td></td>
</tr>
<tr>
<td>banji</td>
<td>varchar</td>
<td>200</td>
<td>班级</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zhuanye</td>
<td>varchar</td>
<td>200</td>
<td>专业</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zhuanzhengriqi</td>
<td>date</td>
<td></td>
<td>转正日期</td>
<td></td>
<td></td>
</tr>
<tr>
<td>zhuanzhengshuoming</td>
<td>longtext</td>
<td>4294967295</td>
<td>转正说明</td>
<td></td>
<td></td>
</tr>
<tr>
<td>gonghao</td>
<td>varchar</td>
<td>200</td>
<td>工号</td>
<td></td>
<td></td>
</tr>
<tr>
<td>userid</td>
<td>bigint</td>
<td></td>
<td>用户id</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="第五章小程序的详细设计"><a href="#第五章小程序的详细设计" class="headerlink" title="第五章小程序的详细设计"></a>第五章小程序的详细设计</h2><h3 id="5-1小程序首页的设计"><a href="#5-1小程序首页的设计" class="headerlink" title="5.1小程序首页的设计"></a>5.1小程序首页的设计</h3><p>该界面是党员之家服务系统小程序的首页，界面设置要求界面简洁明了、操作简单、兼容性好。在考虑设计界面时，首先要考虑界面标准化设计，其次是完善界面设计，但不要因对界面的美化使界面的操作变得复杂，用户可在此页面进行登录等操作，页面底部导航条是各模块的入口。</p>
<p>登录，用户通过输入账号和密码，选择登录用户类型并点击登录进行系统登录操作，如图5-1所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-b67b.png" alt="image-20230929132946445"></p>
<p>​                               </p>
<p>用户登录小程序端，可以实现首页、新闻公告、交流论坛、我的等功能进行详细操作，如图5-2所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-d947.png" alt="image-20230929132959773"></p>
<p>任务信息，在任务信息页面可以查看任务封面、任务标题、任务类型、任务时间、发布时间、工号、教师姓名、任务要求等详细信息；如图5-3所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-a491.png" alt="image-20230929133009749"></p>
<p>学生信息，在学生信息页面可以查看学生照片、学号、学生姓名、性别、年龄、班级、专业、邮箱、手机等详细信息；并进行转积极分子操作；如图5-4所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-0928.png" alt="image-20230929133023151"></p>
<p>学习资料，在学习资料页面可以查看资料封面、资料名称、资料类型、发布日期、工号、教师姓名、资料内容等详细信息；并进行评论和收藏操作；如图5-5所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-d024.png" alt="image-20230929133032933"></p>
<p>学生功能，学生进入我的页面可以对任务信息、报名信息、每日打卡、交流信息、回复信息、我要发贴、我的发贴等详细信息进行操作，如图5-6所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-d024.png"></p>
<p>学生信息，在学生用户信息页面通过填写学号、密码、学生姓名、性别、头像、年龄、班级、专业、邮箱、手机等信息进行保存或退出登录操作，如图5-7所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-5392.png" alt="image-20230929133057920"></p>
<p>教师功能，用户进入我的页面可以对学生、任务信息、报名信息、任务排名、学习资料、每日打卡、交流信息、回复信息、积极分子、党员信息、 我要发贴、我的发贴等详细信息进行操作，如图5-8所示。</p>
<p> <img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-e0d7.png" alt="image-20230929133117889"></p>
<p>教师信息，在教师用户信息页面通过填写工号、密码、教师姓名、性别、头像、职称、电话、邮箱等信息进行保存或退出登录操作，如图5-9所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-d239.png" alt="image-20230929133137057"></p>
<h3 id="5-2管理员功能模块"><a href="#5-2管理员功能模块" class="headerlink" title="5.2管理员功能模块"></a>5.2管理员功能模块</h3><p>管理员登录，通过输入账号、密码，选择角色并点击登录进行系统登录操作，如图5-10所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-8eb2.png" alt="image-20230929133155573"></p>
<p>管理员登录系统后，可以对首页、个人中心、学生管理、教师管理、任务信息管理、报名信息管理、任务排名管理、学习资料管理、每日打卡管理、交流信息管理、回复信息管理、积极分子管理、党员信息管理、交流论坛、系统管理等功能进行详细操作，如图5-11所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-25a4.png" alt="image-20230929133213018"></p>
<p>学生管理，在学生管理页面可以对索引、学号、学生姓名、性别、头像、年龄、班级、专业、邮箱、手机等内容进行修改和删除操作，如图5-12所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-f368.png" alt="image-20230929133231489"></p>
<p>教师管理，在教师管理页面可以对索引、工号、教师姓名、性别、头像、职称、电话、邮箱等内容进行详情和删除操作，如图5-13所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-cef7.png" alt="image-20230929133249888"></p>
<p>任务信息管理，在任务信息管理页面可以对索引、任务标题、任务类型、图片、任务时间、发布时间、工号、教师姓名等信息进行详情，修改和删除操作，如图5-14所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-0834.png" alt="image-20230929133259361"></p>
<p>报名信息管理，在报名信息管理页面可以对索引、任务名称、任务类型、图片、工号、教师姓名、报名时间、学号、学生姓名、手机、审核回复、审核状态等信息进行详情，修改和删除操作，如图5-15所示。</p>
<p><img src="https://gitlab.com/gdutxiaoxu/blog-pic/raw/main/gitlab/202309291309-0834.png"></p>
<h2 id="源码咨询"><a href="#源码咨询" class="headerlink" title="源码咨询"></a>源码咨询</h2><p><a href="https://it1314.top/article/583/">微信小程序毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/41/">Java毕业设计-SpringBoot+Vue毕业设计项目合集</a></p>
<p><a href="https://it1314.top/article/584/">Java毕业设计-Java SSM+JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/585/">Java毕业设计-Java JSP 项目合集</a></p>
<p><a href="https://it1314.top/article/616/">Android 毕业设计-项目合集</a></p>
<p><a href="https://it1314.top/article/615/">Python 毕业设计合集</a></p>
<p><a href="https://it1314.top/category/java_bysj/">Java 精品项目</a></p>
<p><a href="https://github.com/gdutxujun94/GraduationProject">Github 更多题目</a></p>
<p><img src="https://raw.githubusercontent.com/gdutxiaoxu/blog_pic_2023/master/github/202309221509-c4055c.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
  </entry>
</search>
